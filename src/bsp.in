1574703047
3 3
3 bsp 4 t5GT 3 bsp 
383
360 3 get 0 4 743 18 TextureStages::get 0 2 3 4 0
159
static TextureStage *TextureStages::get(std::string const &name);
static TextureStage *TextureStages::get(std::string const &name, std::string const &uv_name);

361 15 get_basetexture 0 4 743 30 TextureStages::get_basetexture 0 1 5 0
58
static TextureStage *TextureStages::get_basetexture(void);

362 12 get_lightmap 0 4 743 27 TextureStages::get_lightmap 0 1 6 0
55
static TextureStage *TextureStages::get_lightmap(void);

363 19 get_bumped_lightmap 0 4 743 34 TextureStages::get_bumped_lightmap 0 1 7 0
62
static TextureStage *TextureStages::get_bumped_lightmap(void);

364 13 get_spheremap 0 4 743 28 TextureStages::get_spheremap 0 1 8 0
56
static TextureStage *TextureStages::get_spheremap(void);

365 11 get_cubemap 0 4 743 26 TextureStages::get_cubemap 0 1 9 0
54
static TextureStage *TextureStages::get_cubemap(void);

366 13 get_normalmap 0 4 743 28 TextureStages::get_normalmap 0 1 10 0
56
static TextureStage *TextureStages::get_normalmap(void);

367 13 get_heightmap 0 4 743 28 TextureStages::get_heightmap 0 1 11 0
56
static TextureStage *TextureStages::get_heightmap(void);

368 12 get_glossmap 0 4 743 27 TextureStages::get_glossmap 0 1 12 0
55
static TextureStage *TextureStages::get_glossmap(void);

369 11 get_glowmap 0 4 743 26 TextureStages::get_glowmap 0 1 13 0
54
static TextureStage *TextureStages::get_glowmap(void);

370 13 TextureStages 0 4 743 28 TextureStages::TextureStages 0 2 1 2 0
122
inline TextureStages::TextureStages(void) = default;
inline TextureStages::TextureStages(TextureStages const &) = default;

371 14 ~TextureStages 0 4 743 29 TextureStages::~TextureStages 0 0 0
36
TextureStages::~TextureStages(void);

372 11 BSPMaterial 0 4 744 24 BSPMaterial::BSPMaterial 0 2 14 15 0
137
inline explicit BSPMaterial::BSPMaterial(std::string const &name = "material");
inline BSPMaterial::BSPMaterial(BSPMaterial const &copy);

373 10 operator = 0 4 744 23 BSPMaterial::operator = 0 1 16 0
61
inline void BSPMaterial::operator =(BSPMaterial const &copy);

374 12 set_keyvalue 0 4 744 25 BSPMaterial::set_keyvalue 0 1 17 0
88
inline void BSPMaterial::set_keyvalue(std::string const &key, std::string const &value);

375 12 get_keyvalue 0 4 744 25 BSPMaterial::get_keyvalue 0 1 18 0
75
inline std::string BSPMaterial::get_keyvalue(std::string const &key) const;

376 17 get_num_keyvalues 0 4 744 30 BSPMaterial::get_num_keyvalues 0 1 19 0
62
inline std::size_t BSPMaterial::get_num_keyvalues(void) const;

377 7 get_key 0 4 744 20 BSPMaterial::get_key 0 1 20 0
68
inline std::string const &BSPMaterial::get_key(std::size_t i) const;

378 9 get_value 0 4 744 22 BSPMaterial::get_value 0 1 21 0
70
inline std::string const &BSPMaterial::get_value(std::size_t i) const;

379 16 get_keyvalue_int 0 4 744 29 BSPMaterial::get_keyvalue_int 0 1 22 0
71
inline int BSPMaterial::get_keyvalue_int(std::string const &key) const;

380 18 get_keyvalue_float 0 4 744 31 BSPMaterial::get_keyvalue_float 0 1 23 0
75
inline float BSPMaterial::get_keyvalue_float(std::string const &key) const;

381 10 set_shader 0 4 744 23 BSPMaterial::set_shader 0 1 24 0
68
inline void BSPMaterial::set_shader(std::string const &shader_name);

382 10 get_shader 0 4 744 23 BSPMaterial::get_shader 0 1 25 0
55
inline std::string BSPMaterial::get_shader(void) const;

383 8 get_file 0 4 744 21 BSPMaterial::get_file 0 1 26 0
50
inline Filename BSPMaterial::get_file(void) const;

384 12 has_keyvalue 0 4 744 25 BSPMaterial::has_keyvalue 0 1 27 0
68
inline bool BSPMaterial::has_keyvalue(std::string const &key) const;

385 15 has_env_cubemap 0 4 744 28 BSPMaterial::has_env_cubemap 0 1 28 0
53
inline bool BSPMaterial::has_env_cubemap(void) const;

386 16 has_transparency 0 4 744 29 BSPMaterial::has_transparency 0 1 29 0
54
inline bool BSPMaterial::has_transparency(void) const;

387 16 get_surface_prop 0 4 744 29 BSPMaterial::get_surface_prop 0 1 30 0
61
inline std::string BSPMaterial::get_surface_prop(void) const;

388 12 get_contents 0 4 744 25 BSPMaterial::get_contents 0 1 31 0
57
inline std::string BSPMaterial::get_contents(void) const;

389 14 is_lightmapped 0 4 744 27 BSPMaterial::is_lightmapped 0 1 32 0
52
inline bool BSPMaterial::is_lightmapped(void) const;

390 11 has_bumpmap 0 4 744 24 BSPMaterial::has_bumpmap 0 1 33 0
49
inline bool BSPMaterial::has_bumpmap(void) const;

391 13 get_from_file 0 4 744 26 BSPMaterial::get_from_file 0 1 34 0
75
static BSPMaterial const *BSPMaterial::get_from_file(Filename const &file);

392 14 get_class_type 0 4 744 27 BSPMaterial::get_class_type 0 1 35 0
52
static TypeHandle BSPMaterial::get_class_type(void);

393 12 ~BSPMaterial 0 4 744 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

394 4 make 0 4 746 23 BSPMaterialAttrib::make 0 1 36 0
86
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make(BSPMaterial const *mat);

395 20 make_override_shader 0 4 746 39 BSPMaterialAttrib::make_override_shader 0 1 37 0
102
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_override_shader(BSPMaterial const *mat);

396 12 make_default 0 4 746 31 BSPMaterialAttrib::make_default 0 1 38 0
76
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_default(void);

397 19 get_override_shader 0 4 746 38 BSPMaterialAttrib::get_override_shader 0 1 39 0
70
inline std::string BSPMaterialAttrib::get_override_shader(void) const;

398 19 has_override_shader 0 4 746 38 BSPMaterialAttrib::has_override_shader 0 1 40 0
63
inline bool BSPMaterialAttrib::has_override_shader(void) const;

399 12 get_material 0 4 746 31 BSPMaterialAttrib::get_material 0 1 41 0
70
inline BSPMaterial const *BSPMaterialAttrib::get_material(void) const;

400 14 get_class_slot 0 4 746 33 BSPMaterialAttrib::get_class_slot 0 1 42 0
51
static int BSPMaterialAttrib::get_class_slot(void);

401 14 get_class_type 0 4 746 33 BSPMaterialAttrib::get_class_type 0 1 43 0
58
static TypeHandle BSPMaterialAttrib::get_class_type(void);

402 18 ~BSPMaterialAttrib 0 4 746 37 BSPMaterialAttrib::~BSPMaterialAttrib 0 0 0
44
BSPMaterialAttrib::~BSPMaterialAttrib(void);

403 14 get_num_points 0 4 749 28 BoundingKDOP::get_num_points 0 1 44 0
60
inline std::size_t BoundingKDOP::get_num_points(void) const;

404 9 get_point 0 4 749 23 BoundingKDOP::get_point 0 1 45 0
52
inline LPoint3 BoundingKDOP::get_point(int n) const;

405 14 get_num_planes 0 4 749 28 BoundingKDOP::get_num_planes 0 1 46 0
60
inline std::size_t BoundingKDOP::get_num_planes(void) const;

406 9 get_plane 0 4 749 23 BoundingKDOP::get_plane 0 1 47 0
51
inline LPlane BoundingKDOP::get_plane(int n) const;

407 14 get_class_type 0 4 749 28 BoundingKDOP::get_class_type 0 1 48 0
53
static TypeHandle BoundingKDOP::get_class_type(void);

408 13 ~BoundingKDOP 0 4 749 27 BoundingKDOP::~BoundingKDOP 0 0 0
34
BoundingKDOP::~BoundingKDOP(void);

409 14 get_class_type 0 4 751 27 CBaseEntity::get_class_type 0 1 51 0
52
static TypeHandle CBaseEntity::get_class_type(void);

410 11 CBaseEntity 0 4 751 24 CBaseEntity::CBaseEntity 0 2 49 50 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

411 10 get_loader 0 4 751 23 CBaseEntity::get_loader 0 1 52 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

412 16 get_entity_value 0 4 751 29 CBaseEntity::get_entity_value 0 1 53 0
79
inline std::string CBaseEntity::get_entity_value(std::string const &key) const;

413 23 get_entity_value_vector 0 4 751 36 CBaseEntity::get_entity_value_vector 0 1 54 0
76
LVector3 CBaseEntity::get_entity_value_vector(std::string const &key) const;

414 22 get_entity_value_color 0 4 751 35 CBaseEntity::get_entity_value_color 0 1 55 0
92
LColor CBaseEntity::get_entity_value_color(std::string const &key, bool scale = true) const;

415 13 get_classname 0 4 751 26 CBaseEntity::get_classname 0 1 56 0
58
inline std::string CBaseEntity::get_classname(void) const;

416 14 get_targetname 0 4 751 27 CBaseEntity::get_targetname 0 1 57 0
59
inline std::string CBaseEntity::get_targetname(void) const;

417 14 get_bsp_entnum 0 4 751 27 CBaseEntity::get_bsp_entnum 0 1 58 0
51
inline int CBaseEntity::get_bsp_entnum(void) const;

418 12 ~CBaseEntity 0 4 751 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

419 14 get_class_type 0 4 752 28 CPointEntity::get_class_type 0 1 61 0
53
static TypeHandle CPointEntity::get_class_type(void);

420 12 CPointEntity 0 4 752 26 CPointEntity::CPointEntity 0 2 59 60 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

421 10 get_origin 0 4 752 24 CPointEntity::get_origin 0 1 62 0
45
LPoint3 CPointEntity::get_origin(void) const;

422 10 get_angles 0 4 752 24 CPointEntity::get_angles 0 1 63 0
46
LVector3 CPointEntity::get_angles(void) const;

423 13 ~CPointEntity 0 4 752 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

424 14 get_class_type 0 4 753 29 CBoundsEntity::get_class_type 0 1 66 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

425 13 CBoundsEntity 0 4 753 28 CBoundsEntity::CBoundsEntity 0 2 64 65 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

426 10 get_bounds 0 4 753 25 CBoundsEntity::get_bounds 0 1 67 0
52
BoundingKDOP *CBoundsEntity::get_bounds(void) const;

427 9 is_inside 0 4 753 24 CBoundsEntity::is_inside 0 1 68 0
56
bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

428 13 fillin_bounds 0 4 753 28 CBoundsEntity::fillin_bounds 0 1 69 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

429 14 ~CBoundsEntity 0 4 753 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

430 14 get_class_type 0 4 754 28 CBrushEntity::get_class_type 0 1 72 0
53
static TypeHandle CBrushEntity::get_class_type(void);

431 12 CBrushEntity 0 4 754 26 CBrushEntity::CBrushEntity 0 2 70 71 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

432 12 get_model_np 0 4 754 26 CBrushEntity::get_model_np 0 1 73 0
48
NodePath CBrushEntity::get_model_np(void) const;

433 16 get_model_bounds 0 4 754 30 CBrushEntity::get_model_bounds 0 1 74 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

434 13 ~CBrushEntity 0 4 754 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

435 9 get_width 0 4 755 21 PackResult::get_width 0 1 76 0
45
inline int PackResult::get_width(void) const;

436 10 get_height 0 4 755 22 PackResult::get_height 0 1 77 0
46
inline int PackResult::get_height(void) const;

437 15 get_unused_area 0 4 755 27 PackResult::get_unused_area 0 1 78 0
51
inline int PackResult::get_unused_area(void) const;

438 10 PackResult 0 4 755 22 PackResult::PackResult 0 1 75 0
60
inline PackResult::PackResult(PackResult const &) = default;

439 11 ~PackResult 0 4 755 23 PackResult::~PackResult 0 0 0
30
PackResult::~PackResult(void);

440 5 get_x 0 4 756 22 TextureLocation::get_x 0 1 80 0
46
inline int TextureLocation::get_x(void) const;

441 5 get_y 0 4 756 22 TextureLocation::get_y 0 1 81 0
46
inline int TextureLocation::get_y(void) const;

442 9 get_width 0 4 756 26 TextureLocation::get_width 0 1 82 0
50
inline int TextureLocation::get_width(void) const;

443 10 get_height 0 4 756 27 TextureLocation::get_height 0 1 83 0
51
inline int TextureLocation::get_height(void) const;

444 11 get_rotated 0 4 756 28 TextureLocation::get_rotated 0 1 84 0
53
inline bool TextureLocation::get_rotated(void) const;

445 15 TextureLocation 0 4 756 32 TextureLocation::TextureLocation 0 1 79 0
75
inline TextureLocation::TextureLocation(TextureLocation const &) = default;

446 16 ~TextureLocation 0 4 756 33 TextureLocation::~TextureLocation 0 0 0
40
TextureLocation::~TextureLocation(void);

447 15 getTextureCount 0 6 757 30 TexturePacker::getTextureCount 0 1 85 0
53
virtual int TexturePacker::getTextureCount(void) = 0;

448 15 setTextureCount 0 6 757 30 TexturePacker::setTextureCount 0 1 86 35
// number of textures to consider..
60
virtual void TexturePacker::setTextureCount(int tcount) = 0;

449 10 addTexture 0 6 757 25 TexturePacker::addTexture 0 1 87 21
// add textures 0 - n
61
virtual void TexturePacker::addTexture(int wid, int hit) = 0;

450 15 wouldTextureFit 0 6 757 30 TexturePacker::wouldTextureFit 0 1 88 0
135
virtual bool TexturePacker::wouldTextureFit(int wid, int hit, bool forcePowerOfTwo, bool onePixelBorder, int max_wid, int max_hit) = 0;

451 13 addNewTexture 0 6 757 28 TexturePacker::addNewTexture 0 1 89 0
64
virtual void TexturePacker::addNewTexture(int wid, int hit) = 0;

452 12 packTextures 0 6 757 27 TexturePacker::packTextures 0 1 90 74
// pack the textures, the return code is the amount of wasted/unused area.
94
virtual PackResult TexturePacker::packTextures(bool forcePowerOfTwo, bool onePixelBorder) = 0;

453 18 getTextureLocation 0 6 757 33 TexturePacker::getTextureLocation 0 1 91 58
// returns true if the texture has been rotated 90 degrees
73
virtual TextureLocation TexturePacker::getTextureLocation(int index) = 0;

454 19 createTexturePacker 0 4 757 34 TexturePacker::createTexturePacker 0 1 92 0
63
static TexturePacker *TexturePacker::createTexturePacker(void);

455 20 releaseTexturePacker 0 4 757 35 TexturePacker::releaseTexturePacker 0 1 93 0
67
static void TexturePacker::releaseTexturePacker(TexturePacker *tp);

456 14 ~TexturePacker 0 4 757 29 TexturePacker::~TexturePacker 0 0 0
36
TexturePacker::~TexturePacker(void);

457 10 initialize 0 4 758 20 RayTrace::initialize 0 1 96 0
39
static void RayTrace::initialize(void);

458 8 destruct 0 4 758 18 RayTrace::destruct 0 1 97 0
37
static void RayTrace::destruct(void);

459 8 RayTrace 0 4 758 18 RayTrace::RayTrace 0 2 94 95 0
97
inline RayTrace::RayTrace(void) = default;
inline RayTrace::RayTrace(RayTrace const &) = default;

460 9 ~RayTrace 0 4 758 19 RayTrace::~RayTrace 0 0 0
26
RayTrace::~RayTrace(void);

461 17 RayTraceHitResult 0 4 759 36 RayTraceHitResult::RayTraceHitResult 0 2 98 99 0
132
inline RayTraceHitResult::RayTraceHitResult(void);
inline RayTraceHitResult::RayTraceHitResult(RayTraceHitResult const &) = default;

462 7 has_hit 0 4 759 26 RayTraceHitResult::has_hit 0 1 100 0
51
inline bool RayTraceHitResult::has_hit(void) const;

463 14 get_hit_normal 0 4 759 33 RayTraceHitResult::get_hit_normal 0 1 101 0
62
inline LVector3 RayTraceHitResult::get_hit_normal(void) const;

464 6 get_uv 0 4 759 25 RayTraceHitResult::get_uv 0 1 102 0
54
inline LVector2 RayTraceHitResult::get_uv(void) const;

465 11 get_prim_id 0 4 759 30 RayTraceHitResult::get_prim_id 0 1 103 0
63
inline unsigned int RayTraceHitResult::get_prim_id(void) const;

466 11 get_geom_id 0 4 759 30 RayTraceHitResult::get_geom_id 0 1 104 0
63
inline unsigned int RayTraceHitResult::get_geom_id(void) const;

467 16 get_hit_fraction 0 4 759 35 RayTraceHitResult::get_hit_fraction 0 1 105 0
61
inline float RayTraceHitResult::get_hit_fraction(void) const;

468 18 ~RayTraceHitResult 0 4 759 37 RayTraceHitResult::~RayTraceHitResult 0 0 0
44
RayTraceHitResult::~RayTraceHitResult(void);

469 13 RayTraceScene 0 4 760 28 RayTraceScene::RayTraceScene 0 2 106 107 0
105
RayTraceScene::RayTraceScene(void);
inline RayTraceScene::RayTraceScene(RayTraceScene const &) = default;

470 12 add_geometry 0 4 760 27 RayTraceScene::add_geometry 0 1 108 0
57
void RayTraceScene::add_geometry(RayTraceGeometry *geom);

471 15 remove_geometry 0 4 760 30 RayTraceScene::remove_geometry 0 1 109 0
60
void RayTraceScene::remove_geometry(RayTraceGeometry *geom);

472 10 remove_all 0 4 760 25 RayTraceScene::remove_all 0 1 110 0
37
void RayTraceScene::remove_all(void);

473 10 trace_line 0 4 760 25 RayTraceScene::trace_line 0 1 111 0
116
inline RayTraceHitResult RayTraceScene::trace_line(LPoint3 const &start, LPoint3 const &end, BitMask32 const &mask);

474 9 trace_ray 0 4 760 24 RayTraceScene::trace_ray 0 1 112 0
132
RayTraceHitResult RayTraceScene::trace_ray(LPoint3 const &origin, LVector3 const &direction, float distance, BitMask32 const &mask);

475 17 set_build_quality 0 4 760 32 RayTraceScene::set_build_quality 0 1 113 0
51
void RayTraceScene::set_build_quality(int quality);

476 6 update 0 4 760 21 RayTraceScene::update 0 1 114 0
33
void RayTraceScene::update(void);

477 12 get_geometry 0 4 760 27 RayTraceScene::get_geometry 0 1 115 0
75
inline RayTraceGeometry *RayTraceScene::get_geometry(unsigned int geom_id);

478 14 get_class_type 0 4 763 32 RayTraceGeometry::get_class_type 0 1 116 0
57
static TypeHandle RayTraceGeometry::get_class_type(void);

479 8 set_mask 0 4 763 26 RayTraceGeometry::set_mask 0 2 117 118 0
114
inline void RayTraceGeometry::set_mask(BitMask32 const &mask);
void RayTraceGeometry::set_mask(unsigned int mask);

480 8 get_mask 0 4 763 26 RayTraceGeometry::get_mask 0 1 119 0
56
inline BitMask32 RayTraceGeometry::get_mask(void) const;

481 11 get_geom_id 0 4 763 29 RayTraceGeometry::get_geom_id 0 1 120 0
62
inline unsigned int RayTraceGeometry::get_geom_id(void) const;

482 17 set_build_quality 0 4 763 35 RayTraceGeometry::set_build_quality 0 1 121 0
54
void RayTraceGeometry::set_build_quality(int quality);

483 5 build 0 6 763 23 RayTraceGeometry::build 0 1 122 0
47
virtual void RayTraceGeometry::build(void) = 0;

484 14 get_class_type 0 4 765 36 RayTraceTriangleMesh::get_class_type 0 1 124 0
61
static TypeHandle RayTraceTriangleMesh::get_class_type(void);

485 20 RayTraceTriangleMesh 0 4 765 42 RayTraceTriangleMesh::RayTraceTriangleMesh 0 1 123 0
73
RayTraceTriangleMesh::RayTraceTriangleMesh(std::string const &name = "");

486 12 add_triangle 0 4 765 34 RayTraceTriangleMesh::add_triangle 0 1 125 0
97
void RayTraceTriangleMesh::add_triangle(LPoint3 const &p1, LPoint3 const &p2, LPoint3 const &p3);

487 23 add_triangles_from_geom 0 4 765 45 RayTraceTriangleMesh::add_triangles_from_geom 0 1 126 0
105
void RayTraceTriangleMesh::add_triangles_from_geom(Geom const *geom, TransformState const *ts = nullptr);

488 21 ~RayTraceTriangleMesh 0 4 765 43 RayTraceTriangleMesh::~RayTraceTriangleMesh 0 0 0
50
RayTraceTriangleMesh::~RayTraceTriangleMesh(void);

489 4 make 0 4 766 19 BSPFaceAttrib::make 0 1 127 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

490 12 make_default 0 4 766 27 BSPFaceAttrib::make_default 0 1 128 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

491 15 make_ignore_pvs 0 4 766 30 BSPFaceAttrib::make_ignore_pvs 0 1 129 0
75
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_ignore_pvs(void);

492 12 get_material 0 4 766 27 BSPFaceAttrib::get_material 0 1 130 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

493 13 get_face_type 0 4 766 28 BSPFaceAttrib::get_face_type 0 1 131 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

494 14 get_ignore_pvs 0 4 766 29 BSPFaceAttrib::get_ignore_pvs 0 1 132 0
54
inline bool BSPFaceAttrib::get_ignore_pvs(void) const;

495 14 get_class_slot 0 4 766 29 BSPFaceAttrib::get_class_slot 0 1 133 0
47
static int BSPFaceAttrib::get_class_slot(void);

496 14 get_class_type 0 4 766 29 BSPFaceAttrib::get_class_type 0 1 134 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

497 14 ~BSPFaceAttrib 0 4 766 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

498 9 BSPLoader 0 4 768 20 BSPLoader::BSPLoader 0 1 135 0
27
BSPLoader::BSPLoader(void);

499 18 add_dynamic_entity 0 4 768 29 BSPLoader::add_dynamic_entity 0 1 136 0
52
void BSPLoader::add_dynamic_entity(PyObject *pyent);

500 21 remove_dynamic_entity 0 4 768 32 BSPLoader::remove_dynamic_entity 0 1 137 0
55
void BSPLoader::remove_dynamic_entity(PyObject *pyent);

501 21 mark_entity_preserved 0 4 768 32 BSPLoader::mark_entity_preserved 0 1 138 0
68
void BSPLoader::mark_entity_preserved(int n, bool preserved = true);

502 16 get_num_entities 0 4 768 27 BSPLoader::get_num_entities 0 1 139 0
51
inline int BSPLoader::get_num_entities(void) const;

503 10 get_entity 0 4 768 21 BSPLoader::get_entity 0 1 140 0
45
PyObject *BSPLoader::get_entity(int n) const;

504 23 set_transition_landmark 0 4 768 34 BSPLoader::set_transition_landmark 0 1 141 0
120
inline void BSPLoader::set_transition_landmark(std::string const &name, LVector3 const &origin, LVector3 const &angles);

505 25 clear_transition_landmark 0 4 768 36 BSPLoader::clear_transition_landmark 0 1 142 0
55
inline void BSPLoader::clear_transition_landmark(void);

506 4 read 0 4 768 15 BSPLoader::read 0 1 143 0
71
bool BSPLoader::read(Filename const &file, bool is_transition = false);

507 16 do_optimizations 0 4 768 27 BSPLoader::do_optimizations 0 1 144 0
39
void BSPLoader::do_optimizations(void);

508 9 set_gamma 0 4 768 20 BSPLoader::set_gamma 0 1 145 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

509 9 get_gamma 0 4 768 20 BSPLoader::get_gamma 0 1 146 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

510 7 set_win 0 4 768 18 BSPLoader::set_win 0 1 147 0
45
void BSPLoader::set_win(GraphicsWindow *win);

511 10 set_camera 0 4 768 21 BSPLoader::set_camera 0 1 148 0
51
void BSPLoader::set_camera(NodePath const &camera);

512 10 set_render 0 4 768 21 BSPLoader::set_render 0 1 149 0
51
void BSPLoader::set_render(NodePath const &render);

513 20 set_shader_generator 0 4 768 31 BSPLoader::set_shader_generator 0 1 150 0
64
void BSPLoader::set_shader_generator(BSPShaderGenerator *shgen);

514 19 set_want_visibility 0 4 768 30 BSPLoader::set_want_visibility 0 1 151 0
47
void BSPLoader::set_want_visibility(bool flag);

515 18 set_want_lightmaps 0 4 768 29 BSPLoader::set_want_lightmaps 0 1 152 0
46
void BSPLoader::set_want_lightmaps(bool flag);

516 16 set_physics_type 0 4 768 27 BSPLoader::set_physics_type 0 1 153 0
43
void BSPLoader::set_physics_type(int type);

517 19 set_visualize_leafs 0 4 768 30 BSPLoader::set_visualize_leafs 0 1 154 0
47
void BSPLoader::set_visualize_leafs(bool flag);

518 18 set_materials_file 0 4 768 29 BSPLoader::set_materials_file 0 1 155 0
57
void BSPLoader::set_materials_file(Filename const &file);

519 13 set_wireframe 0 4 768 24 BSPLoader::set_wireframe 0 1 156 0
41
void BSPLoader::set_wireframe(bool flag);

520 13 get_wireframe 0 4 768 24 BSPLoader::get_wireframe 0 1 157 0
49
inline bool BSPLoader::get_wireframe(void) const;

521 10 get_camera 0 4 768 21 BSPLoader::get_camera 0 1 158 0
50
inline NodePath BSPLoader::get_camera(void) const;

522 11 trace_decal 0 4 768 22 BSPLoader::trace_decal 0 1 159 0
195
inline void BSPLoader::trace_decal(std::string const &decal_material, LPoint2 const &decal_scale, float rotate, LPoint3 const &start, LPoint3 const &end, LColorf const &decal_color = LColorf(1));

523 27 get_closest_cubemap_texture 0 4 768 38 BSPLoader::get_closest_cubemap_texture 0 1 160 0
68
Texture *BSPLoader::get_closest_cubemap_texture(LPoint3 const &pos);

524 14 build_cubemaps 0 4 768 25 BSPLoader::build_cubemaps 0 1 161 0
37
void BSPLoader::build_cubemaps(void);

525 16 set_want_shadows 0 4 768 27 BSPLoader::set_want_shadows 0 1 162 0
44
void BSPLoader::set_want_shadows(bool flag);

526 14 set_shadow_dir 0 4 768 25 BSPLoader::set_shadow_dir 0 1 163 0
52
void BSPLoader::set_shadow_dir(LVector3 const &dir);

527 16 extract_modelnum 0 4 768 27 BSPLoader::extract_modelnum 0 1 164 0
44
int BSPLoader::extract_modelnum(int entnum);

528 16 get_model_bounds 0 4 768 27 BSPLoader::get_model_bounds 0 1 165 0
77
void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

529 28 set_server_entity_dispatcher 0 4 768 39 BSPLoader::set_server_entity_dispatcher 0 1 166 0
67
void BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

530 27 link_server_entity_to_class 0 4 768 38 BSPLoader::link_server_entity_to_class 0 1 167 0
89
void BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

531 6 set_ai 0 4 768 17 BSPLoader::set_ai 0 1 168 0
32
void BSPLoader::set_ai(bool ai);

532 5 is_ai 0 4 768 16 BSPLoader::is_ai 0 1 169 0
41
inline bool BSPLoader::is_ai(void) const;

533 10 trace_line 0 4 768 21 BSPLoader::trace_line 0 1 170 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

534 9 clip_line 0 4 768 20 BSPLoader::clip_line 0 1 171 0
71
LPoint3 BSPLoader::clip_line(LPoint3 const &start, LPoint3 const &end);

535 20 link_entity_to_class 0 4 768 31 BSPLoader::link_entity_to_class 0 1 172 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

536 28 get_py_entity_by_target_name 0 4 768 39 BSPLoader::get_py_entity_by_target_name 0 1 173 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

537 17 find_all_entities 0 4 768 28 BSPLoader::find_all_entities 0 1 174 0
69
PyObject *BSPLoader::find_all_entities(std::string const &classname);

538 20 get_entity_keyvalues 0 4 768 31 BSPLoader::get_entity_keyvalues 0 1 175 0
71
void BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

539 18 link_cent_to_pyent 0 4 768 29 BSPLoader::link_cent_to_pyent 0 1 176 0
63
void BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

540 16 remove_py_entity 0 4 768 27 BSPLoader::remove_py_entity 0 1 177 0
48
void BSPLoader::remove_py_entity(PyObject *ent);

541 9 get_model 0 4 768 20 BSPLoader::get_model 0 1 178 0
50
NodePath BSPLoader::get_model(int modelnum) const;

542 12 get_c_entity 0 4 768 23 BSPLoader::get_c_entity 0 1 179 0
61
CBaseEntity *BSPLoader::get_c_entity(int const entnum) const;

543 9 find_leaf 0 4 768 20 BSPLoader::find_leaf 0 2 180 181 0
116
inline int BSPLoader::find_leaf(NodePath const &np);
int BSPLoader::find_leaf(LPoint3 const &pos, int headnode = 0);

544 9 find_node 0 4 768 20 BSPLoader::find_node 0 1 182 0
45
int BSPLoader::find_node(LPoint3 const &pos);

545 18 is_cluster_visible 0 4 768 29 BSPLoader::is_cluster_visible 0 1 183 0
72
bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

546 15 pvs_bounds_test 0 4 768 26 BSPLoader::pvs_bounds_test 0 1 184 0
109
bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds, unsigned int required_leaf_flags = 0);

547 15 make_net_bounds 0 4 768 26 BSPLoader::make_net_bounds 0 1 185 0
147
ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

548 16 has_active_level 0 4 768 27 BSPLoader::has_active_level 0 1 186 0
52
inline bool BSPLoader::has_active_level(void) const;

549 14 has_visibility 0 4 768 25 BSPLoader::has_visibility 0 1 187 0
50
inline bool BSPLoader::has_visibility(void) const;

550 7 cleanup 0 4 768 18 BSPLoader::cleanup 0 1 188 0
52
void BSPLoader::cleanup(bool is_transition = false);

551 10 get_result 0 4 768 21 BSPLoader::get_result 0 1 189 0
50
inline NodePath BSPLoader::get_result(void) const;

552 16 set_current_leaf 0 4 768 27 BSPLoader::set_current_leaf 0 1 190 0
50
inline void BSPLoader::set_current_leaf(int leaf);

553 16 get_current_leaf 0 4 768 27 BSPLoader::get_current_leaf 0 1 191 0
51
inline int BSPLoader::get_current_leaf(void) const;

554 16 get_num_visleafs 0 4 768 27 BSPLoader::get_num_visleafs 0 1 192 0
51
inline int BSPLoader::get_num_visleafs(void) const;

555 15 get_leaf_center 0 4 768 26 BSPLoader::get_leaf_center 0 1 193 0
58
inline LPoint3 BSPLoader::get_leaf_center(int leaf) const;

556 15 get_lightcoords 0 4 768 26 BSPLoader::get_lightcoords 0 1 194 0
73
LTexCoord BSPLoader::get_lightcoords(int facenum, LVector3 const &point);

557 6 update 0 4 768 17 BSPLoader::update 0 1 195 0
29
void BSPLoader::update(void);

558 14 get_global_ptr 0 4 768 25 BSPLoader::get_global_ptr 0 1 196 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

559 10 ~BSPLoader 0 4 768 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

560 18 ShaderPermutations 0 4 770 38 ShaderPermutations::ShaderPermutations 0 1 197 0
52
inline ShaderPermutations::ShaderPermutations(void);

561 15 add_permutation 0 4 770 35 ShaderPermutations::add_permutation 0 1 198 0
104
inline void ShaderPermutations::add_permutation(std::string const &key, std::string const &value = "1");

562 8 complete 0 4 770 28 ShaderPermutations::complete 0 1 199 0
47
inline void ShaderPermutations::complete(void);

563 9 add_input 0 4 770 29 ShaderPermutations::add_input 0 1 200 0
66
inline void ShaderPermutations::add_input(ShaderInput const &inp);

564 8 add_flag 0 4 770 28 ShaderPermutations::add_flag 0 1 201 0
51
inline void ShaderPermutations::add_flag(int flag);

565 8 get_hash 0 4 770 28 ShaderPermutations::get_hash 0 1 202 0
60
inline std::size_t ShaderPermutations::get_hash(void) const;

566 19 ~ShaderPermutations 0 4 770 39 ShaderPermutations::~ShaderPermutations 0 0 0
46
ShaderPermutations::~ShaderPermutations(void);

567 24 upcast_to_ReferenceCount 0 12 771 36 ShaderSpec::upcast_to_ReferenceCount 0 1 205 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

568 22 downcast_to_ShaderSpec 0 12 761 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

569 17 upcast_to_Namable 0 12 771 29 ShaderSpec::upcast_to_Namable 0 1 206 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

570 22 downcast_to_ShaderSpec 0 12 772 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

571 17 read_shader_files 0 4 771 29 ShaderSpec::read_shader_files 0 1 203 0
117
void ShaderSpec::read_shader_files(Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file);

572 14 get_class_type 0 4 771 26 ShaderSpec::get_class_type 0 1 204 0
51
static TypeHandle ShaderSpec::get_class_type(void);

573 11 ~ShaderSpec 0 4 771 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

574 22 get_reflection_texture 0 4 773 41 PlanarReflections::get_reflection_texture 0 1 208 0
63
Texture *PlanarReflections::get_reflection_texture(void) const;

575 17 PlanarReflections 0 4 773 36 PlanarReflections::PlanarReflections 0 1 207 0
81
inline PlanarReflections::PlanarReflections(PlanarReflections const &) = default;

576 18 ~PlanarReflections 0 4 773 37 PlanarReflections::~PlanarReflections 0 0 0
44
PlanarReflections::~PlanarReflections(void);

577 18 BSPShaderGenerator 0 4 777 38 BSPShaderGenerator::BSPShaderGenerator 0 2 209 210 0
224
BSPShaderGenerator::BSPShaderGenerator(GraphicsOutput *output, GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline BSPShaderGenerator::BSPShaderGenerator(BSPShaderGenerator const &) = default;

578 13 set_sun_light 0 4 777 33 BSPShaderGenerator::set_sun_light 0 1 211 0
59
void BSPShaderGenerator::set_sun_light(NodePath const &np);

579 12 start_update 0 4 777 32 BSPShaderGenerator::start_update 0 1 212 0
44
void BSPShaderGenerator::start_update(void);

580 10 add_shader 0 4 777 30 BSPShaderGenerator::add_shader 0 1 213 0
66
void BSPShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

581 14 get_sun_vector 0 4 777 34 BSPShaderGenerator::get_sun_vector 0 1 214 0
63
inline LVector3 BSPShaderGenerator::get_sun_vector(void) const;

582 19 has_shadow_sunlight 0 4 777 39 BSPShaderGenerator::has_shadow_sunlight 0 1 215 0
64
inline bool BSPShaderGenerator::has_shadow_sunlight(void) const;

583 22 get_pssm_array_texture 0 4 777 42 BSPShaderGenerator::get_pssm_array_texture 0 1 216 0
71
inline Texture *BSPShaderGenerator::get_pssm_array_texture(void) const;

584 12 get_pssm_rig 0 4 777 32 BSPShaderGenerator::get_pssm_rig 0 1 217 0
67
inline PSSMCameraRig *BSPShaderGenerator::get_pssm_rig(void) const;

585 10 get_camera 0 4 777 30 BSPShaderGenerator::get_camera 0 1 218 0
59
inline NodePath BSPShaderGenerator::get_camera(void) const;

586 10 get_render 0 4 777 30 BSPShaderGenerator::get_render 0 1 219 0
59
inline NodePath BSPShaderGenerator::get_render(void) const;

587 18 set_shader_quality 0 4 777 38 BSPShaderGenerator::set_shader_quality 0 1 220 0
57
void BSPShaderGenerator::set_shader_quality(int quality);

588 18 get_shader_quality 0 4 777 38 BSPShaderGenerator::get_shader_quality 0 1 221 0
62
inline int BSPShaderGenerator::get_shader_quality(void) const;

589 7 set_fog 0 4 777 27 BSPShaderGenerator::set_fog 0 1 222 0
50
inline void BSPShaderGenerator::set_fog(Fog *fog);

590 9 clear_fog 0 4 777 29 BSPShaderGenerator::clear_fog 0 1 223 0
48
inline void BSPShaderGenerator::clear_fog(void);

591 7 get_fog 0 4 777 27 BSPShaderGenerator::get_fog 0 1 224 0
52
inline Fog *BSPShaderGenerator::get_fog(void) const;

592 12 get_fog_data 0 4 777 32 BSPShaderGenerator::get_fog_data 0 1 225 0
67
inline PTA_LVecBase4f BSPShaderGenerator::get_fog_data(void) const;

593 22 set_exposure_adustment 0 4 777 42 BSPShaderGenerator::set_exposure_adustment 0 1 226 0
71
inline void BSPShaderGenerator::set_exposure_adustment(float exposure);

594 23 get_exposure_adjustment 0 4 777 43 BSPShaderGenerator::get_exposure_adjustment 0 1 227 0
73
inline PTA_float BSPShaderGenerator::get_exposure_adjustment(void) const;

595 7 get_gsg 0 4 777 27 BSPShaderGenerator::get_gsg 0 1 228 0
70
inline GraphicsStateGuardian *BSPShaderGenerator::get_gsg(void) const;

596 10 get_output 0 4 777 30 BSPShaderGenerator::get_output 0 1 229 0
66
inline GraphicsOutput *BSPShaderGenerator::get_output(void) const;

597 22 get_planar_reflections 0 4 777 42 BSPShaderGenerator::get_planar_reflections 0 1 230 0
81
inline PlanarReflections *BSPShaderGenerator::get_planar_reflections(void) const;

598 20 set_identity_cubemap 0 4 777 40 BSPShaderGenerator::set_identity_cubemap 0 1 231 0
67
static void BSPShaderGenerator::set_identity_cubemap(Texture *tex);

599 20 get_identity_cubemap 0 4 777 40 BSPShaderGenerator::get_identity_cubemap 0 1 232 0
63
static Texture *BSPShaderGenerator::get_identity_cubemap(void);

600 11 make_shader 0 4 777 31 BSPShaderGenerator::make_shader 0 1 233 0
121
static ConstPointerTo< Shader > BSPShaderGenerator::make_shader(ShaderSpec const *spec, ShaderPermutations const *perms);

601 14 get_class_type 0 4 777 34 BSPShaderGenerator::get_class_type 0 1 234 0
59
static TypeHandle BSPShaderGenerator::get_class_type(void);

602 19 ~BSPShaderGenerator 0 4 777 39 BSPShaderGenerator::~BSPShaderGenerator 0 0 0
46
BSPShaderGenerator::~BSPShaderGenerator(void);

603 14 get_class_type 0 4 779 32 BSPCullTraverser::get_class_type 0 1 237 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

604 16 BSPCullTraverser 0 4 779 34 BSPCullTraverser::BSPCullTraverser 0 2 235 236 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

605 17 ~BSPCullTraverser 0 4 779 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

606 14 get_class_type 0 4 781 25 BSPRender::get_class_type 0 1 240 0
50
static TypeHandle BSPRender::get_class_type(void);

607 9 BSPRender 0 4 781 20 BSPRender::BSPRender 0 2 238 239 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

608 10 ~BSPRender 0 4 781 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

609 14 get_class_type 0 4 782 23 BSPRoot::get_class_type 0 1 243 0
48
static TypeHandle BSPRoot::get_class_type(void);

610 7 BSPRoot 0 4 782 16 BSPRoot::BSPRoot 0 2 241 242 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

611 8 ~BSPRoot 0 4 782 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

612 14 get_class_type 0 4 783 23 BSPProp::get_class_type 0 1 246 0
48
static TypeHandle BSPProp::get_class_type(void);

613 7 BSPProp 0 4 783 16 BSPProp::BSPProp 0 2 244 245 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

614 8 ~BSPProp 0 4 783 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

615 14 get_class_type 0 4 785 24 BSPModel::get_class_type 0 1 249 0
49
static TypeHandle BSPModel::get_class_type(void);

616 8 BSPModel 0 4 785 18 BSPModel::BSPModel 0 2 247 248 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

617 9 ~BSPModel 0 4 785 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

618 20 VertexLitGenericSpec 0 4 787 42 VertexLitGenericSpec::VertexLitGenericSpec 0 1 250 0
49
VertexLitGenericSpec::VertexLitGenericSpec(void);

619 21 ~VertexLitGenericSpec 0 4 787 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

620 22 LightmappedGenericSpec 0 4 788 46 LightmappedGenericSpec::LightmappedGenericSpec 0 1 251 0
53
LightmappedGenericSpec::LightmappedGenericSpec(void);

621 23 ~LightmappedGenericSpec 0 4 788 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

622 16 UnlitGenericSpec 0 4 789 34 UnlitGenericSpec::UnlitGenericSpec 0 1 252 0
41
UnlitGenericSpec::UnlitGenericSpec(void);

623 17 ~UnlitGenericSpec 0 4 789 35 UnlitGenericSpec::~UnlitGenericSpec 0 0 0
42
UnlitGenericSpec::~UnlitGenericSpec(void);

624 14 UnlitNoMatSpec 0 4 790 30 UnlitNoMatSpec::UnlitNoMatSpec 0 1 253 0
37
UnlitNoMatSpec::UnlitNoMatSpec(void);

625 15 ~UnlitNoMatSpec 0 4 790 31 UnlitNoMatSpec::~UnlitNoMatSpec 0 0 0
38
UnlitNoMatSpec::~UnlitNoMatSpec(void);

626 13 CSMRenderSpec 0 4 791 28 CSMRenderSpec::CSMRenderSpec 0 1 254 0
35
CSMRenderSpec::CSMRenderSpec(void);

627 14 ~CSMRenderSpec 0 4 791 29 CSMRenderSpec::~CSMRenderSpec 0 0 0
36
CSMRenderSpec::~CSMRenderSpec(void);

628 10 SkyBoxSpec 0 4 792 22 SkyBoxSpec::SkyBoxSpec 0 1 255 0
29
SkyBoxSpec::SkyBoxSpec(void);

629 11 ~SkyBoxSpec 0 4 792 23 SkyBoxSpec::~SkyBoxSpec 0 0 0
30
SkyBoxSpec::~SkyBoxSpec(void);

630 4 make 0 4 793 24 AmbientBoostEffect::make 0 1 256 0
69
static ConstPointerTo< RenderEffect > AmbientBoostEffect::make(void);

631 14 get_class_type 0 4 793 34 AmbientBoostEffect::get_class_type 0 1 257 0
59
static TypeHandle AmbientBoostEffect::get_class_type(void);

632 19 ~AmbientBoostEffect 0 4 793 39 AmbientBoostEffect::~AmbientBoostEffect 0 0 0
46
AmbientBoostEffect::~AmbientBoostEffect(void);

633 14 Audio3DManager 0 4 795 30 Audio3DManager::Audio3DManager 0 2 258 259 0
228
Audio3DManager::Audio3DManager(AudioManager *mgr, NodePath const &listener_target = NodePath(), NodePath const &root = NodePath(), int task_priority = 51);
inline Audio3DManager::Audio3DManager(Audio3DManager const &) = default;

634 19 set_distance_factor 0 4 795 35 Audio3DManager::set_distance_factor 0 1 260 0
68
inline void Audio3DManager::set_distance_factor(PN_stdfloat factor);

635 19 get_distance_factor 0 4 795 35 Audio3DManager::get_distance_factor 0 1 261 0
67
inline PN_stdfloat Audio3DManager::get_distance_factor(void) const;

636 18 set_doppler_factor 0 4 795 34 Audio3DManager::set_doppler_factor 0 1 262 0
67
inline void Audio3DManager::set_doppler_factor(PN_stdfloat factor);

637 18 get_doppler_factor 0 4 795 34 Audio3DManager::get_doppler_factor 0 1 263 0
66
inline PN_stdfloat Audio3DManager::get_doppler_factor(void) const;

638 19 set_drop_off_factor 0 4 795 35 Audio3DManager::set_drop_off_factor 0 1 264 0
68
inline void Audio3DManager::set_drop_off_factor(PN_stdfloat factor);

639 19 get_drop_off_factor 0 4 795 35 Audio3DManager::get_drop_off_factor 0 1 265 0
67
inline PN_stdfloat Audio3DManager::get_drop_off_factor(void) const;

640 22 set_sound_min_distance 0 4 795 38 Audio3DManager::set_sound_min_distance 0 1 266 0
88
inline void Audio3DManager::set_sound_min_distance(AudioSound *sound, PN_stdfloat dist);

641 22 get_sound_min_distance 0 4 795 38 Audio3DManager::get_sound_min_distance 0 1 267 0
83
inline PN_stdfloat Audio3DManager::get_sound_min_distance(AudioSound *sound) const;

642 22 set_sound_max_distance 0 4 795 38 Audio3DManager::set_sound_max_distance 0 1 268 0
88
inline void Audio3DManager::set_sound_max_distance(AudioSound *sound, PN_stdfloat dist);

643 22 get_sound_max_distance 0 4 795 38 Audio3DManager::get_sound_max_distance 0 1 269 0
83
inline PN_stdfloat Audio3DManager::get_sound_max_distance(AudioSound *sound) const;

644 15 attach_listener 0 4 795 31 Audio3DManager::attach_listener 0 1 270 0
70
inline void Audio3DManager::attach_listener(NodePath const &listener);

645 15 detach_listener 0 4 795 31 Audio3DManager::detach_listener 0 1 271 0
50
inline void Audio3DManager::detach_listener(void);

646 8 load_sfx 0 4 795 24 Audio3DManager::load_sfx 0 1 272 0
81
inline PointerTo< AudioSound > Audio3DManager::load_sfx(std::string const &path);

647 22 attach_sound_to_object 0 4 795 38 Audio3DManager::attach_sound_to_object 0 1 273 0
87
void Audio3DManager::attach_sound_to_object(AudioSound *sound, NodePath const &object);

648 12 detach_sound 0 4 795 28 Audio3DManager::detach_sound 0 1 274 0
53
void Audio3DManager::detach_sound(AudioSound *sound);

649 18 print_audio_digest 0 4 795 34 Audio3DManager::print_audio_digest 0 1 275 0
46
void Audio3DManager::print_audio_digest(void);

650 6 update 0 4 795 22 Audio3DManager::update 0 1 276 0
34
void Audio3DManager::update(void);

651 15 ~Audio3DManager 0 4 795 31 Audio3DManager::~Audio3DManager 0 0 0
38
Audio3DManager::~Audio3DManager(void);

652 19 set_pupil_direction 0 4 796 27 CIOLib::set_pupil_direction 0 1 279 0
91
static void CIOLib::set_pupil_direction(float x, float y, LVector3 &left, LVector3 &right);

653 14 look_pupils_at 0 4 796 22 CIOLib::look_pupils_at 0 1 280 0
106
static LVector2 CIOLib::look_pupils_at(NodePath const &node, LVector3 const &point, NodePath const &eyes);

654 6 CIOLib 0 4 796 14 CIOLib::CIOLib 0 2 277 278 0
87
inline CIOLib::CIOLib(void) = default;
inline CIOLib::CIOLib(CIOLib const &) = default;

655 7 ~CIOLib 0 4 796 15 CIOLib::~CIOLib 0 0 0
22
CIOLib::~CIOLib(void);

656 17 DecalModulateSpec 0 4 797 36 DecalModulateSpec::DecalModulateSpec 0 1 281 0
43
DecalModulateSpec::DecalModulateSpec(void);

657 18 ~DecalModulateSpec 0 4 797 37 DecalModulateSpec::~DecalModulateSpec 0 0 0
44
DecalModulateSpec::~DecalModulateSpec(void);

658 14 get_class_type 0 4 798 24 GlowNode::get_class_type 0 1 285 0
49
static TypeHandle GlowNode::get_class_type(void);

659 8 GlowNode 0 4 798 18 GlowNode::GlowNode 0 3 282 283 284 0
219
GlowNode::GlowNode(std::string const &name, float query_size = ::r_glow_querysize);
GlowNode::GlowNode(GeomNode const &copy, float query_size = ::r_glow_querysize);
inline GlowNode::GlowNode(GlowNode const &) = default;

660 9 ~GlowNode 0 4 798 19 GlowNode::~GlowNode 0 0 0
26
GlowNode::~GlowNode(void);

661 24 upcast_to_ReferenceCount 0 12 800 43 PostProcessEffect::upcast_to_ReferenceCount 0 1 295 47
upcast from PostProcessEffect to ReferenceCount
66
ReferenceCount *PostProcessEffect::upcast_to_ReferenceCount(void);

662 29 downcast_to_PostProcessEffect 0 12 761 45 ReferenceCount::downcast_to_PostProcessEffect 0 0 49
downcast from ReferenceCount to PostProcessEffect
71
PostProcessEffect *ReferenceCount::downcast_to_PostProcessEffect(void);

663 17 upcast_to_Namable 0 12 800 36 PostProcessEffect::upcast_to_Namable 0 1 296 40
upcast from PostProcessEffect to Namable
52
Namable *PostProcessEffect::upcast_to_Namable(void);

664 29 downcast_to_PostProcessEffect 0 12 772 38 Namable::downcast_to_PostProcessEffect 0 0 42
downcast from Namable to PostProcessEffect
64
PostProcessEffect *Namable::downcast_to_PostProcessEffect(void);

665 14 get_class_type 0 4 800 33 PostProcessEffect::get_class_type 0 1 286 0
58
static TypeHandle PostProcessEffect::get_class_type(void);

666 17 get_final_texture 0 6 800 36 PostProcessEffect::get_final_texture 0 1 287 0
64
virtual Texture *PostProcessEffect::get_final_texture(void) = 0;

667 8 add_pass 0 4 800 27 PostProcessEffect::add_pass 0 1 288 0
56
void PostProcessEffect::add_pass(PostProcessPass *pass);

668 11 remove_pass 0 4 800 30 PostProcessEffect::remove_pass 0 1 289 0
59
void PostProcessEffect::remove_pass(PostProcessPass *pass);

669 8 get_pass 0 4 800 27 PostProcessEffect::get_pass 0 1 290 0
70
PostProcessPass *PostProcessEffect::get_pass(std::string const &name);

670 5 setup 0 6 800 24 PostProcessEffect::setup 0 1 291 0
44
virtual void PostProcessEffect::setup(void);

671 6 update 0 6 800 25 PostProcessEffect::update 0 1 292 0
45
virtual void PostProcessEffect::update(void);

672 12 window_event 0 4 800 31 PostProcessEffect::window_event 0 1 293 0
58
void PostProcessEffect::window_event(GraphicsOutput *win);

673 8 shutdown 0 6 800 27 PostProcessEffect::shutdown 0 1 294 0
47
virtual void PostProcessEffect::shutdown(void);

674 18 ~PostProcessEffect 0 4 800 37 PostProcessEffect::~PostProcessEffect 0 0 0
44
PostProcessEffect::~PostProcessEffect(void);

675 24 upcast_to_ReferenceCount 0 12 802 41 PostProcessPass::upcast_to_ReferenceCount 0 1 322 45
upcast from PostProcessPass to ReferenceCount
64
ReferenceCount *PostProcessPass::upcast_to_ReferenceCount(void);

676 27 downcast_to_PostProcessPass 0 12 761 43 ReferenceCount::downcast_to_PostProcessPass 0 0 47
downcast from ReferenceCount to PostProcessPass
67
PostProcessPass *ReferenceCount::downcast_to_PostProcessPass(void);

677 17 upcast_to_Namable 0 12 802 34 PostProcessPass::upcast_to_Namable 0 1 323 38
upcast from PostProcessPass to Namable
50
Namable *PostProcessPass::upcast_to_Namable(void);

678 27 downcast_to_PostProcessPass 0 12 772 36 Namable::downcast_to_PostProcessPass 0 0 40
downcast from Namable to PostProcessPass
60
PostProcessPass *Namable::downcast_to_PostProcessPass(void);

679 14 get_class_type 0 4 802 31 PostProcessPass::get_class_type 0 1 299 0
56
static TypeHandle PostProcessPass::get_class_type(void);

680 15 PostProcessPass 0 4 802 32 PostProcessPass::PostProcessPass 0 2 297 298 0
379
PostProcessPass::PostProcessPass(PostProcess *pp, std::string const &name = "pass", int texture_output_bits = 0, FrameBufferProperties const &fbprops = PostProcessPass::get_default_fbprops(), bool force_size = false, LVector2i const &forced_size = LVector2i::zero(), bool div_size = false, int div = 1);
inline PostProcessPass::PostProcessPass(PostProcessPass const &) = default;

681 8 get_quad 0 4 802 25 PostProcessPass::get_quad 0 1 300 0
54
inline NodePath PostProcessPass::get_quad(void) const;

682 26 get_back_buffer_dimensions 0 4 802 43 PostProcessPass::get_back_buffer_dimensions 0 1 301 0
66
LVector2i PostProcessPass::get_back_buffer_dimensions(void) const;

683 10 get_camera 0 4 802 27 PostProcessPass::get_camera 0 1 302 0
56
inline NodePath PostProcessPass::get_camera(void) const;

684 16 has_texture_bits 0 4 802 33 PostProcessPass::has_texture_bits 0 1 303 0
62
inline bool PostProcessPass::has_texture_bits(int bits) const;

685 12 set_div_size 0 4 802 29 PostProcessPass::set_div_size 0 1 304 0
66
inline void PostProcessPass::set_div_size(bool div_size, int div);

686 15 set_forced_size 0 4 802 32 PostProcessPass::set_forced_size 0 1 305 0
92
inline void PostProcessPass::set_forced_size(bool force_size, LVector2i const &forced_size);

687 26 set_framebuffer_properties 0 4 802 43 PostProcessPass::set_framebuffer_properties 0 1 306 0
94
inline void PostProcessPass::set_framebuffer_properties(FrameBufferProperties const &fbprops);

688 23 set_output_texture_bits 0 4 802 40 PostProcessPass::set_output_texture_bits 0 1 307 0
63
inline void PostProcessPass::set_output_texture_bits(int bits);

689 18 get_corrected_size 0 4 802 35 PostProcessPass::get_corrected_size 0 1 308 0
69
LVector2i PostProcessPass::get_corrected_size(LVector2i const &size);

690 11 get_texture 0 4 802 28 PostProcessPass::get_texture 0 1 309 0
47
Texture *PostProcessPass::get_texture(int bit);

691 17 get_color_texture 0 4 802 34 PostProcessPass::get_color_texture 0 1 310 0
57
inline Texture *PostProcessPass::get_color_texture(void);

692 17 get_depth_texture 0 4 802 34 PostProcessPass::get_depth_texture 0 1 311 0
57
inline Texture *PostProcessPass::get_depth_texture(void);

693 12 setup_buffer 0 6 802 29 PostProcessPass::setup_buffer 0 1 312 0
49
virtual bool PostProcessPass::setup_buffer(void);

694 14 setup_textures 0 6 802 31 PostProcessPass::setup_textures 0 1 313 0
51
virtual void PostProcessPass::setup_textures(void);

695 10 setup_quad 0 6 802 27 PostProcessPass::setup_quad 0 1 314 0
47
virtual void PostProcessPass::setup_quad(void);

696 12 setup_camera 0 6 802 29 PostProcessPass::setup_camera 0 1 315 0
49
virtual void PostProcessPass::setup_camera(void);

697 12 setup_region 0 6 802 29 PostProcessPass::setup_region 0 1 316 0
49
virtual void PostProcessPass::setup_region(void);

698 5 setup 0 6 802 22 PostProcessPass::setup 0 1 317 0
42
virtual void PostProcessPass::setup(void);

699 6 update 0 6 802 23 PostProcessPass::update 0 1 318 0
43
virtual void PostProcessPass::update(void);

700 12 window_event 0 6 802 29 PostProcessPass::window_event 0 1 319 0
67
virtual void PostProcessPass::window_event(GraphicsOutput *output);

701 8 shutdown 0 6 802 25 PostProcessPass::shutdown 0 1 320 0
45
virtual void PostProcessPass::shutdown(void);

702 19 get_default_fbprops 0 4 802 36 PostProcessPass::get_default_fbprops 0 1 321 0
72
static FrameBufferProperties PostProcessPass::get_default_fbprops(void);

703 16 ~PostProcessPass 0 4 802 33 PostProcessPass::~PostProcessPass 0 0 0
40
PostProcessPass::~PostProcessPass(void);

704 20 PostProcessScenePass 0 4 803 42 PostProcessScenePass::PostProcessScenePass 0 2 324 325 0
220
PostProcessScenePass::PostProcessScenePass(PostProcess *pp, int output_texture_bits = ::bits_PASSTEXTURE_COLOR, int auxbits = 0);
inline PostProcessScenePass::PostProcessScenePass(PostProcessScenePass const &) = default;

705 18 setup_scene_camera 0 4 803 40 PostProcessScenePass::setup_scene_camera 0 1 326 0
53
void PostProcessScenePass::setup_scene_camera(int i);

706 16 set_camera_state 0 4 803 38 PostProcessScenePass::set_camera_state 0 1 327 0
70
void PostProcessScenePass::set_camera_state(RenderState const *state);

707 21 ~PostProcessScenePass 0 4 803 43 PostProcessScenePass::~PostProcessScenePass 0 0 0
50
PostProcessScenePass::~PostProcessScenePass(void);

708 11 PostProcess 0 4 804 24 PostProcess::PostProcess 0 2 328 329 0
113
PostProcess::PostProcess(GraphicsOutput *output);
inline PostProcess::PostProcess(PostProcess const &) = default;

709 10 add_camera 0 4 804 23 PostProcess::add_camera 0 1 330 0
53
void PostProcess::add_camera(NodePath const &camera);

710 13 remove_camera 0 4 804 26 PostProcess::remove_camera 0 1 331 0
56
void PostProcess::remove_camera(NodePath const &camera);

711 10 add_effect 0 4 804 23 PostProcess::add_effect 0 1 332 0
63
inline void PostProcess::add_effect(PostProcessEffect *effect);

712 13 remove_effect 0 4 804 26 PostProcess::remove_effect 0 1 333 0
66
inline void PostProcess::remove_effect(PostProcessEffect *effect);

713 10 get_effect 0 4 804 23 PostProcess::get_effect 0 1 334 0
75
inline PostProcessEffect *PostProcess::get_effect(std::string const &name);

714 23 get_scene_color_texture 0 4 804 36 PostProcess::get_scene_color_texture 0 1 335 0
65
inline Texture *PostProcess::get_scene_color_texture(void) const;

715 23 get_scene_depth_texture 0 4 804 36 PostProcess::get_scene_depth_texture 0 1 336 0
65
inline Texture *PostProcess::get_scene_depth_texture(void) const;

716 14 get_scene_pass 0 4 804 27 PostProcess::get_scene_pass 0 1 337 0
69
inline PostProcessScenePass *PostProcess::get_scene_pass(void) const;

717 10 get_output 0 4 804 23 PostProcess::get_output 0 1 338 0
59
inline GraphicsOutput *PostProcess::get_output(void) const;

718 10 get_camera 0 4 804 23 PostProcess::get_camera 0 1 339 0
53
inline NodePath PostProcess::get_camera(int n) const;

719 9 next_sort 0 4 804 22 PostProcess::next_sort 0 1 340 0
40
inline int PostProcess::next_sort(void);

720 25 get_output_display_region 0 4 804 38 PostProcess::get_output_display_region 0 1 341 0
73
inline DisplayRegion *PostProcess::get_output_display_region(void) const;

721 13 is_fullscreen 0 4 804 26 PostProcess::is_fullscreen 0 1 342 0
51
inline bool PostProcess::is_fullscreen(void) const;

722 18 set_scene_aux_bits 0 4 804 31 PostProcess::set_scene_aux_bits 0 1 343 0
47
void PostProcess::set_scene_aux_bits(int bits);

723 18 set_stacked_clears 0 4 804 31 PostProcess::set_stacked_clears 0 1 344 0
68
void PostProcess::set_stacked_clears(int n, DrawableRegion *region);

724 17 set_window_clears 0 4 804 30 PostProcess::set_window_clears 0 1 345 0
60
void PostProcess::set_window_clears(DrawableRegion *region);

725 10 set_clears 0 4 804 23 PostProcess::set_clears 0 1 346 0
60
void PostProcess::set_clears(int n, DrawableRegion *region);

726 8 shutdown 0 4 804 21 PostProcess::shutdown 0 1 347 0
33
void PostProcess::shutdown(void);

727 12 ~PostProcess 0 4 804 25 PostProcess::~PostProcess 0 0 0
32
PostProcess::~PostProcess(void);

728 14 get_class_type 0 4 805 23 HDRPass::get_class_type 0 1 350 0
48
static TypeHandle HDRPass::get_class_type(void);

729 7 HDRPass 0 4 805 16 HDRPass::HDRPass 0 2 348 349 0
86
HDRPass::HDRPass(PostProcess *pp);
inline HDRPass::HDRPass(HDRPass const &) = default;

730 19 set_exposure_output 0 4 805 28 HDRPass::set_exposure_output 0 1 351 0
59
inline void HDRPass::set_exposure_output(PTA_float output);

731 12 get_exposure 0 4 805 21 HDRPass::get_exposure 0 1 352 56
/**
	 * Returns the calculated exposure adjustment.
	 */
47
inline float HDRPass::get_exposure(void) const;

732 8 ~HDRPass 0 4 805 17 HDRPass::~HDRPass 0 0 0
24
HDRPass::~HDRPass(void);

733 9 HDREffect 0 4 806 20 HDREffect::HDREffect 0 1 353 0
38
HDREffect::HDREffect(PostProcess *pp);

734 12 get_hdr_pass 0 4 806 23 HDREffect::get_hdr_pass 0 1 354 0
52
inline HDRPass *HDREffect::get_hdr_pass(void) const;

735 10 ~HDREffect 0 4 806 21 HDREffect::~HDREffect 0 0 0
28
HDREffect::~HDREffect(void);

736 14 get_class_type 0 4 807 27 BloomEffect::get_class_type 0 1 356 0
52
static TypeHandle BloomEffect::get_class_type(void);

737 11 BloomEffect 0 4 807 24 BloomEffect::BloomEffect 0 1 355 0
42
BloomEffect::BloomEffect(PostProcess *pp);

738 12 ~BloomEffect 0 4 807 25 BloomEffect::~BloomEffect 0 0 0
32
BloomEffect::~BloomEffect(void);

739 14 get_class_type 0 4 808 36 LightingOriginEffect::get_class_type 0 1 357 0
61
static TypeHandle LightingOriginEffect::get_class_type(void);

740 4 make 0 4 808 26 LightingOriginEffect::make 0 1 358 0
89
static ConstPointerTo< RenderEffect > LightingOriginEffect::make(LVector3 const &origin);

741 19 get_lighting_origin 0 4 808 41 LightingOriginEffect::get_lighting_origin 0 1 359 0
70
inline LVector3 LightingOriginEffect::get_lighting_origin(void) const;

742 21 ~LightingOriginEffect 0 4 808 43 LightingOriginEffect::~LightingOriginEffect 0 0 0
50
LightingOriginEffect::~LightingOriginEffect(void);

359
1 0 0 7 12 809 371 0 0 0 
2 0 0 7 12 809 371 0 0 1 6 param0 0 810  
3 0 0 7 2 814 0 0 0 1 4 name 1 813  
4 0 0 7 2 814 0 0 0 2 4 name 1 813  7 uv_name 1 813  
5 0 0 7 3 814 0 0 0 0 
6 0 0 7 4 814 0 0 0 0 
7 0 0 7 5 814 0 0 0 0 
8 0 0 7 6 814 0 0 0 0 
9 0 0 7 7 814 0 0 0 0 
10 0 0 7 8 814 0 0 0 0 
11 0 0 7 9 814 0 0 0 0 
12 0 0 7 10 814 0 0 0 0 
13 0 0 7 11 814 0 0 0 0 
14 0 0 7 16 817 393 0 0 1 4 copy 1 815  
15 0 0 7 16 817 393 0 0 1 4 name 1 813  
16 0 0 7 17 817 393 0 0 2 4 this 3 817  4 copy 1 815  
17 0 0 4 18 818 0 0 0 3 4 this 3 817  3 key 1 813  5 value 1 813  
18 0 0 6 19 813 0 0 0 2 4 this 3 815  3 key 1 813  
19 0 0 6 20 819 0 0 0 1 4 this 3 815  
20 0 0 6 21 813 0 0 0 2 4 this 3 815  1 i 1 819  
21 0 0 6 22 813 0 0 0 2 4 this 3 815  1 i 1 819  
22 0 0 6 23 748 0 0 0 2 4 this 3 815  3 key 1 813  
23 0 0 6 24 821 0 0 0 2 4 this 3 815  3 key 1 813  
24 0 0 4 25 818 0 0 0 2 4 this 3 817  11 shader_name 1 813  
25 0 0 6 26 813 0 0 0 1 4 this 3 815  
26 0 0 7 27 823 0 0 0 1 4 this 3 815  
27 0 0 6 28 824 0 0 0 2 4 this 3 815  3 key 1 813  
28 0 0 6 29 824 0 0 0 1 4 this 3 815  
29 0 0 6 30 824 0 0 0 1 4 this 3 815  
30 0 0 6 31 813 0 0 0 1 4 this 3 815  
31 0 0 6 32 813 0 0 0 1 4 this 3 815  
32 0 0 6 33 824 0 0 0 1 4 this 3 815  
33 0 0 6 34 824 0 0 0 1 4 this 3 815  
34 0 0 7 35 815 0 0 0 1 4 file 1 825  
35 0 0 7 36 828 0 0 0 0 
36 0 0 7 40 830 0 0 0 1 3 mat 1 815  
37 0 0 7 41 830 0 0 0 1 3 mat 1 815  
38 0 0 7 42 830 0 0 0 0 
39 0 0 6 43 813 0 0 0 1 4 this 3 831  
40 0 0 6 44 824 0 0 0 1 4 this 3 831  
41 0 0 7 45 815 0 0 0 1 4 this 3 831  
42 0 0 6 46 748 0 0 0 0 
43 0 0 7 49 828 0 0 0 0 
44 0 0 6 53 819 0 0 0 1 4 this 3 833  
45 0 0 7 54 837 0 0 0 2 4 this 3 833  1 n 1 748  
46 0 0 6 55 819 0 0 0 1 4 this 3 833  
47 0 0 7 56 840 0 0 0 2 4 this 3 833  1 n 1 748  
48 0 0 7 57 828 0 0 0 0 
49 0 0 7 61 841 418 0 0 0 
50 0 0 7 61 841 418 0 0 1 6 param0 0 842  
51 0 0 7 60 828 0 0 0 0 
52 0 0 6 62 844 0 0 0 1 4 this 3 842  
53 0 0 6 63 813 0 0 0 2 4 this 3 842  3 key 1 813  
54 0 0 7 64 847 0 0 0 2 4 this 3 842  3 key 1 813  
55 0 0 7 65 851 0 0 0 3 4 this 3 842  3 key 1 813  5 scale 1 824  
56 0 0 6 66 813 0 0 0 1 4 this 3 842  
57 0 0 6 67 813 0 0 0 1 4 this 3 842  
58 0 0 6 68 748 0 0 0 1 4 this 3 842  
59 0 0 7 72 852 423 0 0 0 
60 0 0 7 72 852 423 0 0 1 6 param0 0 853  
61 0 0 7 71 828 0 0 0 0 
62 0 0 7 73 837 0 0 0 1 4 this 3 853  
63 0 0 7 74 847 0 0 0 1 4 this 3 853  
64 0 0 7 78 855 429 0 0 0 
65 0 0 7 78 855 429 0 0 1 6 param0 0 856  
66 0 0 7 77 828 0 0 0 0 
67 0 0 7 79 858 408 0 0 1 4 this 3 856  
68 0 0 6 80 824 0 0 0 2 4 this 3 856  3 pos 1 859  
69 0 0 4 81 818 0 0 0 3 4 this 3 855  4 mins 1 837  4 maxs 1 837  
70 0 0 7 85 861 434 0 0 0 
71 0 0 7 85 861 434 0 0 1 6 param0 0 862  
72 0 0 7 84 828 0 0 0 0 
73 0 0 7 86 865 0 0 0 1 4 this 3 862  
74 0 0 4 87 818 0 0 0 3 4 this 3 861  4 mins 1 837  4 maxs 1 837  
75 0 0 7 93 868 439 0 0 1 6 param0 0 866  
76 0 0 6 90 748 0 0 0 1 4 this 3 866  
77 0 0 6 91 748 0 0 0 1 4 this 3 866  
78 0 0 6 92 748 0 0 0 1 4 this 3 866  
79 0 0 7 101 871 446 0 0 1 6 param0 0 869  
80 0 0 6 96 748 0 0 0 1 4 this 3 869  
81 0 0 6 97 748 0 0 0 1 4 this 3 869  
82 0 0 6 98 748 0 0 0 1 4 this 3 869  
83 0 0 6 99 748 0 0 0 1 4 this 3 869  
84 0 0 6 100 824 0 0 0 1 4 this 3 869  
85 0 0 6 104 748 0 0 0 1 4 this 3 872  
86 0 0 4 105 818 0 0 35 // number of textures to consider.. 2 4 this 3 872  6 tcount 1 748  
87 0 0 4 106 818 0 0 21 // add textures 0 - n 3 4 this 3 872  3 wid 1 748  3 hit 1 748  
88 0 0 6 107 824 0 0 0 7 4 this 3 872  3 wid 1 748  3 hit 1 748  15 forcePowerOfTwo 1 824  14 onePixelBorder 1 824  7 max_wid 1 748  7 max_hit 1 748  
89 0 0 4 108 818 0 0 0 3 4 this 3 872  3 wid 1 748  3 hit 1 748  
90 0 0 7 109 868 439 0 74 // pack the textures, the return code is the amount of wasted/unused area. 3 4 this 3 872  15 forcePowerOfTwo 1 824  14 onePixelBorder 1 824  
91 0 0 7 110 871 446 0 58 // returns true if the texture has been rotated 90 degrees 2 4 this 3 872  5 index 1 748  
92 0 0 6 111 872 0 0 0 0 
93 0 0 4 112 818 0 0 0 1 2 tp 1 872  
94 0 0 7 117 873 460 0 0 0 
95 0 0 7 117 873 460 0 0 1 6 param0 0 874  
96 0 0 4 115 818 0 0 0 0 
97 0 0 4 116 818 0 0 0 0 
98 0 0 7 120 876 468 0 0 0 
99 0 0 7 120 876 468 0 0 1 6 param0 0 877  
100 0 0 6 121 824 0 0 0 1 4 this 3 877  
101 0 0 7 122 847 0 0 0 1 4 this 3 877  
102 0 0 7 123 881 0 0 0 1 4 this 3 877  
103 0 0 6 124 882 0 0 0 1 4 this 3 877  
104 0 0 6 125 882 0 0 0 1 4 this 3 877  
105 0 0 6 126 821 0 0 0 1 4 this 3 877  
106 0 0 7 130 883 0 0 0 0 
107 0 0 7 130 883 0 0 0 1 6 param0 0 884  
108 0 0 4 131 818 0 0 0 2 4 this 3 883  4 geom 1 886  
109 0 0 4 132 818 0 0 0 2 4 this 3 883  4 geom 1 886  
110 0 0 4 133 818 0 0 0 1 4 this 3 883  
111 0 0 7 135 876 468 0 0 4 4 this 3 883  5 start 1 859  3 end 1 859  4 mask 1 887  
112 0 0 7 136 876 468 0 0 5 4 this 3 883  6 origin 1 859  9 direction 1 891  8 distance 1 821  4 mask 1 887  
113 0 0 4 137 818 0 0 0 2 4 this 3 883  7 quality 1 748  
114 0 0 4 138 818 0 0 0 1 4 this 3 883  
115 0 0 7 139 886 0 0 0 2 4 this 3 883  7 geom_id 1 882  
116 0 0 7 142 828 0 0 0 0 
117 0 0 4 143 818 0 0 0 2 4 this 3 886  4 mask 1 887  
118 0 0 4 143 818 0 0 0 2 4 this 3 886  4 mask 1 882  
119 0 0 7 144 895 0 0 0 1 4 this 3 893  
120 0 0 6 145 882 0 0 0 1 4 this 3 893  
121 0 0 4 146 818 0 0 0 2 4 this 3 886  7 quality 1 748  
122 0 0 4 147 818 0 0 0 1 4 this 3 886  
123 0 0 7 150 896 488 0 0 1 4 name 1 813  
124 0 0 7 149 828 0 0 0 0 
125 0 0 4 151 818 0 0 0 4 4 this 3 896  2 p1 1 859  2 p2 1 859  2 p3 1 859  
126 0 0 4 152 818 0 0 0 3 4 this 3 896  4 geom 1 897  2 ts 1 900  
127 0 0 7 156 830 0 0 0 2 13 face_material 1 813  9 face_type 1 748  
128 0 0 7 157 830 0 0 0 0 
129 0 0 7 158 830 0 0 0 0 
130 0 0 6 159 813 0 0 0 1 4 this 3 903  
131 0 0 6 160 748 0 0 0 1 4 this 3 903  
132 0 0 6 161 824 0 0 0 1 4 this 3 903  
133 0 0 6 162 748 0 0 0 0 
134 0 0 7 164 828 0 0 0 0 
135 0 0 7 167 844 559 0 0 0 
136 0 0 4 168 818 0 0 0 2 4 this 3 844  5 pyent 1 905  
137 0 0 4 169 818 0 0 0 2 4 this 3 844  5 pyent 1 905  
138 0 0 4 170 818 0 0 0 3 4 this 3 844  1 n 1 748  9 preserved 1 824  
139 0 0 6 171 748 0 0 0 1 4 this 3 908  
140 0 0 6 172 905 0 0 0 2 4 this 3 908  1 n 1 748  
141 0 0 4 173 818 0 0 0 4 4 this 3 844  4 name 1 813  6 origin 1 891  6 angles 1 891  
142 0 0 4 174 818 0 0 0 1 4 this 3 844  
143 0 0 6 175 824 0 0 0 3 4 this 3 844  4 file 1 825  13 is_transition 1 824  
144 0 0 4 176 818 0 0 0 1 4 this 3 844  
145 0 0 4 177 818 0 0 0 3 4 this 3 844  5 gamma 1 910  10 overbright 1 748  
146 0 0 6 178 910 0 0 0 1 4 this 3 908  
147 0 0 4 179 818 0 0 0 2 4 this 3 844  3 win 1 911  
148 0 0 4 180 818 0 0 0 2 4 this 3 844  6 camera 1 913  
149 0 0 4 181 818 0 0 0 2 4 this 3 844  6 render 1 913  
150 0 0 4 182 818 0 0 0 2 4 this 3 844  5 shgen 1 915  
151 0 0 4 183 818 0 0 0 2 4 this 3 844  4 flag 1 824  
152 0 0 4 184 818 0 0 0 2 4 this 3 844  4 flag 1 824  
153 0 0 4 185 818 0 0 0 2 4 this 3 844  4 type 1 748  
154 0 0 4 186 818 0 0 0 2 4 this 3 844  4 flag 1 824  
155 0 0 4 187 818 0 0 0 2 4 this 3 844  4 file 1 825  
156 0 0 4 188 818 0 0 0 2 4 this 3 844  4 flag 1 824  
157 0 0 6 189 824 0 0 0 1 4 this 3 908  
158 0 0 7 190 865 0 0 0 1 4 this 3 908  
159 0 0 4 191 818 0 0 0 7 4 this 3 844  14 decal_material 1 813  11 decal_scale 1 916  6 rotate 1 821  5 start 1 859  3 end 1 859  11 decal_color 1 920  
160 0 0 7 192 923 0 0 0 2 4 this 3 844  3 pos 1 859  
161 0 0 4 193 818 0 0 0 1 4 this 3 844  
162 0 0 4 194 818 0 0 0 2 4 this 3 844  4 flag 1 824  
163 0 0 4 195 818 0 0 0 2 4 this 3 844  3 dir 1 891  
164 0 0 6 196 748 0 0 0 2 4 this 3 844  6 entnum 1 748  
165 0 0 4 197 818 0 0 0 4 4 this 3 844  8 modelnum 1 748  4 mins 1 837  4 maxs 1 837  
166 0 0 4 198 818 0 0 0 2 4 this 3 844  10 dispatcher 1 905  
167 0 0 4 199 818 0 0 0 3 4 this 3 844  4 name 1 813  4 type 1 924  
168 0 0 4 200 818 0 0 0 2 4 this 3 844  2 ai 1 824  
169 0 0 6 201 824 0 0 0 1 4 this 3 908  
170 0 0 6 202 824 0 0 0 3 4 this 3 844  5 start 1 859  3 end 1 859  
171 0 0 7 203 837 0 0 0 3 4 this 3 844  5 start 1 859  3 end 1 859  
172 0 0 4 204 818 0 0 0 3 4 this 3 844  7 entname 1 813  4 type 1 924  
173 0 0 6 205 905 0 0 0 2 4 this 3 908  10 targetname 1 813  
174 0 0 6 206 905 0 0 0 2 4 this 3 844  9 classname 1 813  
175 0 0 4 207 818 0 0 0 3 4 this 3 844  4 list 1 905  6 entnum 1 927  
176 0 0 4 208 818 0 0 0 3 4 this 3 844  5 entum 1 748  5 pyent 1 905  
177 0 0 4 209 818 0 0 0 2 4 this 3 844  3 ent 1 905  
178 0 0 7 210 865 0 0 0 2 4 this 3 908  8 modelnum 1 748  
179 0 0 7 211 841 418 0 0 2 4 this 3 908  6 entnum 1 927  
180 0 0 6 212 748 0 0 0 3 4 this 3 844  3 pos 1 859  8 headnode 1 748  
181 0 0 6 212 748 0 0 0 2 4 this 3 844  2 np 1 913  
182 0 0 6 213 748 0 0 0 2 4 this 3 844  3 pos 1 859  
183 0 0 6 214 824 0 0 0 3 4 this 3 908  12 curr_cluster 1 748  7 cluster 1 748  
184 0 0 6 215 824 0 0 0 3 4 this 3 844  6 bounds 1 928  19 required_leaf_flags 1 882  
185 0 0 7 216 928 0 0 0 3 4 this 3 844  13 net_transform 1 900  8 original 1 928  
186 0 0 6 217 824 0 0 0 1 4 this 3 908  
187 0 0 6 218 824 0 0 0 1 4 this 3 908  
188 0 0 4 219 818 0 0 0 2 4 this 3 844  13 is_transition 1 824  
189 0 0 7 220 865 0 0 0 1 4 this 3 908  
190 0 0 4 221 818 0 0 0 2 4 this 3 844  4 leaf 1 748  
191 0 0 6 222 748 0 0 0 1 4 this 3 908  
192 0 0 6 223 748 0 0 0 1 4 this 3 908  
193 0 0 7 224 837 0 0 0 2 4 this 3 908  4 leaf 1 748  
194 0 0 7 225 933 0 0 0 3 4 this 3 844  7 facenum 1 748  5 point 1 891  
195 0 0 4 226 818 0 0 0 1 4 this 3 844  
196 0 0 6 227 844 0 0 0 0 
197 0 0 7 231 934 566 0 0 0 
198 0 0 4 232 818 0 0 0 3 4 this 3 934  3 key 1 813  5 value 1 813  
199 0 0 4 233 818 0 0 0 1 4 this 3 934  
200 0 0 4 234 818 0 0 0 2 4 this 3 934  3 inp 1 935  
201 0 0 4 235 818 0 0 0 2 4 this 3 934  4 flag 1 748  
202 0 0 6 236 819 0 0 0 1 4 this 3 938  
203 0 0 4 244 818 0 0 0 4 4 this 3 940  9 vert_file 1 825  10 pixel_file 1 825  9 geom_file 1 825  
204 0 0 7 245 828 0 0 0 0 
205 0 0 7 239 941 0 0 0 1 4 this 3 940  
206 0 0 6 242 942 0 0 0 1 4 this 3 940  
207 0 0 7 249 945 576 0 0 1 6 param0 0 943  
208 0 0 7 248 923 0 0 0 1 4 this 3 943  
209 0 0 7 256 915 602 0 0 1 6 param0 0 946  
210 0 0 7 256 915 602 0 0 4 6 output 1 948  3 gsg 1 950  6 camera 1 913  6 render 1 913  
211 0 0 4 257 818 0 0 0 2 4 this 3 915  2 np 1 913  
212 0 0 4 258 818 0 0 0 1 4 this 3 915  
213 0 0 4 259 818 0 0 0 2 4 this 3 915  4 spec 1 940  
214 0 0 7 260 847 0 0 0 1 4 this 3 946  
215 0 0 6 261 824 0 0 0 1 4 this 3 946  
216 0 0 7 262 923 0 0 0 1 4 this 3 946  
217 0 0 6 263 952 0 0 0 1 4 this 3 946  
218 0 0 7 264 865 0 0 0 1 4 this 3 946  
219 0 0 7 265 865 0 0 0 1 4 this 3 946  
220 0 0 4 266 818 0 0 0 2 4 this 3 915  7 quality 1 748  
221 0 0 6 267 748 0 0 0 1 4 this 3 946  
222 0 0 4 268 818 0 0 0 2 4 this 3 915  3 fog 1 954  
223 0 0 4 269 818 0 0 0 1 4 this 3 915  
224 0 0 7 270 954 0 0 0 1 4 this 3 946  
225 0 0 7 271 958 0 0 0 1 4 this 3 946  
226 0 0 4 272 818 0 0 0 2 4 this 3 915  8 exposure 1 821  
227 0 0 7 273 961 0 0 0 1 4 this 3 946  
228 0 0 7 274 950 0 0 0 1 4 this 3 946  
229 0 0 7 275 948 0 0 0 1 4 this 3 946  
230 0 0 7 276 945 576 0 0 1 4 this 3 946  
231 0 0 4 277 818 0 0 0 1 3 tex 1 923  
232 0 0 7 278 923 0 0 0 0 
233 0 0 7 279 966 0 0 0 2 4 spec 1 964  5 perms 1 938  
234 0 0 7 280 828 0 0 0 0 
235 0 0 7 285 969 605 0 0 1 6 param0 0 967  
236 0 0 7 285 969 605 0 0 2 4 trav 1 970  6 loader 1 844  
237 0 0 7 284 828 0 0 0 0 
238 0 0 7 289 973 608 0 0 1 6 param0 0 971  
239 0 0 7 289 973 608 0 0 2 4 name 1 813  6 loader 1 844  
240 0 0 7 288 828 0 0 0 0 
241 0 0 7 293 976 611 0 0 1 6 param0 0 974  
242 0 0 7 293 976 611 0 0 1 4 name 1 813  
243 0 0 7 292 828 0 0 0 0 
244 0 0 7 298 979 614 0 0 1 6 param0 0 977  
245 0 0 7 298 979 614 0 0 1 4 name 1 813  
246 0 0 7 297 828 0 0 0 0 
247 0 0 7 303 982 617 0 0 1 6 param0 0 980  
248 0 0 7 303 982 617 0 0 1 4 name 1 813  
249 0 0 7 302 828 0 0 0 0 
250 0 0 7 306 983 619 0 0 0 
251 0 0 7 309 984 621 0 0 0 
252 0 0 7 312 985 623 0 0 0 
253 0 0 7 315 986 625 0 0 0 
254 0 0 7 318 987 627 0 0 0 
255 0 0 7 321 988 629 0 0 0 
256 0 0 7 325 990 0 0 0 0 
257 0 0 7 326 828 0 0 0 0 
258 0 0 7 329 993 651 0 0 1 6 param0 0 991  
259 0 0 7 329 993 651 0 0 4 3 mgr 1 994  15 listener_target 1 913  4 root 1 913  13 task_priority 1 748  
260 0 0 4 330 818 0 0 0 2 4 this 3 993  6 factor 1 910  
261 0 0 6 331 910 0 0 0 1 4 this 3 991  
262 0 0 4 332 818 0 0 0 2 4 this 3 993  6 factor 1 910  
263 0 0 6 333 910 0 0 0 1 4 this 3 991  
264 0 0 4 334 818 0 0 0 2 4 this 3 993  6 factor 1 910  
265 0 0 6 335 910 0 0 0 1 4 this 3 991  
266 0 0 4 336 818 0 0 0 3 4 this 3 993  5 sound 1 996  4 dist 1 910  
267 0 0 6 337 910 0 0 0 2 4 this 3 991  5 sound 1 996  
268 0 0 4 338 818 0 0 0 3 4 this 3 993  5 sound 1 996  4 dist 1 910  
269 0 0 6 339 910 0 0 0 2 4 this 3 991  5 sound 1 996  
270 0 0 4 340 818 0 0 0 2 4 this 3 993  8 listener 1 913  
271 0 0 4 341 818 0 0 0 1 4 this 3 993  
272 0 0 7 342 996 0 0 0 2 4 this 3 993  4 path 1 813  
273 0 0 4 343 818 0 0 0 3 4 this 3 993  5 sound 1 996  6 object 1 913  
274 0 0 4 344 818 0 0 0 2 4 this 3 993  5 sound 1 996  
275 0 0 4 345 818 0 0 0 1 4 this 3 993  
276 0 0 4 346 818 0 0 0 1 4 this 3 993  
277 0 0 7 351 998 655 0 0 0 
278 0 0 7 351 998 655 0 0 1 6 param0 0 999  
279 0 0 4 349 818 0 0 0 4 1 x 1 821  1 y 1 821  4 left 1 847  5 right 1 847  
280 0 0 7 350 881 0 0 0 3 4 node 1 913  5 point 1 891  4 eyes 1 913  
281 0 0 7 354 1001 657 0 0 0 
282 0 0 7 359 1004 660 0 0 2 4 copy 1 1002  10 query_size 1 821  
283 0 0 7 359 1004 660 0 0 1 6 param0 0 1005  
284 0 0 7 359 1004 660 0 0 2 4 name 1 813  10 query_size 1 821  
285 0 0 7 358 828 0 0 0 0 
286 0 0 7 366 828 0 0 0 0 
287 0 0 7 367 923 0 0 0 1 4 this 3 1007  
288 0 0 4 368 818 0 0 0 2 4 this 3 1007  4 pass 1 1008  
289 0 0 4 369 818 0 0 0 2 4 this 3 1007  4 pass 1 1008  
290 0 0 7 370 1008 703 0 0 2 4 this 3 1007  4 name 1 813  
291 0 0 4 371 818 0 0 0 1 4 this 3 1007  
292 0 0 4 372 818 0 0 0 1 4 this 3 1007  
293 0 0 4 373 818 0 0 0 2 4 this 3 1007  3 win 1 948  
294 0 0 4 374 818 0 0 0 1 4 this 3 1007  
295 0 0 7 362 941 0 0 0 1 4 this 3 1007  
296 0 0 6 364 942 0 0 0 1 4 this 3 1007  
297 0 0 7 383 1008 703 0 0 8 2 pp 1 1009  4 name 1 813  19 texture_output_bits 1 748  7 fbprops 1 1010  10 force_size 1 824  11 forced_size 1 1013  8 div_size 1 824  3 div 1 748  
298 0 0 7 383 1008 703 0 0 1 6 param0 0 1016  
299 0 0 7 382 828 0 0 0 0 
300 0 0 7 384 865 0 0 0 1 4 this 3 1016  
301 0 0 7 385 1018 0 0 0 1 4 this 3 1016  
302 0 0 7 386 865 0 0 0 1 4 this 3 1016  
303 0 0 6 387 824 0 0 0 2 4 this 3 1016  4 bits 1 748  
304 0 0 4 388 818 0 0 0 3 4 this 3 1008  8 div_size 1 824  3 div 1 748  
305 0 0 4 389 818 0 0 0 3 4 this 3 1008  10 force_size 1 824  11 forced_size 1 1013  
306 0 0 4 390 818 0 0 0 2 4 this 3 1008  7 fbprops 1 1010  
307 0 0 4 391 818 0 0 0 2 4 this 3 1008  4 bits 1 748  
308 0 0 7 392 1018 0 0 0 2 4 this 3 1008  4 size 1 1013  
309 0 0 7 393 923 0 0 0 2 4 this 3 1008  3 bit 1 748  
310 0 0 7 394 923 0 0 0 1 4 this 3 1008  
311 0 0 7 395 923 0 0 0 1 4 this 3 1008  
312 0 0 6 396 824 0 0 0 1 4 this 3 1008  
313 0 0 4 397 818 0 0 0 1 4 this 3 1008  
314 0 0 4 398 818 0 0 0 1 4 this 3 1008  
315 0 0 4 399 818 0 0 0 1 4 this 3 1008  
316 0 0 4 400 818 0 0 0 1 4 this 3 1008  
317 0 0 4 401 818 0 0 0 1 4 this 3 1008  
318 0 0 4 402 818 0 0 0 1 4 this 3 1008  
319 0 0 4 403 818 0 0 0 2 4 this 3 1008  6 output 1 948  
320 0 0 4 404 818 0 0 0 1 4 this 3 1008  
321 0 0 7 405 1019 0 0 0 0 
322 0 0 7 378 941 0 0 0 1 4 this 3 1008  
323 0 0 6 380 942 0 0 0 1 4 this 3 1008  
324 0 0 7 408 1020 707 0 0 3 2 pp 1 1009  19 output_texture_bits 1 748  7 auxbits 1 748  
325 0 0 7 408 1020 707 0 0 1 6 param0 0 1021  
326 0 0 4 409 818 0 0 0 2 4 this 3 1020  1 i 1 748  
327 0 0 4 410 818 0 0 0 2 4 this 3 1020  5 state 1 1023  
328 0 0 7 413 1009 727 0 0 1 6 output 1 948  
329 0 0 7 413 1009 727 0 0 1 6 param0 0 1026  
330 0 0 4 414 818 0 0 0 2 4 this 3 1009  6 camera 1 913  
331 0 0 4 415 818 0 0 0 2 4 this 3 1009  6 camera 1 913  
332 0 0 4 416 818 0 0 0 2 4 this 3 1009  6 effect 1 1007  
333 0 0 4 417 818 0 0 0 2 4 this 3 1009  6 effect 1 1007  
334 0 0 7 418 1007 674 0 0 2 4 this 3 1009  4 name 1 813  
335 0 0 7 419 923 0 0 0 1 4 this 3 1026  
336 0 0 7 420 923 0 0 0 1 4 this 3 1026  
337 0 0 7 421 1020 707 0 0 1 4 this 3 1026  
338 0 0 7 422 948 0 0 0 1 4 this 3 1026  
339 0 0 7 423 865 0 0 0 2 4 this 3 1026  1 n 1 748  
340 0 0 6 424 748 0 0 0 1 4 this 3 1009  
341 0 0 7 425 1029 0 0 0 1 4 this 3 1026  
342 0 0 6 426 824 0 0 0 1 4 this 3 1026  
343 0 0 4 427 818 0 0 0 2 4 this 3 1009  4 bits 1 748  
344 0 0 4 428 818 0 0 0 3 4 this 3 1009  1 n 1 748  6 region 1 1030  
345 0 0 4 429 818 0 0 0 2 4 this 3 1009  6 region 1 1030  
346 0 0 4 430 818 0 0 0 3 4 this 3 1009  1 n 1 748  6 region 1 1030  
347 0 0 4 431 818 0 0 0 1 4 this 3 1009  
348 0 0 7 435 1034 732 0 0 1 6 param0 0 1032  
349 0 0 7 435 1034 732 0 0 1 2 pp 1 1009  
350 0 0 7 434 828 0 0 0 0 
351 0 0 4 436 818 0 0 0 2 4 this 3 1034  6 output 1 961  
352 0 0 6 437 821 0 0 56 /**
	 * Returns the calculated exposure adjustment.
	 */ 1 4 this 3 1032  
353 0 0 7 440 1035 735 0 0 1 2 pp 1 1009  
354 0 0 7 441 1034 732 0 0 1 4 this 3 1036  
355 0 0 7 445 1038 738 0 0 1 2 pp 1 1009  
356 0 0 7 444 828 0 0 0 0 
357 0 0 7 448 828 0 0 0 0 
358 0 0 7 449 990 0 0 0 1 6 origin 1 891  
359 0 0 7 450 847 0 0 0 1 4 this 3 1039  
298
743 13 TextureStages 0 141313 13 TextureStages 13 TextureStages 0 0 0 1 370 371 0 10 360 361 362 363 364 365 366 367 368 369 0 0 0 0 0 752
/**
 * This simple interface maintains a single TextureStage object for each unique name.
 * It avoids the creation of duplicate TextureStages with the same name, which
 * reduces texture swapping and draw call overhead.
 *
 * If using our shader system, you should always use this interface to get TextureStages.
 * You are not required to change any properties on the returned TextureStage, as the shader
 * specification will know what to do with the TextureStage from the name.
 * 
 * For example, you do not need to call TextureStage::set_mode() or NodePath::set_tex_gen().
 * If you apply a texture to a node with the get_normalmap() stage, the shader specification
 * will know that the texture you supplied is to be treated as a normal map.
 */

744 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 372 393 0 20 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 0 0 1 0 745 0 0 0 0 0

745 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

746 17 BSPMaterialAttrib 0 141313 17 BSPMaterialAttrib 17 BSPMaterialAttrib 0 0 0 0 402 1 1041 8 394 395 396 397 398 399 400 401 0 0 1 0 747 0 0 0 0 0

747 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

748 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

749 12 BoundingKDOP 0 141313 12 BoundingKDOP 12 BoundingKDOP 0 0 0 0 408 0 5 403 404 405 406 407 0 0 1 0 750 0 0 0 0 243
/**
 * This defines a bounding convex volume.  It may represent any enclosing convex volume,
 * including simple boxes.  However, if all you want is an axis-aligned
 * bounding box, you may be better off with the simpler BoundingBox class.
 */

750 20 FiniteBoundingVolume 0 2048 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 168
/**
 * A special kind of GeometricBoundingVolume that is known to be finite.  It
 * is possible to query this kind of volume for its minimum and maximum
 * extents.
 */

751 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 410 418 0 8 409 411 412 413 414 415 416 417 0 0 1 0 745 0 0 0 0 0

752 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 420 423 0 3 419 421 422 0 0 1 0 751 0 0 0 0 0

753 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 425 429 0 4 424 426 427 428 0 0 1 0 751 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

754 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 431 434 0 3 430 432 433 0 0 1 0 751 0 0 0 0 0

755 10 PackResult 0 141313 10 PackResult 10 PackResult 0 0 0 1 438 439 0 3 435 436 437 0 0 0 0 0 0

756 15 TextureLocation 0 141313 15 TextureLocation 15 TextureLocation 0 0 0 1 445 446 0 5 440 441 442 443 444 0 0 0 0 0 0

757 13 TexturePacker 0 141313 13 TexturePacker 13 TexturePacker 0 0 0 0 456 0 9 447 448 449 450 451 452 453 454 455 0 0 0 0 0 0

758 8 RayTrace 0 141313 8 RayTrace 8 RayTrace 0 0 0 1 459 460 0 2 457 458 0 0 0 0 0 0

759 17 RayTraceHitResult 0 141313 17 RayTraceHitResult 17 RayTraceHitResult 0 0 0 1 461 468 0 6 462 463 464 465 466 467 0 0 0 0 0 0

760 13 RayTraceScene 0 75777 13 RayTraceScene 13 RayTraceScene 0 0 0 1 469 0 0 8 470 471 472 473 474 475 476 477 0 0 1 0 761 0 0 0 1 762 0

761 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

762 0 0 794624 15 RayTraceScene:: 0 760 0 0 0 0 0 0 0 0 0 3 17 BUILD_QUALITY_LOW 32 RayTraceScene::BUILD_QUALITY_LOW 0
0 20 BUILD_QUALITY_MEDIUM 35 RayTraceScene::BUILD_QUALITY_MEDIUM 0
1 18 BUILD_QUALITY_HIGH 33 RayTraceScene::BUILD_QUALITY_HIGH 0
2 0 0

763 16 RayTraceGeometry 0 75777 16 RayTraceGeometry 16 RayTraceGeometry 0 0 0 0 0 0 6 478 479 480 481 482 483 0 0 1 0 764 0 0 0 0 0

764 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

765 20 RayTraceTriangleMesh 0 141313 20 RayTraceTriangleMesh 20 RayTraceTriangleMesh 0 0 0 1 485 488 0 3 484 486 487 0 0 1 0 763 0 0 0 0 0

766 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 497 1 1042 8 489 490 491 492 493 494 495 496 0 0 1 0 747 0 0 0 1 767 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

767 0 0 794624 15 BSPFaceAttrib:: 0 766 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

768 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 498 559 0 60 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 0 0 0 0 1 769 58
/**
 * Loads and handles the operations of PBSP files.
 */

769 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 768 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

770 18 ShaderPermutations 0 141313 18 ShaderPermutations 18 ShaderPermutations 0 0 0 1 560 566 0 5 561 562 563 564 565 0 0 1 0 761 0 0 0 0 97
/**
 * Represents a list of #defines and variable inputs to a shader that is being generated.
 */

771 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 0 573 0 2 571 572 0 0 2 3 761 567 568 3 772 569 570 0 0 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

772 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

773 17 PlanarReflections 0 141313 17 PlanarReflections 17 PlanarReflections 0 0 0 1 575 576 0 1 574 0 0 1 0 761 0 0 0 0 0

774 13 ShaderQuality 0 532481 13 ShaderQuality 13 ShaderQuality 0 0 0 0 0 0 0 0 0 0 3 17 SHADERQUALITY_LOW 17 SHADERQUALITY_LOW 0
0 20 SHADERQUALITY_MEDIUM 20 SHADERQUALITY_MEDIUM 0
1 18 SHADERQUALITY_HIGH 18 SHADERQUALITY_HIGH 0
2 0 0

775 10 CameraBits 0 532481 10 CameraBits 10 CameraBits 0 0 0 0 0 0 0 0 0 0 6 11 CAMERA_MAIN 11 CAMERA_MAIN 0
1 13 CAMERA_SHADOW 13 CAMERA_SHADOW 0
2 17 CAMERA_REFLECTION 17 CAMERA_REFLECTION 0
4 17 CAMERA_REFRACTION 17 CAMERA_REFRACTION 0
8 16 CAMERA_VIEWMODEL 16 CAMERA_VIEWMODEL 0
16 14 CAMERA_COMPUTE 14 CAMERA_COMPUTE 0
32 0 0

776 7 AuxBits 0 532481 7 AuxBits 7 AuxBits 0 0 0 0 0 0 0 0 0 0 2 14 AUXBITS_NORMAL 14 AUXBITS_NORMAL 0
1 12 AUXBITS_ARME 12 AUXBITS_ARME 0
2 0 0

777 18 BSPShaderGenerator 0 141313 18 BSPShaderGenerator 18 BSPShaderGenerator 0 0 0 1 577 602 0 24 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 0 0 1 0 778 0 0 0 0 0

778 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

779 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 604 605 0 1 603 0 0 1 0 780 0 0 0 0 0

780 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

781 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 607 608 0 1 606 0 0 1 0 764 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

782 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 610 611 0 1 609 0 0 1 0 764 0 0 0 0 0

783 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 613 614 0 1 612 0 0 1 0 784 0 0 0 0 0

784 9 ModelRoot 0 2048 9 ModelRoot 9 ModelRoot 0 0 0 0 0 0 0 0 0 0 0 0 314
/**
 * A node of this type is created automatically at the root of each model file
 * that is loaded.  It may eventually contain some information about the
 * contents of the model; at the moment, it contains no special information,
 * but can be used as a flag to indicate the presence of a loaded model file.
 */

785 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 616 617 0 1 615 0 0 1 0 786 0 0 0 0 0

786 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

787 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 618 619 0 0 0 0 1 0 771 0 0 0 0 0

788 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 620 621 0 0 0 0 1 0 771 0 0 0 0 0

789 16 UnlitGenericSpec 0 141313 16 UnlitGenericSpec 16 UnlitGenericSpec 0 0 0 1 622 623 0 0 0 0 1 0 771 0 0 0 0 160
/**
 * Shader that only supports a basetexture, no fancy lighting effects or anything.
 * Could be used for UI elements, emissive materials, particles, etc.
 */

790 14 UnlitNoMatSpec 0 141313 14 UnlitNoMatSpec 14 UnlitNoMatSpec 0 0 0 1 624 625 0 0 0 0 1 0 771 0 0 0 0 0

791 13 CSMRenderSpec 0 141313 13 CSMRenderSpec 13 CSMRenderSpec 0 0 0 1 626 627 0 0 0 0 1 0 771 0 0 0 0 0

792 10 SkyBoxSpec 0 141313 10 SkyBoxSpec 10 SkyBoxSpec 0 0 0 1 628 629 0 0 0 0 1 0 771 0 0 0 0 0

793 18 AmbientBoostEffect 0 141313 18 AmbientBoostEffect 18 AmbientBoostEffect 0 0 0 0 632 0 2 630 631 0 0 1 0 794 0 0 0 0 0

794 12 RenderEffect 0 2048 12 RenderEffect 12 RenderEffect 0 0 0 0 0 0 0 0 0 0 0 0 901
/**
 * This is the base class for a number of special render effects that may be
 * set on scene graph nodes to change the way they render.  This includes
 * BillboardEffect, DecalEffect, etc.
 *
 * RenderEffect represents render properties that must be applied as soon as
 * they are encountered in the scene graph, rather than propagating down to
 * the leaves.  This is different from RenderAttrib, which represents
 * properties like color and texture that don't do anything until they
 * propagate down to a GeomNode.
 *
 * You should not attempt to create or modify a RenderEffect directly;
 * instead, use the make() method of the appropriate kind of effect you want.
 * This will allocate and return a new RenderEffect of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderEffect
 * if you wish to change its properties; instead, create a new one.
 */

795 14 Audio3DManager 0 141313 14 Audio3DManager 14 Audio3DManager 0 0 0 1 633 651 0 17 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 0 0 0 0 0 0

796 6 CIOLib 0 141313 6 CIOLib 6 CIOLib 0 0 0 1 654 655 0 2 652 653 0 0 0 0 0 0

797 17 DecalModulateSpec 0 141313 17 DecalModulateSpec 17 DecalModulateSpec 0 0 0 1 656 657 0 0 0 0 1 0 789 0 0 0 0 90
/**
 * This is just an alias of UnlitGeneric that enables color blending on the decal.
 */

798 8 GlowNode 0 141313 8 GlowNode 8 GlowNode 0 0 0 1 659 660 0 1 658 0 0 1 0 799 0 0 0 0 207
/**
 * This is a specialization on GeomNode that uses a pixel occlusion query
 * to determine if the Geoms on the node should be rendered.
 *
 * This is useful for things like light glows or lens flares.
 */

799 8 GeomNode 0 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 0 0 0 0 0 208
/**
 * A node that holds Geom objects, renderable pieces of geometry.  This is the
 * primary kind of leaf node in the scene graph; almost all visible objects
 * will be contained in a GeomNode somewhere.
 */

800 17 PostProcessEffect 0 141313 17 PostProcessEffect 17 PostProcessEffect 0 0 0 0 674 0 9 665 666 667 668 669 670 671 672 673 0 0 2 3 761 661 662 3 772 663 664 0 0 0

801 15 PassTextureBits 0 532481 15 PassTextureBits 15 PassTextureBits 0 0 0 0 0 0 0 0 0 0 6 22 bits_PASSTEXTURE_COLOR 22 bits_PASSTEXTURE_COLOR 0
1 22 bits_PASSTEXTURE_DEPTH 22 bits_PASSTEXTURE_DEPTH 0
2 21 bits_PASSTEXTURE_AUX0 21 bits_PASSTEXTURE_AUX0 0
4 21 bits_PASSTEXTURE_AUX1 21 bits_PASSTEXTURE_AUX1 0
8 21 bits_PASSTEXTURE_AUX2 21 bits_PASSTEXTURE_AUX2 0
16 21 bits_PASSTEXTURE_AUX3 21 bits_PASSTEXTURE_AUX3 0
32 0 0

802 15 PostProcessPass 0 141313 15 PostProcessPass 15 PostProcessPass 0 0 0 1 680 703 0 23 679 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 0 0 2 3 761 675 676 3 772 677 678 0 0 0

803 20 PostProcessScenePass 0 141313 20 PostProcessScenePass 20 PostProcessScenePass 0 0 0 1 704 707 0 2 705 706 0 0 1 0 802 0 0 0 0 0

804 11 PostProcess 0 141313 11 PostProcess 11 PostProcess 0 0 0 1 708 727 0 18 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 0 0 0 0 0 0

805 7 HDRPass 0 141313 7 HDRPass 7 HDRPass 0 0 0 1 729 732 0 3 728 730 731 0 0 1 0 802 0 0 0 0 0

806 9 HDREffect 0 141313 9 HDREffect 9 HDREffect 0 0 0 1 733 735 0 1 734 0 0 1 0 800 0 0 0 0 0

807 11 BloomEffect 0 141313 11 BloomEffect 11 BloomEffect 0 0 0 1 737 738 0 1 736 0 0 1 0 800 0 0 0 0 0

808 20 LightingOriginEffect 0 141313 20 LightingOriginEffect 20 LightingOriginEffect 0 0 0 0 742 0 3 739 740 741 0 0 1 0 794 0 0 0 0 0

809 15 TextureStages * 0 8576 15 TextureStages * 15 TextureStages * 0 0 743 0 0 0 0 0 0 0 0 0 0

810 21 TextureStages const * 0 8576 21 TextureStages const * 21 TextureStages const * 0 0 811 0 0 0 0 0 0 0 0 0 0

811 19 TextureStages const 0 8832 19 TextureStages const 19 TextureStages const 0 0 743 0 0 0 0 0 0 0 0 0 0

812 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 336
/**
 * Defines the properties of a named stage of the multitexture pipeline.  The
 * TextureAttrib will associated a number of these stages with Texture
 * objects, and the GSG will render geometry by sorting all of the currently
 * active TextureStages in order and then issuing the appropriate rendering
 * calls to activate them.
 */

813 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

814 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 812 0 0 0 0 0 0 0 0 0 0

815 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 816 0 0 0 0 0 0 0 0 0 0

816 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 744 0 0 0 0 0 0 0 0 0 0

817 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 744 0 0 0 0 0 0 0 0 0 0

818 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

819 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 820 0 0 0 0 0 0 0 0 0 0

820 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

821 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

822 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

823 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 822 0 0 0 0 0 0 0 0 0 0

824 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

825 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 826 0 0 0 0 0 0 0 0 0 0

826 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 822 0 0 0 0 0 0 0 0 0 0

827 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

828 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 827 0 0 0 0 0 0 0 0 0 0

829 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 747 0 0 0 0 0 0 0 0 0 0

830 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 829 0 0 0 0 0 0 0 0 0 0

831 25 BSPMaterialAttrib const * 0 8576 25 BSPMaterialAttrib const * 25 BSPMaterialAttrib const * 0 0 832 0 0 0 0 0 0 0 0 0 0

832 23 BSPMaterialAttrib const 0 8832 23 BSPMaterialAttrib const 23 BSPMaterialAttrib const 0 0 746 0 0 0 0 0 0 0 0 0 0

833 20 BoundingKDOP const * 0 8576 20 BoundingKDOP const * 20 BoundingKDOP const * 0 0 834 0 0 0 0 0 0 0 0 0 0

834 18 BoundingKDOP const 0 8832 18 BoundingKDOP const 18 BoundingKDOP const 0 0 749 0 0 0 0 0 0 0 0 0 0

835 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 836 0 0 0 0 0 0 0 0 0 0

836 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

837 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 835 0 0 0 0 0 0 0 0 0 0

838 6 LPlane 0 2105344 6 LPlane 6 LPlane 0 0 839 0 0 0 0 0 0 0 0 0 0

839 7 LPlanef 0 2048 7 LPlanef 7 LPlanef 0 0 0 0 0 0 0 0 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

840 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 838 0 0 0 0 0 0 0 0 0 0

841 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 751 0 0 0 0 0 0 0 0 0 0

842 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 843 0 0 0 0 0 0 0 0 0 0

843 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 751 0 0 0 0 0 0 0 0 0 0

844 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 768 0 0 0 0 0 0 0 0 0 0

845 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 846 0 0 0 0 0 0 0 0 0 0

846 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

847 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 845 0 0 0 0 0 0 0 0 0 0

848 6 LColor 0 2105344 6 LColor 6 LColor 0 0 849 0 0 0 0 0 0 0 0 0 0

849 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 850 0 0 0 0 0 0 0 0 0 0

850 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

851 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 848 0 0 0 0 0 0 0 0 0 0

852 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 752 0 0 0 0 0 0 0 0 0 0

853 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 854 0 0 0 0 0 0 0 0 0 0

854 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 752 0 0 0 0 0 0 0 0 0 0

855 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 753 0 0 0 0 0 0 0 0 0 0

856 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 857 0 0 0 0 0 0 0 0 0 0

857 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 753 0 0 0 0 0 0 0 0 0 0

858 14 BoundingKDOP * 0 8576 14 BoundingKDOP * 14 BoundingKDOP * 0 0 749 0 0 0 0 0 0 0 0 0 0

859 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 860 0 0 0 0 0 0 0 0 0 0

860 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 835 0 0 0 0 0 0 0 0 0 0

861 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 754 0 0 0 0 0 0 0 0 0 0

862 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 863 0 0 0 0 0 0 0 0 0 0

863 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 754 0 0 0 0 0 0 0 0 0 0

864 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

865 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 864 0 0 0 0 0 0 0 0 0 0

866 18 PackResult const * 0 8576 18 PackResult const * 18 PackResult const * 0 0 867 0 0 0 0 0 0 0 0 0 0

867 16 PackResult const 0 8832 16 PackResult const 16 PackResult const 0 0 755 0 0 0 0 0 0 0 0 0 0

868 12 PackResult * 0 8576 12 PackResult * 12 PackResult * 0 0 755 0 0 0 0 0 0 0 0 0 0

869 23 TextureLocation const * 0 8576 23 TextureLocation const * 23 TextureLocation const * 0 0 870 0 0 0 0 0 0 0 0 0 0

870 21 TextureLocation const 0 8832 21 TextureLocation const 21 TextureLocation const 0 0 756 0 0 0 0 0 0 0 0 0 0

871 17 TextureLocation * 0 8576 17 TextureLocation * 17 TextureLocation * 0 0 756 0 0 0 0 0 0 0 0 0 0

872 15 TexturePacker * 0 8576 15 TexturePacker * 15 TexturePacker * 0 0 757 0 0 0 0 0 0 0 0 0 0

873 10 RayTrace * 0 8576 10 RayTrace * 10 RayTrace * 0 0 758 0 0 0 0 0 0 0 0 0 0

874 16 RayTrace const * 0 8576 16 RayTrace const * 16 RayTrace const * 0 0 875 0 0 0 0 0 0 0 0 0 0

875 14 RayTrace const 0 8832 14 RayTrace const 14 RayTrace const 0 0 758 0 0 0 0 0 0 0 0 0 0

876 19 RayTraceHitResult * 0 8576 19 RayTraceHitResult * 19 RayTraceHitResult * 0 0 759 0 0 0 0 0 0 0 0 0 0

877 25 RayTraceHitResult const * 0 8576 25 RayTraceHitResult const * 25 RayTraceHitResult const * 0 0 878 0 0 0 0 0 0 0 0 0 0

878 23 RayTraceHitResult const 0 8832 23 RayTraceHitResult const 23 RayTraceHitResult const 0 0 759 0 0 0 0 0 0 0 0 0 0

879 8 LVector2 0 2105344 8 LVector2 8 LVector2 0 0 880 0 0 0 0 0 0 0 0 0 0

880 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

881 10 LVector2 * 0 8576 10 LVector2 * 10 LVector2 * 0 0 879 0 0 0 0 0 0 0 0 0 0

882 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

883 15 RayTraceScene * 0 8576 15 RayTraceScene * 15 RayTraceScene * 0 0 760 0 0 0 0 0 0 0 0 0 0

884 21 RayTraceScene const * 0 8576 21 RayTraceScene const * 21 RayTraceScene const * 0 0 885 0 0 0 0 0 0 0 0 0 0

885 19 RayTraceScene const 0 8832 19 RayTraceScene const 19 RayTraceScene const 0 0 760 0 0 0 0 0 0 0 0 0 0

886 18 RayTraceGeometry * 0 8576 18 RayTraceGeometry * 18 RayTraceGeometry * 0 0 763 0 0 0 0 0 0 0 0 0 0

887 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 888 0 0 0 0 0 0 0 0 0 0

888 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 889 0 0 0 0 0 0 0 0 0 0

889 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 890 0 0 0 0 0 0 0 0 0 0

890 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

891 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 892 0 0 0 0 0 0 0 0 0 0

892 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 845 0 0 0 0 0 0 0 0 0 0

893 24 RayTraceGeometry const * 0 8576 24 RayTraceGeometry const * 24 RayTraceGeometry const * 0 0 894 0 0 0 0 0 0 0 0 0 0

894 22 RayTraceGeometry const 0 8832 22 RayTraceGeometry const 22 RayTraceGeometry const 0 0 763 0 0 0 0 0 0 0 0 0 0

895 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 889 0 0 0 0 0 0 0 0 0 0

896 22 RayTraceTriangleMesh * 0 8576 22 RayTraceTriangleMesh * 22 RayTraceTriangleMesh * 0 0 765 0 0 0 0 0 0 0 0 0 0

897 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 898 0 0 0 0 0 0 0 0 0 0

898 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 899 0 0 0 0 0 0 0 0 0 0

899 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

900 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 901 0 0 0 0 0 0 0 0 0 0

901 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 902 0 0 0 0 0 0 0 0 0 0

902 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

903 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 904 0 0 0 0 0 0 0 0 0 0

904 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 766 0 0 0 0 0 0 0 0 0 0

905 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 906 0 0 0 0 0 0 0 0 0 0

906 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 907 0 0 0 0 0 0 0 0 0 0

907 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

908 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 909 0 0 0 0 0 0 0 0 0 0

909 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 768 0 0 0 0 0 0 0 0 0 0

910 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 821 0 0 0 0 0 0 0 0 0 0

911 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 912 0 0 0 0 0 0 0 0 0 0

912 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

913 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 914 0 0 0 0 0 0 0 0 0 0

914 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 864 0 0 0 0 0 0 0 0 0 0

915 20 BSPShaderGenerator * 0 8576 20 BSPShaderGenerator * 20 BSPShaderGenerator * 0 0 777 0 0 0 0 0 0 0 0 0 0

916 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 917 0 0 0 0 0 0 0 0 0 0

917 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 918 0 0 0 0 0 0 0 0 0 0

918 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 919 0 0 0 0 0 0 0 0 0 0

919 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

920 15 LColorf const * 0 8576 15 LColorf const * 15 LColorf const * 0 0 921 0 0 0 0 0 0 0 0 0 0

921 13 LColorf const 0 8832 13 LColorf const 13 LColorf const 0 0 849 0 0 0 0 0 0 0 0 0 0

922 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

923 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 922 0 0 0 0 0 0 0 0 0 0

924 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 925 0 0 0 0 0 0 0 0 0 0

925 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 926 0 0 0 0 0 0 0 0 0 0

926 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

927 9 int const 0 8832 9 int const 9 int const 0 0 748 0 0 0 0 0 0 0 0 0 0

928 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 929 0 0 0 0 0 0 0 0 0 0

929 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 930 0 0 0 0 0 0 0 0 0 0

930 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

931 9 LTexCoord 0 2105344 9 LTexCoord 9 LTexCoord 0 0 932 0 0 0 0 0 0 0 0 0 0

932 10 LTexCoordf 0 2105344 10 LTexCoordf 10 LTexCoordf 0 0 919 0 0 0 0 0 0 0 0 0 0

933 11 LTexCoord * 0 8576 11 LTexCoord * 11 LTexCoord * 0 0 931 0 0 0 0 0 0 0 0 0 0

934 20 ShaderPermutations * 0 8576 20 ShaderPermutations * 20 ShaderPermutations * 0 0 770 0 0 0 0 0 0 0 0 0 0

935 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 936 0 0 0 0 0 0 0 0 0 0

936 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 937 0 0 0 0 0 0 0 0 0 0

937 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

938 26 ShaderPermutations const * 0 8576 26 ShaderPermutations const * 26 ShaderPermutations const * 0 0 939 0 0 0 0 0 0 0 0 0 0

939 24 ShaderPermutations const 0 8832 24 ShaderPermutations const 24 ShaderPermutations const 0 0 770 0 0 0 0 0 0 0 0 0 0

940 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 771 0 0 0 0 0 0 0 0 0 0

941 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 761 0 0 0 0 0 0 0 0 0 0

942 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 772 0 0 0 0 0 0 0 0 0 0

943 25 PlanarReflections const * 0 8576 25 PlanarReflections const * 25 PlanarReflections const * 0 0 944 0 0 0 0 0 0 0 0 0 0

944 23 PlanarReflections const 0 8832 23 PlanarReflections const 23 PlanarReflections const 0 0 773 0 0 0 0 0 0 0 0 0 0

945 19 PlanarReflections * 0 8576 19 PlanarReflections * 19 PlanarReflections * 0 0 773 0 0 0 0 0 0 0 0 0 0

946 26 BSPShaderGenerator const * 0 8576 26 BSPShaderGenerator const * 26 BSPShaderGenerator const * 0 0 947 0 0 0 0 0 0 0 0 0 0

947 24 BSPShaderGenerator const 0 8832 24 BSPShaderGenerator const 24 BSPShaderGenerator const 0 0 777 0 0 0 0 0 0 0 0 0 0

948 16 GraphicsOutput * 0 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 949 0 0 0 0 0 0 0 0 0 0

949 14 GraphicsOutput 0 2048 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 0 0 0 0 0 0 0 0 727
/**
 * This is a base class for the various different classes that represent the
 * result of a frame of rendering.  The most common kind of GraphicsOutput is
 * a GraphicsWindow, which is a real-time window on the desktop, but another
 * example is GraphicsBuffer, which is an offscreen buffer.
 *
 * The actual rendering, and anything associated with the graphics context
 * itself, is managed by the associated GraphicsStateGuardian (which might
 * output to multiple GraphicsOutput objects).
 *
 * GraphicsOutputs are not actually writable to bam files, of course, but they
 * may be passed as event parameters, so they inherit from
 * TypedWritableReferenceCount instead of TypedReferenceCount for that
 * convenience.
 */

950 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 951 0 0 0 0 0 0 0 0 0 0

951 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

952 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 953 0 0 0 0 0 0 0 0 0 0

953 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

954 5 Fog * 0 8576 5 Fog * 5 Fog * 0 0 955 0 0 0 0 0 0 0 0 0 0

955 3 Fog 0 2048 3 Fog 3 Fog 0 0 0 0 0 0 0 0 0 0 0 0 782
/**
 * Specifies how atmospheric fog effects are applied to geometry.  The Fog
 * object is now a PandaNode, which means it can be used similarly to a Light
 * to define effects relative to a particular coordinate system within the
 * scene graph.
 *
 * In exponential mode, the fog effects are always camera-relative, and it
 * does not matter where the Fog node is parented.  However, in linear mode,
 * the onset and opaque distances are defined as offsets along the local
 * forward axis (e.g.  the Y axis).  This allows the fog effect to be
 * localized to a particular region in space, rather than always camera-
 * relative.  If the fog object is not parented to any node, it is used to
 * generate traditonal camera-relative fog, as if it were parented to the
 * camera.
 */

956 14 PTA_LVecBase4f 0 2105344 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 957 0 0 0 0 0 0 0 0 0 0

957 37 PointerToArray< UnalignedLVecBase4f > 0 2048 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 0 0 0 0 0 0 0 0 0 0

958 16 PTA_LVecBase4f * 0 8576 16 PTA_LVecBase4f * 16 PTA_LVecBase4f * 0 0 956 0 0 0 0 0 0 0 0 0 0

959 9 PTA_float 0 2105344 9 PTA_float 9 PTA_float 0 0 960 0 0 0 0 0 0 0 0 0 0

960 23 PointerToArray< float > 0 2048 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

961 11 PTA_float * 0 8576 11 PTA_float * 11 PTA_float * 0 0 959 0 0 0 0 0 0 0 0 0 0

962 12 Shader const 0 8832 12 Shader const 12 Shader const 0 0 963 0 0 0 0 0 0 0 0 0 0

963 6 Shader 0 2048 6 Shader 6 Shader 0 0 0 0 0 0 0 0 0 0 0 0 8
/**

 */

964 18 ShaderSpec const * 0 8576 18 ShaderSpec const * 18 ShaderSpec const * 0 0 965 0 0 0 0 0 0 0 0 0 0

965 16 ShaderSpec const 0 8832 16 ShaderSpec const 16 ShaderSpec const 0 0 771 0 0 0 0 0 0 0 0 0 0

966 14 Shader const * 0 8576 14 Shader const * 14 Shader const * 0 0 962 0 0 0 0 0 0 0 0 0 0

967 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 968 0 0 0 0 0 0 0 0 0 0

968 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 779 0 0 0 0 0 0 0 0 0 0

969 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 779 0 0 0 0 0 0 0 0 0 0

970 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 780 0 0 0 0 0 0 0 0 0 0

971 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 972 0 0 0 0 0 0 0 0 0 0

972 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 781 0 0 0 0 0 0 0 0 0 0

973 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 781 0 0 0 0 0 0 0 0 0 0

974 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 975 0 0 0 0 0 0 0 0 0 0

975 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 782 0 0 0 0 0 0 0 0 0 0

976 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 782 0 0 0 0 0 0 0 0 0 0

977 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 978 0 0 0 0 0 0 0 0 0 0

978 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 783 0 0 0 0 0 0 0 0 0 0

979 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 783 0 0 0 0 0 0 0 0 0 0

980 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 981 0 0 0 0 0 0 0 0 0 0

981 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 785 0 0 0 0 0 0 0 0 0 0

982 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 785 0 0 0 0 0 0 0 0 0 0

983 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 787 0 0 0 0 0 0 0 0 0 0

984 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 788 0 0 0 0 0 0 0 0 0 0

985 18 UnlitGenericSpec * 0 8576 18 UnlitGenericSpec * 18 UnlitGenericSpec * 0 0 789 0 0 0 0 0 0 0 0 0 0

986 16 UnlitNoMatSpec * 0 8576 16 UnlitNoMatSpec * 16 UnlitNoMatSpec * 0 0 790 0 0 0 0 0 0 0 0 0 0

987 15 CSMRenderSpec * 0 8576 15 CSMRenderSpec * 15 CSMRenderSpec * 0 0 791 0 0 0 0 0 0 0 0 0 0

988 12 SkyBoxSpec * 0 8576 12 SkyBoxSpec * 12 SkyBoxSpec * 0 0 792 0 0 0 0 0 0 0 0 0 0

989 18 RenderEffect const 0 8832 18 RenderEffect const 18 RenderEffect const 0 0 794 0 0 0 0 0 0 0 0 0 0

990 20 RenderEffect const * 0 8576 20 RenderEffect const * 20 RenderEffect const * 0 0 989 0 0 0 0 0 0 0 0 0 0

991 22 Audio3DManager const * 0 8576 22 Audio3DManager const * 22 Audio3DManager const * 0 0 992 0 0 0 0 0 0 0 0 0 0

992 20 Audio3DManager const 0 8832 20 Audio3DManager const 20 Audio3DManager const 0 0 795 0 0 0 0 0 0 0 0 0 0

993 16 Audio3DManager * 0 8576 16 Audio3DManager * 16 Audio3DManager * 0 0 795 0 0 0 0 0 0 0 0 0 0

994 14 AudioManager * 0 8576 14 AudioManager * 14 AudioManager * 0 0 995 0 0 0 0 0 0 0 0 0 0

995 12 AudioManager 0 2048 12 AudioManager 12 AudioManager 0 0 0 0 0 0 0 0 0 0 0 0 0

996 12 AudioSound * 0 8576 12 AudioSound * 12 AudioSound * 0 0 997 0 0 0 0 0 0 0 0 0 0

997 10 AudioSound 0 2048 10 AudioSound 10 AudioSound 0 0 0 0 0 0 0 0 0 0 0 0 0

998 8 CIOLib * 0 8576 8 CIOLib * 8 CIOLib * 0 0 796 0 0 0 0 0 0 0 0 0 0

999 14 CIOLib const * 0 8576 14 CIOLib const * 14 CIOLib const * 0 0 1000 0 0 0 0 0 0 0 0 0 0

1000 12 CIOLib const 0 8832 12 CIOLib const 12 CIOLib const 0 0 796 0 0 0 0 0 0 0 0 0 0

1001 19 DecalModulateSpec * 0 8576 19 DecalModulateSpec * 19 DecalModulateSpec * 0 0 797 0 0 0 0 0 0 0 0 0 0

1002 16 GeomNode const * 0 8576 16 GeomNode const * 16 GeomNode const * 0 0 1003 0 0 0 0 0 0 0 0 0 0

1003 14 GeomNode const 0 8832 14 GeomNode const 14 GeomNode const 0 0 799 0 0 0 0 0 0 0 0 0 0

1004 10 GlowNode * 0 8576 10 GlowNode * 10 GlowNode * 0 0 798 0 0 0 0 0 0 0 0 0 0

1005 16 GlowNode const * 0 8576 16 GlowNode const * 16 GlowNode const * 0 0 1006 0 0 0 0 0 0 0 0 0 0

1006 14 GlowNode const 0 8832 14 GlowNode const 14 GlowNode const 0 0 798 0 0 0 0 0 0 0 0 0 0

1007 19 PostProcessEffect * 0 8576 19 PostProcessEffect * 19 PostProcessEffect * 0 0 800 0 0 0 0 0 0 0 0 0 0

1008 17 PostProcessPass * 0 8576 17 PostProcessPass * 17 PostProcessPass * 0 0 802 0 0 0 0 0 0 0 0 0 0

1009 13 PostProcess * 0 8576 13 PostProcess * 13 PostProcess * 0 0 804 0 0 0 0 0 0 0 0 0 0

1010 29 FrameBufferProperties const * 0 8576 29 FrameBufferProperties const * 29 FrameBufferProperties const * 0 0 1011 0 0 0 0 0 0 0 0 0 0

1011 27 FrameBufferProperties const 0 8832 27 FrameBufferProperties const 27 FrameBufferProperties const 0 0 1012 0 0 0 0 0 0 0 0 0 0

1012 21 FrameBufferProperties 0 2048 21 FrameBufferProperties 21 FrameBufferProperties 0 0 0 0 0 0 0 0 0 0 0 0 132
/**
 * A container for the various kinds of properties we might ask to have on a
 * graphics frameBuffer before we create a GSG.
 */

1013 17 LVector2i const * 0 8576 17 LVector2i const * 17 LVector2i const * 0 0 1014 0 0 0 0 0 0 0 0 0 0

1014 15 LVector2i const 0 8832 15 LVector2i const 15 LVector2i const 0 0 1015 0 0 0 0 0 0 0 0 0 0

1015 9 LVector2i 0 2048 9 LVector2i 9 LVector2i 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

1016 23 PostProcessPass const * 0 8576 23 PostProcessPass const * 23 PostProcessPass const * 0 0 1017 0 0 0 0 0 0 0 0 0 0

1017 21 PostProcessPass const 0 8832 21 PostProcessPass const 21 PostProcessPass const 0 0 802 0 0 0 0 0 0 0 0 0 0

1018 11 LVector2i * 0 8576 11 LVector2i * 11 LVector2i * 0 0 1015 0 0 0 0 0 0 0 0 0 0

1019 23 FrameBufferProperties * 0 8576 23 FrameBufferProperties * 23 FrameBufferProperties * 0 0 1012 0 0 0 0 0 0 0 0 0 0

1020 22 PostProcessScenePass * 0 8576 22 PostProcessScenePass * 22 PostProcessScenePass * 0 0 803 0 0 0 0 0 0 0 0 0 0

1021 28 PostProcessScenePass const * 0 8576 28 PostProcessScenePass const * 28 PostProcessScenePass const * 0 0 1022 0 0 0 0 0 0 0 0 0 0

1022 26 PostProcessScenePass const 0 8832 26 PostProcessScenePass const 26 PostProcessScenePass const 0 0 803 0 0 0 0 0 0 0 0 0 0

1023 19 RenderState const * 0 8576 19 RenderState const * 19 RenderState const * 0 0 1024 0 0 0 0 0 0 0 0 0 0

1024 17 RenderState const 0 8832 17 RenderState const 17 RenderState const 0 0 1025 0 0 0 0 0 0 0 0 0 0

1025 11 RenderState 0 2048 11 RenderState 11 RenderState 0 0 0 0 0 0 0 0 0 0 0 0 340
/**
 * This represents a unique collection of RenderAttrib objects that correspond
 * to a particular renderable state.
 *
 * You should not attempt to create or modify a RenderState object directly.
 * Instead, call one of the make() functions to create one for you.  And
 * instead of modifying a RenderState object, create a new one.
 */

1026 19 PostProcess const * 0 8576 19 PostProcess const * 19 PostProcess const * 0 0 1027 0 0 0 0 0 0 0 0 0 0

1027 17 PostProcess const 0 8832 17 PostProcess const 17 PostProcess const 0 0 804 0 0 0 0 0 0 0 0 0 0

1028 13 DisplayRegion 0 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 399
/**
 * A rectangular subregion within a window for rendering into.  Typically,
 * there is one DisplayRegion that covers the whole window, but you may also
 * create smaller DisplayRegions for having different regions within the
 * window that represent different scenes.  You may also stack up
 * DisplayRegions like panes of glass, usually for layering 2-d interfaces on
 * top of a 3-d scene.
 */

1029 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 1028 0 0 0 0 0 0 0 0 0 0

1030 16 DrawableRegion * 0 8576 16 DrawableRegion * 16 DrawableRegion * 0 0 1031 0 0 0 0 0 0 0 0 0 0

1031 14 DrawableRegion 0 2048 14 DrawableRegion 14 DrawableRegion 0 0 0 0 0 0 0 0 0 0 0 0 389
/**
 * This is a base class for GraphicsWindow (actually, GraphicsOutput) and
 * DisplayRegion, both of which are conceptually rectangular regions into
 * which drawing commands may be issued.  Sometimes you want to deal with a
 * single display region, and sometimes you want to deal with the whole window
 * at once, particularly for issuing clear commands and capturing screenshots.
 */

1032 15 HDRPass const * 0 8576 15 HDRPass const * 15 HDRPass const * 0 0 1033 0 0 0 0 0 0 0 0 0 0

1033 13 HDRPass const 0 8832 13 HDRPass const 13 HDRPass const 0 0 805 0 0 0 0 0 0 0 0 0 0

1034 9 HDRPass * 0 8576 9 HDRPass * 9 HDRPass * 0 0 805 0 0 0 0 0 0 0 0 0 0

1035 11 HDREffect * 0 8576 11 HDREffect * 11 HDREffect * 0 0 806 0 0 0 0 0 0 0 0 0 0

1036 17 HDREffect const * 0 8576 17 HDREffect const * 17 HDREffect const * 0 0 1037 0 0 0 0 0 0 0 0 0 0

1037 15 HDREffect const 0 8832 15 HDREffect const 15 HDREffect const 0 0 806 0 0 0 0 0 0 0 0 0 0

1038 13 BloomEffect * 0 8576 13 BloomEffect * 13 BloomEffect * 0 0 807 0 0 0 0 0 0 0 0 0 0

1039 28 LightingOriginEffect const * 0 8576 28 LightingOriginEffect const * 28 LightingOriginEffect const * 0 0 1040 0 0 0 0 0 0 0 0 0 0

1040 26 LightingOriginEffect const 0 8832 26 LightingOriginEffect const 26 LightingOriginEffect const 0 0 808 0 0 0 0 0 0 0 0 0 0

0
2
1041 10 class_slot 0 2 748 400 0 0 0 0 0 0 0 29 BSPMaterialAttrib::class_slot 0

1042 10 class_slot 0 2 748 495 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

0
