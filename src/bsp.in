1575690119
3 3
3 bsp 4 t5GT 3 bsp 
393
370 3 get 0 4 763 18 TextureStages::get 0 2 3 4 0
159
static TextureStage *TextureStages::get(std::string const &name);
static TextureStage *TextureStages::get(std::string const &name, std::string const &uv_name);

371 15 get_basetexture 0 4 763 30 TextureStages::get_basetexture 0 1 5 0
58
static TextureStage *TextureStages::get_basetexture(void);

372 12 get_lightmap 0 4 763 27 TextureStages::get_lightmap 0 1 6 0
55
static TextureStage *TextureStages::get_lightmap(void);

373 19 get_bumped_lightmap 0 4 763 34 TextureStages::get_bumped_lightmap 0 1 7 0
62
static TextureStage *TextureStages::get_bumped_lightmap(void);

374 13 get_spheremap 0 4 763 28 TextureStages::get_spheremap 0 1 8 0
56
static TextureStage *TextureStages::get_spheremap(void);

375 11 get_cubemap 0 4 763 26 TextureStages::get_cubemap 0 1 9 0
54
static TextureStage *TextureStages::get_cubemap(void);

376 13 get_normalmap 0 4 763 28 TextureStages::get_normalmap 0 1 10 0
56
static TextureStage *TextureStages::get_normalmap(void);

377 13 get_heightmap 0 4 763 28 TextureStages::get_heightmap 0 1 11 0
56
static TextureStage *TextureStages::get_heightmap(void);

378 12 get_glossmap 0 4 763 27 TextureStages::get_glossmap 0 1 12 0
55
static TextureStage *TextureStages::get_glossmap(void);

379 11 get_glowmap 0 4 763 26 TextureStages::get_glowmap 0 1 13 0
54
static TextureStage *TextureStages::get_glowmap(void);

380 13 TextureStages 0 4 763 28 TextureStages::TextureStages 0 2 1 2 0
122
inline TextureStages::TextureStages(void) = default;
inline TextureStages::TextureStages(TextureStages const &) = default;

381 14 ~TextureStages 0 4 763 29 TextureStages::~TextureStages 0 0 0
36
TextureStages::~TextureStages(void);

382 11 BSPMaterial 0 4 764 24 BSPMaterial::BSPMaterial 0 2 14 15 0
139
inline explicit BSPMaterial::BSPMaterial(std::string const &name = "UnlitNoMat");
inline BSPMaterial::BSPMaterial(BSPMaterial const &copy);

383 10 operator = 0 4 764 23 BSPMaterial::operator = 0 1 16 0
61
inline void BSPMaterial::operator =(BSPMaterial const &copy);

384 12 set_keyvalue 0 4 764 25 BSPMaterial::set_keyvalue 0 1 17 0
88
inline void BSPMaterial::set_keyvalue(std::string const &key, std::string const &value);

385 12 get_keyvalue 0 4 764 25 BSPMaterial::get_keyvalue 0 1 18 0
75
inline std::string BSPMaterial::get_keyvalue(std::string const &key) const;

386 17 get_num_keyvalues 0 4 764 30 BSPMaterial::get_num_keyvalues 0 1 19 0
62
inline std::size_t BSPMaterial::get_num_keyvalues(void) const;

387 7 get_key 0 4 764 20 BSPMaterial::get_key 0 1 20 0
68
inline std::string const &BSPMaterial::get_key(std::size_t i) const;

388 9 get_value 0 4 764 22 BSPMaterial::get_value 0 1 21 0
70
inline std::string const &BSPMaterial::get_value(std::size_t i) const;

389 16 get_keyvalue_int 0 4 764 29 BSPMaterial::get_keyvalue_int 0 1 22 0
71
inline int BSPMaterial::get_keyvalue_int(std::string const &key) const;

390 18 get_keyvalue_float 0 4 764 31 BSPMaterial::get_keyvalue_float 0 1 23 0
75
inline float BSPMaterial::get_keyvalue_float(std::string const &key) const;

391 10 set_shader 0 4 764 23 BSPMaterial::set_shader 0 1 24 0
68
inline void BSPMaterial::set_shader(std::string const &shader_name);

392 10 get_shader 0 4 764 23 BSPMaterial::get_shader 0 1 25 0
55
inline std::string BSPMaterial::get_shader(void) const;

393 8 get_file 0 4 764 21 BSPMaterial::get_file 0 1 26 0
50
inline Filename BSPMaterial::get_file(void) const;

394 12 has_keyvalue 0 4 764 25 BSPMaterial::has_keyvalue 0 1 27 0
68
inline bool BSPMaterial::has_keyvalue(std::string const &key) const;

395 15 has_env_cubemap 0 4 764 28 BSPMaterial::has_env_cubemap 0 1 28 0
53
inline bool BSPMaterial::has_env_cubemap(void) const;

396 16 has_transparency 0 4 764 29 BSPMaterial::has_transparency 0 1 29 0
54
inline bool BSPMaterial::has_transparency(void) const;

397 16 get_surface_prop 0 4 764 29 BSPMaterial::get_surface_prop 0 1 30 0
61
inline std::string BSPMaterial::get_surface_prop(void) const;

398 12 get_contents 0 4 764 25 BSPMaterial::get_contents 0 1 31 0
57
inline std::string BSPMaterial::get_contents(void) const;

399 14 is_lightmapped 0 4 764 27 BSPMaterial::is_lightmapped 0 1 32 0
52
inline bool BSPMaterial::is_lightmapped(void) const;

400 11 has_bumpmap 0 4 764 24 BSPMaterial::has_bumpmap 0 1 33 0
49
inline bool BSPMaterial::has_bumpmap(void) const;

401 13 get_from_file 0 4 764 26 BSPMaterial::get_from_file 0 1 34 0
75
static BSPMaterial const *BSPMaterial::get_from_file(Filename const &file);

402 14 get_class_type 0 4 764 27 BSPMaterial::get_class_type 0 1 35 0
52
static TypeHandle BSPMaterial::get_class_type(void);

403 12 ~BSPMaterial 0 4 764 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

404 4 make 0 4 766 23 BSPMaterialAttrib::make 0 1 36 0
86
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make(BSPMaterial const *mat);

405 20 make_override_shader 0 4 766 39 BSPMaterialAttrib::make_override_shader 0 1 37 0
102
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_override_shader(BSPMaterial const *mat);

406 12 make_default 0 4 766 31 BSPMaterialAttrib::make_default 0 1 38 0
76
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_default(void);

407 19 get_override_shader 0 4 766 38 BSPMaterialAttrib::get_override_shader 0 1 39 0
70
inline std::string BSPMaterialAttrib::get_override_shader(void) const;

408 19 has_override_shader 0 4 766 38 BSPMaterialAttrib::has_override_shader 0 1 40 0
63
inline bool BSPMaterialAttrib::has_override_shader(void) const;

409 12 get_material 0 4 766 31 BSPMaterialAttrib::get_material 0 1 41 0
70
inline BSPMaterial const *BSPMaterialAttrib::get_material(void) const;

410 14 get_class_slot 0 4 766 33 BSPMaterialAttrib::get_class_slot 0 1 42 0
51
static int BSPMaterialAttrib::get_class_slot(void);

411 14 get_class_type 0 4 766 33 BSPMaterialAttrib::get_class_type 0 1 43 0
58
static TypeHandle BSPMaterialAttrib::get_class_type(void);

412 18 ~BSPMaterialAttrib 0 4 766 37 BSPMaterialAttrib::~BSPMaterialAttrib 0 0 0
44
BSPMaterialAttrib::~BSPMaterialAttrib(void);

413 14 get_num_points 0 4 769 28 BoundingKDOP::get_num_points 0 1 44 0
60
inline std::size_t BoundingKDOP::get_num_points(void) const;

414 9 get_point 0 4 769 23 BoundingKDOP::get_point 0 1 45 0
52
inline LPoint3 BoundingKDOP::get_point(int n) const;

415 14 get_num_planes 0 4 769 28 BoundingKDOP::get_num_planes 0 1 46 0
60
inline std::size_t BoundingKDOP::get_num_planes(void) const;

416 9 get_plane 0 4 769 23 BoundingKDOP::get_plane 0 1 47 0
51
inline LPlane BoundingKDOP::get_plane(int n) const;

417 14 get_class_type 0 4 769 28 BoundingKDOP::get_class_type 0 1 48 0
53
static TypeHandle BoundingKDOP::get_class_type(void);

418 13 ~BoundingKDOP 0 4 769 27 BoundingKDOP::~BoundingKDOP 0 0 0
34
BoundingKDOP::~BoundingKDOP(void);

419 14 get_class_type 0 4 771 27 CBaseEntity::get_class_type 0 1 51 0
52
static TypeHandle CBaseEntity::get_class_type(void);

420 11 CBaseEntity 0 4 771 24 CBaseEntity::CBaseEntity 0 2 49 50 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

421 10 get_loader 0 4 771 23 CBaseEntity::get_loader 0 1 52 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

422 16 get_entity_value 0 4 771 29 CBaseEntity::get_entity_value 0 1 53 0
79
inline std::string CBaseEntity::get_entity_value(std::string const &key) const;

423 23 get_entity_value_vector 0 4 771 36 CBaseEntity::get_entity_value_vector 0 1 54 0
76
LVector3 CBaseEntity::get_entity_value_vector(std::string const &key) const;

424 22 get_entity_value_color 0 4 771 35 CBaseEntity::get_entity_value_color 0 1 55 0
92
LColor CBaseEntity::get_entity_value_color(std::string const &key, bool scale = true) const;

425 13 get_classname 0 4 771 26 CBaseEntity::get_classname 0 1 56 0
58
inline std::string CBaseEntity::get_classname(void) const;

426 14 get_targetname 0 4 771 27 CBaseEntity::get_targetname 0 1 57 0
59
inline std::string CBaseEntity::get_targetname(void) const;

427 14 get_bsp_entnum 0 4 771 27 CBaseEntity::get_bsp_entnum 0 1 58 0
51
inline int CBaseEntity::get_bsp_entnum(void) const;

428 12 ~CBaseEntity 0 4 771 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

429 14 get_class_type 0 4 772 28 CPointEntity::get_class_type 0 1 61 0
53
static TypeHandle CPointEntity::get_class_type(void);

430 12 CPointEntity 0 4 772 26 CPointEntity::CPointEntity 0 2 59 60 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

431 10 get_origin 0 4 772 24 CPointEntity::get_origin 0 1 62 0
45
LPoint3 CPointEntity::get_origin(void) const;

432 10 get_angles 0 4 772 24 CPointEntity::get_angles 0 1 63 0
46
LVector3 CPointEntity::get_angles(void) const;

433 13 ~CPointEntity 0 4 772 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

434 14 get_class_type 0 4 773 29 CBoundsEntity::get_class_type 0 1 66 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

435 13 CBoundsEntity 0 4 773 28 CBoundsEntity::CBoundsEntity 0 2 64 65 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

436 10 get_bounds 0 4 773 25 CBoundsEntity::get_bounds 0 1 67 0
52
BoundingKDOP *CBoundsEntity::get_bounds(void) const;

437 9 is_inside 0 4 773 24 CBoundsEntity::is_inside 0 1 68 0
56
bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

438 13 fillin_bounds 0 4 773 28 CBoundsEntity::fillin_bounds 0 1 69 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

439 14 ~CBoundsEntity 0 4 773 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

440 14 get_class_type 0 4 774 28 CBrushEntity::get_class_type 0 1 72 0
53
static TypeHandle CBrushEntity::get_class_type(void);

441 12 CBrushEntity 0 4 774 26 CBrushEntity::CBrushEntity 0 2 70 71 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

442 12 get_model_np 0 4 774 26 CBrushEntity::get_model_np 0 1 73 0
48
NodePath CBrushEntity::get_model_np(void) const;

443 16 get_model_bounds 0 4 774 30 CBrushEntity::get_model_bounds 0 1 74 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

444 13 ~CBrushEntity 0 4 774 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

445 9 get_width 0 4 775 21 PackResult::get_width 0 1 76 0
45
inline int PackResult::get_width(void) const;

446 10 get_height 0 4 775 22 PackResult::get_height 0 1 77 0
46
inline int PackResult::get_height(void) const;

447 15 get_unused_area 0 4 775 27 PackResult::get_unused_area 0 1 78 0
51
inline int PackResult::get_unused_area(void) const;

448 10 PackResult 0 4 775 22 PackResult::PackResult 0 1 75 0
60
inline PackResult::PackResult(PackResult const &) = default;

449 11 ~PackResult 0 4 775 23 PackResult::~PackResult 0 0 0
30
PackResult::~PackResult(void);

450 5 get_x 0 4 776 22 TextureLocation::get_x 0 1 80 0
46
inline int TextureLocation::get_x(void) const;

451 5 get_y 0 4 776 22 TextureLocation::get_y 0 1 81 0
46
inline int TextureLocation::get_y(void) const;

452 9 get_width 0 4 776 26 TextureLocation::get_width 0 1 82 0
50
inline int TextureLocation::get_width(void) const;

453 10 get_height 0 4 776 27 TextureLocation::get_height 0 1 83 0
51
inline int TextureLocation::get_height(void) const;

454 11 get_rotated 0 4 776 28 TextureLocation::get_rotated 0 1 84 0
53
inline bool TextureLocation::get_rotated(void) const;

455 15 TextureLocation 0 4 776 32 TextureLocation::TextureLocation 0 1 79 0
75
inline TextureLocation::TextureLocation(TextureLocation const &) = default;

456 16 ~TextureLocation 0 4 776 33 TextureLocation::~TextureLocation 0 0 0
40
TextureLocation::~TextureLocation(void);

457 15 getTextureCount 0 6 777 30 TexturePacker::getTextureCount 0 1 85 0
53
virtual int TexturePacker::getTextureCount(void) = 0;

458 15 setTextureCount 0 6 777 30 TexturePacker::setTextureCount 0 1 86 35
// number of textures to consider..
60
virtual void TexturePacker::setTextureCount(int tcount) = 0;

459 10 addTexture 0 6 777 25 TexturePacker::addTexture 0 1 87 21
// add textures 0 - n
61
virtual void TexturePacker::addTexture(int wid, int hit) = 0;

460 15 wouldTextureFit 0 6 777 30 TexturePacker::wouldTextureFit 0 1 88 0
135
virtual bool TexturePacker::wouldTextureFit(int wid, int hit, bool forcePowerOfTwo, bool onePixelBorder, int max_wid, int max_hit) = 0;

461 13 addNewTexture 0 6 777 28 TexturePacker::addNewTexture 0 1 89 0
64
virtual void TexturePacker::addNewTexture(int wid, int hit) = 0;

462 12 packTextures 0 6 777 27 TexturePacker::packTextures 0 1 90 74
// pack the textures, the return code is the amount of wasted/unused area.
94
virtual PackResult TexturePacker::packTextures(bool forcePowerOfTwo, bool onePixelBorder) = 0;

463 18 getTextureLocation 0 6 777 33 TexturePacker::getTextureLocation 0 1 91 58
// returns true if the texture has been rotated 90 degrees
73
virtual TextureLocation TexturePacker::getTextureLocation(int index) = 0;

464 19 createTexturePacker 0 4 777 34 TexturePacker::createTexturePacker 0 1 92 0
63
static TexturePacker *TexturePacker::createTexturePacker(void);

465 20 releaseTexturePacker 0 4 777 35 TexturePacker::releaseTexturePacker 0 1 93 0
67
static void TexturePacker::releaseTexturePacker(TexturePacker *tp);

466 14 ~TexturePacker 0 4 777 29 TexturePacker::~TexturePacker 0 0 0
36
TexturePacker::~TexturePacker(void);

467 10 initialize 0 4 778 20 RayTrace::initialize 0 1 96 0
39
static void RayTrace::initialize(void);

468 8 destruct 0 4 778 18 RayTrace::destruct 0 1 97 0
37
static void RayTrace::destruct(void);

469 8 RayTrace 0 4 778 18 RayTrace::RayTrace 0 2 94 95 0
97
inline RayTrace::RayTrace(void) = default;
inline RayTrace::RayTrace(RayTrace const &) = default;

470 9 ~RayTrace 0 4 778 19 RayTrace::~RayTrace 0 0 0
26
RayTrace::~RayTrace(void);

471 17 RayTraceHitResult 0 4 779 36 RayTraceHitResult::RayTraceHitResult 0 2 98 99 0
132
inline RayTraceHitResult::RayTraceHitResult(void);
inline RayTraceHitResult::RayTraceHitResult(RayTraceHitResult const &) = default;

472 7 has_hit 0 4 779 26 RayTraceHitResult::has_hit 0 1 100 0
51
inline bool RayTraceHitResult::has_hit(void) const;

473 14 get_hit_normal 0 4 779 33 RayTraceHitResult::get_hit_normal 0 1 101 0
62
inline LVector3 RayTraceHitResult::get_hit_normal(void) const;

474 6 get_uv 0 4 779 25 RayTraceHitResult::get_uv 0 1 102 0
54
inline LVector2 RayTraceHitResult::get_uv(void) const;

475 11 get_prim_id 0 4 779 30 RayTraceHitResult::get_prim_id 0 1 103 0
63
inline unsigned int RayTraceHitResult::get_prim_id(void) const;

476 11 get_geom_id 0 4 779 30 RayTraceHitResult::get_geom_id 0 1 104 0
63
inline unsigned int RayTraceHitResult::get_geom_id(void) const;

477 16 get_hit_fraction 0 4 779 35 RayTraceHitResult::get_hit_fraction 0 1 105 0
61
inline float RayTraceHitResult::get_hit_fraction(void) const;

478 18 ~RayTraceHitResult 0 4 779 37 RayTraceHitResult::~RayTraceHitResult 0 0 0
44
RayTraceHitResult::~RayTraceHitResult(void);

479 13 RayTraceScene 0 4 780 28 RayTraceScene::RayTraceScene 0 2 106 107 0
105
RayTraceScene::RayTraceScene(void);
inline RayTraceScene::RayTraceScene(RayTraceScene const &) = default;

480 12 add_geometry 0 4 780 27 RayTraceScene::add_geometry 0 1 108 0
57
void RayTraceScene::add_geometry(RayTraceGeometry *geom);

481 15 remove_geometry 0 4 780 30 RayTraceScene::remove_geometry 0 1 109 0
60
void RayTraceScene::remove_geometry(RayTraceGeometry *geom);

482 10 remove_all 0 4 780 25 RayTraceScene::remove_all 0 1 110 0
37
void RayTraceScene::remove_all(void);

483 10 trace_line 0 4 780 25 RayTraceScene::trace_line 0 1 111 0
116
inline RayTraceHitResult RayTraceScene::trace_line(LPoint3 const &start, LPoint3 const &end, BitMask32 const &mask);

484 9 trace_ray 0 4 780 24 RayTraceScene::trace_ray 0 1 112 0
132
RayTraceHitResult RayTraceScene::trace_ray(LPoint3 const &origin, LVector3 const &direction, float distance, BitMask32 const &mask);

485 17 set_build_quality 0 4 780 32 RayTraceScene::set_build_quality 0 1 113 0
51
void RayTraceScene::set_build_quality(int quality);

486 6 update 0 4 780 21 RayTraceScene::update 0 1 114 0
33
void RayTraceScene::update(void);

487 12 get_geometry 0 4 780 27 RayTraceScene::get_geometry 0 1 115 0
75
inline RayTraceGeometry *RayTraceScene::get_geometry(unsigned int geom_id);

488 14 get_class_type 0 4 783 32 RayTraceGeometry::get_class_type 0 1 116 0
57
static TypeHandle RayTraceGeometry::get_class_type(void);

489 8 set_mask 0 4 783 26 RayTraceGeometry::set_mask 0 2 117 118 0
114
inline void RayTraceGeometry::set_mask(BitMask32 const &mask);
void RayTraceGeometry::set_mask(unsigned int mask);

490 8 get_mask 0 4 783 26 RayTraceGeometry::get_mask 0 1 119 0
56
inline BitMask32 RayTraceGeometry::get_mask(void) const;

491 11 get_geom_id 0 4 783 29 RayTraceGeometry::get_geom_id 0 1 120 0
62
inline unsigned int RayTraceGeometry::get_geom_id(void) const;

492 17 set_build_quality 0 4 783 35 RayTraceGeometry::set_build_quality 0 1 121 0
54
void RayTraceGeometry::set_build_quality(int quality);

493 5 build 0 6 783 23 RayTraceGeometry::build 0 1 122 0
47
virtual void RayTraceGeometry::build(void) = 0;

494 14 get_class_type 0 4 785 36 RayTraceTriangleMesh::get_class_type 0 1 124 0
61
static TypeHandle RayTraceTriangleMesh::get_class_type(void);

495 20 RayTraceTriangleMesh 0 4 785 42 RayTraceTriangleMesh::RayTraceTriangleMesh 0 1 123 0
73
RayTraceTriangleMesh::RayTraceTriangleMesh(std::string const &name = "");

496 12 add_triangle 0 4 785 34 RayTraceTriangleMesh::add_triangle 0 1 125 0
97
void RayTraceTriangleMesh::add_triangle(LPoint3 const &p1, LPoint3 const &p2, LPoint3 const &p3);

497 23 add_triangles_from_geom 0 4 785 45 RayTraceTriangleMesh::add_triangles_from_geom 0 1 126 0
105
void RayTraceTriangleMesh::add_triangles_from_geom(Geom const *geom, TransformState const *ts = nullptr);

498 21 ~RayTraceTriangleMesh 0 4 785 43 RayTraceTriangleMesh::~RayTraceTriangleMesh 0 0 0
50
RayTraceTriangleMesh::~RayTraceTriangleMesh(void);

499 4 make 0 4 786 19 BSPFaceAttrib::make 0 1 127 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

500 12 make_default 0 4 786 27 BSPFaceAttrib::make_default 0 1 128 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

501 15 make_ignore_pvs 0 4 786 30 BSPFaceAttrib::make_ignore_pvs 0 1 129 0
75
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_ignore_pvs(void);

502 12 get_material 0 4 786 27 BSPFaceAttrib::get_material 0 1 130 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

503 13 get_face_type 0 4 786 28 BSPFaceAttrib::get_face_type 0 1 131 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

504 14 get_ignore_pvs 0 4 786 29 BSPFaceAttrib::get_ignore_pvs 0 1 132 0
54
inline bool BSPFaceAttrib::get_ignore_pvs(void) const;

505 14 get_class_slot 0 4 786 29 BSPFaceAttrib::get_class_slot 0 1 133 0
47
static int BSPFaceAttrib::get_class_slot(void);

506 14 get_class_type 0 4 786 29 BSPFaceAttrib::get_class_type 0 1 134 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

507 14 ~BSPFaceAttrib 0 4 786 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

508 9 BSPLoader 0 4 788 20 BSPLoader::BSPLoader 0 1 135 0
27
BSPLoader::BSPLoader(void);

509 14 remove_physics 0 4 788 25 BSPLoader::remove_physics 0 1 136 0
53
void BSPLoader::remove_physics(NodePath const &root);

510 17 set_physics_world 0 4 788 28 BSPLoader::set_physics_world 0 1 137 0
54
void BSPLoader::set_physics_world(BulletWorld *world);

511 17 get_physics_world 0 4 788 28 BSPLoader::get_physics_world 0 1 138 0
61
inline BulletWorld *BSPLoader::get_physics_world(void) const;

512 24 has_brush_collision_node 0 4 788 35 BSPLoader::has_brush_collision_node 0 1 139 0
83
inline bool BSPLoader::has_brush_collision_node(BulletRigidBodyNode *rbnode) const;

513 28 has_brush_collision_triangle 0 4 788 39 BSPLoader::has_brush_collision_triangle 0 1 140 0
99
inline bool BSPLoader::has_brush_collision_triangle(BulletRigidBodyNode *rbnode, int triangle_idx);

514 27 get_brush_triangle_material 0 4 788 38 BSPLoader::get_brush_triangle_material 0 1 141 0
105
inline std::string BSPLoader::get_brush_triangle_material(BulletRigidBodyNode *rbnode, int triangle_idx);

515 24 get_brush_triangle_model 0 4 788 35 BSPLoader::get_brush_triangle_model 0 1 142 0
94
inline int BSPLoader::get_brush_triangle_model(BulletRigidBodyNode *rbnode, int triangle_idx);

516 29 get_brush_triangle_model_fast 0 4 788 40 BSPLoader::get_brush_triangle_model_fast 0 1 143 0
92
int BSPLoader::get_brush_triangle_model_fast(BulletRigidBodyNode *rbnode, int triangle_idx);

517 16 get_model_origin 0 4 788 27 BSPLoader::get_model_origin 0 1 144 0
57
inline LPoint3 BSPLoader::get_model_origin(int modelnum);

518 18 add_dynamic_entity 0 4 788 29 BSPLoader::add_dynamic_entity 0 1 145 0
52
void BSPLoader::add_dynamic_entity(PyObject *pyent);

519 21 remove_dynamic_entity 0 4 788 32 BSPLoader::remove_dynamic_entity 0 1 146 0
55
void BSPLoader::remove_dynamic_entity(PyObject *pyent);

520 21 mark_entity_preserved 0 4 788 32 BSPLoader::mark_entity_preserved 0 1 147 0
68
void BSPLoader::mark_entity_preserved(int n, bool preserved = true);

521 16 get_num_entities 0 4 788 27 BSPLoader::get_num_entities 0 1 148 0
51
inline int BSPLoader::get_num_entities(void) const;

522 10 get_entity 0 4 788 21 BSPLoader::get_entity 0 1 149 0
45
PyObject *BSPLoader::get_entity(int n) const;

523 23 set_transition_landmark 0 4 788 34 BSPLoader::set_transition_landmark 0 1 150 0
120
inline void BSPLoader::set_transition_landmark(std::string const &name, LVector3 const &origin, LVector3 const &angles);

524 25 clear_transition_landmark 0 4 788 36 BSPLoader::clear_transition_landmark 0 1 151 0
55
inline void BSPLoader::clear_transition_landmark(void);

525 4 read 0 4 788 15 BSPLoader::read 0 1 152 0
71
bool BSPLoader::read(Filename const &file, bool is_transition = false);

526 16 do_optimizations 0 4 788 27 BSPLoader::do_optimizations 0 1 153 0
39
void BSPLoader::do_optimizations(void);

527 14 spawn_entities 0 4 788 25 BSPLoader::spawn_entities 0 1 154 0
37
void BSPLoader::spawn_entities(void);

528 9 set_gamma 0 4 788 20 BSPLoader::set_gamma 0 1 155 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

529 9 get_gamma 0 4 788 20 BSPLoader::get_gamma 0 1 156 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

530 7 set_win 0 4 788 18 BSPLoader::set_win 0 1 157 0
45
void BSPLoader::set_win(GraphicsWindow *win);

531 10 set_camera 0 4 788 21 BSPLoader::set_camera 0 1 158 0
51
void BSPLoader::set_camera(NodePath const &camera);

532 10 set_render 0 4 788 21 BSPLoader::set_render 0 1 159 0
51
void BSPLoader::set_render(NodePath const &render);

533 20 set_shader_generator 0 4 788 31 BSPLoader::set_shader_generator 0 1 160 0
64
void BSPLoader::set_shader_generator(BSPShaderGenerator *shgen);

534 19 set_want_visibility 0 4 788 30 BSPLoader::set_want_visibility 0 1 161 0
47
void BSPLoader::set_want_visibility(bool flag);

535 18 set_want_lightmaps 0 4 788 29 BSPLoader::set_want_lightmaps 0 1 162 0
46
void BSPLoader::set_want_lightmaps(bool flag);

536 16 set_physics_type 0 4 788 27 BSPLoader::set_physics_type 0 1 163 0
43
void BSPLoader::set_physics_type(int type);

537 19 set_visualize_leafs 0 4 788 30 BSPLoader::set_visualize_leafs 0 1 164 0
47
void BSPLoader::set_visualize_leafs(bool flag);

538 18 set_materials_file 0 4 788 29 BSPLoader::set_materials_file 0 1 165 0
57
void BSPLoader::set_materials_file(Filename const &file);

539 13 set_wireframe 0 4 788 24 BSPLoader::set_wireframe 0 1 166 0
41
void BSPLoader::set_wireframe(bool flag);

540 13 get_wireframe 0 4 788 24 BSPLoader::get_wireframe 0 1 167 0
49
inline bool BSPLoader::get_wireframe(void) const;

541 10 get_camera 0 4 788 21 BSPLoader::get_camera 0 1 168 0
50
inline NodePath BSPLoader::get_camera(void) const;

542 11 trace_decal 0 4 788 22 BSPLoader::trace_decal 0 1 169 0
195
inline void BSPLoader::trace_decal(std::string const &decal_material, LPoint2 const &decal_scale, float rotate, LPoint3 const &start, LPoint3 const &end, LColorf const &decal_color = LColorf(1));

543 27 get_closest_cubemap_texture 0 4 788 38 BSPLoader::get_closest_cubemap_texture 0 1 170 0
68
Texture *BSPLoader::get_closest_cubemap_texture(LPoint3 const &pos);

544 14 build_cubemaps 0 4 788 25 BSPLoader::build_cubemaps 0 1 171 0
37
void BSPLoader::build_cubemaps(void);

545 16 set_want_shadows 0 4 788 27 BSPLoader::set_want_shadows 0 1 172 0
44
void BSPLoader::set_want_shadows(bool flag);

546 14 set_shadow_dir 0 4 788 25 BSPLoader::set_shadow_dir 0 1 173 0
52
void BSPLoader::set_shadow_dir(LVector3 const &dir);

547 16 extract_modelnum 0 4 788 27 BSPLoader::extract_modelnum 0 1 174 0
44
int BSPLoader::extract_modelnum(int entnum);

548 16 get_model_bounds 0 4 788 27 BSPLoader::get_model_bounds 0 1 175 0
77
void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

549 28 set_server_entity_dispatcher 0 4 788 39 BSPLoader::set_server_entity_dispatcher 0 1 176 0
67
void BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

550 27 link_server_entity_to_class 0 4 788 38 BSPLoader::link_server_entity_to_class 0 1 177 0
89
void BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

551 6 set_ai 0 4 788 17 BSPLoader::set_ai 0 1 178 0
32
void BSPLoader::set_ai(bool ai);

552 5 is_ai 0 4 788 16 BSPLoader::is_ai 0 1 179 0
41
inline bool BSPLoader::is_ai(void) const;

553 10 trace_line 0 4 788 21 BSPLoader::trace_line 0 1 180 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

554 9 clip_line 0 4 788 20 BSPLoader::clip_line 0 1 181 0
71
LPoint3 BSPLoader::clip_line(LPoint3 const &start, LPoint3 const &end);

555 20 link_entity_to_class 0 4 788 31 BSPLoader::link_entity_to_class 0 1 182 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

556 28 get_py_entity_by_target_name 0 4 788 39 BSPLoader::get_py_entity_by_target_name 0 1 183 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

557 17 find_all_entities 0 4 788 28 BSPLoader::find_all_entities 0 1 184 0
69
PyObject *BSPLoader::find_all_entities(std::string const &classname);

558 20 get_entity_keyvalues 0 4 788 31 BSPLoader::get_entity_keyvalues 0 1 185 0
71
void BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

559 18 link_cent_to_pyent 0 4 788 29 BSPLoader::link_cent_to_pyent 0 1 186 0
63
void BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

560 16 remove_py_entity 0 4 788 27 BSPLoader::remove_py_entity 0 1 187 0
48
void BSPLoader::remove_py_entity(PyObject *ent);

561 9 get_model 0 4 788 20 BSPLoader::get_model 0 1 188 0
50
NodePath BSPLoader::get_model(int modelnum) const;

562 12 get_c_entity 0 4 788 23 BSPLoader::get_c_entity 0 1 189 0
61
CBaseEntity *BSPLoader::get_c_entity(int const entnum) const;

563 9 find_leaf 0 4 788 20 BSPLoader::find_leaf 0 2 190 191 0
116
inline int BSPLoader::find_leaf(NodePath const &np);
int BSPLoader::find_leaf(LPoint3 const &pos, int headnode = 0);

564 9 find_node 0 4 788 20 BSPLoader::find_node 0 1 192 0
45
int BSPLoader::find_node(LPoint3 const &pos);

565 18 is_cluster_visible 0 4 788 29 BSPLoader::is_cluster_visible 0 1 193 0
72
bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

566 15 pvs_bounds_test 0 4 788 26 BSPLoader::pvs_bounds_test 0 1 194 0
109
bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds, unsigned int required_leaf_flags = 0);

567 15 make_net_bounds 0 4 788 26 BSPLoader::make_net_bounds 0 1 195 0
147
ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

568 16 has_active_level 0 4 788 27 BSPLoader::has_active_level 0 1 196 0
52
inline bool BSPLoader::has_active_level(void) const;

569 14 has_visibility 0 4 788 25 BSPLoader::has_visibility 0 1 197 0
50
inline bool BSPLoader::has_visibility(void) const;

570 7 cleanup 0 4 788 18 BSPLoader::cleanup 0 1 198 0
52
void BSPLoader::cleanup(bool is_transition = false);

571 10 get_result 0 4 788 21 BSPLoader::get_result 0 1 199 0
50
inline NodePath BSPLoader::get_result(void) const;

572 16 set_current_leaf 0 4 788 27 BSPLoader::set_current_leaf 0 1 200 0
50
inline void BSPLoader::set_current_leaf(int leaf);

573 16 get_current_leaf 0 4 788 27 BSPLoader::get_current_leaf 0 1 201 0
51
inline int BSPLoader::get_current_leaf(void) const;

574 16 get_num_visleafs 0 4 788 27 BSPLoader::get_num_visleafs 0 1 202 0
51
inline int BSPLoader::get_num_visleafs(void) const;

575 15 get_leaf_center 0 4 788 26 BSPLoader::get_leaf_center 0 1 203 0
58
inline LPoint3 BSPLoader::get_leaf_center(int leaf) const;

576 15 get_lightcoords 0 4 788 26 BSPLoader::get_lightcoords 0 1 204 0
73
LTexCoord BSPLoader::get_lightcoords(int facenum, LVector3 const &point);

577 6 update 0 4 788 17 BSPLoader::update 0 1 205 0
29
void BSPLoader::update(void);

578 14 get_global_ptr 0 4 788 25 BSPLoader::get_global_ptr 0 1 206 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

579 10 ~BSPLoader 0 4 788 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

580 18 ShaderPermutations 0 4 790 38 ShaderPermutations::ShaderPermutations 0 1 207 0
52
inline ShaderPermutations::ShaderPermutations(void);

581 15 add_permutation 0 4 790 35 ShaderPermutations::add_permutation 0 1 208 0
104
inline void ShaderPermutations::add_permutation(std::string const &key, std::string const &value = "1");

582 8 complete 0 4 790 28 ShaderPermutations::complete 0 1 209 0
47
inline void ShaderPermutations::complete(void);

583 9 add_input 0 4 790 29 ShaderPermutations::add_input 0 1 210 0
66
inline void ShaderPermutations::add_input(ShaderInput const &inp);

584 8 add_flag 0 4 790 28 ShaderPermutations::add_flag 0 1 211 0
51
inline void ShaderPermutations::add_flag(int flag);

585 8 get_hash 0 4 790 28 ShaderPermutations::get_hash 0 1 212 0
60
inline std::size_t ShaderPermutations::get_hash(void) const;

586 19 ~ShaderPermutations 0 4 790 39 ShaderPermutations::~ShaderPermutations 0 0 0
46
ShaderPermutations::~ShaderPermutations(void);

587 24 upcast_to_ReferenceCount 0 12 791 36 ShaderSpec::upcast_to_ReferenceCount 0 1 215 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

588 22 downcast_to_ShaderSpec 0 12 781 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

589 17 upcast_to_Namable 0 12 791 29 ShaderSpec::upcast_to_Namable 0 1 216 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

590 22 downcast_to_ShaderSpec 0 12 792 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

591 17 read_shader_files 0 4 791 29 ShaderSpec::read_shader_files 0 1 213 0
117
void ShaderSpec::read_shader_files(Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file);

592 14 get_class_type 0 4 791 26 ShaderSpec::get_class_type 0 1 214 0
51
static TypeHandle ShaderSpec::get_class_type(void);

593 11 ~ShaderSpec 0 4 791 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

594 22 get_reflection_texture 0 4 793 41 PlanarReflections::get_reflection_texture 0 1 218 0
63
Texture *PlanarReflections::get_reflection_texture(void) const;

595 17 PlanarReflections 0 4 793 36 PlanarReflections::PlanarReflections 0 1 217 0
81
inline PlanarReflections::PlanarReflections(PlanarReflections const &) = default;

596 18 ~PlanarReflections 0 4 793 37 PlanarReflections::~PlanarReflections 0 0 0
44
PlanarReflections::~PlanarReflections(void);

597 18 BSPShaderGenerator 0 4 797 38 BSPShaderGenerator::BSPShaderGenerator 0 2 219 220 0
224
BSPShaderGenerator::BSPShaderGenerator(GraphicsOutput *output, GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline BSPShaderGenerator::BSPShaderGenerator(BSPShaderGenerator const &) = default;

598 13 set_sun_light 0 4 797 33 BSPShaderGenerator::set_sun_light 0 1 221 0
59
void BSPShaderGenerator::set_sun_light(NodePath const &np);

599 12 start_update 0 4 797 32 BSPShaderGenerator::start_update 0 1 222 0
44
void BSPShaderGenerator::start_update(void);

600 10 add_shader 0 4 797 30 BSPShaderGenerator::add_shader 0 1 223 0
66
void BSPShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

601 14 get_sun_vector 0 4 797 34 BSPShaderGenerator::get_sun_vector 0 1 224 0
63
inline LVector3 BSPShaderGenerator::get_sun_vector(void) const;

602 19 has_shadow_sunlight 0 4 797 39 BSPShaderGenerator::has_shadow_sunlight 0 1 225 0
64
inline bool BSPShaderGenerator::has_shadow_sunlight(void) const;

603 22 get_pssm_array_texture 0 4 797 42 BSPShaderGenerator::get_pssm_array_texture 0 1 226 0
71
inline Texture *BSPShaderGenerator::get_pssm_array_texture(void) const;

604 12 get_pssm_rig 0 4 797 32 BSPShaderGenerator::get_pssm_rig 0 1 227 0
67
inline PSSMCameraRig *BSPShaderGenerator::get_pssm_rig(void) const;

605 10 get_camera 0 4 797 30 BSPShaderGenerator::get_camera 0 1 228 0
59
inline NodePath BSPShaderGenerator::get_camera(void) const;

606 10 get_render 0 4 797 30 BSPShaderGenerator::get_render 0 1 229 0
59
inline NodePath BSPShaderGenerator::get_render(void) const;

607 18 set_shader_quality 0 4 797 38 BSPShaderGenerator::set_shader_quality 0 1 230 0
57
void BSPShaderGenerator::set_shader_quality(int quality);

608 18 get_shader_quality 0 4 797 38 BSPShaderGenerator::get_shader_quality 0 1 231 0
62
inline int BSPShaderGenerator::get_shader_quality(void) const;

609 7 set_fog 0 4 797 27 BSPShaderGenerator::set_fog 0 1 232 0
50
inline void BSPShaderGenerator::set_fog(Fog *fog);

610 9 clear_fog 0 4 797 29 BSPShaderGenerator::clear_fog 0 1 233 0
48
inline void BSPShaderGenerator::clear_fog(void);

611 7 get_fog 0 4 797 27 BSPShaderGenerator::get_fog 0 1 234 0
52
inline Fog *BSPShaderGenerator::get_fog(void) const;

612 12 get_fog_data 0 4 797 32 BSPShaderGenerator::get_fog_data 0 1 235 0
67
inline PTA_LVecBase4f BSPShaderGenerator::get_fog_data(void) const;

613 22 set_exposure_adustment 0 4 797 42 BSPShaderGenerator::set_exposure_adustment 0 1 236 0
71
inline void BSPShaderGenerator::set_exposure_adustment(float exposure);

614 23 get_exposure_adjustment 0 4 797 43 BSPShaderGenerator::get_exposure_adjustment 0 1 237 0
73
inline PTA_float BSPShaderGenerator::get_exposure_adjustment(void) const;

615 7 get_gsg 0 4 797 27 BSPShaderGenerator::get_gsg 0 1 238 0
70
inline GraphicsStateGuardian *BSPShaderGenerator::get_gsg(void) const;

616 10 get_output 0 4 797 30 BSPShaderGenerator::get_output 0 1 239 0
66
inline GraphicsOutput *BSPShaderGenerator::get_output(void) const;

617 22 get_planar_reflections 0 4 797 42 BSPShaderGenerator::get_planar_reflections 0 1 240 0
81
inline PlanarReflections *BSPShaderGenerator::get_planar_reflections(void) const;

618 20 set_identity_cubemap 0 4 797 40 BSPShaderGenerator::set_identity_cubemap 0 1 241 0
67
static void BSPShaderGenerator::set_identity_cubemap(Texture *tex);

619 20 get_identity_cubemap 0 4 797 40 BSPShaderGenerator::get_identity_cubemap 0 1 242 0
63
static Texture *BSPShaderGenerator::get_identity_cubemap(void);

620 11 make_shader 0 4 797 31 BSPShaderGenerator::make_shader 0 1 243 0
121
static ConstPointerTo< Shader > BSPShaderGenerator::make_shader(ShaderSpec const *spec, ShaderPermutations const *perms);

621 14 get_class_type 0 4 797 34 BSPShaderGenerator::get_class_type 0 1 244 0
59
static TypeHandle BSPShaderGenerator::get_class_type(void);

622 19 ~BSPShaderGenerator 0 4 797 39 BSPShaderGenerator::~BSPShaderGenerator 0 0 0
46
BSPShaderGenerator::~BSPShaderGenerator(void);

623 14 get_class_type 0 4 799 32 BSPCullTraverser::get_class_type 0 1 247 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

624 16 BSPCullTraverser 0 4 799 34 BSPCullTraverser::BSPCullTraverser 0 2 245 246 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

625 17 ~BSPCullTraverser 0 4 799 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

626 14 get_class_type 0 4 801 25 BSPRender::get_class_type 0 1 250 0
50
static TypeHandle BSPRender::get_class_type(void);

627 9 BSPRender 0 4 801 20 BSPRender::BSPRender 0 2 248 249 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

628 10 ~BSPRender 0 4 801 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

629 14 get_class_type 0 4 802 23 BSPRoot::get_class_type 0 1 253 0
48
static TypeHandle BSPRoot::get_class_type(void);

630 7 BSPRoot 0 4 802 16 BSPRoot::BSPRoot 0 2 251 252 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

631 8 ~BSPRoot 0 4 802 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

632 14 get_class_type 0 4 803 23 BSPProp::get_class_type 0 1 256 0
48
static TypeHandle BSPProp::get_class_type(void);

633 7 BSPProp 0 4 803 16 BSPProp::BSPProp 0 2 254 255 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

634 8 ~BSPProp 0 4 803 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

635 14 get_class_type 0 4 805 24 BSPModel::get_class_type 0 1 259 0
49
static TypeHandle BSPModel::get_class_type(void);

636 8 BSPModel 0 4 805 18 BSPModel::BSPModel 0 2 257 258 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

637 9 ~BSPModel 0 4 805 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

638 20 VertexLitGenericSpec 0 4 807 42 VertexLitGenericSpec::VertexLitGenericSpec 0 1 260 0
49
VertexLitGenericSpec::VertexLitGenericSpec(void);

639 21 ~VertexLitGenericSpec 0 4 807 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

640 22 LightmappedGenericSpec 0 4 808 46 LightmappedGenericSpec::LightmappedGenericSpec 0 1 261 0
53
LightmappedGenericSpec::LightmappedGenericSpec(void);

641 23 ~LightmappedGenericSpec 0 4 808 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

642 16 UnlitGenericSpec 0 4 809 34 UnlitGenericSpec::UnlitGenericSpec 0 1 262 0
41
UnlitGenericSpec::UnlitGenericSpec(void);

643 17 ~UnlitGenericSpec 0 4 809 35 UnlitGenericSpec::~UnlitGenericSpec 0 0 0
42
UnlitGenericSpec::~UnlitGenericSpec(void);

644 14 UnlitNoMatSpec 0 4 810 30 UnlitNoMatSpec::UnlitNoMatSpec 0 1 263 0
37
UnlitNoMatSpec::UnlitNoMatSpec(void);

645 15 ~UnlitNoMatSpec 0 4 810 31 UnlitNoMatSpec::~UnlitNoMatSpec 0 0 0
38
UnlitNoMatSpec::~UnlitNoMatSpec(void);

646 13 CSMRenderSpec 0 4 811 28 CSMRenderSpec::CSMRenderSpec 0 1 264 0
35
CSMRenderSpec::CSMRenderSpec(void);

647 14 ~CSMRenderSpec 0 4 811 29 CSMRenderSpec::~CSMRenderSpec 0 0 0
36
CSMRenderSpec::~CSMRenderSpec(void);

648 10 SkyBoxSpec 0 4 812 22 SkyBoxSpec::SkyBoxSpec 0 1 265 0
29
SkyBoxSpec::SkyBoxSpec(void);

649 11 ~SkyBoxSpec 0 4 812 23 SkyBoxSpec::~SkyBoxSpec 0 0 0
30
SkyBoxSpec::~SkyBoxSpec(void);

650 4 make 0 4 813 24 AmbientBoostEffect::make 0 1 266 0
69
static ConstPointerTo< RenderEffect > AmbientBoostEffect::make(void);

651 14 get_class_type 0 4 813 34 AmbientBoostEffect::get_class_type 0 1 267 0
59
static TypeHandle AmbientBoostEffect::get_class_type(void);

652 19 ~AmbientBoostEffect 0 4 813 39 AmbientBoostEffect::~AmbientBoostEffect 0 0 0
46
AmbientBoostEffect::~AmbientBoostEffect(void);

653 14 Audio3DManager 0 4 815 30 Audio3DManager::Audio3DManager 0 2 268 269 0
228
Audio3DManager::Audio3DManager(AudioManager *mgr, NodePath const &listener_target = NodePath(), NodePath const &root = NodePath(), int task_priority = 51);
inline Audio3DManager::Audio3DManager(Audio3DManager const &) = default;

654 19 set_distance_factor 0 4 815 35 Audio3DManager::set_distance_factor 0 1 270 0
68
inline void Audio3DManager::set_distance_factor(PN_stdfloat factor);

655 19 get_distance_factor 0 4 815 35 Audio3DManager::get_distance_factor 0 1 271 0
67
inline PN_stdfloat Audio3DManager::get_distance_factor(void) const;

656 18 set_doppler_factor 0 4 815 34 Audio3DManager::set_doppler_factor 0 1 272 0
67
inline void Audio3DManager::set_doppler_factor(PN_stdfloat factor);

657 18 get_doppler_factor 0 4 815 34 Audio3DManager::get_doppler_factor 0 1 273 0
66
inline PN_stdfloat Audio3DManager::get_doppler_factor(void) const;

658 19 set_drop_off_factor 0 4 815 35 Audio3DManager::set_drop_off_factor 0 1 274 0
68
inline void Audio3DManager::set_drop_off_factor(PN_stdfloat factor);

659 19 get_drop_off_factor 0 4 815 35 Audio3DManager::get_drop_off_factor 0 1 275 0
67
inline PN_stdfloat Audio3DManager::get_drop_off_factor(void) const;

660 22 set_sound_min_distance 0 4 815 38 Audio3DManager::set_sound_min_distance 0 1 276 0
88
inline void Audio3DManager::set_sound_min_distance(AudioSound *sound, PN_stdfloat dist);

661 22 get_sound_min_distance 0 4 815 38 Audio3DManager::get_sound_min_distance 0 1 277 0
83
inline PN_stdfloat Audio3DManager::get_sound_min_distance(AudioSound *sound) const;

662 22 set_sound_max_distance 0 4 815 38 Audio3DManager::set_sound_max_distance 0 1 278 0
88
inline void Audio3DManager::set_sound_max_distance(AudioSound *sound, PN_stdfloat dist);

663 22 get_sound_max_distance 0 4 815 38 Audio3DManager::get_sound_max_distance 0 1 279 0
83
inline PN_stdfloat Audio3DManager::get_sound_max_distance(AudioSound *sound) const;

664 15 attach_listener 0 4 815 31 Audio3DManager::attach_listener 0 1 280 0
70
inline void Audio3DManager::attach_listener(NodePath const &listener);

665 15 detach_listener 0 4 815 31 Audio3DManager::detach_listener 0 1 281 0
50
inline void Audio3DManager::detach_listener(void);

666 8 load_sfx 0 4 815 24 Audio3DManager::load_sfx 0 1 282 0
81
inline PointerTo< AudioSound > Audio3DManager::load_sfx(std::string const &path);

667 22 attach_sound_to_object 0 4 815 38 Audio3DManager::attach_sound_to_object 0 1 283 0
87
void Audio3DManager::attach_sound_to_object(AudioSound *sound, NodePath const &object);

668 12 detach_sound 0 4 815 28 Audio3DManager::detach_sound 0 1 284 0
53
void Audio3DManager::detach_sound(AudioSound *sound);

669 18 print_audio_digest 0 4 815 34 Audio3DManager::print_audio_digest 0 1 285 0
46
void Audio3DManager::print_audio_digest(void);

670 6 update 0 4 815 22 Audio3DManager::update 0 1 286 0
34
void Audio3DManager::update(void);

671 15 ~Audio3DManager 0 4 815 31 Audio3DManager::~Audio3DManager 0 0 0
38
Audio3DManager::~Audio3DManager(void);

672 19 set_pupil_direction 0 4 816 27 CIOLib::set_pupil_direction 0 1 289 0
91
static void CIOLib::set_pupil_direction(float x, float y, LVector3 &left, LVector3 &right);

673 14 look_pupils_at 0 4 816 22 CIOLib::look_pupils_at 0 1 290 0
106
static LVector2 CIOLib::look_pupils_at(NodePath const &node, LVector3 const &point, NodePath const &eyes);

674 6 CIOLib 0 4 816 14 CIOLib::CIOLib 0 2 287 288 0
87
inline CIOLib::CIOLib(void) = default;
inline CIOLib::CIOLib(CIOLib const &) = default;

675 7 ~CIOLib 0 4 816 15 CIOLib::~CIOLib 0 0 0
22
CIOLib::~CIOLib(void);

676 17 DecalModulateSpec 0 4 817 36 DecalModulateSpec::DecalModulateSpec 0 1 291 0
43
DecalModulateSpec::DecalModulateSpec(void);

677 18 ~DecalModulateSpec 0 4 817 37 DecalModulateSpec::~DecalModulateSpec 0 0 0
44
DecalModulateSpec::~DecalModulateSpec(void);

678 14 get_class_type 0 4 818 24 GlowNode::get_class_type 0 1 295 0
49
static TypeHandle GlowNode::get_class_type(void);

679 8 GlowNode 0 4 818 18 GlowNode::GlowNode 0 3 292 293 294 0
219
GlowNode::GlowNode(std::string const &name, float query_size = ::r_glow_querysize);
GlowNode::GlowNode(GeomNode const &copy, float query_size = ::r_glow_querysize);
inline GlowNode::GlowNode(GlowNode const &) = default;

680 9 ~GlowNode 0 4 818 19 GlowNode::~GlowNode 0 0 0
26
GlowNode::~GlowNode(void);

681 24 upcast_to_ReferenceCount 0 12 820 43 PostProcessEffect::upcast_to_ReferenceCount 0 1 305 47
upcast from PostProcessEffect to ReferenceCount
66
ReferenceCount *PostProcessEffect::upcast_to_ReferenceCount(void);

682 29 downcast_to_PostProcessEffect 0 12 781 45 ReferenceCount::downcast_to_PostProcessEffect 0 0 49
downcast from ReferenceCount to PostProcessEffect
71
PostProcessEffect *ReferenceCount::downcast_to_PostProcessEffect(void);

683 17 upcast_to_Namable 0 12 820 36 PostProcessEffect::upcast_to_Namable 0 1 306 40
upcast from PostProcessEffect to Namable
52
Namable *PostProcessEffect::upcast_to_Namable(void);

684 29 downcast_to_PostProcessEffect 0 12 792 38 Namable::downcast_to_PostProcessEffect 0 0 42
downcast from Namable to PostProcessEffect
64
PostProcessEffect *Namable::downcast_to_PostProcessEffect(void);

685 14 get_class_type 0 4 820 33 PostProcessEffect::get_class_type 0 1 296 0
58
static TypeHandle PostProcessEffect::get_class_type(void);

686 17 get_final_texture 0 6 820 36 PostProcessEffect::get_final_texture 0 1 297 0
64
virtual Texture *PostProcessEffect::get_final_texture(void) = 0;

687 8 add_pass 0 4 820 27 PostProcessEffect::add_pass 0 1 298 0
56
void PostProcessEffect::add_pass(PostProcessPass *pass);

688 11 remove_pass 0 4 820 30 PostProcessEffect::remove_pass 0 1 299 0
59
void PostProcessEffect::remove_pass(PostProcessPass *pass);

689 8 get_pass 0 4 820 27 PostProcessEffect::get_pass 0 1 300 0
70
PostProcessPass *PostProcessEffect::get_pass(std::string const &name);

690 5 setup 0 6 820 24 PostProcessEffect::setup 0 1 301 0
44
virtual void PostProcessEffect::setup(void);

691 6 update 0 6 820 25 PostProcessEffect::update 0 1 302 0
45
virtual void PostProcessEffect::update(void);

692 12 window_event 0 4 820 31 PostProcessEffect::window_event 0 1 303 0
58
void PostProcessEffect::window_event(GraphicsOutput *win);

693 8 shutdown 0 6 820 27 PostProcessEffect::shutdown 0 1 304 0
47
virtual void PostProcessEffect::shutdown(void);

694 18 ~PostProcessEffect 0 4 820 37 PostProcessEffect::~PostProcessEffect 0 0 0
44
PostProcessEffect::~PostProcessEffect(void);

695 24 upcast_to_ReferenceCount 0 12 822 41 PostProcessPass::upcast_to_ReferenceCount 0 1 332 45
upcast from PostProcessPass to ReferenceCount
64
ReferenceCount *PostProcessPass::upcast_to_ReferenceCount(void);

696 27 downcast_to_PostProcessPass 0 12 781 43 ReferenceCount::downcast_to_PostProcessPass 0 0 47
downcast from ReferenceCount to PostProcessPass
67
PostProcessPass *ReferenceCount::downcast_to_PostProcessPass(void);

697 17 upcast_to_Namable 0 12 822 34 PostProcessPass::upcast_to_Namable 0 1 333 38
upcast from PostProcessPass to Namable
50
Namable *PostProcessPass::upcast_to_Namable(void);

698 27 downcast_to_PostProcessPass 0 12 792 36 Namable::downcast_to_PostProcessPass 0 0 40
downcast from Namable to PostProcessPass
60
PostProcessPass *Namable::downcast_to_PostProcessPass(void);

699 14 get_class_type 0 4 822 31 PostProcessPass::get_class_type 0 1 309 0
56
static TypeHandle PostProcessPass::get_class_type(void);

700 15 PostProcessPass 0 4 822 32 PostProcessPass::PostProcessPass 0 2 307 308 0
379
PostProcessPass::PostProcessPass(PostProcess *pp, std::string const &name = "pass", int texture_output_bits = 0, FrameBufferProperties const &fbprops = PostProcessPass::get_default_fbprops(), bool force_size = false, LVector2i const &forced_size = LVector2i::zero(), bool div_size = false, int div = 1);
inline PostProcessPass::PostProcessPass(PostProcessPass const &) = default;

701 8 get_quad 0 4 822 25 PostProcessPass::get_quad 0 1 310 0
54
inline NodePath PostProcessPass::get_quad(void) const;

702 26 get_back_buffer_dimensions 0 4 822 43 PostProcessPass::get_back_buffer_dimensions 0 1 311 0
66
LVector2i PostProcessPass::get_back_buffer_dimensions(void) const;

703 10 get_camera 0 4 822 27 PostProcessPass::get_camera 0 1 312 0
56
inline NodePath PostProcessPass::get_camera(void) const;

704 16 has_texture_bits 0 4 822 33 PostProcessPass::has_texture_bits 0 1 313 0
62
inline bool PostProcessPass::has_texture_bits(int bits) const;

705 12 set_div_size 0 4 822 29 PostProcessPass::set_div_size 0 1 314 0
66
inline void PostProcessPass::set_div_size(bool div_size, int div);

706 15 set_forced_size 0 4 822 32 PostProcessPass::set_forced_size 0 1 315 0
92
inline void PostProcessPass::set_forced_size(bool force_size, LVector2i const &forced_size);

707 26 set_framebuffer_properties 0 4 822 43 PostProcessPass::set_framebuffer_properties 0 1 316 0
94
inline void PostProcessPass::set_framebuffer_properties(FrameBufferProperties const &fbprops);

708 23 set_output_texture_bits 0 4 822 40 PostProcessPass::set_output_texture_bits 0 1 317 0
63
inline void PostProcessPass::set_output_texture_bits(int bits);

709 18 get_corrected_size 0 4 822 35 PostProcessPass::get_corrected_size 0 1 318 0
69
LVector2i PostProcessPass::get_corrected_size(LVector2i const &size);

710 11 get_texture 0 4 822 28 PostProcessPass::get_texture 0 1 319 0
47
Texture *PostProcessPass::get_texture(int bit);

711 17 get_color_texture 0 4 822 34 PostProcessPass::get_color_texture 0 1 320 0
57
inline Texture *PostProcessPass::get_color_texture(void);

712 17 get_depth_texture 0 4 822 34 PostProcessPass::get_depth_texture 0 1 321 0
57
inline Texture *PostProcessPass::get_depth_texture(void);

713 12 setup_buffer 0 6 822 29 PostProcessPass::setup_buffer 0 1 322 0
49
virtual bool PostProcessPass::setup_buffer(void);

714 14 setup_textures 0 6 822 31 PostProcessPass::setup_textures 0 1 323 0
51
virtual void PostProcessPass::setup_textures(void);

715 10 setup_quad 0 6 822 27 PostProcessPass::setup_quad 0 1 324 0
47
virtual void PostProcessPass::setup_quad(void);

716 12 setup_camera 0 6 822 29 PostProcessPass::setup_camera 0 1 325 0
49
virtual void PostProcessPass::setup_camera(void);

717 12 setup_region 0 6 822 29 PostProcessPass::setup_region 0 1 326 0
49
virtual void PostProcessPass::setup_region(void);

718 5 setup 0 6 822 22 PostProcessPass::setup 0 1 327 0
42
virtual void PostProcessPass::setup(void);

719 6 update 0 6 822 23 PostProcessPass::update 0 1 328 0
43
virtual void PostProcessPass::update(void);

720 12 window_event 0 6 822 29 PostProcessPass::window_event 0 1 329 0
67
virtual void PostProcessPass::window_event(GraphicsOutput *output);

721 8 shutdown 0 6 822 25 PostProcessPass::shutdown 0 1 330 0
45
virtual void PostProcessPass::shutdown(void);

722 19 get_default_fbprops 0 4 822 36 PostProcessPass::get_default_fbprops 0 1 331 0
72
static FrameBufferProperties PostProcessPass::get_default_fbprops(void);

723 16 ~PostProcessPass 0 4 822 33 PostProcessPass::~PostProcessPass 0 0 0
40
PostProcessPass::~PostProcessPass(void);

724 20 PostProcessScenePass 0 4 823 42 PostProcessScenePass::PostProcessScenePass 0 2 334 335 0
220
PostProcessScenePass::PostProcessScenePass(PostProcess *pp, int output_texture_bits = ::bits_PASSTEXTURE_COLOR, int auxbits = 0);
inline PostProcessScenePass::PostProcessScenePass(PostProcessScenePass const &) = default;

725 18 setup_scene_camera 0 4 823 40 PostProcessScenePass::setup_scene_camera 0 1 336 0
53
void PostProcessScenePass::setup_scene_camera(int i);

726 16 set_camera_state 0 4 823 38 PostProcessScenePass::set_camera_state 0 1 337 0
70
void PostProcessScenePass::set_camera_state(RenderState const *state);

727 21 ~PostProcessScenePass 0 4 823 43 PostProcessScenePass::~PostProcessScenePass 0 0 0
50
PostProcessScenePass::~PostProcessScenePass(void);

728 11 PostProcess 0 4 824 24 PostProcess::PostProcess 0 2 338 339 0
113
PostProcess::PostProcess(GraphicsOutput *output);
inline PostProcess::PostProcess(PostProcess const &) = default;

729 10 add_camera 0 4 824 23 PostProcess::add_camera 0 1 340 0
53
void PostProcess::add_camera(NodePath const &camera);

730 13 remove_camera 0 4 824 26 PostProcess::remove_camera 0 1 341 0
56
void PostProcess::remove_camera(NodePath const &camera);

731 10 add_effect 0 4 824 23 PostProcess::add_effect 0 1 342 0
63
inline void PostProcess::add_effect(PostProcessEffect *effect);

732 13 remove_effect 0 4 824 26 PostProcess::remove_effect 0 1 343 0
66
inline void PostProcess::remove_effect(PostProcessEffect *effect);

733 10 get_effect 0 4 824 23 PostProcess::get_effect 0 1 344 0
75
inline PostProcessEffect *PostProcess::get_effect(std::string const &name);

734 23 get_scene_color_texture 0 4 824 36 PostProcess::get_scene_color_texture 0 1 345 0
65
inline Texture *PostProcess::get_scene_color_texture(void) const;

735 23 get_scene_depth_texture 0 4 824 36 PostProcess::get_scene_depth_texture 0 1 346 0
65
inline Texture *PostProcess::get_scene_depth_texture(void) const;

736 14 get_scene_pass 0 4 824 27 PostProcess::get_scene_pass 0 1 347 0
69
inline PostProcessScenePass *PostProcess::get_scene_pass(void) const;

737 10 get_output 0 4 824 23 PostProcess::get_output 0 1 348 0
59
inline GraphicsOutput *PostProcess::get_output(void) const;

738 10 get_camera 0 4 824 23 PostProcess::get_camera 0 1 349 0
53
inline NodePath PostProcess::get_camera(int n) const;

739 9 next_sort 0 4 824 22 PostProcess::next_sort 0 1 350 0
40
inline int PostProcess::next_sort(void);

740 25 get_output_display_region 0 4 824 38 PostProcess::get_output_display_region 0 1 351 0
73
inline DisplayRegion *PostProcess::get_output_display_region(void) const;

741 13 is_fullscreen 0 4 824 26 PostProcess::is_fullscreen 0 1 352 0
51
inline bool PostProcess::is_fullscreen(void) const;

742 18 set_scene_aux_bits 0 4 824 31 PostProcess::set_scene_aux_bits 0 1 353 0
47
void PostProcess::set_scene_aux_bits(int bits);

743 18 set_stacked_clears 0 4 824 31 PostProcess::set_stacked_clears 0 1 354 0
68
void PostProcess::set_stacked_clears(int n, DrawableRegion *region);

744 17 set_window_clears 0 4 824 30 PostProcess::set_window_clears 0 1 355 0
60
void PostProcess::set_window_clears(DrawableRegion *region);

745 10 set_clears 0 4 824 23 PostProcess::set_clears 0 1 356 0
60
void PostProcess::set_clears(int n, DrawableRegion *region);

746 8 shutdown 0 4 824 21 PostProcess::shutdown 0 1 357 0
33
void PostProcess::shutdown(void);

747 12 ~PostProcess 0 4 824 25 PostProcess::~PostProcess 0 0 0
32
PostProcess::~PostProcess(void);

748 14 get_class_type 0 4 825 23 HDRPass::get_class_type 0 1 360 0
48
static TypeHandle HDRPass::get_class_type(void);

749 7 HDRPass 0 4 825 16 HDRPass::HDRPass 0 2 358 359 0
86
HDRPass::HDRPass(PostProcess *pp);
inline HDRPass::HDRPass(HDRPass const &) = default;

750 19 set_exposure_output 0 4 825 28 HDRPass::set_exposure_output 0 1 361 0
59
inline void HDRPass::set_exposure_output(PTA_float output);

751 12 get_exposure 0 4 825 21 HDRPass::get_exposure 0 1 362 56
/**
	 * Returns the calculated exposure adjustment.
	 */
47
inline float HDRPass::get_exposure(void) const;

752 8 ~HDRPass 0 4 825 17 HDRPass::~HDRPass 0 0 0
24
HDRPass::~HDRPass(void);

753 9 HDREffect 0 4 826 20 HDREffect::HDREffect 0 1 363 0
38
HDREffect::HDREffect(PostProcess *pp);

754 12 get_hdr_pass 0 4 826 23 HDREffect::get_hdr_pass 0 1 364 0
52
inline HDRPass *HDREffect::get_hdr_pass(void) const;

755 10 ~HDREffect 0 4 826 21 HDREffect::~HDREffect 0 0 0
28
HDREffect::~HDREffect(void);

756 14 get_class_type 0 4 827 27 BloomEffect::get_class_type 0 1 366 0
52
static TypeHandle BloomEffect::get_class_type(void);

757 11 BloomEffect 0 4 827 24 BloomEffect::BloomEffect 0 1 365 0
42
BloomEffect::BloomEffect(PostProcess *pp);

758 12 ~BloomEffect 0 4 827 25 BloomEffect::~BloomEffect 0 0 0
32
BloomEffect::~BloomEffect(void);

759 14 get_class_type 0 4 828 36 LightingOriginEffect::get_class_type 0 1 367 0
61
static TypeHandle LightingOriginEffect::get_class_type(void);

760 4 make 0 4 828 26 LightingOriginEffect::make 0 1 368 0
89
static ConstPointerTo< RenderEffect > LightingOriginEffect::make(LVector3 const &origin);

761 19 get_lighting_origin 0 4 828 41 LightingOriginEffect::get_lighting_origin 0 1 369 0
70
inline LVector3 LightingOriginEffect::get_lighting_origin(void) const;

762 21 ~LightingOriginEffect 0 4 828 43 LightingOriginEffect::~LightingOriginEffect 0 0 0
50
LightingOriginEffect::~LightingOriginEffect(void);

369
1 0 0 7 12 829 381 0 0 0 
2 0 0 7 12 829 381 0 0 1 6 param0 0 830  
3 0 0 7 2 834 0 0 0 1 4 name 1 833  
4 0 0 7 2 834 0 0 0 2 4 name 1 833  7 uv_name 1 833  
5 0 0 7 3 834 0 0 0 0 
6 0 0 7 4 834 0 0 0 0 
7 0 0 7 5 834 0 0 0 0 
8 0 0 7 6 834 0 0 0 0 
9 0 0 7 7 834 0 0 0 0 
10 0 0 7 8 834 0 0 0 0 
11 0 0 7 9 834 0 0 0 0 
12 0 0 7 10 834 0 0 0 0 
13 0 0 7 11 834 0 0 0 0 
14 0 0 7 16 837 403 0 0 1 4 copy 1 835  
15 0 0 7 16 837 403 0 0 1 4 name 1 833  
16 0 0 7 17 837 403 0 0 2 4 this 3 837  4 copy 1 835  
17 0 0 4 18 838 0 0 0 3 4 this 3 837  3 key 1 833  5 value 1 833  
18 0 0 6 19 833 0 0 0 2 4 this 3 835  3 key 1 833  
19 0 0 6 20 839 0 0 0 1 4 this 3 835  
20 0 0 6 21 833 0 0 0 2 4 this 3 835  1 i 1 839  
21 0 0 6 22 833 0 0 0 2 4 this 3 835  1 i 1 839  
22 0 0 6 23 768 0 0 0 2 4 this 3 835  3 key 1 833  
23 0 0 6 24 841 0 0 0 2 4 this 3 835  3 key 1 833  
24 0 0 4 25 838 0 0 0 2 4 this 3 837  11 shader_name 1 833  
25 0 0 6 26 833 0 0 0 1 4 this 3 835  
26 0 0 7 27 843 0 0 0 1 4 this 3 835  
27 0 0 6 28 844 0 0 0 2 4 this 3 835  3 key 1 833  
28 0 0 6 29 844 0 0 0 1 4 this 3 835  
29 0 0 6 30 844 0 0 0 1 4 this 3 835  
30 0 0 6 31 833 0 0 0 1 4 this 3 835  
31 0 0 6 32 833 0 0 0 1 4 this 3 835  
32 0 0 6 33 844 0 0 0 1 4 this 3 835  
33 0 0 6 34 844 0 0 0 1 4 this 3 835  
34 0 0 7 35 835 0 0 0 1 4 file 1 845  
35 0 0 7 36 848 0 0 0 0 
36 0 0 7 40 850 0 0 0 1 3 mat 1 835  
37 0 0 7 41 850 0 0 0 1 3 mat 1 835  
38 0 0 7 42 850 0 0 0 0 
39 0 0 6 43 833 0 0 0 1 4 this 3 851  
40 0 0 6 44 844 0 0 0 1 4 this 3 851  
41 0 0 7 45 835 0 0 0 1 4 this 3 851  
42 0 0 6 46 768 0 0 0 0 
43 0 0 7 49 848 0 0 0 0 
44 0 0 6 53 839 0 0 0 1 4 this 3 853  
45 0 0 7 54 857 0 0 0 2 4 this 3 853  1 n 1 768  
46 0 0 6 55 839 0 0 0 1 4 this 3 853  
47 0 0 7 56 860 0 0 0 2 4 this 3 853  1 n 1 768  
48 0 0 7 57 848 0 0 0 0 
49 0 0 7 61 861 428 0 0 0 
50 0 0 7 61 861 428 0 0 1 6 param0 0 862  
51 0 0 7 60 848 0 0 0 0 
52 0 0 6 62 864 0 0 0 1 4 this 3 862  
53 0 0 6 63 833 0 0 0 2 4 this 3 862  3 key 1 833  
54 0 0 7 64 867 0 0 0 2 4 this 3 862  3 key 1 833  
55 0 0 7 65 871 0 0 0 3 4 this 3 862  3 key 1 833  5 scale 1 844  
56 0 0 6 66 833 0 0 0 1 4 this 3 862  
57 0 0 6 67 833 0 0 0 1 4 this 3 862  
58 0 0 6 68 768 0 0 0 1 4 this 3 862  
59 0 0 7 72 872 433 0 0 0 
60 0 0 7 72 872 433 0 0 1 6 param0 0 873  
61 0 0 7 71 848 0 0 0 0 
62 0 0 7 73 857 0 0 0 1 4 this 3 873  
63 0 0 7 74 867 0 0 0 1 4 this 3 873  
64 0 0 7 78 875 439 0 0 0 
65 0 0 7 78 875 439 0 0 1 6 param0 0 876  
66 0 0 7 77 848 0 0 0 0 
67 0 0 7 79 878 418 0 0 1 4 this 3 876  
68 0 0 6 80 844 0 0 0 2 4 this 3 876  3 pos 1 879  
69 0 0 4 81 838 0 0 0 3 4 this 3 875  4 mins 1 857  4 maxs 1 857  
70 0 0 7 85 881 444 0 0 0 
71 0 0 7 85 881 444 0 0 1 6 param0 0 882  
72 0 0 7 84 848 0 0 0 0 
73 0 0 7 86 885 0 0 0 1 4 this 3 882  
74 0 0 4 87 838 0 0 0 3 4 this 3 881  4 mins 1 857  4 maxs 1 857  
75 0 0 7 93 888 449 0 0 1 6 param0 0 886  
76 0 0 6 90 768 0 0 0 1 4 this 3 886  
77 0 0 6 91 768 0 0 0 1 4 this 3 886  
78 0 0 6 92 768 0 0 0 1 4 this 3 886  
79 0 0 7 101 891 456 0 0 1 6 param0 0 889  
80 0 0 6 96 768 0 0 0 1 4 this 3 889  
81 0 0 6 97 768 0 0 0 1 4 this 3 889  
82 0 0 6 98 768 0 0 0 1 4 this 3 889  
83 0 0 6 99 768 0 0 0 1 4 this 3 889  
84 0 0 6 100 844 0 0 0 1 4 this 3 889  
85 0 0 6 104 768 0 0 0 1 4 this 3 892  
86 0 0 4 105 838 0 0 35 // number of textures to consider.. 2 4 this 3 892  6 tcount 1 768  
87 0 0 4 106 838 0 0 21 // add textures 0 - n 3 4 this 3 892  3 wid 1 768  3 hit 1 768  
88 0 0 6 107 844 0 0 0 7 4 this 3 892  3 wid 1 768  3 hit 1 768  15 forcePowerOfTwo 1 844  14 onePixelBorder 1 844  7 max_wid 1 768  7 max_hit 1 768  
89 0 0 4 108 838 0 0 0 3 4 this 3 892  3 wid 1 768  3 hit 1 768  
90 0 0 7 109 888 449 0 74 // pack the textures, the return code is the amount of wasted/unused area. 3 4 this 3 892  15 forcePowerOfTwo 1 844  14 onePixelBorder 1 844  
91 0 0 7 110 891 456 0 58 // returns true if the texture has been rotated 90 degrees 2 4 this 3 892  5 index 1 768  
92 0 0 6 111 892 0 0 0 0 
93 0 0 4 112 838 0 0 0 1 2 tp 1 892  
94 0 0 7 117 893 470 0 0 0 
95 0 0 7 117 893 470 0 0 1 6 param0 0 894  
96 0 0 4 115 838 0 0 0 0 
97 0 0 4 116 838 0 0 0 0 
98 0 0 7 120 896 478 0 0 0 
99 0 0 7 120 896 478 0 0 1 6 param0 0 897  
100 0 0 6 121 844 0 0 0 1 4 this 3 897  
101 0 0 7 122 867 0 0 0 1 4 this 3 897  
102 0 0 7 123 901 0 0 0 1 4 this 3 897  
103 0 0 6 124 902 0 0 0 1 4 this 3 897  
104 0 0 6 125 902 0 0 0 1 4 this 3 897  
105 0 0 6 126 841 0 0 0 1 4 this 3 897  
106 0 0 7 130 903 0 0 0 0 
107 0 0 7 130 903 0 0 0 1 6 param0 0 904  
108 0 0 4 131 838 0 0 0 2 4 this 3 903  4 geom 1 906  
109 0 0 4 132 838 0 0 0 2 4 this 3 903  4 geom 1 906  
110 0 0 4 133 838 0 0 0 1 4 this 3 903  
111 0 0 7 135 896 478 0 0 4 4 this 3 903  5 start 1 879  3 end 1 879  4 mask 1 907  
112 0 0 7 136 896 478 0 0 5 4 this 3 903  6 origin 1 879  9 direction 1 911  8 distance 1 841  4 mask 1 907  
113 0 0 4 137 838 0 0 0 2 4 this 3 903  7 quality 1 768  
114 0 0 4 138 838 0 0 0 1 4 this 3 903  
115 0 0 7 139 906 0 0 0 2 4 this 3 903  7 geom_id 1 902  
116 0 0 7 142 848 0 0 0 0 
117 0 0 4 143 838 0 0 0 2 4 this 3 906  4 mask 1 907  
118 0 0 4 143 838 0 0 0 2 4 this 3 906  4 mask 1 902  
119 0 0 7 144 915 0 0 0 1 4 this 3 913  
120 0 0 6 145 902 0 0 0 1 4 this 3 913  
121 0 0 4 146 838 0 0 0 2 4 this 3 906  7 quality 1 768  
122 0 0 4 147 838 0 0 0 1 4 this 3 906  
123 0 0 7 150 916 498 0 0 1 4 name 1 833  
124 0 0 7 149 848 0 0 0 0 
125 0 0 4 151 838 0 0 0 4 4 this 3 916  2 p1 1 879  2 p2 1 879  2 p3 1 879  
126 0 0 4 152 838 0 0 0 3 4 this 3 916  4 geom 1 917  2 ts 1 920  
127 0 0 7 156 850 0 0 0 2 13 face_material 1 833  9 face_type 1 768  
128 0 0 7 157 850 0 0 0 0 
129 0 0 7 158 850 0 0 0 0 
130 0 0 6 159 833 0 0 0 1 4 this 3 923  
131 0 0 6 160 768 0 0 0 1 4 this 3 923  
132 0 0 6 161 844 0 0 0 1 4 this 3 923  
133 0 0 6 162 768 0 0 0 0 
134 0 0 7 164 848 0 0 0 0 
135 0 0 7 167 864 579 0 0 0 
136 0 0 4 168 838 0 0 0 2 4 this 3 864  4 root 1 925  
137 0 0 4 169 838 0 0 0 2 4 this 3 864  5 world 1 927  
138 0 0 7 170 927 0 0 0 1 4 this 3 929  
139 0 0 6 171 844 0 0 0 2 4 this 3 929  6 rbnode 1 931  
140 0 0 6 172 844 0 0 0 3 4 this 3 864  6 rbnode 1 931  12 triangle_idx 1 768  
141 0 0 6 173 833 0 0 0 3 4 this 3 864  6 rbnode 1 931  12 triangle_idx 1 768  
142 0 0 6 174 768 0 0 0 3 4 this 3 864  6 rbnode 1 931  12 triangle_idx 1 768  
143 0 0 6 175 768 0 0 0 3 4 this 3 864  6 rbnode 1 931  12 triangle_idx 1 768  
144 0 0 7 176 857 0 0 0 2 4 this 3 864  8 modelnum 1 768  
145 0 0 4 177 838 0 0 0 2 4 this 3 864  5 pyent 1 933  
146 0 0 4 178 838 0 0 0 2 4 this 3 864  5 pyent 1 933  
147 0 0 4 179 838 0 0 0 3 4 this 3 864  1 n 1 768  9 preserved 1 844  
148 0 0 6 180 768 0 0 0 1 4 this 3 929  
149 0 0 6 181 933 0 0 0 2 4 this 3 929  1 n 1 768  
150 0 0 4 182 838 0 0 0 4 4 this 3 864  4 name 1 833  6 origin 1 911  6 angles 1 911  
151 0 0 4 183 838 0 0 0 1 4 this 3 864  
152 0 0 6 184 844 0 0 0 3 4 this 3 864  4 file 1 845  13 is_transition 1 844  
153 0 0 4 185 838 0 0 0 1 4 this 3 864  
154 0 0 4 186 838 0 0 0 1 4 this 3 864  
155 0 0 4 187 838 0 0 0 3 4 this 3 864  5 gamma 1 936  10 overbright 1 768  
156 0 0 6 188 936 0 0 0 1 4 this 3 929  
157 0 0 4 189 838 0 0 0 2 4 this 3 864  3 win 1 937  
158 0 0 4 190 838 0 0 0 2 4 this 3 864  6 camera 1 925  
159 0 0 4 191 838 0 0 0 2 4 this 3 864  6 render 1 925  
160 0 0 4 192 838 0 0 0 2 4 this 3 864  5 shgen 1 939  
161 0 0 4 193 838 0 0 0 2 4 this 3 864  4 flag 1 844  
162 0 0 4 194 838 0 0 0 2 4 this 3 864  4 flag 1 844  
163 0 0 4 195 838 0 0 0 2 4 this 3 864  4 type 1 768  
164 0 0 4 196 838 0 0 0 2 4 this 3 864  4 flag 1 844  
165 0 0 4 197 838 0 0 0 2 4 this 3 864  4 file 1 845  
166 0 0 4 198 838 0 0 0 2 4 this 3 864  4 flag 1 844  
167 0 0 6 199 844 0 0 0 1 4 this 3 929  
168 0 0 7 200 885 0 0 0 1 4 this 3 929  
169 0 0 4 201 838 0 0 0 7 4 this 3 864  14 decal_material 1 833  11 decal_scale 1 940  6 rotate 1 841  5 start 1 879  3 end 1 879  11 decal_color 1 944  
170 0 0 7 202 947 0 0 0 2 4 this 3 864  3 pos 1 879  
171 0 0 4 203 838 0 0 0 1 4 this 3 864  
172 0 0 4 204 838 0 0 0 2 4 this 3 864  4 flag 1 844  
173 0 0 4 205 838 0 0 0 2 4 this 3 864  3 dir 1 911  
174 0 0 6 206 768 0 0 0 2 4 this 3 864  6 entnum 1 768  
175 0 0 4 207 838 0 0 0 4 4 this 3 864  8 modelnum 1 768  4 mins 1 857  4 maxs 1 857  
176 0 0 4 208 838 0 0 0 2 4 this 3 864  10 dispatcher 1 933  
177 0 0 4 209 838 0 0 0 3 4 this 3 864  4 name 1 833  4 type 1 948  
178 0 0 4 210 838 0 0 0 2 4 this 3 864  2 ai 1 844  
179 0 0 6 211 844 0 0 0 1 4 this 3 929  
180 0 0 6 212 844 0 0 0 3 4 this 3 864  5 start 1 879  3 end 1 879  
181 0 0 7 213 857 0 0 0 3 4 this 3 864  5 start 1 879  3 end 1 879  
182 0 0 4 214 838 0 0 0 3 4 this 3 864  7 entname 1 833  4 type 1 948  
183 0 0 6 215 933 0 0 0 2 4 this 3 929  10 targetname 1 833  
184 0 0 6 216 933 0 0 0 2 4 this 3 864  9 classname 1 833  
185 0 0 4 217 838 0 0 0 3 4 this 3 864  4 list 1 933  6 entnum 1 951  
186 0 0 4 218 838 0 0 0 3 4 this 3 864  5 entum 1 768  5 pyent 1 933  
187 0 0 4 219 838 0 0 0 2 4 this 3 864  3 ent 1 933  
188 0 0 7 220 885 0 0 0 2 4 this 3 929  8 modelnum 1 768  
189 0 0 7 221 861 428 0 0 2 4 this 3 929  6 entnum 1 951  
190 0 0 6 222 768 0 0 0 3 4 this 3 864  3 pos 1 879  8 headnode 1 768  
191 0 0 6 222 768 0 0 0 2 4 this 3 864  2 np 1 925  
192 0 0 6 223 768 0 0 0 2 4 this 3 864  3 pos 1 879  
193 0 0 6 224 844 0 0 0 3 4 this 3 929  12 curr_cluster 1 768  7 cluster 1 768  
194 0 0 6 225 844 0 0 0 3 4 this 3 864  6 bounds 1 952  19 required_leaf_flags 1 902  
195 0 0 7 226 952 0 0 0 3 4 this 3 864  13 net_transform 1 920  8 original 1 952  
196 0 0 6 227 844 0 0 0 1 4 this 3 929  
197 0 0 6 228 844 0 0 0 1 4 this 3 929  
198 0 0 4 229 838 0 0 0 2 4 this 3 864  13 is_transition 1 844  
199 0 0 7 230 885 0 0 0 1 4 this 3 929  
200 0 0 4 231 838 0 0 0 2 4 this 3 864  4 leaf 1 768  
201 0 0 6 232 768 0 0 0 1 4 this 3 929  
202 0 0 6 233 768 0 0 0 1 4 this 3 929  
203 0 0 7 234 857 0 0 0 2 4 this 3 929  4 leaf 1 768  
204 0 0 7 235 957 0 0 0 3 4 this 3 864  7 facenum 1 768  5 point 1 911  
205 0 0 4 236 838 0 0 0 1 4 this 3 864  
206 0 0 6 237 864 0 0 0 0 
207 0 0 7 241 958 586 0 0 0 
208 0 0 4 242 838 0 0 0 3 4 this 3 958  3 key 1 833  5 value 1 833  
209 0 0 4 243 838 0 0 0 1 4 this 3 958  
210 0 0 4 244 838 0 0 0 2 4 this 3 958  3 inp 1 959  
211 0 0 4 245 838 0 0 0 2 4 this 3 958  4 flag 1 768  
212 0 0 6 246 839 0 0 0 1 4 this 3 962  
213 0 0 4 254 838 0 0 0 4 4 this 3 964  9 vert_file 1 845  10 pixel_file 1 845  9 geom_file 1 845  
214 0 0 7 255 848 0 0 0 0 
215 0 0 7 249 965 0 0 0 1 4 this 3 964  
216 0 0 6 252 966 0 0 0 1 4 this 3 964  
217 0 0 7 259 969 596 0 0 1 6 param0 0 967  
218 0 0 7 258 947 0 0 0 1 4 this 3 967  
219 0 0 7 266 939 622 0 0 1 6 param0 0 970  
220 0 0 7 266 939 622 0 0 4 6 output 1 972  3 gsg 1 974  6 camera 1 925  6 render 1 925  
221 0 0 4 267 838 0 0 0 2 4 this 3 939  2 np 1 925  
222 0 0 4 268 838 0 0 0 1 4 this 3 939  
223 0 0 4 269 838 0 0 0 2 4 this 3 939  4 spec 1 964  
224 0 0 7 270 867 0 0 0 1 4 this 3 970  
225 0 0 6 271 844 0 0 0 1 4 this 3 970  
226 0 0 7 272 947 0 0 0 1 4 this 3 970  
227 0 0 6 273 976 0 0 0 1 4 this 3 970  
228 0 0 7 274 885 0 0 0 1 4 this 3 970  
229 0 0 7 275 885 0 0 0 1 4 this 3 970  
230 0 0 4 276 838 0 0 0 2 4 this 3 939  7 quality 1 768  
231 0 0 6 277 768 0 0 0 1 4 this 3 970  
232 0 0 4 278 838 0 0 0 2 4 this 3 939  3 fog 1 978  
233 0 0 4 279 838 0 0 0 1 4 this 3 939  
234 0 0 7 280 978 0 0 0 1 4 this 3 970  
235 0 0 7 281 982 0 0 0 1 4 this 3 970  
236 0 0 4 282 838 0 0 0 2 4 this 3 939  8 exposure 1 841  
237 0 0 7 283 985 0 0 0 1 4 this 3 970  
238 0 0 7 284 974 0 0 0 1 4 this 3 970  
239 0 0 7 285 972 0 0 0 1 4 this 3 970  
240 0 0 7 286 969 596 0 0 1 4 this 3 970  
241 0 0 4 287 838 0 0 0 1 3 tex 1 947  
242 0 0 7 288 947 0 0 0 0 
243 0 0 7 289 990 0 0 0 2 4 spec 1 988  5 perms 1 962  
244 0 0 7 290 848 0 0 0 0 
245 0 0 7 295 993 625 0 0 1 6 param0 0 991  
246 0 0 7 295 993 625 0 0 2 4 trav 1 994  6 loader 1 864  
247 0 0 7 294 848 0 0 0 0 
248 0 0 7 299 997 628 0 0 1 6 param0 0 995  
249 0 0 7 299 997 628 0 0 2 4 name 1 833  6 loader 1 864  
250 0 0 7 298 848 0 0 0 0 
251 0 0 7 303 1000 631 0 0 1 6 param0 0 998  
252 0 0 7 303 1000 631 0 0 1 4 name 1 833  
253 0 0 7 302 848 0 0 0 0 
254 0 0 7 308 1003 634 0 0 1 6 param0 0 1001  
255 0 0 7 308 1003 634 0 0 1 4 name 1 833  
256 0 0 7 307 848 0 0 0 0 
257 0 0 7 313 1006 637 0 0 1 6 param0 0 1004  
258 0 0 7 313 1006 637 0 0 1 4 name 1 833  
259 0 0 7 312 848 0 0 0 0 
260 0 0 7 316 1007 639 0 0 0 
261 0 0 7 319 1008 641 0 0 0 
262 0 0 7 322 1009 643 0 0 0 
263 0 0 7 325 1010 645 0 0 0 
264 0 0 7 328 1011 647 0 0 0 
265 0 0 7 331 1012 649 0 0 0 
266 0 0 7 335 1014 0 0 0 0 
267 0 0 7 336 848 0 0 0 0 
268 0 0 7 339 1017 671 0 0 1 6 param0 0 1015  
269 0 0 7 339 1017 671 0 0 4 3 mgr 1 1018  15 listener_target 1 925  4 root 1 925  13 task_priority 1 768  
270 0 0 4 340 838 0 0 0 2 4 this 3 1017  6 factor 1 936  
271 0 0 6 341 936 0 0 0 1 4 this 3 1015  
272 0 0 4 342 838 0 0 0 2 4 this 3 1017  6 factor 1 936  
273 0 0 6 343 936 0 0 0 1 4 this 3 1015  
274 0 0 4 344 838 0 0 0 2 4 this 3 1017  6 factor 1 936  
275 0 0 6 345 936 0 0 0 1 4 this 3 1015  
276 0 0 4 346 838 0 0 0 3 4 this 3 1017  5 sound 1 1020  4 dist 1 936  
277 0 0 6 347 936 0 0 0 2 4 this 3 1015  5 sound 1 1020  
278 0 0 4 348 838 0 0 0 3 4 this 3 1017  5 sound 1 1020  4 dist 1 936  
279 0 0 6 349 936 0 0 0 2 4 this 3 1015  5 sound 1 1020  
280 0 0 4 350 838 0 0 0 2 4 this 3 1017  8 listener 1 925  
281 0 0 4 351 838 0 0 0 1 4 this 3 1017  
282 0 0 7 352 1020 0 0 0 2 4 this 3 1017  4 path 1 833  
283 0 0 4 353 838 0 0 0 3 4 this 3 1017  5 sound 1 1020  6 object 1 925  
284 0 0 4 354 838 0 0 0 2 4 this 3 1017  5 sound 1 1020  
285 0 0 4 355 838 0 0 0 1 4 this 3 1017  
286 0 0 4 356 838 0 0 0 1 4 this 3 1017  
287 0 0 7 361 1022 675 0 0 0 
288 0 0 7 361 1022 675 0 0 1 6 param0 0 1023  
289 0 0 4 359 838 0 0 0 4 1 x 1 841  1 y 1 841  4 left 1 867  5 right 1 867  
290 0 0 7 360 901 0 0 0 3 4 node 1 925  5 point 1 911  4 eyes 1 925  
291 0 0 7 364 1025 677 0 0 0 
292 0 0 7 369 1028 680 0 0 2 4 copy 1 1026  10 query_size 1 841  
293 0 0 7 369 1028 680 0 0 1 6 param0 0 1029  
294 0 0 7 369 1028 680 0 0 2 4 name 1 833  10 query_size 1 841  
295 0 0 7 368 848 0 0 0 0 
296 0 0 7 376 848 0 0 0 0 
297 0 0 7 377 947 0 0 0 1 4 this 3 1031  
298 0 0 4 378 838 0 0 0 2 4 this 3 1031  4 pass 1 1032  
299 0 0 4 379 838 0 0 0 2 4 this 3 1031  4 pass 1 1032  
300 0 0 7 380 1032 723 0 0 2 4 this 3 1031  4 name 1 833  
301 0 0 4 381 838 0 0 0 1 4 this 3 1031  
302 0 0 4 382 838 0 0 0 1 4 this 3 1031  
303 0 0 4 383 838 0 0 0 2 4 this 3 1031  3 win 1 972  
304 0 0 4 384 838 0 0 0 1 4 this 3 1031  
305 0 0 7 372 965 0 0 0 1 4 this 3 1031  
306 0 0 6 374 966 0 0 0 1 4 this 3 1031  
307 0 0 7 393 1032 723 0 0 8 2 pp 1 1033  4 name 1 833  19 texture_output_bits 1 768  7 fbprops 1 1034  10 force_size 1 844  11 forced_size 1 1037  8 div_size 1 844  3 div 1 768  
308 0 0 7 393 1032 723 0 0 1 6 param0 0 1040  
309 0 0 7 392 848 0 0 0 0 
310 0 0 7 394 885 0 0 0 1 4 this 3 1040  
311 0 0 7 395 1042 0 0 0 1 4 this 3 1040  
312 0 0 7 396 885 0 0 0 1 4 this 3 1040  
313 0 0 6 397 844 0 0 0 2 4 this 3 1040  4 bits 1 768  
314 0 0 4 398 838 0 0 0 3 4 this 3 1032  8 div_size 1 844  3 div 1 768  
315 0 0 4 399 838 0 0 0 3 4 this 3 1032  10 force_size 1 844  11 forced_size 1 1037  
316 0 0 4 400 838 0 0 0 2 4 this 3 1032  7 fbprops 1 1034  
317 0 0 4 401 838 0 0 0 2 4 this 3 1032  4 bits 1 768  
318 0 0 7 402 1042 0 0 0 2 4 this 3 1032  4 size 1 1037  
319 0 0 7 403 947 0 0 0 2 4 this 3 1032  3 bit 1 768  
320 0 0 7 404 947 0 0 0 1 4 this 3 1032  
321 0 0 7 405 947 0 0 0 1 4 this 3 1032  
322 0 0 6 406 844 0 0 0 1 4 this 3 1032  
323 0 0 4 407 838 0 0 0 1 4 this 3 1032  
324 0 0 4 408 838 0 0 0 1 4 this 3 1032  
325 0 0 4 409 838 0 0 0 1 4 this 3 1032  
326 0 0 4 410 838 0 0 0 1 4 this 3 1032  
327 0 0 4 411 838 0 0 0 1 4 this 3 1032  
328 0 0 4 412 838 0 0 0 1 4 this 3 1032  
329 0 0 4 413 838 0 0 0 2 4 this 3 1032  6 output 1 972  
330 0 0 4 414 838 0 0 0 1 4 this 3 1032  
331 0 0 7 415 1043 0 0 0 0 
332 0 0 7 388 965 0 0 0 1 4 this 3 1032  
333 0 0 6 390 966 0 0 0 1 4 this 3 1032  
334 0 0 7 418 1044 727 0 0 3 2 pp 1 1033  19 output_texture_bits 1 768  7 auxbits 1 768  
335 0 0 7 418 1044 727 0 0 1 6 param0 0 1045  
336 0 0 4 419 838 0 0 0 2 4 this 3 1044  1 i 1 768  
337 0 0 4 420 838 0 0 0 2 4 this 3 1044  5 state 1 1047  
338 0 0 7 423 1033 747 0 0 1 6 output 1 972  
339 0 0 7 423 1033 747 0 0 1 6 param0 0 1050  
340 0 0 4 424 838 0 0 0 2 4 this 3 1033  6 camera 1 925  
341 0 0 4 425 838 0 0 0 2 4 this 3 1033  6 camera 1 925  
342 0 0 4 426 838 0 0 0 2 4 this 3 1033  6 effect 1 1031  
343 0 0 4 427 838 0 0 0 2 4 this 3 1033  6 effect 1 1031  
344 0 0 7 428 1031 694 0 0 2 4 this 3 1033  4 name 1 833  
345 0 0 7 429 947 0 0 0 1 4 this 3 1050  
346 0 0 7 430 947 0 0 0 1 4 this 3 1050  
347 0 0 7 431 1044 727 0 0 1 4 this 3 1050  
348 0 0 7 432 972 0 0 0 1 4 this 3 1050  
349 0 0 7 433 885 0 0 0 2 4 this 3 1050  1 n 1 768  
350 0 0 6 434 768 0 0 0 1 4 this 3 1033  
351 0 0 7 435 1053 0 0 0 1 4 this 3 1050  
352 0 0 6 436 844 0 0 0 1 4 this 3 1050  
353 0 0 4 437 838 0 0 0 2 4 this 3 1033  4 bits 1 768  
354 0 0 4 438 838 0 0 0 3 4 this 3 1033  1 n 1 768  6 region 1 1054  
355 0 0 4 439 838 0 0 0 2 4 this 3 1033  6 region 1 1054  
356 0 0 4 440 838 0 0 0 3 4 this 3 1033  1 n 1 768  6 region 1 1054  
357 0 0 4 441 838 0 0 0 1 4 this 3 1033  
358 0 0 7 445 1058 752 0 0 1 6 param0 0 1056  
359 0 0 7 445 1058 752 0 0 1 2 pp 1 1033  
360 0 0 7 444 848 0 0 0 0 
361 0 0 4 446 838 0 0 0 2 4 this 3 1058  6 output 1 985  
362 0 0 6 447 841 0 0 56 /**
	 * Returns the calculated exposure adjustment.
	 */ 1 4 this 3 1056  
363 0 0 7 450 1059 755 0 0 1 2 pp 1 1033  
364 0 0 7 451 1058 752 0 0 1 4 this 3 1060  
365 0 0 7 455 1062 758 0 0 1 2 pp 1 1033  
366 0 0 7 454 848 0 0 0 0 
367 0 0 7 458 848 0 0 0 0 
368 0 0 7 459 1014 0 0 0 1 6 origin 1 911  
369 0 0 7 460 867 0 0 0 1 4 this 3 1063  
302
763 13 TextureStages 0 141313 13 TextureStages 13 TextureStages 0 0 0 1 380 381 0 10 370 371 372 373 374 375 376 377 378 379 0 0 0 0 0 752
/**
 * This simple interface maintains a single TextureStage object for each unique name.
 * It avoids the creation of duplicate TextureStages with the same name, which
 * reduces texture swapping and draw call overhead.
 *
 * If using our shader system, you should always use this interface to get TextureStages.
 * You are not required to change any properties on the returned TextureStage, as the shader
 * specification will know what to do with the TextureStage from the name.
 * 
 * For example, you do not need to call TextureStage::set_mode() or NodePath::set_tex_gen().
 * If you apply a texture to a node with the get_normalmap() stage, the shader specification
 * will know that the texture you supplied is to be treated as a normal map.
 */

764 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 382 403 0 20 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 0 0 1 0 765 0 0 0 0 0

765 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

766 17 BSPMaterialAttrib 0 141313 17 BSPMaterialAttrib 17 BSPMaterialAttrib 0 0 0 0 412 1 1065 8 404 405 406 407 408 409 410 411 0 0 1 0 767 0 0 0 0 0

767 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

768 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

769 12 BoundingKDOP 0 141313 12 BoundingKDOP 12 BoundingKDOP 0 0 0 0 418 0 5 413 414 415 416 417 0 0 1 0 770 0 0 0 0 243
/**
 * This defines a bounding convex volume.  It may represent any enclosing convex volume,
 * including simple boxes.  However, if all you want is an axis-aligned
 * bounding box, you may be better off with the simpler BoundingBox class.
 */

770 20 FiniteBoundingVolume 0 2048 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 168
/**
 * A special kind of GeometricBoundingVolume that is known to be finite.  It
 * is possible to query this kind of volume for its minimum and maximum
 * extents.
 */

771 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 420 428 0 8 419 421 422 423 424 425 426 427 0 0 1 0 765 0 0 0 0 0

772 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 430 433 0 3 429 431 432 0 0 1 0 771 0 0 0 0 0

773 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 435 439 0 4 434 436 437 438 0 0 1 0 771 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

774 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 441 444 0 3 440 442 443 0 0 1 0 771 0 0 0 0 0

775 10 PackResult 0 141313 10 PackResult 10 PackResult 0 0 0 1 448 449 0 3 445 446 447 0 0 0 0 0 0

776 15 TextureLocation 0 141313 15 TextureLocation 15 TextureLocation 0 0 0 1 455 456 0 5 450 451 452 453 454 0 0 0 0 0 0

777 13 TexturePacker 0 141313 13 TexturePacker 13 TexturePacker 0 0 0 0 466 0 9 457 458 459 460 461 462 463 464 465 0 0 0 0 0 0

778 8 RayTrace 0 141313 8 RayTrace 8 RayTrace 0 0 0 1 469 470 0 2 467 468 0 0 0 0 0 0

779 17 RayTraceHitResult 0 141313 17 RayTraceHitResult 17 RayTraceHitResult 0 0 0 1 471 478 0 6 472 473 474 475 476 477 0 0 0 0 0 0

780 13 RayTraceScene 0 75777 13 RayTraceScene 13 RayTraceScene 0 0 0 1 479 0 0 8 480 481 482 483 484 485 486 487 0 0 1 0 781 0 0 0 1 782 0

781 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

782 0 0 794624 15 RayTraceScene:: 0 780 0 0 0 0 0 0 0 0 0 3 17 BUILD_QUALITY_LOW 32 RayTraceScene::BUILD_QUALITY_LOW 0
0 20 BUILD_QUALITY_MEDIUM 35 RayTraceScene::BUILD_QUALITY_MEDIUM 0
1 18 BUILD_QUALITY_HIGH 33 RayTraceScene::BUILD_QUALITY_HIGH 0
2 0 0

783 16 RayTraceGeometry 0 75777 16 RayTraceGeometry 16 RayTraceGeometry 0 0 0 0 0 0 6 488 489 490 491 492 493 0 0 1 0 784 0 0 0 0 0

784 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

785 20 RayTraceTriangleMesh 0 141313 20 RayTraceTriangleMesh 20 RayTraceTriangleMesh 0 0 0 1 495 498 0 3 494 496 497 0 0 1 0 783 0 0 0 0 0

786 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 507 1 1066 8 499 500 501 502 503 504 505 506 0 0 1 0 767 0 0 0 1 787 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

787 0 0 794624 15 BSPFaceAttrib:: 0 786 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

788 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 508 579 0 70 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 0 0 0 0 1 789 58
/**
 * Loads and handles the operations of PBSP files.
 */

789 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 788 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

790 18 ShaderPermutations 0 141313 18 ShaderPermutations 18 ShaderPermutations 0 0 0 1 580 586 0 5 581 582 583 584 585 0 0 1 0 781 0 0 0 0 97
/**
 * Represents a list of #defines and variable inputs to a shader that is being generated.
 */

791 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 0 593 0 2 591 592 0 0 2 3 781 587 588 3 792 589 590 0 0 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

792 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

793 17 PlanarReflections 0 141313 17 PlanarReflections 17 PlanarReflections 0 0 0 1 595 596 0 1 594 0 0 1 0 781 0 0 0 0 0

794 13 ShaderQuality 0 532481 13 ShaderQuality 13 ShaderQuality 0 0 0 0 0 0 0 0 0 0 3 17 SHADERQUALITY_LOW 17 SHADERQUALITY_LOW 0
0 20 SHADERQUALITY_MEDIUM 20 SHADERQUALITY_MEDIUM 0
1 18 SHADERQUALITY_HIGH 18 SHADERQUALITY_HIGH 0
2 0 0

795 10 CameraBits 0 532481 10 CameraBits 10 CameraBits 0 0 0 0 0 0 0 0 0 0 6 11 CAMERA_MAIN 11 CAMERA_MAIN 0
1 13 CAMERA_SHADOW 13 CAMERA_SHADOW 0
2 17 CAMERA_REFLECTION 17 CAMERA_REFLECTION 0
4 17 CAMERA_REFRACTION 17 CAMERA_REFRACTION 0
8 16 CAMERA_VIEWMODEL 16 CAMERA_VIEWMODEL 0
16 14 CAMERA_COMPUTE 14 CAMERA_COMPUTE 0
32 0 0

796 7 AuxBits 0 532481 7 AuxBits 7 AuxBits 0 0 0 0 0 0 0 0 0 0 2 14 AUXBITS_NORMAL 14 AUXBITS_NORMAL 0
1 12 AUXBITS_ARME 12 AUXBITS_ARME 0
2 0 0

797 18 BSPShaderGenerator 0 141313 18 BSPShaderGenerator 18 BSPShaderGenerator 0 0 0 1 597 622 0 24 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 0 0 1 0 798 0 0 0 0 0

798 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

799 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 624 625 0 1 623 0 0 1 0 800 0 0 0 0 0

800 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

801 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 627 628 0 1 626 0 0 1 0 784 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

802 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 630 631 0 1 629 0 0 1 0 784 0 0 0 0 0

803 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 633 634 0 1 632 0 0 1 0 804 0 0 0 0 0

804 9 ModelRoot 0 2048 9 ModelRoot 9 ModelRoot 0 0 0 0 0 0 0 0 0 0 0 0 314
/**
 * A node of this type is created automatically at the root of each model file
 * that is loaded.  It may eventually contain some information about the
 * contents of the model; at the moment, it contains no special information,
 * but can be used as a flag to indicate the presence of a loaded model file.
 */

805 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 636 637 0 1 635 0 0 1 0 806 0 0 0 0 0

806 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

807 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 638 639 0 0 0 0 1 0 791 0 0 0 0 0

808 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 640 641 0 0 0 0 1 0 791 0 0 0 0 0

809 16 UnlitGenericSpec 0 141313 16 UnlitGenericSpec 16 UnlitGenericSpec 0 0 0 1 642 643 0 0 0 0 1 0 791 0 0 0 0 160
/**
 * Shader that only supports a basetexture, no fancy lighting effects or anything.
 * Could be used for UI elements, emissive materials, particles, etc.
 */

810 14 UnlitNoMatSpec 0 141313 14 UnlitNoMatSpec 14 UnlitNoMatSpec 0 0 0 1 644 645 0 0 0 0 1 0 791 0 0 0 0 0

811 13 CSMRenderSpec 0 141313 13 CSMRenderSpec 13 CSMRenderSpec 0 0 0 1 646 647 0 0 0 0 1 0 791 0 0 0 0 0

812 10 SkyBoxSpec 0 141313 10 SkyBoxSpec 10 SkyBoxSpec 0 0 0 1 648 649 0 0 0 0 1 0 791 0 0 0 0 0

813 18 AmbientBoostEffect 0 141313 18 AmbientBoostEffect 18 AmbientBoostEffect 0 0 0 0 652 0 2 650 651 0 0 1 0 814 0 0 0 0 0

814 12 RenderEffect 0 2048 12 RenderEffect 12 RenderEffect 0 0 0 0 0 0 0 0 0 0 0 0 901
/**
 * This is the base class for a number of special render effects that may be
 * set on scene graph nodes to change the way they render.  This includes
 * BillboardEffect, DecalEffect, etc.
 *
 * RenderEffect represents render properties that must be applied as soon as
 * they are encountered in the scene graph, rather than propagating down to
 * the leaves.  This is different from RenderAttrib, which represents
 * properties like color and texture that don't do anything until they
 * propagate down to a GeomNode.
 *
 * You should not attempt to create or modify a RenderEffect directly;
 * instead, use the make() method of the appropriate kind of effect you want.
 * This will allocate and return a new RenderEffect of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderEffect
 * if you wish to change its properties; instead, create a new one.
 */

815 14 Audio3DManager 0 141313 14 Audio3DManager 14 Audio3DManager 0 0 0 1 653 671 0 17 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 0 0 0 0 0 0

816 6 CIOLib 0 141313 6 CIOLib 6 CIOLib 0 0 0 1 674 675 0 2 672 673 0 0 0 0 0 0

817 17 DecalModulateSpec 0 141313 17 DecalModulateSpec 17 DecalModulateSpec 0 0 0 1 676 677 0 0 0 0 1 0 809 0 0 0 0 90
/**
 * This is just an alias of UnlitGeneric that enables color blending on the decal.
 */

818 8 GlowNode 0 141313 8 GlowNode 8 GlowNode 0 0 0 1 679 680 0 1 678 0 0 1 0 819 0 0 0 0 207
/**
 * This is a specialization on GeomNode that uses a pixel occlusion query
 * to determine if the Geoms on the node should be rendered.
 *
 * This is useful for things like light glows or lens flares.
 */

819 8 GeomNode 0 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 0 0 0 0 0 208
/**
 * A node that holds Geom objects, renderable pieces of geometry.  This is the
 * primary kind of leaf node in the scene graph; almost all visible objects
 * will be contained in a GeomNode somewhere.
 */

820 17 PostProcessEffect 0 141313 17 PostProcessEffect 17 PostProcessEffect 0 0 0 0 694 0 9 685 686 687 688 689 690 691 692 693 0 0 2 3 781 681 682 3 792 683 684 0 0 0

821 15 PassTextureBits 0 532481 15 PassTextureBits 15 PassTextureBits 0 0 0 0 0 0 0 0 0 0 6 22 bits_PASSTEXTURE_COLOR 22 bits_PASSTEXTURE_COLOR 0
1 22 bits_PASSTEXTURE_DEPTH 22 bits_PASSTEXTURE_DEPTH 0
2 21 bits_PASSTEXTURE_AUX0 21 bits_PASSTEXTURE_AUX0 0
4 21 bits_PASSTEXTURE_AUX1 21 bits_PASSTEXTURE_AUX1 0
8 21 bits_PASSTEXTURE_AUX2 21 bits_PASSTEXTURE_AUX2 0
16 21 bits_PASSTEXTURE_AUX3 21 bits_PASSTEXTURE_AUX3 0
32 0 0

822 15 PostProcessPass 0 141313 15 PostProcessPass 15 PostProcessPass 0 0 0 1 700 723 0 23 699 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 0 0 2 3 781 695 696 3 792 697 698 0 0 0

823 20 PostProcessScenePass 0 141313 20 PostProcessScenePass 20 PostProcessScenePass 0 0 0 1 724 727 0 2 725 726 0 0 1 0 822 0 0 0 0 0

824 11 PostProcess 0 141313 11 PostProcess 11 PostProcess 0 0 0 1 728 747 0 18 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 0 0 0 0 0 0

825 7 HDRPass 0 141313 7 HDRPass 7 HDRPass 0 0 0 1 749 752 0 3 748 750 751 0 0 1 0 822 0 0 0 0 0

826 9 HDREffect 0 141313 9 HDREffect 9 HDREffect 0 0 0 1 753 755 0 1 754 0 0 1 0 820 0 0 0 0 0

827 11 BloomEffect 0 141313 11 BloomEffect 11 BloomEffect 0 0 0 1 757 758 0 1 756 0 0 1 0 820 0 0 0 0 0

828 20 LightingOriginEffect 0 141313 20 LightingOriginEffect 20 LightingOriginEffect 0 0 0 0 762 0 3 759 760 761 0 0 1 0 814 0 0 0 0 0

829 15 TextureStages * 0 8576 15 TextureStages * 15 TextureStages * 0 0 763 0 0 0 0 0 0 0 0 0 0

830 21 TextureStages const * 0 8576 21 TextureStages const * 21 TextureStages const * 0 0 831 0 0 0 0 0 0 0 0 0 0

831 19 TextureStages const 0 8832 19 TextureStages const 19 TextureStages const 0 0 763 0 0 0 0 0 0 0 0 0 0

832 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 336
/**
 * Defines the properties of a named stage of the multitexture pipeline.  The
 * TextureAttrib will associated a number of these stages with Texture
 * objects, and the GSG will render geometry by sorting all of the currently
 * active TextureStages in order and then issuing the appropriate rendering
 * calls to activate them.
 */

833 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

834 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 832 0 0 0 0 0 0 0 0 0 0

835 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 836 0 0 0 0 0 0 0 0 0 0

836 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 764 0 0 0 0 0 0 0 0 0 0

837 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 764 0 0 0 0 0 0 0 0 0 0

838 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

839 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 840 0 0 0 0 0 0 0 0 0 0

840 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

841 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

842 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

843 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 842 0 0 0 0 0 0 0 0 0 0

844 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

845 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 846 0 0 0 0 0 0 0 0 0 0

846 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 842 0 0 0 0 0 0 0 0 0 0

847 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

848 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 847 0 0 0 0 0 0 0 0 0 0

849 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 767 0 0 0 0 0 0 0 0 0 0

850 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 849 0 0 0 0 0 0 0 0 0 0

851 25 BSPMaterialAttrib const * 0 8576 25 BSPMaterialAttrib const * 25 BSPMaterialAttrib const * 0 0 852 0 0 0 0 0 0 0 0 0 0

852 23 BSPMaterialAttrib const 0 8832 23 BSPMaterialAttrib const 23 BSPMaterialAttrib const 0 0 766 0 0 0 0 0 0 0 0 0 0

853 20 BoundingKDOP const * 0 8576 20 BoundingKDOP const * 20 BoundingKDOP const * 0 0 854 0 0 0 0 0 0 0 0 0 0

854 18 BoundingKDOP const 0 8832 18 BoundingKDOP const 18 BoundingKDOP const 0 0 769 0 0 0 0 0 0 0 0 0 0

855 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 856 0 0 0 0 0 0 0 0 0 0

856 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

857 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 855 0 0 0 0 0 0 0 0 0 0

858 6 LPlane 0 2105344 6 LPlane 6 LPlane 0 0 859 0 0 0 0 0 0 0 0 0 0

859 7 LPlanef 0 2048 7 LPlanef 7 LPlanef 0 0 0 0 0 0 0 0 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

860 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 858 0 0 0 0 0 0 0 0 0 0

861 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 771 0 0 0 0 0 0 0 0 0 0

862 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 863 0 0 0 0 0 0 0 0 0 0

863 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 771 0 0 0 0 0 0 0 0 0 0

864 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 788 0 0 0 0 0 0 0 0 0 0

865 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 866 0 0 0 0 0 0 0 0 0 0

866 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

867 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 865 0 0 0 0 0 0 0 0 0 0

868 6 LColor 0 2105344 6 LColor 6 LColor 0 0 869 0 0 0 0 0 0 0 0 0 0

869 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 870 0 0 0 0 0 0 0 0 0 0

870 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

871 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 868 0 0 0 0 0 0 0 0 0 0

872 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 772 0 0 0 0 0 0 0 0 0 0

873 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 874 0 0 0 0 0 0 0 0 0 0

874 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 772 0 0 0 0 0 0 0 0 0 0

875 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 773 0 0 0 0 0 0 0 0 0 0

876 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 877 0 0 0 0 0 0 0 0 0 0

877 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 773 0 0 0 0 0 0 0 0 0 0

878 14 BoundingKDOP * 0 8576 14 BoundingKDOP * 14 BoundingKDOP * 0 0 769 0 0 0 0 0 0 0 0 0 0

879 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 880 0 0 0 0 0 0 0 0 0 0

880 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 855 0 0 0 0 0 0 0 0 0 0

881 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 774 0 0 0 0 0 0 0 0 0 0

882 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 883 0 0 0 0 0 0 0 0 0 0

883 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 774 0 0 0 0 0 0 0 0 0 0

884 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

885 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 884 0 0 0 0 0 0 0 0 0 0

886 18 PackResult const * 0 8576 18 PackResult const * 18 PackResult const * 0 0 887 0 0 0 0 0 0 0 0 0 0

887 16 PackResult const 0 8832 16 PackResult const 16 PackResult const 0 0 775 0 0 0 0 0 0 0 0 0 0

888 12 PackResult * 0 8576 12 PackResult * 12 PackResult * 0 0 775 0 0 0 0 0 0 0 0 0 0

889 23 TextureLocation const * 0 8576 23 TextureLocation const * 23 TextureLocation const * 0 0 890 0 0 0 0 0 0 0 0 0 0

890 21 TextureLocation const 0 8832 21 TextureLocation const 21 TextureLocation const 0 0 776 0 0 0 0 0 0 0 0 0 0

891 17 TextureLocation * 0 8576 17 TextureLocation * 17 TextureLocation * 0 0 776 0 0 0 0 0 0 0 0 0 0

892 15 TexturePacker * 0 8576 15 TexturePacker * 15 TexturePacker * 0 0 777 0 0 0 0 0 0 0 0 0 0

893 10 RayTrace * 0 8576 10 RayTrace * 10 RayTrace * 0 0 778 0 0 0 0 0 0 0 0 0 0

894 16 RayTrace const * 0 8576 16 RayTrace const * 16 RayTrace const * 0 0 895 0 0 0 0 0 0 0 0 0 0

895 14 RayTrace const 0 8832 14 RayTrace const 14 RayTrace const 0 0 778 0 0 0 0 0 0 0 0 0 0

896 19 RayTraceHitResult * 0 8576 19 RayTraceHitResult * 19 RayTraceHitResult * 0 0 779 0 0 0 0 0 0 0 0 0 0

897 25 RayTraceHitResult const * 0 8576 25 RayTraceHitResult const * 25 RayTraceHitResult const * 0 0 898 0 0 0 0 0 0 0 0 0 0

898 23 RayTraceHitResult const 0 8832 23 RayTraceHitResult const 23 RayTraceHitResult const 0 0 779 0 0 0 0 0 0 0 0 0 0

899 8 LVector2 0 2105344 8 LVector2 8 LVector2 0 0 900 0 0 0 0 0 0 0 0 0 0

900 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

901 10 LVector2 * 0 8576 10 LVector2 * 10 LVector2 * 0 0 899 0 0 0 0 0 0 0 0 0 0

902 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

903 15 RayTraceScene * 0 8576 15 RayTraceScene * 15 RayTraceScene * 0 0 780 0 0 0 0 0 0 0 0 0 0

904 21 RayTraceScene const * 0 8576 21 RayTraceScene const * 21 RayTraceScene const * 0 0 905 0 0 0 0 0 0 0 0 0 0

905 19 RayTraceScene const 0 8832 19 RayTraceScene const 19 RayTraceScene const 0 0 780 0 0 0 0 0 0 0 0 0 0

906 18 RayTraceGeometry * 0 8576 18 RayTraceGeometry * 18 RayTraceGeometry * 0 0 783 0 0 0 0 0 0 0 0 0 0

907 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 908 0 0 0 0 0 0 0 0 0 0

908 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 909 0 0 0 0 0 0 0 0 0 0

909 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 910 0 0 0 0 0 0 0 0 0 0

910 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

911 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 912 0 0 0 0 0 0 0 0 0 0

912 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 865 0 0 0 0 0 0 0 0 0 0

913 24 RayTraceGeometry const * 0 8576 24 RayTraceGeometry const * 24 RayTraceGeometry const * 0 0 914 0 0 0 0 0 0 0 0 0 0

914 22 RayTraceGeometry const 0 8832 22 RayTraceGeometry const 22 RayTraceGeometry const 0 0 783 0 0 0 0 0 0 0 0 0 0

915 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 909 0 0 0 0 0 0 0 0 0 0

916 22 RayTraceTriangleMesh * 0 8576 22 RayTraceTriangleMesh * 22 RayTraceTriangleMesh * 0 0 785 0 0 0 0 0 0 0 0 0 0

917 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 918 0 0 0 0 0 0 0 0 0 0

918 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 919 0 0 0 0 0 0 0 0 0 0

919 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

920 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 921 0 0 0 0 0 0 0 0 0 0

921 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 922 0 0 0 0 0 0 0 0 0 0

922 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

923 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 924 0 0 0 0 0 0 0 0 0 0

924 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 786 0 0 0 0 0 0 0 0 0 0

925 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 926 0 0 0 0 0 0 0 0 0 0

926 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 884 0 0 0 0 0 0 0 0 0 0

927 13 BulletWorld * 0 8576 13 BulletWorld * 13 BulletWorld * 0 0 928 0 0 0 0 0 0 0 0 0 0

928 11 BulletWorld 0 2048 11 BulletWorld 11 BulletWorld 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

929 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 930 0 0 0 0 0 0 0 0 0 0

930 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 788 0 0 0 0 0 0 0 0 0 0

931 21 BulletRigidBodyNode * 0 8576 21 BulletRigidBodyNode * 21 BulletRigidBodyNode * 0 0 932 0 0 0 0 0 0 0 0 0 0

932 19 BulletRigidBodyNode 0 2048 19 BulletRigidBodyNode 19 BulletRigidBodyNode 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

933 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 934 0 0 0 0 0 0 0 0 0 0

934 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 935 0 0 0 0 0 0 0 0 0 0

935 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

936 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 841 0 0 0 0 0 0 0 0 0 0

937 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 938 0 0 0 0 0 0 0 0 0 0

938 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

939 20 BSPShaderGenerator * 0 8576 20 BSPShaderGenerator * 20 BSPShaderGenerator * 0 0 797 0 0 0 0 0 0 0 0 0 0

940 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 941 0 0 0 0 0 0 0 0 0 0

941 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 942 0 0 0 0 0 0 0 0 0 0

942 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 943 0 0 0 0 0 0 0 0 0 0

943 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

944 15 LColorf const * 0 8576 15 LColorf const * 15 LColorf const * 0 0 945 0 0 0 0 0 0 0 0 0 0

945 13 LColorf const 0 8832 13 LColorf const 13 LColorf const 0 0 869 0 0 0 0 0 0 0 0 0 0

946 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

947 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 946 0 0 0 0 0 0 0 0 0 0

948 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 949 0 0 0 0 0 0 0 0 0 0

949 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 950 0 0 0 0 0 0 0 0 0 0

950 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

951 9 int const 0 8832 9 int const 9 int const 0 0 768 0 0 0 0 0 0 0 0 0 0

952 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 953 0 0 0 0 0 0 0 0 0 0

953 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 954 0 0 0 0 0 0 0 0 0 0

954 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

955 9 LTexCoord 0 2105344 9 LTexCoord 9 LTexCoord 0 0 956 0 0 0 0 0 0 0 0 0 0

956 10 LTexCoordf 0 2105344 10 LTexCoordf 10 LTexCoordf 0 0 943 0 0 0 0 0 0 0 0 0 0

957 11 LTexCoord * 0 8576 11 LTexCoord * 11 LTexCoord * 0 0 955 0 0 0 0 0 0 0 0 0 0

958 20 ShaderPermutations * 0 8576 20 ShaderPermutations * 20 ShaderPermutations * 0 0 790 0 0 0 0 0 0 0 0 0 0

959 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 960 0 0 0 0 0 0 0 0 0 0

960 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 961 0 0 0 0 0 0 0 0 0 0

961 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

962 26 ShaderPermutations const * 0 8576 26 ShaderPermutations const * 26 ShaderPermutations const * 0 0 963 0 0 0 0 0 0 0 0 0 0

963 24 ShaderPermutations const 0 8832 24 ShaderPermutations const 24 ShaderPermutations const 0 0 790 0 0 0 0 0 0 0 0 0 0

964 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 791 0 0 0 0 0 0 0 0 0 0

965 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 781 0 0 0 0 0 0 0 0 0 0

966 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 792 0 0 0 0 0 0 0 0 0 0

967 25 PlanarReflections const * 0 8576 25 PlanarReflections const * 25 PlanarReflections const * 0 0 968 0 0 0 0 0 0 0 0 0 0

968 23 PlanarReflections const 0 8832 23 PlanarReflections const 23 PlanarReflections const 0 0 793 0 0 0 0 0 0 0 0 0 0

969 19 PlanarReflections * 0 8576 19 PlanarReflections * 19 PlanarReflections * 0 0 793 0 0 0 0 0 0 0 0 0 0

970 26 BSPShaderGenerator const * 0 8576 26 BSPShaderGenerator const * 26 BSPShaderGenerator const * 0 0 971 0 0 0 0 0 0 0 0 0 0

971 24 BSPShaderGenerator const 0 8832 24 BSPShaderGenerator const 24 BSPShaderGenerator const 0 0 797 0 0 0 0 0 0 0 0 0 0

972 16 GraphicsOutput * 0 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 973 0 0 0 0 0 0 0 0 0 0

973 14 GraphicsOutput 0 2048 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 0 0 0 0 0 0 0 0 727
/**
 * This is a base class for the various different classes that represent the
 * result of a frame of rendering.  The most common kind of GraphicsOutput is
 * a GraphicsWindow, which is a real-time window on the desktop, but another
 * example is GraphicsBuffer, which is an offscreen buffer.
 *
 * The actual rendering, and anything associated with the graphics context
 * itself, is managed by the associated GraphicsStateGuardian (which might
 * output to multiple GraphicsOutput objects).
 *
 * GraphicsOutputs are not actually writable to bam files, of course, but they
 * may be passed as event parameters, so they inherit from
 * TypedWritableReferenceCount instead of TypedReferenceCount for that
 * convenience.
 */

974 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 975 0 0 0 0 0 0 0 0 0 0

975 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

976 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 977 0 0 0 0 0 0 0 0 0 0

977 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

978 5 Fog * 0 8576 5 Fog * 5 Fog * 0 0 979 0 0 0 0 0 0 0 0 0 0

979 3 Fog 0 2048 3 Fog 3 Fog 0 0 0 0 0 0 0 0 0 0 0 0 782
/**
 * Specifies how atmospheric fog effects are applied to geometry.  The Fog
 * object is now a PandaNode, which means it can be used similarly to a Light
 * to define effects relative to a particular coordinate system within the
 * scene graph.
 *
 * In exponential mode, the fog effects are always camera-relative, and it
 * does not matter where the Fog node is parented.  However, in linear mode,
 * the onset and opaque distances are defined as offsets along the local
 * forward axis (e.g.  the Y axis).  This allows the fog effect to be
 * localized to a particular region in space, rather than always camera-
 * relative.  If the fog object is not parented to any node, it is used to
 * generate traditonal camera-relative fog, as if it were parented to the
 * camera.
 */

980 14 PTA_LVecBase4f 0 2105344 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 981 0 0 0 0 0 0 0 0 0 0

981 37 PointerToArray< UnalignedLVecBase4f > 0 2048 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 0 0 0 0 0 0 0 0 0 0

982 16 PTA_LVecBase4f * 0 8576 16 PTA_LVecBase4f * 16 PTA_LVecBase4f * 0 0 980 0 0 0 0 0 0 0 0 0 0

983 9 PTA_float 0 2105344 9 PTA_float 9 PTA_float 0 0 984 0 0 0 0 0 0 0 0 0 0

984 23 PointerToArray< float > 0 2048 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

985 11 PTA_float * 0 8576 11 PTA_float * 11 PTA_float * 0 0 983 0 0 0 0 0 0 0 0 0 0

986 12 Shader const 0 8832 12 Shader const 12 Shader const 0 0 987 0 0 0 0 0 0 0 0 0 0

987 6 Shader 0 2048 6 Shader 6 Shader 0 0 0 0 0 0 0 0 0 0 0 0 8
/**

 */

988 18 ShaderSpec const * 0 8576 18 ShaderSpec const * 18 ShaderSpec const * 0 0 989 0 0 0 0 0 0 0 0 0 0

989 16 ShaderSpec const 0 8832 16 ShaderSpec const 16 ShaderSpec const 0 0 791 0 0 0 0 0 0 0 0 0 0

990 14 Shader const * 0 8576 14 Shader const * 14 Shader const * 0 0 986 0 0 0 0 0 0 0 0 0 0

991 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 992 0 0 0 0 0 0 0 0 0 0

992 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 799 0 0 0 0 0 0 0 0 0 0

993 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 799 0 0 0 0 0 0 0 0 0 0

994 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 800 0 0 0 0 0 0 0 0 0 0

995 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 996 0 0 0 0 0 0 0 0 0 0

996 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 801 0 0 0 0 0 0 0 0 0 0

997 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 801 0 0 0 0 0 0 0 0 0 0

998 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 999 0 0 0 0 0 0 0 0 0 0

999 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 802 0 0 0 0 0 0 0 0 0 0

1000 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 802 0 0 0 0 0 0 0 0 0 0

1001 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 1002 0 0 0 0 0 0 0 0 0 0

1002 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 803 0 0 0 0 0 0 0 0 0 0

1003 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 803 0 0 0 0 0 0 0 0 0 0

1004 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 1005 0 0 0 0 0 0 0 0 0 0

1005 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 805 0 0 0 0 0 0 0 0 0 0

1006 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 805 0 0 0 0 0 0 0 0 0 0

1007 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 807 0 0 0 0 0 0 0 0 0 0

1008 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 808 0 0 0 0 0 0 0 0 0 0

1009 18 UnlitGenericSpec * 0 8576 18 UnlitGenericSpec * 18 UnlitGenericSpec * 0 0 809 0 0 0 0 0 0 0 0 0 0

1010 16 UnlitNoMatSpec * 0 8576 16 UnlitNoMatSpec * 16 UnlitNoMatSpec * 0 0 810 0 0 0 0 0 0 0 0 0 0

1011 15 CSMRenderSpec * 0 8576 15 CSMRenderSpec * 15 CSMRenderSpec * 0 0 811 0 0 0 0 0 0 0 0 0 0

1012 12 SkyBoxSpec * 0 8576 12 SkyBoxSpec * 12 SkyBoxSpec * 0 0 812 0 0 0 0 0 0 0 0 0 0

1013 18 RenderEffect const 0 8832 18 RenderEffect const 18 RenderEffect const 0 0 814 0 0 0 0 0 0 0 0 0 0

1014 20 RenderEffect const * 0 8576 20 RenderEffect const * 20 RenderEffect const * 0 0 1013 0 0 0 0 0 0 0 0 0 0

1015 22 Audio3DManager const * 0 8576 22 Audio3DManager const * 22 Audio3DManager const * 0 0 1016 0 0 0 0 0 0 0 0 0 0

1016 20 Audio3DManager const 0 8832 20 Audio3DManager const 20 Audio3DManager const 0 0 815 0 0 0 0 0 0 0 0 0 0

1017 16 Audio3DManager * 0 8576 16 Audio3DManager * 16 Audio3DManager * 0 0 815 0 0 0 0 0 0 0 0 0 0

1018 14 AudioManager * 0 8576 14 AudioManager * 14 AudioManager * 0 0 1019 0 0 0 0 0 0 0 0 0 0

1019 12 AudioManager 0 2048 12 AudioManager 12 AudioManager 0 0 0 0 0 0 0 0 0 0 0 0 0

1020 12 AudioSound * 0 8576 12 AudioSound * 12 AudioSound * 0 0 1021 0 0 0 0 0 0 0 0 0 0

1021 10 AudioSound 0 2048 10 AudioSound 10 AudioSound 0 0 0 0 0 0 0 0 0 0 0 0 0

1022 8 CIOLib * 0 8576 8 CIOLib * 8 CIOLib * 0 0 816 0 0 0 0 0 0 0 0 0 0

1023 14 CIOLib const * 0 8576 14 CIOLib const * 14 CIOLib const * 0 0 1024 0 0 0 0 0 0 0 0 0 0

1024 12 CIOLib const 0 8832 12 CIOLib const 12 CIOLib const 0 0 816 0 0 0 0 0 0 0 0 0 0

1025 19 DecalModulateSpec * 0 8576 19 DecalModulateSpec * 19 DecalModulateSpec * 0 0 817 0 0 0 0 0 0 0 0 0 0

1026 16 GeomNode const * 0 8576 16 GeomNode const * 16 GeomNode const * 0 0 1027 0 0 0 0 0 0 0 0 0 0

1027 14 GeomNode const 0 8832 14 GeomNode const 14 GeomNode const 0 0 819 0 0 0 0 0 0 0 0 0 0

1028 10 GlowNode * 0 8576 10 GlowNode * 10 GlowNode * 0 0 818 0 0 0 0 0 0 0 0 0 0

1029 16 GlowNode const * 0 8576 16 GlowNode const * 16 GlowNode const * 0 0 1030 0 0 0 0 0 0 0 0 0 0

1030 14 GlowNode const 0 8832 14 GlowNode const 14 GlowNode const 0 0 818 0 0 0 0 0 0 0 0 0 0

1031 19 PostProcessEffect * 0 8576 19 PostProcessEffect * 19 PostProcessEffect * 0 0 820 0 0 0 0 0 0 0 0 0 0

1032 17 PostProcessPass * 0 8576 17 PostProcessPass * 17 PostProcessPass * 0 0 822 0 0 0 0 0 0 0 0 0 0

1033 13 PostProcess * 0 8576 13 PostProcess * 13 PostProcess * 0 0 824 0 0 0 0 0 0 0 0 0 0

1034 29 FrameBufferProperties const * 0 8576 29 FrameBufferProperties const * 29 FrameBufferProperties const * 0 0 1035 0 0 0 0 0 0 0 0 0 0

1035 27 FrameBufferProperties const 0 8832 27 FrameBufferProperties const 27 FrameBufferProperties const 0 0 1036 0 0 0 0 0 0 0 0 0 0

1036 21 FrameBufferProperties 0 2048 21 FrameBufferProperties 21 FrameBufferProperties 0 0 0 0 0 0 0 0 0 0 0 0 132
/**
 * A container for the various kinds of properties we might ask to have on a
 * graphics frameBuffer before we create a GSG.
 */

1037 17 LVector2i const * 0 8576 17 LVector2i const * 17 LVector2i const * 0 0 1038 0 0 0 0 0 0 0 0 0 0

1038 15 LVector2i const 0 8832 15 LVector2i const 15 LVector2i const 0 0 1039 0 0 0 0 0 0 0 0 0 0

1039 9 LVector2i 0 2048 9 LVector2i 9 LVector2i 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

1040 23 PostProcessPass const * 0 8576 23 PostProcessPass const * 23 PostProcessPass const * 0 0 1041 0 0 0 0 0 0 0 0 0 0

1041 21 PostProcessPass const 0 8832 21 PostProcessPass const 21 PostProcessPass const 0 0 822 0 0 0 0 0 0 0 0 0 0

1042 11 LVector2i * 0 8576 11 LVector2i * 11 LVector2i * 0 0 1039 0 0 0 0 0 0 0 0 0 0

1043 23 FrameBufferProperties * 0 8576 23 FrameBufferProperties * 23 FrameBufferProperties * 0 0 1036 0 0 0 0 0 0 0 0 0 0

1044 22 PostProcessScenePass * 0 8576 22 PostProcessScenePass * 22 PostProcessScenePass * 0 0 823 0 0 0 0 0 0 0 0 0 0

1045 28 PostProcessScenePass const * 0 8576 28 PostProcessScenePass const * 28 PostProcessScenePass const * 0 0 1046 0 0 0 0 0 0 0 0 0 0

1046 26 PostProcessScenePass const 0 8832 26 PostProcessScenePass const 26 PostProcessScenePass const 0 0 823 0 0 0 0 0 0 0 0 0 0

1047 19 RenderState const * 0 8576 19 RenderState const * 19 RenderState const * 0 0 1048 0 0 0 0 0 0 0 0 0 0

1048 17 RenderState const 0 8832 17 RenderState const 17 RenderState const 0 0 1049 0 0 0 0 0 0 0 0 0 0

1049 11 RenderState 0 2048 11 RenderState 11 RenderState 0 0 0 0 0 0 0 0 0 0 0 0 340
/**
 * This represents a unique collection of RenderAttrib objects that correspond
 * to a particular renderable state.
 *
 * You should not attempt to create or modify a RenderState object directly.
 * Instead, call one of the make() functions to create one for you.  And
 * instead of modifying a RenderState object, create a new one.
 */

1050 19 PostProcess const * 0 8576 19 PostProcess const * 19 PostProcess const * 0 0 1051 0 0 0 0 0 0 0 0 0 0

1051 17 PostProcess const 0 8832 17 PostProcess const 17 PostProcess const 0 0 824 0 0 0 0 0 0 0 0 0 0

1052 13 DisplayRegion 0 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 399
/**
 * A rectangular subregion within a window for rendering into.  Typically,
 * there is one DisplayRegion that covers the whole window, but you may also
 * create smaller DisplayRegions for having different regions within the
 * window that represent different scenes.  You may also stack up
 * DisplayRegions like panes of glass, usually for layering 2-d interfaces on
 * top of a 3-d scene.
 */

1053 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 1052 0 0 0 0 0 0 0 0 0 0

1054 16 DrawableRegion * 0 8576 16 DrawableRegion * 16 DrawableRegion * 0 0 1055 0 0 0 0 0 0 0 0 0 0

1055 14 DrawableRegion 0 2048 14 DrawableRegion 14 DrawableRegion 0 0 0 0 0 0 0 0 0 0 0 0 389
/**
 * This is a base class for GraphicsWindow (actually, GraphicsOutput) and
 * DisplayRegion, both of which are conceptually rectangular regions into
 * which drawing commands may be issued.  Sometimes you want to deal with a
 * single display region, and sometimes you want to deal with the whole window
 * at once, particularly for issuing clear commands and capturing screenshots.
 */

1056 15 HDRPass const * 0 8576 15 HDRPass const * 15 HDRPass const * 0 0 1057 0 0 0 0 0 0 0 0 0 0

1057 13 HDRPass const 0 8832 13 HDRPass const 13 HDRPass const 0 0 825 0 0 0 0 0 0 0 0 0 0

1058 9 HDRPass * 0 8576 9 HDRPass * 9 HDRPass * 0 0 825 0 0 0 0 0 0 0 0 0 0

1059 11 HDREffect * 0 8576 11 HDREffect * 11 HDREffect * 0 0 826 0 0 0 0 0 0 0 0 0 0

1060 17 HDREffect const * 0 8576 17 HDREffect const * 17 HDREffect const * 0 0 1061 0 0 0 0 0 0 0 0 0 0

1061 15 HDREffect const 0 8832 15 HDREffect const 15 HDREffect const 0 0 826 0 0 0 0 0 0 0 0 0 0

1062 13 BloomEffect * 0 8576 13 BloomEffect * 13 BloomEffect * 0 0 827 0 0 0 0 0 0 0 0 0 0

1063 28 LightingOriginEffect const * 0 8576 28 LightingOriginEffect const * 28 LightingOriginEffect const * 0 0 1064 0 0 0 0 0 0 0 0 0 0

1064 26 LightingOriginEffect const 0 8832 26 LightingOriginEffect const 26 LightingOriginEffect const 0 0 828 0 0 0 0 0 0 0 0 0 0

0
2
1065 10 class_slot 0 2 768 410 0 0 0 0 0 0 0 29 BSPMaterialAttrib::class_slot 0

1066 10 class_slot 0 2 768 505 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

0
