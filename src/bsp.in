1580501681
3 3
3 bsp 4 t5GT 3 bsp 
435
410 3 get 0 4 845 18 TextureStages::get 0 2 3 4 0
159
static TextureStage *TextureStages::get(std::string const &name);
static TextureStage *TextureStages::get(std::string const &name, std::string const &uv_name);

411 15 get_basetexture 0 4 845 30 TextureStages::get_basetexture 0 1 5 0
58
static TextureStage *TextureStages::get_basetexture(void);

412 12 get_lightmap 0 4 845 27 TextureStages::get_lightmap 0 1 6 0
55
static TextureStage *TextureStages::get_lightmap(void);

413 19 get_bumped_lightmap 0 4 845 34 TextureStages::get_bumped_lightmap 0 1 7 0
62
static TextureStage *TextureStages::get_bumped_lightmap(void);

414 13 get_spheremap 0 4 845 28 TextureStages::get_spheremap 0 1 8 0
56
static TextureStage *TextureStages::get_spheremap(void);

415 11 get_cubemap 0 4 845 26 TextureStages::get_cubemap 0 1 9 0
54
static TextureStage *TextureStages::get_cubemap(void);

416 13 get_normalmap 0 4 845 28 TextureStages::get_normalmap 0 1 10 0
56
static TextureStage *TextureStages::get_normalmap(void);

417 13 get_heightmap 0 4 845 28 TextureStages::get_heightmap 0 1 11 0
56
static TextureStage *TextureStages::get_heightmap(void);

418 12 get_glossmap 0 4 845 27 TextureStages::get_glossmap 0 1 12 0
55
static TextureStage *TextureStages::get_glossmap(void);

419 11 get_glowmap 0 4 845 26 TextureStages::get_glowmap 0 1 13 0
54
static TextureStage *TextureStages::get_glowmap(void);

420 13 TextureStages 0 4 845 28 TextureStages::TextureStages 0 2 1 2 0
122
inline TextureStages::TextureStages(void) = default;
inline TextureStages::TextureStages(TextureStages const &) = default;

421 14 ~TextureStages 0 4 845 29 TextureStages::~TextureStages 0 0 0
36
TextureStages::~TextureStages(void);

422 11 BSPMaterial 0 4 846 24 BSPMaterial::BSPMaterial 0 2 14 15 0
139
inline explicit BSPMaterial::BSPMaterial(std::string const &name = "UnlitNoMat");
inline BSPMaterial::BSPMaterial(BSPMaterial const &copy);

423 10 operator = 0 4 846 23 BSPMaterial::operator = 0 1 16 0
61
inline void BSPMaterial::operator =(BSPMaterial const &copy);

424 12 set_keyvalue 0 4 846 25 BSPMaterial::set_keyvalue 0 1 17 0
88
inline void BSPMaterial::set_keyvalue(std::string const &key, std::string const &value);

425 12 get_keyvalue 0 4 846 25 BSPMaterial::get_keyvalue 0 1 18 0
75
inline std::string BSPMaterial::get_keyvalue(std::string const &key) const;

426 17 get_num_keyvalues 0 4 846 30 BSPMaterial::get_num_keyvalues 0 1 19 0
62
inline std::size_t BSPMaterial::get_num_keyvalues(void) const;

427 7 get_key 0 4 846 20 BSPMaterial::get_key 0 1 20 0
68
inline std::string const &BSPMaterial::get_key(std::size_t i) const;

428 9 get_value 0 4 846 22 BSPMaterial::get_value 0 1 21 0
70
inline std::string const &BSPMaterial::get_value(std::size_t i) const;

429 16 get_keyvalue_int 0 4 846 29 BSPMaterial::get_keyvalue_int 0 1 22 0
71
inline int BSPMaterial::get_keyvalue_int(std::string const &key) const;

430 18 get_keyvalue_float 0 4 846 31 BSPMaterial::get_keyvalue_float 0 1 23 0
75
inline float BSPMaterial::get_keyvalue_float(std::string const &key) const;

431 10 set_shader 0 4 846 23 BSPMaterial::set_shader 0 1 24 0
68
inline void BSPMaterial::set_shader(std::string const &shader_name);

432 10 get_shader 0 4 846 23 BSPMaterial::get_shader 0 1 25 0
55
inline std::string BSPMaterial::get_shader(void) const;

433 8 get_file 0 4 846 21 BSPMaterial::get_file 0 1 26 0
50
inline Filename BSPMaterial::get_file(void) const;

434 12 has_keyvalue 0 4 846 25 BSPMaterial::has_keyvalue 0 1 27 0
68
inline bool BSPMaterial::has_keyvalue(std::string const &key) const;

435 15 has_env_cubemap 0 4 846 28 BSPMaterial::has_env_cubemap 0 1 28 0
53
inline bool BSPMaterial::has_env_cubemap(void) const;

436 16 has_transparency 0 4 846 29 BSPMaterial::has_transparency 0 1 29 0
54
inline bool BSPMaterial::has_transparency(void) const;

437 16 get_surface_prop 0 4 846 29 BSPMaterial::get_surface_prop 0 1 30 0
61
inline std::string BSPMaterial::get_surface_prop(void) const;

438 12 get_contents 0 4 846 25 BSPMaterial::get_contents 0 1 31 0
57
inline std::string BSPMaterial::get_contents(void) const;

439 14 is_lightmapped 0 4 846 27 BSPMaterial::is_lightmapped 0 1 32 0
52
inline bool BSPMaterial::is_lightmapped(void) const;

440 9 is_skybox 0 4 846 22 BSPMaterial::is_skybox 0 1 33 0
47
inline bool BSPMaterial::is_skybox(void) const;

441 11 has_bumpmap 0 4 846 24 BSPMaterial::has_bumpmap 0 1 34 0
49
inline bool BSPMaterial::has_bumpmap(void) const;

442 13 get_from_file 0 4 846 26 BSPMaterial::get_from_file 0 1 35 0
75
static BSPMaterial const *BSPMaterial::get_from_file(Filename const &file);

443 14 get_class_type 0 4 846 27 BSPMaterial::get_class_type 0 1 36 0
52
static TypeHandle BSPMaterial::get_class_type(void);

444 12 ~BSPMaterial 0 4 846 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

445 4 make 0 4 848 23 BSPMaterialAttrib::make 0 1 37 0
86
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make(BSPMaterial const *mat);

446 20 make_override_shader 0 4 848 39 BSPMaterialAttrib::make_override_shader 0 1 38 0
102
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_override_shader(BSPMaterial const *mat);

447 12 make_default 0 4 848 31 BSPMaterialAttrib::make_default 0 1 39 0
76
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_default(void);

448 19 get_override_shader 0 4 848 38 BSPMaterialAttrib::get_override_shader 0 1 40 0
70
inline std::string BSPMaterialAttrib::get_override_shader(void) const;

449 19 has_override_shader 0 4 848 38 BSPMaterialAttrib::has_override_shader 0 1 41 0
63
inline bool BSPMaterialAttrib::has_override_shader(void) const;

450 12 get_material 0 4 848 31 BSPMaterialAttrib::get_material 0 1 42 0
70
inline BSPMaterial const *BSPMaterialAttrib::get_material(void) const;

451 14 get_class_slot 0 4 848 33 BSPMaterialAttrib::get_class_slot 0 1 43 0
51
static int BSPMaterialAttrib::get_class_slot(void);

452 14 get_class_type 0 4 848 33 BSPMaterialAttrib::get_class_type 0 1 44 0
58
static TypeHandle BSPMaterialAttrib::get_class_type(void);

453 18 ~BSPMaterialAttrib 0 4 848 37 BSPMaterialAttrib::~BSPMaterialAttrib 0 0 0
44
BSPMaterialAttrib::~BSPMaterialAttrib(void);

454 14 get_num_points 0 4 851 28 BoundingKDOP::get_num_points 0 1 45 0
60
inline std::size_t BoundingKDOP::get_num_points(void) const;

455 9 get_point 0 4 851 23 BoundingKDOP::get_point 0 1 46 0
52
inline LPoint3 BoundingKDOP::get_point(int n) const;

456 14 get_num_planes 0 4 851 28 BoundingKDOP::get_num_planes 0 1 47 0
60
inline std::size_t BoundingKDOP::get_num_planes(void) const;

457 9 get_plane 0 4 851 23 BoundingKDOP::get_plane 0 1 48 0
51
inline LPlane BoundingKDOP::get_plane(int n) const;

458 14 get_class_type 0 4 851 28 BoundingKDOP::get_class_type 0 1 49 0
53
static TypeHandle BoundingKDOP::get_class_type(void);

459 13 ~BoundingKDOP 0 4 851 27 BoundingKDOP::~BoundingKDOP 0 0 0
34
BoundingKDOP::~BoundingKDOP(void);

460 14 get_class_type 0 4 853 27 CBaseEntity::get_class_type 0 1 52 0
52
static TypeHandle CBaseEntity::get_class_type(void);

461 11 CBaseEntity 0 4 853 24 CBaseEntity::CBaseEntity 0 2 50 51 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

462 10 get_loader 0 4 853 23 CBaseEntity::get_loader 0 1 53 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

463 16 get_entity_value 0 4 853 29 CBaseEntity::get_entity_value 0 1 54 0
79
inline std::string CBaseEntity::get_entity_value(std::string const &key) const;

464 23 get_entity_value_vector 0 4 853 36 CBaseEntity::get_entity_value_vector 0 1 55 0
76
LVector3 CBaseEntity::get_entity_value_vector(std::string const &key) const;

465 22 get_entity_value_color 0 4 853 35 CBaseEntity::get_entity_value_color 0 1 56 0
92
LColor CBaseEntity::get_entity_value_color(std::string const &key, bool scale = true) const;

466 13 get_classname 0 4 853 26 CBaseEntity::get_classname 0 1 57 0
58
inline std::string CBaseEntity::get_classname(void) const;

467 14 get_targetname 0 4 853 27 CBaseEntity::get_targetname 0 1 58 0
59
inline std::string CBaseEntity::get_targetname(void) const;

468 14 get_bsp_entnum 0 4 853 27 CBaseEntity::get_bsp_entnum 0 1 59 0
51
inline int CBaseEntity::get_bsp_entnum(void) const;

469 12 ~CBaseEntity 0 4 853 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

470 14 get_class_type 0 4 854 28 CPointEntity::get_class_type 0 1 62 0
53
static TypeHandle CPointEntity::get_class_type(void);

471 12 CPointEntity 0 4 854 26 CPointEntity::CPointEntity 0 2 60 61 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

472 10 get_origin 0 4 854 24 CPointEntity::get_origin 0 1 63 0
45
LPoint3 CPointEntity::get_origin(void) const;

473 10 get_angles 0 4 854 24 CPointEntity::get_angles 0 1 64 0
46
LVector3 CPointEntity::get_angles(void) const;

474 13 ~CPointEntity 0 4 854 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

475 14 get_class_type 0 4 855 29 CBoundsEntity::get_class_type 0 1 67 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

476 13 CBoundsEntity 0 4 855 28 CBoundsEntity::CBoundsEntity 0 2 65 66 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

477 10 get_bounds 0 4 855 25 CBoundsEntity::get_bounds 0 1 68 0
52
BoundingKDOP *CBoundsEntity::get_bounds(void) const;

478 9 is_inside 0 4 855 24 CBoundsEntity::is_inside 0 1 69 0
56
bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

479 13 fillin_bounds 0 4 855 28 CBoundsEntity::fillin_bounds 0 1 70 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

480 14 ~CBoundsEntity 0 4 855 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

481 14 get_class_type 0 4 856 28 CBrushEntity::get_class_type 0 1 73 0
53
static TypeHandle CBrushEntity::get_class_type(void);

482 12 CBrushEntity 0 4 856 26 CBrushEntity::CBrushEntity 0 2 71 72 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

483 12 get_model_np 0 4 856 26 CBrushEntity::get_model_np 0 1 74 0
48
NodePath CBrushEntity::get_model_np(void) const;

484 16 get_model_bounds 0 4 856 30 CBrushEntity::get_model_bounds 0 1 75 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

485 13 ~CBrushEntity 0 4 856 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

486 9 get_width 0 4 857 21 PackResult::get_width 0 1 77 0
45
inline int PackResult::get_width(void) const;

487 10 get_height 0 4 857 22 PackResult::get_height 0 1 78 0
46
inline int PackResult::get_height(void) const;

488 15 get_unused_area 0 4 857 27 PackResult::get_unused_area 0 1 79 0
51
inline int PackResult::get_unused_area(void) const;

489 10 PackResult 0 4 857 22 PackResult::PackResult 0 1 76 0
60
inline PackResult::PackResult(PackResult const &) = default;

490 11 ~PackResult 0 4 857 23 PackResult::~PackResult 0 0 0
30
PackResult::~PackResult(void);

491 5 get_x 0 4 858 22 TextureLocation::get_x 0 1 81 0
46
inline int TextureLocation::get_x(void) const;

492 5 get_y 0 4 858 22 TextureLocation::get_y 0 1 82 0
46
inline int TextureLocation::get_y(void) const;

493 9 get_width 0 4 858 26 TextureLocation::get_width 0 1 83 0
50
inline int TextureLocation::get_width(void) const;

494 10 get_height 0 4 858 27 TextureLocation::get_height 0 1 84 0
51
inline int TextureLocation::get_height(void) const;

495 11 get_rotated 0 4 858 28 TextureLocation::get_rotated 0 1 85 0
53
inline bool TextureLocation::get_rotated(void) const;

496 15 TextureLocation 0 4 858 32 TextureLocation::TextureLocation 0 1 80 0
75
inline TextureLocation::TextureLocation(TextureLocation const &) = default;

497 16 ~TextureLocation 0 4 858 33 TextureLocation::~TextureLocation 0 0 0
40
TextureLocation::~TextureLocation(void);

498 15 getTextureCount 0 6 859 30 TexturePacker::getTextureCount 0 1 86 0
53
virtual int TexturePacker::getTextureCount(void) = 0;

499 15 setTextureCount 0 6 859 30 TexturePacker::setTextureCount 0 1 87 35
// number of textures to consider..
60
virtual void TexturePacker::setTextureCount(int tcount) = 0;

500 10 addTexture 0 6 859 25 TexturePacker::addTexture 0 1 88 21
// add textures 0 - n
61
virtual void TexturePacker::addTexture(int wid, int hit) = 0;

501 15 wouldTextureFit 0 6 859 30 TexturePacker::wouldTextureFit 0 1 89 0
135
virtual bool TexturePacker::wouldTextureFit(int wid, int hit, bool forcePowerOfTwo, bool onePixelBorder, int max_wid, int max_hit) = 0;

502 13 addNewTexture 0 6 859 28 TexturePacker::addNewTexture 0 1 90 0
64
virtual void TexturePacker::addNewTexture(int wid, int hit) = 0;

503 12 packTextures 0 6 859 27 TexturePacker::packTextures 0 1 91 74
// pack the textures, the return code is the amount of wasted/unused area.
94
virtual PackResult TexturePacker::packTextures(bool forcePowerOfTwo, bool onePixelBorder) = 0;

504 18 getTextureLocation 0 6 859 33 TexturePacker::getTextureLocation 0 1 92 58
// returns true if the texture has been rotated 90 degrees
73
virtual TextureLocation TexturePacker::getTextureLocation(int index) = 0;

505 19 createTexturePacker 0 4 859 34 TexturePacker::createTexturePacker 0 1 93 0
63
static TexturePacker *TexturePacker::createTexturePacker(void);

506 20 releaseTexturePacker 0 4 859 35 TexturePacker::releaseTexturePacker 0 1 94 0
67
static void TexturePacker::releaseTexturePacker(TexturePacker *tp);

507 14 ~TexturePacker 0 4 859 29 TexturePacker::~TexturePacker 0 0 0
36
TexturePacker::~TexturePacker(void);

508 10 initialize 0 4 860 20 RayTrace::initialize 0 1 97 0
39
static void RayTrace::initialize(void);

509 8 destruct 0 4 860 18 RayTrace::destruct 0 1 98 0
37
static void RayTrace::destruct(void);

510 8 RayTrace 0 4 860 18 RayTrace::RayTrace 0 2 95 96 0
97
inline RayTrace::RayTrace(void) = default;
inline RayTrace::RayTrace(RayTrace const &) = default;

511 9 ~RayTrace 0 4 860 19 RayTrace::~RayTrace 0 0 0
26
RayTrace::~RayTrace(void);

512 17 RayTraceHitResult 0 4 861 36 RayTraceHitResult::RayTraceHitResult 0 2 99 100 0
132
inline RayTraceHitResult::RayTraceHitResult(void);
inline RayTraceHitResult::RayTraceHitResult(RayTraceHitResult const &) = default;

513 7 has_hit 0 4 861 26 RayTraceHitResult::has_hit 0 1 101 0
51
inline bool RayTraceHitResult::has_hit(void) const;

514 14 get_hit_normal 0 4 861 33 RayTraceHitResult::get_hit_normal 0 1 102 0
62
inline LVector3 RayTraceHitResult::get_hit_normal(void) const;

515 6 get_uv 0 4 861 25 RayTraceHitResult::get_uv 0 1 103 0
54
inline LVector2 RayTraceHitResult::get_uv(void) const;

516 11 get_prim_id 0 4 861 30 RayTraceHitResult::get_prim_id 0 1 104 0
63
inline unsigned int RayTraceHitResult::get_prim_id(void) const;

517 11 get_geom_id 0 4 861 30 RayTraceHitResult::get_geom_id 0 1 105 0
63
inline unsigned int RayTraceHitResult::get_geom_id(void) const;

518 16 get_hit_fraction 0 4 861 35 RayTraceHitResult::get_hit_fraction 0 1 106 0
61
inline float RayTraceHitResult::get_hit_fraction(void) const;

519 18 ~RayTraceHitResult 0 4 861 37 RayTraceHitResult::~RayTraceHitResult 0 0 0
44
RayTraceHitResult::~RayTraceHitResult(void);

520 13 RayTraceScene 0 4 862 28 RayTraceScene::RayTraceScene 0 2 107 108 0
105
RayTraceScene::RayTraceScene(void);
inline RayTraceScene::RayTraceScene(RayTraceScene const &) = default;

521 12 add_geometry 0 4 862 27 RayTraceScene::add_geometry 0 1 109 0
57
void RayTraceScene::add_geometry(RayTraceGeometry *geom);

522 15 remove_geometry 0 4 862 30 RayTraceScene::remove_geometry 0 1 110 0
60
void RayTraceScene::remove_geometry(RayTraceGeometry *geom);

523 10 remove_all 0 4 862 25 RayTraceScene::remove_all 0 1 111 0
37
void RayTraceScene::remove_all(void);

524 10 trace_line 0 4 862 25 RayTraceScene::trace_line 0 1 112 0
116
inline RayTraceHitResult RayTraceScene::trace_line(LPoint3 const &start, LPoint3 const &end, BitMask32 const &mask);

525 9 trace_ray 0 4 862 24 RayTraceScene::trace_ray 0 1 113 0
132
RayTraceHitResult RayTraceScene::trace_ray(LPoint3 const &origin, LVector3 const &direction, float distance, BitMask32 const &mask);

526 17 set_build_quality 0 4 862 32 RayTraceScene::set_build_quality 0 1 114 0
51
void RayTraceScene::set_build_quality(int quality);

527 6 update 0 4 862 21 RayTraceScene::update 0 1 115 0
33
void RayTraceScene::update(void);

528 12 get_geometry 0 4 862 27 RayTraceScene::get_geometry 0 1 116 0
75
inline RayTraceGeometry *RayTraceScene::get_geometry(unsigned int geom_id);

529 14 get_class_type 0 4 865 32 RayTraceGeometry::get_class_type 0 1 117 0
57
static TypeHandle RayTraceGeometry::get_class_type(void);

530 8 set_mask 0 4 865 26 RayTraceGeometry::set_mask 0 2 118 119 0
114
inline void RayTraceGeometry::set_mask(BitMask32 const &mask);
void RayTraceGeometry::set_mask(unsigned int mask);

531 8 get_mask 0 4 865 26 RayTraceGeometry::get_mask 0 1 120 0
56
inline BitMask32 RayTraceGeometry::get_mask(void) const;

532 11 get_geom_id 0 4 865 29 RayTraceGeometry::get_geom_id 0 1 121 0
62
inline unsigned int RayTraceGeometry::get_geom_id(void) const;

533 17 set_build_quality 0 4 865 35 RayTraceGeometry::set_build_quality 0 1 122 0
54
void RayTraceGeometry::set_build_quality(int quality);

534 5 build 0 6 865 23 RayTraceGeometry::build 0 1 123 0
47
virtual void RayTraceGeometry::build(void) = 0;

535 14 get_class_type 0 4 867 36 RayTraceTriangleMesh::get_class_type 0 1 125 0
61
static TypeHandle RayTraceTriangleMesh::get_class_type(void);

536 20 RayTraceTriangleMesh 0 4 867 42 RayTraceTriangleMesh::RayTraceTriangleMesh 0 1 124 0
73
RayTraceTriangleMesh::RayTraceTriangleMesh(std::string const &name = "");

537 12 add_triangle 0 4 867 34 RayTraceTriangleMesh::add_triangle 0 1 126 0
97
void RayTraceTriangleMesh::add_triangle(LPoint3 const &p1, LPoint3 const &p2, LPoint3 const &p3);

538 23 add_triangles_from_geom 0 4 867 45 RayTraceTriangleMesh::add_triangles_from_geom 0 1 127 0
105
void RayTraceTriangleMesh::add_triangles_from_geom(Geom const *geom, TransformState const *ts = nullptr);

539 21 ~RayTraceTriangleMesh 0 4 867 43 RayTraceTriangleMesh::~RayTraceTriangleMesh 0 0 0
50
RayTraceTriangleMesh::~RayTraceTriangleMesh(void);

540 4 make 0 4 868 19 BSPFaceAttrib::make 0 1 128 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

541 12 make_default 0 4 868 27 BSPFaceAttrib::make_default 0 1 129 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

542 15 make_ignore_pvs 0 4 868 30 BSPFaceAttrib::make_ignore_pvs 0 1 130 0
75
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_ignore_pvs(void);

543 12 get_material 0 4 868 27 BSPFaceAttrib::get_material 0 1 131 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

544 13 get_face_type 0 4 868 28 BSPFaceAttrib::get_face_type 0 1 132 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

545 14 get_ignore_pvs 0 4 868 29 BSPFaceAttrib::get_ignore_pvs 0 1 133 0
54
inline bool BSPFaceAttrib::get_ignore_pvs(void) const;

546 14 get_class_slot 0 4 868 29 BSPFaceAttrib::get_class_slot 0 1 134 0
47
static int BSPFaceAttrib::get_class_slot(void);

547 14 get_class_type 0 4 868 29 BSPFaceAttrib::get_class_type 0 1 135 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

548 14 ~BSPFaceAttrib 0 4 868 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

549 9 BSPLoader 0 4 870 20 BSPLoader::BSPLoader 0 1 136 0
27
BSPLoader::BSPLoader(void);

550 14 remove_physics 0 4 870 25 BSPLoader::remove_physics 0 1 137 0
53
void BSPLoader::remove_physics(NodePath const &root);

551 17 set_physics_world 0 4 870 28 BSPLoader::set_physics_world 0 1 138 0
54
void BSPLoader::set_physics_world(BulletWorld *world);

552 17 get_physics_world 0 4 870 28 BSPLoader::get_physics_world 0 1 139 0
61
inline BulletWorld *BSPLoader::get_physics_world(void) const;

553 24 has_brush_collision_node 0 4 870 35 BSPLoader::has_brush_collision_node 0 1 140 0
83
inline bool BSPLoader::has_brush_collision_node(BulletRigidBodyNode *rbnode) const;

554 28 has_brush_collision_triangle 0 4 870 39 BSPLoader::has_brush_collision_triangle 0 1 141 0
99
inline bool BSPLoader::has_brush_collision_triangle(BulletRigidBodyNode *rbnode, int triangle_idx);

555 27 get_brush_triangle_material 0 4 870 38 BSPLoader::get_brush_triangle_material 0 1 142 0
105
inline std::string BSPLoader::get_brush_triangle_material(BulletRigidBodyNode *rbnode, int triangle_idx);

556 24 get_brush_triangle_model 0 4 870 35 BSPLoader::get_brush_triangle_model 0 1 143 0
94
inline int BSPLoader::get_brush_triangle_model(BulletRigidBodyNode *rbnode, int triangle_idx);

557 29 get_brush_triangle_model_fast 0 4 870 40 BSPLoader::get_brush_triangle_model_fast 0 1 144 0
92
int BSPLoader::get_brush_triangle_model_fast(BulletRigidBodyNode *rbnode, int triangle_idx);

558 16 get_model_origin 0 4 870 27 BSPLoader::get_model_origin 0 1 145 0
57
inline LPoint3 BSPLoader::get_model_origin(int modelnum);

559 18 add_dynamic_entity 0 4 870 29 BSPLoader::add_dynamic_entity 0 1 146 0
52
void BSPLoader::add_dynamic_entity(PyObject *pyent);

560 21 remove_dynamic_entity 0 4 870 32 BSPLoader::remove_dynamic_entity 0 1 147 0
55
void BSPLoader::remove_dynamic_entity(PyObject *pyent);

561 21 mark_entity_preserved 0 4 870 32 BSPLoader::mark_entity_preserved 0 1 148 0
68
void BSPLoader::mark_entity_preserved(int n, bool preserved = true);

562 16 get_num_entities 0 4 870 27 BSPLoader::get_num_entities 0 1 149 0
51
inline int BSPLoader::get_num_entities(void) const;

563 10 get_entity 0 4 870 21 BSPLoader::get_entity 0 1 150 0
45
PyObject *BSPLoader::get_entity(int n) const;

564 23 set_transition_landmark 0 4 870 34 BSPLoader::set_transition_landmark 0 1 151 0
120
inline void BSPLoader::set_transition_landmark(std::string const &name, LVector3 const &origin, LVector3 const &angles);

565 25 clear_transition_landmark 0 4 870 36 BSPLoader::clear_transition_landmark 0 1 152 0
55
inline void BSPLoader::clear_transition_landmark(void);

566 4 read 0 4 870 15 BSPLoader::read 0 1 153 0
71
bool BSPLoader::read(Filename const &file, bool is_transition = false);

567 16 do_optimizations 0 4 870 27 BSPLoader::do_optimizations 0 1 154 0
39
void BSPLoader::do_optimizations(void);

568 14 spawn_entities 0 4 870 25 BSPLoader::spawn_entities 0 1 155 0
37
void BSPLoader::spawn_entities(void);

569 9 set_gamma 0 4 870 20 BSPLoader::set_gamma 0 1 156 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

570 9 get_gamma 0 4 870 20 BSPLoader::get_gamma 0 1 157 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

571 7 set_win 0 4 870 18 BSPLoader::set_win 0 1 158 0
45
void BSPLoader::set_win(GraphicsWindow *win);

572 10 set_camera 0 4 870 21 BSPLoader::set_camera 0 1 159 0
51
void BSPLoader::set_camera(NodePath const &camera);

573 10 set_render 0 4 870 21 BSPLoader::set_render 0 1 160 0
51
void BSPLoader::set_render(NodePath const &render);

574 20 set_shader_generator 0 4 870 31 BSPLoader::set_shader_generator 0 1 161 0
64
void BSPLoader::set_shader_generator(BSPShaderGenerator *shgen);

575 19 set_want_visibility 0 4 870 30 BSPLoader::set_want_visibility 0 1 162 0
47
void BSPLoader::set_want_visibility(bool flag);

576 18 set_want_lightmaps 0 4 870 29 BSPLoader::set_want_lightmaps 0 1 163 0
46
void BSPLoader::set_want_lightmaps(bool flag);

577 16 set_physics_type 0 4 870 27 BSPLoader::set_physics_type 0 1 164 0
43
void BSPLoader::set_physics_type(int type);

578 19 set_visualize_leafs 0 4 870 30 BSPLoader::set_visualize_leafs 0 1 165 0
47
void BSPLoader::set_visualize_leafs(bool flag);

579 18 set_materials_file 0 4 870 29 BSPLoader::set_materials_file 0 1 166 0
57
void BSPLoader::set_materials_file(Filename const &file);

580 13 set_wireframe 0 4 870 24 BSPLoader::set_wireframe 0 1 167 0
41
void BSPLoader::set_wireframe(bool flag);

581 13 get_wireframe 0 4 870 24 BSPLoader::get_wireframe 0 1 168 0
49
inline bool BSPLoader::get_wireframe(void) const;

582 10 get_camera 0 4 870 21 BSPLoader::get_camera 0 1 169 0
50
inline NodePath BSPLoader::get_camera(void) const;

583 11 trace_decal 0 4 870 22 BSPLoader::trace_decal 0 1 170 0
195
inline void BSPLoader::trace_decal(std::string const &decal_material, LPoint2 const &decal_scale, float rotate, LPoint3 const &start, LPoint3 const &end, LColorf const &decal_color = LColorf(1));

584 27 get_closest_cubemap_texture 0 4 870 38 BSPLoader::get_closest_cubemap_texture 0 1 171 0
68
Texture *BSPLoader::get_closest_cubemap_texture(LPoint3 const &pos);

585 14 build_cubemaps 0 4 870 25 BSPLoader::build_cubemaps 0 1 172 0
37
void BSPLoader::build_cubemaps(void);

586 16 set_want_shadows 0 4 870 27 BSPLoader::set_want_shadows 0 1 173 0
44
void BSPLoader::set_want_shadows(bool flag);

587 14 set_shadow_dir 0 4 870 25 BSPLoader::set_shadow_dir 0 1 174 0
52
void BSPLoader::set_shadow_dir(LVector3 const &dir);

588 16 extract_modelnum 0 4 870 27 BSPLoader::extract_modelnum 0 1 175 0
44
int BSPLoader::extract_modelnum(int entnum);

589 16 get_model_bounds 0 4 870 27 BSPLoader::get_model_bounds 0 1 176 0
77
void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

590 28 set_server_entity_dispatcher 0 4 870 39 BSPLoader::set_server_entity_dispatcher 0 1 177 0
67
void BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

591 27 link_server_entity_to_class 0 4 870 38 BSPLoader::link_server_entity_to_class 0 1 178 0
89
void BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

592 6 set_ai 0 4 870 17 BSPLoader::set_ai 0 1 179 0
32
void BSPLoader::set_ai(bool ai);

593 5 is_ai 0 4 870 16 BSPLoader::is_ai 0 1 180 0
41
inline bool BSPLoader::is_ai(void) const;

594 10 trace_line 0 4 870 21 BSPLoader::trace_line 0 1 181 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

595 9 clip_line 0 4 870 20 BSPLoader::clip_line 0 1 182 0
71
LPoint3 BSPLoader::clip_line(LPoint3 const &start, LPoint3 const &end);

596 20 link_entity_to_class 0 4 870 31 BSPLoader::link_entity_to_class 0 1 183 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

597 28 get_py_entity_by_target_name 0 4 870 39 BSPLoader::get_py_entity_by_target_name 0 1 184 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

598 17 find_all_entities 0 4 870 28 BSPLoader::find_all_entities 0 1 185 0
69
PyObject *BSPLoader::find_all_entities(std::string const &classname);

599 20 get_entity_keyvalues 0 4 870 31 BSPLoader::get_entity_keyvalues 0 1 186 0
71
void BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

600 18 link_cent_to_pyent 0 4 870 29 BSPLoader::link_cent_to_pyent 0 1 187 0
63
void BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

601 16 remove_py_entity 0 4 870 27 BSPLoader::remove_py_entity 0 1 188 0
48
void BSPLoader::remove_py_entity(PyObject *ent);

602 9 get_model 0 4 870 20 BSPLoader::get_model 0 1 189 0
50
NodePath BSPLoader::get_model(int modelnum) const;

603 12 get_c_entity 0 4 870 23 BSPLoader::get_c_entity 0 1 190 0
61
CBaseEntity *BSPLoader::get_c_entity(int const entnum) const;

604 9 find_leaf 0 4 870 20 BSPLoader::find_leaf 0 2 191 192 0
116
inline int BSPLoader::find_leaf(NodePath const &np);
int BSPLoader::find_leaf(LPoint3 const &pos, int headnode = 0);

605 9 find_node 0 4 870 20 BSPLoader::find_node 0 1 193 0
45
int BSPLoader::find_node(LPoint3 const &pos);

606 18 is_cluster_visible 0 4 870 29 BSPLoader::is_cluster_visible 0 1 194 0
72
bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

607 15 pvs_bounds_test 0 4 870 26 BSPLoader::pvs_bounds_test 0 1 195 0
109
bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds, unsigned int required_leaf_flags = 0);

608 15 make_net_bounds 0 4 870 26 BSPLoader::make_net_bounds 0 1 196 0
147
ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

609 16 has_active_level 0 4 870 27 BSPLoader::has_active_level 0 1 197 0
52
inline bool BSPLoader::has_active_level(void) const;

610 14 has_visibility 0 4 870 25 BSPLoader::has_visibility 0 1 198 0
50
inline bool BSPLoader::has_visibility(void) const;

611 7 cleanup 0 4 870 18 BSPLoader::cleanup 0 1 199 0
52
void BSPLoader::cleanup(bool is_transition = false);

612 10 get_result 0 4 870 21 BSPLoader::get_result 0 1 200 0
50
inline NodePath BSPLoader::get_result(void) const;

613 16 set_current_leaf 0 4 870 27 BSPLoader::set_current_leaf 0 1 201 0
50
inline void BSPLoader::set_current_leaf(int leaf);

614 16 get_current_leaf 0 4 870 27 BSPLoader::get_current_leaf 0 1 202 0
51
inline int BSPLoader::get_current_leaf(void) const;

615 16 get_num_visleafs 0 4 870 27 BSPLoader::get_num_visleafs 0 1 203 0
51
inline int BSPLoader::get_num_visleafs(void) const;

616 15 get_leaf_center 0 4 870 26 BSPLoader::get_leaf_center 0 1 204 0
58
inline LPoint3 BSPLoader::get_leaf_center(int leaf) const;

617 15 get_lightcoords 0 4 870 26 BSPLoader::get_lightcoords 0 1 205 0
73
LTexCoord BSPLoader::get_lightcoords(int facenum, LVector3 const &point);

618 14 get_global_ptr 0 4 870 25 BSPLoader::get_global_ptr 0 1 206 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

619 10 ~BSPLoader 0 4 870 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

620 18 ShaderPermutations 0 4 872 38 ShaderPermutations::ShaderPermutations 0 1 207 0
52
inline ShaderPermutations::ShaderPermutations(void);

621 15 add_permutation 0 4 872 35 ShaderPermutations::add_permutation 0 1 208 0
104
inline void ShaderPermutations::add_permutation(std::string const &key, std::string const &value = "1");

622 8 complete 0 4 872 28 ShaderPermutations::complete 0 1 209 0
47
inline void ShaderPermutations::complete(void);

623 9 add_input 0 4 872 29 ShaderPermutations::add_input 0 1 210 0
66
inline void ShaderPermutations::add_input(ShaderInput const &inp);

624 8 add_flag 0 4 872 28 ShaderPermutations::add_flag 0 1 211 0
51
inline void ShaderPermutations::add_flag(int flag);

625 8 get_hash 0 4 872 28 ShaderPermutations::get_hash 0 1 212 0
60
inline std::size_t ShaderPermutations::get_hash(void) const;

626 19 ~ShaderPermutations 0 4 872 39 ShaderPermutations::~ShaderPermutations 0 0 0
46
ShaderPermutations::~ShaderPermutations(void);

627 24 upcast_to_ReferenceCount 0 12 873 36 ShaderSpec::upcast_to_ReferenceCount 0 1 215 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

628 22 downcast_to_ShaderSpec 0 12 863 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

629 17 upcast_to_Namable 0 12 873 29 ShaderSpec::upcast_to_Namable 0 1 216 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

630 22 downcast_to_ShaderSpec 0 12 874 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

631 17 read_shader_files 0 4 873 29 ShaderSpec::read_shader_files 0 1 213 0
117
void ShaderSpec::read_shader_files(Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file);

632 14 get_class_type 0 4 873 26 ShaderSpec::get_class_type 0 1 214 0
51
static TypeHandle ShaderSpec::get_class_type(void);

633 11 ~ShaderSpec 0 4 873 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

634 22 get_reflection_texture 0 4 875 41 PlanarReflections::get_reflection_texture 0 1 218 0
63
Texture *PlanarReflections::get_reflection_texture(void) const;

635 17 PlanarReflections 0 4 875 36 PlanarReflections::PlanarReflections 0 1 217 0
81
inline PlanarReflections::PlanarReflections(PlanarReflections const &) = default;

636 18 ~PlanarReflections 0 4 875 37 PlanarReflections::~PlanarReflections 0 0 0
44
PlanarReflections::~PlanarReflections(void);

637 18 BSPShaderGenerator 0 4 879 38 BSPShaderGenerator::BSPShaderGenerator 0 2 219 220 0
224
BSPShaderGenerator::BSPShaderGenerator(GraphicsOutput *output, GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline BSPShaderGenerator::BSPShaderGenerator(BSPShaderGenerator const &) = default;

638 13 set_sun_light 0 4 879 33 BSPShaderGenerator::set_sun_light 0 1 221 0
59
void BSPShaderGenerator::set_sun_light(NodePath const &np);

639 12 start_update 0 4 879 32 BSPShaderGenerator::start_update 0 1 222 0
44
void BSPShaderGenerator::start_update(void);

640 10 add_shader 0 4 879 30 BSPShaderGenerator::add_shader 0 1 223 0
66
void BSPShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

641 14 get_sun_vector 0 4 879 34 BSPShaderGenerator::get_sun_vector 0 1 224 0
63
inline LVector3 BSPShaderGenerator::get_sun_vector(void) const;

642 19 has_shadow_sunlight 0 4 879 39 BSPShaderGenerator::has_shadow_sunlight 0 1 225 0
64
inline bool BSPShaderGenerator::has_shadow_sunlight(void) const;

643 22 get_pssm_array_texture 0 4 879 42 BSPShaderGenerator::get_pssm_array_texture 0 1 226 0
71
inline Texture *BSPShaderGenerator::get_pssm_array_texture(void) const;

644 12 get_pssm_rig 0 4 879 32 BSPShaderGenerator::get_pssm_rig 0 1 227 0
67
inline PSSMCameraRig *BSPShaderGenerator::get_pssm_rig(void) const;

645 10 get_camera 0 4 879 30 BSPShaderGenerator::get_camera 0 1 228 0
59
inline NodePath BSPShaderGenerator::get_camera(void) const;

646 10 get_render 0 4 879 30 BSPShaderGenerator::get_render 0 1 229 0
59
inline NodePath BSPShaderGenerator::get_render(void) const;

647 18 set_shader_quality 0 4 879 38 BSPShaderGenerator::set_shader_quality 0 1 230 0
57
void BSPShaderGenerator::set_shader_quality(int quality);

648 18 get_shader_quality 0 4 879 38 BSPShaderGenerator::get_shader_quality 0 1 231 0
62
inline int BSPShaderGenerator::get_shader_quality(void) const;

649 7 set_fog 0 4 879 27 BSPShaderGenerator::set_fog 0 1 232 0
50
inline void BSPShaderGenerator::set_fog(Fog *fog);

650 9 clear_fog 0 4 879 29 BSPShaderGenerator::clear_fog 0 1 233 0
48
inline void BSPShaderGenerator::clear_fog(void);

651 7 get_fog 0 4 879 27 BSPShaderGenerator::get_fog 0 1 234 0
52
inline Fog *BSPShaderGenerator::get_fog(void) const;

652 12 get_fog_data 0 4 879 32 BSPShaderGenerator::get_fog_data 0 1 235 0
67
inline PTA_LVecBase4f BSPShaderGenerator::get_fog_data(void) const;

653 22 set_exposure_adustment 0 4 879 42 BSPShaderGenerator::set_exposure_adustment 0 1 236 0
71
inline void BSPShaderGenerator::set_exposure_adustment(float exposure);

654 23 get_exposure_adjustment 0 4 879 43 BSPShaderGenerator::get_exposure_adjustment 0 1 237 0
73
inline PTA_float BSPShaderGenerator::get_exposure_adjustment(void) const;

655 7 get_gsg 0 4 879 27 BSPShaderGenerator::get_gsg 0 1 238 0
70
inline GraphicsStateGuardian *BSPShaderGenerator::get_gsg(void) const;

656 10 get_output 0 4 879 30 BSPShaderGenerator::get_output 0 1 239 0
66
inline GraphicsOutput *BSPShaderGenerator::get_output(void) const;

657 22 get_planar_reflections 0 4 879 42 BSPShaderGenerator::get_planar_reflections 0 1 240 0
81
inline PlanarReflections *BSPShaderGenerator::get_planar_reflections(void) const;

658 20 set_identity_cubemap 0 4 879 40 BSPShaderGenerator::set_identity_cubemap 0 1 241 0
67
static void BSPShaderGenerator::set_identity_cubemap(Texture *tex);

659 20 get_identity_cubemap 0 4 879 40 BSPShaderGenerator::get_identity_cubemap 0 1 242 0
63
static Texture *BSPShaderGenerator::get_identity_cubemap(void);

660 11 make_shader 0 4 879 31 BSPShaderGenerator::make_shader 0 1 243 0
121
static ConstPointerTo< Shader > BSPShaderGenerator::make_shader(ShaderSpec const *spec, ShaderPermutations const *perms);

661 14 get_class_type 0 4 879 34 BSPShaderGenerator::get_class_type 0 1 244 0
59
static TypeHandle BSPShaderGenerator::get_class_type(void);

662 19 ~BSPShaderGenerator 0 4 879 39 BSPShaderGenerator::~BSPShaderGenerator 0 0 0
46
BSPShaderGenerator::~BSPShaderGenerator(void);

663 14 get_class_type 0 4 881 32 BSPCullTraverser::get_class_type 0 1 247 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

664 16 BSPCullTraverser 0 4 881 34 BSPCullTraverser::BSPCullTraverser 0 2 245 246 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

665 15 has_camera_bits 0 4 881 33 BSPCullTraverser::has_camera_bits 0 1 248 0
71
inline bool BSPCullTraverser::has_camera_bits(unsigned int bits) const;

666 14 needs_lighting 0 4 881 32 BSPCullTraverser::needs_lighting 0 1 249 0
57
inline bool BSPCullTraverser::needs_lighting(void) const;

667 13 needs_culling 0 4 881 31 BSPCullTraverser::needs_culling 0 1 250 0
56
inline bool BSPCullTraverser::needs_culling(void) const;

668 23 get_required_leaf_flags 0 4 881 41 BSPCullTraverser::get_required_leaf_flags 0 1 251 106
/**
	 * Returns the flags that must be set on a leaf for it to be
	 * rendered by the current camera.
	 */
74
inline unsigned int BSPCullTraverser::get_required_leaf_flags(void) const;

669 17 ~BSPCullTraverser 0 4 881 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

670 14 get_class_type 0 4 883 25 BSPRender::get_class_type 0 1 254 0
50
static TypeHandle BSPRender::get_class_type(void);

671 9 BSPRender 0 4 883 20 BSPRender::BSPRender 0 2 252 253 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

672 10 ~BSPRender 0 4 883 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

673 14 get_class_type 0 4 884 23 BSPRoot::get_class_type 0 1 257 0
48
static TypeHandle BSPRoot::get_class_type(void);

674 7 BSPRoot 0 4 884 16 BSPRoot::BSPRoot 0 2 255 256 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

675 8 ~BSPRoot 0 4 884 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

676 14 get_class_type 0 4 885 23 BSPProp::get_class_type 0 1 260 0
48
static TypeHandle BSPProp::get_class_type(void);

677 7 BSPProp 0 4 885 16 BSPProp::BSPProp 0 2 258 259 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

678 8 ~BSPProp 0 4 885 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

679 14 get_class_type 0 4 887 24 BSPModel::get_class_type 0 1 263 0
49
static TypeHandle BSPModel::get_class_type(void);

680 8 BSPModel 0 4 887 18 BSPModel::BSPModel 0 2 261 262 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

681 9 ~BSPModel 0 4 887 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

682 20 VertexLitGenericSpec 0 4 889 42 VertexLitGenericSpec::VertexLitGenericSpec 0 1 264 0
49
VertexLitGenericSpec::VertexLitGenericSpec(void);

683 21 ~VertexLitGenericSpec 0 4 889 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

684 22 LightmappedGenericSpec 0 4 890 46 LightmappedGenericSpec::LightmappedGenericSpec 0 1 265 0
53
LightmappedGenericSpec::LightmappedGenericSpec(void);

685 23 ~LightmappedGenericSpec 0 4 890 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

686 16 UnlitGenericSpec 0 4 891 34 UnlitGenericSpec::UnlitGenericSpec 0 1 266 0
41
UnlitGenericSpec::UnlitGenericSpec(void);

687 17 ~UnlitGenericSpec 0 4 891 35 UnlitGenericSpec::~UnlitGenericSpec 0 0 0
42
UnlitGenericSpec::~UnlitGenericSpec(void);

688 14 UnlitNoMatSpec 0 4 892 30 UnlitNoMatSpec::UnlitNoMatSpec 0 1 267 0
37
UnlitNoMatSpec::UnlitNoMatSpec(void);

689 15 ~UnlitNoMatSpec 0 4 892 31 UnlitNoMatSpec::~UnlitNoMatSpec 0 0 0
38
UnlitNoMatSpec::~UnlitNoMatSpec(void);

690 13 CSMRenderSpec 0 4 893 28 CSMRenderSpec::CSMRenderSpec 0 1 268 0
35
CSMRenderSpec::CSMRenderSpec(void);

691 14 ~CSMRenderSpec 0 4 893 29 CSMRenderSpec::~CSMRenderSpec 0 0 0
36
CSMRenderSpec::~CSMRenderSpec(void);

692 10 SkyBoxSpec 0 4 894 22 SkyBoxSpec::SkyBoxSpec 0 1 269 0
29
SkyBoxSpec::SkyBoxSpec(void);

693 11 ~SkyBoxSpec 0 4 894 23 SkyBoxSpec::~SkyBoxSpec 0 0 0
30
SkyBoxSpec::~SkyBoxSpec(void);

694 4 make 0 4 895 24 AmbientBoostEffect::make 0 1 270 0
69
static ConstPointerTo< RenderEffect > AmbientBoostEffect::make(void);

695 14 get_class_type 0 4 895 34 AmbientBoostEffect::get_class_type 0 1 271 0
59
static TypeHandle AmbientBoostEffect::get_class_type(void);

696 19 ~AmbientBoostEffect 0 4 895 39 AmbientBoostEffect::~AmbientBoostEffect 0 0 0
46
AmbientBoostEffect::~AmbientBoostEffect(void);

697 14 Audio3DManager 0 4 897 30 Audio3DManager::Audio3DManager 0 2 272 273 0
228
Audio3DManager::Audio3DManager(AudioManager *mgr, NodePath const &listener_target = NodePath(), NodePath const &root = NodePath(), int task_priority = 51);
inline Audio3DManager::Audio3DManager(Audio3DManager const &) = default;

698 19 set_distance_factor 0 4 897 35 Audio3DManager::set_distance_factor 0 1 274 0
68
inline void Audio3DManager::set_distance_factor(PN_stdfloat factor);

699 19 get_distance_factor 0 4 897 35 Audio3DManager::get_distance_factor 0 1 275 0
67
inline PN_stdfloat Audio3DManager::get_distance_factor(void) const;

700 18 set_doppler_factor 0 4 897 34 Audio3DManager::set_doppler_factor 0 1 276 0
67
inline void Audio3DManager::set_doppler_factor(PN_stdfloat factor);

701 18 get_doppler_factor 0 4 897 34 Audio3DManager::get_doppler_factor 0 1 277 0
66
inline PN_stdfloat Audio3DManager::get_doppler_factor(void) const;

702 19 set_drop_off_factor 0 4 897 35 Audio3DManager::set_drop_off_factor 0 1 278 0
68
inline void Audio3DManager::set_drop_off_factor(PN_stdfloat factor);

703 19 get_drop_off_factor 0 4 897 35 Audio3DManager::get_drop_off_factor 0 1 279 0
67
inline PN_stdfloat Audio3DManager::get_drop_off_factor(void) const;

704 22 set_sound_min_distance 0 4 897 38 Audio3DManager::set_sound_min_distance 0 1 280 0
88
inline void Audio3DManager::set_sound_min_distance(AudioSound *sound, PN_stdfloat dist);

705 22 get_sound_min_distance 0 4 897 38 Audio3DManager::get_sound_min_distance 0 1 281 0
83
inline PN_stdfloat Audio3DManager::get_sound_min_distance(AudioSound *sound) const;

706 22 set_sound_max_distance 0 4 897 38 Audio3DManager::set_sound_max_distance 0 1 282 0
88
inline void Audio3DManager::set_sound_max_distance(AudioSound *sound, PN_stdfloat dist);

707 22 get_sound_max_distance 0 4 897 38 Audio3DManager::get_sound_max_distance 0 1 283 0
83
inline PN_stdfloat Audio3DManager::get_sound_max_distance(AudioSound *sound) const;

708 15 attach_listener 0 4 897 31 Audio3DManager::attach_listener 0 1 284 0
70
inline void Audio3DManager::attach_listener(NodePath const &listener);

709 15 detach_listener 0 4 897 31 Audio3DManager::detach_listener 0 1 285 0
50
inline void Audio3DManager::detach_listener(void);

710 8 load_sfx 0 4 897 24 Audio3DManager::load_sfx 0 1 286 0
81
inline PointerTo< AudioSound > Audio3DManager::load_sfx(std::string const &path);

711 22 attach_sound_to_object 0 4 897 38 Audio3DManager::attach_sound_to_object 0 1 287 0
87
void Audio3DManager::attach_sound_to_object(AudioSound *sound, NodePath const &object);

712 12 detach_sound 0 4 897 28 Audio3DManager::detach_sound 0 1 288 0
53
void Audio3DManager::detach_sound(AudioSound *sound);

713 18 print_audio_digest 0 4 897 34 Audio3DManager::print_audio_digest 0 1 289 0
46
void Audio3DManager::print_audio_digest(void);

714 6 update 0 4 897 22 Audio3DManager::update 0 1 290 0
34
void Audio3DManager::update(void);

715 15 ~Audio3DManager 0 4 897 31 Audio3DManager::~Audio3DManager 0 0 0
38
Audio3DManager::~Audio3DManager(void);

716 19 set_pupil_direction 0 4 898 27 CIOLib::set_pupil_direction 0 1 293 0
91
static void CIOLib::set_pupil_direction(float x, float y, LVector3 &left, LVector3 &right);

717 14 look_pupils_at 0 4 898 22 CIOLib::look_pupils_at 0 1 294 0
106
static LVector2 CIOLib::look_pupils_at(NodePath const &node, LVector3 const &point, NodePath const &eyes);

718 6 CIOLib 0 4 898 14 CIOLib::CIOLib 0 2 291 292 0
87
inline CIOLib::CIOLib(void) = default;
inline CIOLib::CIOLib(CIOLib const &) = default;

719 7 ~CIOLib 0 4 898 15 CIOLib::~CIOLib 0 0 0
22
CIOLib::~CIOLib(void);

720 17 DecalModulateSpec 0 4 899 36 DecalModulateSpec::DecalModulateSpec 0 1 295 0
43
DecalModulateSpec::DecalModulateSpec(void);

721 18 ~DecalModulateSpec 0 4 899 37 DecalModulateSpec::~DecalModulateSpec 0 0 0
44
DecalModulateSpec::~DecalModulateSpec(void);

722 14 get_class_type 0 4 900 24 GlowNode::get_class_type 0 1 299 0
49
static TypeHandle GlowNode::get_class_type(void);

723 8 GlowNode 0 4 900 18 GlowNode::GlowNode 0 3 296 297 298 0
219
GlowNode::GlowNode(std::string const &name, float query_size = ::r_glow_querysize);
GlowNode::GlowNode(GeomNode const &copy, float query_size = ::r_glow_querysize);
inline GlowNode::GlowNode(GlowNode const &) = default;

724 9 ~GlowNode 0 4 900 19 GlowNode::~GlowNode 0 0 0
26
GlowNode::~GlowNode(void);

725 24 upcast_to_ReferenceCount 0 12 902 43 PostProcessEffect::upcast_to_ReferenceCount 0 1 309 47
upcast from PostProcessEffect to ReferenceCount
66
ReferenceCount *PostProcessEffect::upcast_to_ReferenceCount(void);

726 29 downcast_to_PostProcessEffect 0 12 863 45 ReferenceCount::downcast_to_PostProcessEffect 0 0 49
downcast from ReferenceCount to PostProcessEffect
71
PostProcessEffect *ReferenceCount::downcast_to_PostProcessEffect(void);

727 17 upcast_to_Namable 0 12 902 36 PostProcessEffect::upcast_to_Namable 0 1 310 40
upcast from PostProcessEffect to Namable
52
Namable *PostProcessEffect::upcast_to_Namable(void);

728 29 downcast_to_PostProcessEffect 0 12 874 38 Namable::downcast_to_PostProcessEffect 0 0 42
downcast from Namable to PostProcessEffect
64
PostProcessEffect *Namable::downcast_to_PostProcessEffect(void);

729 14 get_class_type 0 4 902 33 PostProcessEffect::get_class_type 0 1 300 0
58
static TypeHandle PostProcessEffect::get_class_type(void);

730 17 get_final_texture 0 6 902 36 PostProcessEffect::get_final_texture 0 1 301 0
64
virtual Texture *PostProcessEffect::get_final_texture(void) = 0;

731 8 add_pass 0 4 902 27 PostProcessEffect::add_pass 0 1 302 0
56
void PostProcessEffect::add_pass(PostProcessPass *pass);

732 11 remove_pass 0 4 902 30 PostProcessEffect::remove_pass 0 1 303 0
59
void PostProcessEffect::remove_pass(PostProcessPass *pass);

733 8 get_pass 0 4 902 27 PostProcessEffect::get_pass 0 1 304 0
70
PostProcessPass *PostProcessEffect::get_pass(std::string const &name);

734 5 setup 0 6 902 24 PostProcessEffect::setup 0 1 305 0
44
virtual void PostProcessEffect::setup(void);

735 6 update 0 6 902 25 PostProcessEffect::update 0 1 306 0
45
virtual void PostProcessEffect::update(void);

736 12 window_event 0 4 902 31 PostProcessEffect::window_event 0 1 307 0
58
void PostProcessEffect::window_event(GraphicsOutput *win);

737 8 shutdown 0 6 902 27 PostProcessEffect::shutdown 0 1 308 0
47
virtual void PostProcessEffect::shutdown(void);

738 18 ~PostProcessEffect 0 4 902 37 PostProcessEffect::~PostProcessEffect 0 0 0
44
PostProcessEffect::~PostProcessEffect(void);

739 24 upcast_to_ReferenceCount 0 12 904 41 PostProcessPass::upcast_to_ReferenceCount 0 1 336 45
upcast from PostProcessPass to ReferenceCount
64
ReferenceCount *PostProcessPass::upcast_to_ReferenceCount(void);

740 27 downcast_to_PostProcessPass 0 12 863 43 ReferenceCount::downcast_to_PostProcessPass 0 0 47
downcast from ReferenceCount to PostProcessPass
67
PostProcessPass *ReferenceCount::downcast_to_PostProcessPass(void);

741 17 upcast_to_Namable 0 12 904 34 PostProcessPass::upcast_to_Namable 0 1 337 38
upcast from PostProcessPass to Namable
50
Namable *PostProcessPass::upcast_to_Namable(void);

742 27 downcast_to_PostProcessPass 0 12 874 36 Namable::downcast_to_PostProcessPass 0 0 40
downcast from Namable to PostProcessPass
60
PostProcessPass *Namable::downcast_to_PostProcessPass(void);

743 14 get_class_type 0 4 904 31 PostProcessPass::get_class_type 0 1 313 0
56
static TypeHandle PostProcessPass::get_class_type(void);

744 15 PostProcessPass 0 4 904 32 PostProcessPass::PostProcessPass 0 2 311 312 0
379
PostProcessPass::PostProcessPass(PostProcess *pp, std::string const &name = "pass", int texture_output_bits = 0, FrameBufferProperties const &fbprops = PostProcessPass::get_default_fbprops(), bool force_size = false, LVector2i const &forced_size = LVector2i::zero(), bool div_size = false, int div = 1);
inline PostProcessPass::PostProcessPass(PostProcessPass const &) = default;

745 8 get_quad 0 4 904 25 PostProcessPass::get_quad 0 1 314 0
54
inline NodePath PostProcessPass::get_quad(void) const;

746 26 get_back_buffer_dimensions 0 4 904 43 PostProcessPass::get_back_buffer_dimensions 0 1 315 0
66
LVector2i PostProcessPass::get_back_buffer_dimensions(void) const;

747 10 get_camera 0 4 904 27 PostProcessPass::get_camera 0 1 316 0
56
inline NodePath PostProcessPass::get_camera(void) const;

748 16 has_texture_bits 0 4 904 33 PostProcessPass::has_texture_bits 0 1 317 0
62
inline bool PostProcessPass::has_texture_bits(int bits) const;

749 12 set_div_size 0 4 904 29 PostProcessPass::set_div_size 0 1 318 0
66
inline void PostProcessPass::set_div_size(bool div_size, int div);

750 15 set_forced_size 0 4 904 32 PostProcessPass::set_forced_size 0 1 319 0
92
inline void PostProcessPass::set_forced_size(bool force_size, LVector2i const &forced_size);

751 26 set_framebuffer_properties 0 4 904 43 PostProcessPass::set_framebuffer_properties 0 1 320 0
94
inline void PostProcessPass::set_framebuffer_properties(FrameBufferProperties const &fbprops);

752 23 set_output_texture_bits 0 4 904 40 PostProcessPass::set_output_texture_bits 0 1 321 0
63
inline void PostProcessPass::set_output_texture_bits(int bits);

753 18 get_corrected_size 0 4 904 35 PostProcessPass::get_corrected_size 0 1 322 0
69
LVector2i PostProcessPass::get_corrected_size(LVector2i const &size);

754 11 get_texture 0 4 904 28 PostProcessPass::get_texture 0 1 323 0
47
Texture *PostProcessPass::get_texture(int bit);

755 17 get_color_texture 0 4 904 34 PostProcessPass::get_color_texture 0 1 324 0
57
inline Texture *PostProcessPass::get_color_texture(void);

756 17 get_depth_texture 0 4 904 34 PostProcessPass::get_depth_texture 0 1 325 0
57
inline Texture *PostProcessPass::get_depth_texture(void);

757 12 setup_buffer 0 6 904 29 PostProcessPass::setup_buffer 0 1 326 0
49
virtual bool PostProcessPass::setup_buffer(void);

758 14 setup_textures 0 6 904 31 PostProcessPass::setup_textures 0 1 327 0
51
virtual void PostProcessPass::setup_textures(void);

759 10 setup_quad 0 6 904 27 PostProcessPass::setup_quad 0 1 328 0
47
virtual void PostProcessPass::setup_quad(void);

760 12 setup_camera 0 6 904 29 PostProcessPass::setup_camera 0 1 329 0
49
virtual void PostProcessPass::setup_camera(void);

761 12 setup_region 0 6 904 29 PostProcessPass::setup_region 0 1 330 0
49
virtual void PostProcessPass::setup_region(void);

762 5 setup 0 6 904 22 PostProcessPass::setup 0 1 331 0
42
virtual void PostProcessPass::setup(void);

763 6 update 0 6 904 23 PostProcessPass::update 0 1 332 0
43
virtual void PostProcessPass::update(void);

764 12 window_event 0 6 904 29 PostProcessPass::window_event 0 1 333 0
67
virtual void PostProcessPass::window_event(GraphicsOutput *output);

765 8 shutdown 0 6 904 25 PostProcessPass::shutdown 0 1 334 0
45
virtual void PostProcessPass::shutdown(void);

766 19 get_default_fbprops 0 4 904 36 PostProcessPass::get_default_fbprops 0 1 335 0
72
static FrameBufferProperties PostProcessPass::get_default_fbprops(void);

767 16 ~PostProcessPass 0 4 904 33 PostProcessPass::~PostProcessPass 0 0 0
40
PostProcessPass::~PostProcessPass(void);

768 20 PostProcessScenePass 0 4 905 42 PostProcessScenePass::PostProcessScenePass 0 2 338 339 0
220
PostProcessScenePass::PostProcessScenePass(PostProcess *pp, int output_texture_bits = ::bits_PASSTEXTURE_COLOR, int auxbits = 0);
inline PostProcessScenePass::PostProcessScenePass(PostProcessScenePass const &) = default;

769 18 setup_scene_camera 0 4 905 40 PostProcessScenePass::setup_scene_camera 0 1 340 0
53
void PostProcessScenePass::setup_scene_camera(int i);

770 16 set_camera_state 0 4 905 38 PostProcessScenePass::set_camera_state 0 1 341 0
70
void PostProcessScenePass::set_camera_state(RenderState const *state);

771 21 ~PostProcessScenePass 0 4 905 43 PostProcessScenePass::~PostProcessScenePass 0 0 0
50
PostProcessScenePass::~PostProcessScenePass(void);

772 11 PostProcess 0 4 906 24 PostProcess::PostProcess 0 2 342 343 0
95
PostProcess::PostProcess(void);
inline PostProcess::PostProcess(PostProcess const &) = default;

773 7 startup 0 4 906 20 PostProcess::startup 0 1 344 0
50
void PostProcess::startup(GraphicsOutput *output);

774 10 add_camera 0 4 906 23 PostProcess::add_camera 0 1 345 0
53
void PostProcess::add_camera(NodePath const &camera);

775 13 remove_camera 0 4 906 26 PostProcess::remove_camera 0 1 346 0
56
void PostProcess::remove_camera(NodePath const &camera);

776 10 add_effect 0 4 906 23 PostProcess::add_effect 0 1 347 0
63
inline void PostProcess::add_effect(PostProcessEffect *effect);

777 13 remove_effect 0 4 906 26 PostProcess::remove_effect 0 1 348 0
66
inline void PostProcess::remove_effect(PostProcessEffect *effect);

778 10 get_effect 0 4 906 23 PostProcess::get_effect 0 1 349 0
75
inline PostProcessEffect *PostProcess::get_effect(std::string const &name);

779 23 get_scene_color_texture 0 4 906 36 PostProcess::get_scene_color_texture 0 1 350 0
65
inline Texture *PostProcess::get_scene_color_texture(void) const;

780 23 get_scene_depth_texture 0 4 906 36 PostProcess::get_scene_depth_texture 0 1 351 0
65
inline Texture *PostProcess::get_scene_depth_texture(void) const;

781 14 get_scene_pass 0 4 906 27 PostProcess::get_scene_pass 0 1 352 0
69
inline PostProcessScenePass *PostProcess::get_scene_pass(void) const;

782 10 get_output 0 4 906 23 PostProcess::get_output 0 1 353 0
59
inline GraphicsOutput *PostProcess::get_output(void) const;

783 10 get_camera 0 4 906 23 PostProcess::get_camera 0 1 354 0
53
inline NodePath PostProcess::get_camera(int n) const;

784 9 next_sort 0 4 906 22 PostProcess::next_sort 0 1 355 0
40
inline int PostProcess::next_sort(void);

785 25 get_output_display_region 0 4 906 38 PostProcess::get_output_display_region 0 1 356 0
73
inline DisplayRegion *PostProcess::get_output_display_region(void) const;

786 13 is_fullscreen 0 4 906 26 PostProcess::is_fullscreen 0 1 357 0
51
inline bool PostProcess::is_fullscreen(void) const;

787 18 set_scene_aux_bits 0 4 906 31 PostProcess::set_scene_aux_bits 0 1 358 0
47
void PostProcess::set_scene_aux_bits(int bits);

788 18 set_stacked_clears 0 4 906 31 PostProcess::set_stacked_clears 0 1 359 0
68
void PostProcess::set_stacked_clears(int n, DrawableRegion *region);

789 17 set_window_clears 0 4 906 30 PostProcess::set_window_clears 0 1 360 0
60
void PostProcess::set_window_clears(DrawableRegion *region);

790 10 set_clears 0 4 906 23 PostProcess::set_clears 0 1 361 0
60
void PostProcess::set_clears(int n, DrawableRegion *region);

791 8 shutdown 0 4 906 21 PostProcess::shutdown 0 1 362 0
33
void PostProcess::shutdown(void);

792 12 ~PostProcess 0 4 906 25 PostProcess::~PostProcess 0 0 0
32
PostProcess::~PostProcess(void);

793 14 get_class_type 0 4 907 23 HDRPass::get_class_type 0 1 365 0
48
static TypeHandle HDRPass::get_class_type(void);

794 7 HDRPass 0 4 907 16 HDRPass::HDRPass 0 2 363 364 0
86
HDRPass::HDRPass(PostProcess *pp);
inline HDRPass::HDRPass(HDRPass const &) = default;

795 19 set_exposure_output 0 4 907 28 HDRPass::set_exposure_output 0 1 366 0
59
inline void HDRPass::set_exposure_output(PTA_float output);

796 12 get_exposure 0 4 907 21 HDRPass::get_exposure 0 1 367 56
/**
	 * Returns the calculated exposure adjustment.
	 */
47
inline float HDRPass::get_exposure(void) const;

797 8 ~HDRPass 0 4 907 17 HDRPass::~HDRPass 0 0 0
24
HDRPass::~HDRPass(void);

798 9 HDREffect 0 4 908 20 HDREffect::HDREffect 0 1 368 0
38
HDREffect::HDREffect(PostProcess *pp);

799 12 get_hdr_pass 0 4 908 23 HDREffect::get_hdr_pass 0 1 369 0
52
inline HDRPass *HDREffect::get_hdr_pass(void) const;

800 10 ~HDREffect 0 4 908 21 HDREffect::~HDREffect 0 0 0
28
HDREffect::~HDREffect(void);

801 14 get_class_type 0 4 909 27 BloomEffect::get_class_type 0 1 371 0
52
static TypeHandle BloomEffect::get_class_type(void);

802 11 BloomEffect 0 4 909 24 BloomEffect::BloomEffect 0 1 370 0
42
BloomEffect::BloomEffect(PostProcess *pp);

803 12 ~BloomEffect 0 4 909 25 BloomEffect::~BloomEffect 0 0 0
32
BloomEffect::~BloomEffect(void);

804 14 get_class_type 0 4 910 36 LightingOriginEffect::get_class_type 0 1 372 0
61
static TypeHandle LightingOriginEffect::get_class_type(void);

805 4 make 0 4 910 26 LightingOriginEffect::make 0 1 373 0
89
static ConstPointerTo< RenderEffect > LightingOriginEffect::make(LVector3 const &origin);

806 19 get_lighting_origin 0 4 910 41 LightingOriginEffect::get_lighting_origin 0 1 374 0
70
inline LVector3 LightingOriginEffect::get_lighting_origin(void) const;

807 21 ~LightingOriginEffect 0 4 910 43 LightingOriginEffect::~LightingOriginEffect 0 0 0
50
LightingOriginEffect::~LightingOriginEffect(void);

808 14 get_class_type 0 4 911 27 FXAA_Effect::get_class_type 0 1 376 0
52
static TypeHandle FXAA_Effect::get_class_type(void);

809 11 FXAA_Effect 0 4 911 24 FXAA_Effect::FXAA_Effect 0 1 375 0
42
FXAA_Effect::FXAA_Effect(PostProcess *pp);

810 12 ~FXAA_Effect 0 4 911 25 FXAA_Effect::~FXAA_Effect 0 0 0
32
FXAA_Effect::~FXAA_Effect(void);

811 14 get_class_slot 0 4 912 27 BloomAttrib::get_class_slot 0 1 377 0
45
static int BloomAttrib::get_class_slot(void);

812 14 get_class_type 0 4 912 27 BloomAttrib::get_class_type 0 1 378 0
52
static TypeHandle BloomAttrib::get_class_type(void);

813 4 make 0 4 912 17 BloomAttrib::make 0 1 379 0
83
static ConstPointerTo< RenderAttrib > BloomAttrib::make(bool bloom_enabled = true);

814 16 is_bloom_enabled 0 4 912 29 BloomAttrib::is_bloom_enabled 0 1 380 0
54
inline bool BloomAttrib::is_bloom_enabled(void) const;

815 12 ~BloomAttrib 0 4 912 25 BloomAttrib::~BloomAttrib 0 0 0
32
BloomAttrib::~BloomAttrib(void);

816 26 PhysicsCharacterController 0 4 914 54 PhysicsCharacterController::PhysicsCharacterController 0 2 381 382 0
406
PhysicsCharacterController::PhysicsCharacterController(BulletWorld *world, NodePath const &render, NodePath const &parent, float walk_height, float crouch_height, float step_height, float radius, float gravity, BitMask32 const &wall_mask, BitMask32 const &floor_mask, BitMask32 const &event_mask);
inline PhysicsCharacterController::PhysicsCharacterController(PhysicsCharacterController const &) = default;

817 13 set_max_slope 0 4 914 41 PhysicsCharacterController::set_max_slope 0 1 383 0
78
void PhysicsCharacterController::set_max_slope(float degs, bool affect_speed);

818 16 set_collide_mask 0 4 914 44 PhysicsCharacterController::set_collide_mask 0 1 384 0
73
void PhysicsCharacterController::set_collide_mask(BitMask32 const &mask);

819 24 set_event_enter_callback 0 4 914 52 PhysicsCharacterController::set_event_enter_callback 0 1 385 0
85
inline void PhysicsCharacterController::set_event_enter_callback(PyObject *callback);

820 23 set_event_exit_callback 0 4 914 51 PhysicsCharacterController::set_event_exit_callback 0 1 386 0
84
inline void PhysicsCharacterController::set_event_exit_callback(PyObject *callback);

821 23 set_active_jump_limiter 0 4 914 51 PhysicsCharacterController::set_active_jump_limiter 0 1 387 0
78
inline void PhysicsCharacterController::set_active_jump_limiter(bool limiter);

822 20 set_default_material 0 4 914 48 PhysicsCharacterController::set_default_material 0 1 388 0
85
inline void PhysicsCharacterController::set_default_material(std::string const &mat);

823 18 set_touching_water 0 4 914 46 PhysicsCharacterController::set_touching_water 0 1 389 0
70
inline void PhysicsCharacterController::set_touching_water(bool flag);

824 20 get_current_material 0 4 914 48 PhysicsCharacterController::get_current_material 0 1 390 0
80
inline std::string PhysicsCharacterController::get_current_material(void) const;

825 16 get_walk_capsule 0 4 914 44 PhysicsCharacterController::get_walk_capsule 0 1 391 0
73
inline NodePath PhysicsCharacterController::get_walk_capsule(void) const;

826 18 get_crouch_capsule 0 4 914 46 PhysicsCharacterController::get_crouch_capsule 0 1 392 0
75
inline NodePath PhysicsCharacterController::get_crouch_capsule(void) const;

827 16 get_event_sphere 0 4 914 44 PhysicsCharacterController::get_event_sphere 0 1 393 0
73
inline NodePath PhysicsCharacterController::get_event_sphere(void) const;

828 11 get_capsule 0 4 914 39 PhysicsCharacterController::get_capsule 0 1 394 0
68
inline NodePath PhysicsCharacterController::get_capsule(void) const;

829 19 get_movement_parent 0 4 914 47 PhysicsCharacterController::get_movement_parent 0 1 395 0
76
inline NodePath PhysicsCharacterController::get_movement_parent(void) const;

830 11 set_gravity 0 4 914 39 PhysicsCharacterController::set_gravity 0 1 396 0
64
inline void PhysicsCharacterController::set_gravity(float grav);

831 18 set_movement_state 0 4 914 46 PhysicsCharacterController::set_movement_state 0 1 397 0
70
inline void PhysicsCharacterController::set_movement_state(int state);

832 18 get_movement_state 0 4 914 46 PhysicsCharacterController::get_movement_state 0 1 398 0
70
inline int PhysicsCharacterController::get_movement_state(void) const;

833 21 set_stand_up_callback 0 4 914 49 PhysicsCharacterController::set_stand_up_callback 0 1 399 0
82
inline void PhysicsCharacterController::set_stand_up_callback(PyObject *callback);

834 17 set_fall_callback 0 4 914 45 PhysicsCharacterController::set_fall_callback 0 1 400 0
78
inline void PhysicsCharacterController::set_fall_callback(PyObject *callback);

835 12 start_crouch 0 4 914 40 PhysicsCharacterController::start_crouch 0 1 401 0
52
void PhysicsCharacterController::start_crouch(void);

836 11 stop_crouch 0 4 914 39 PhysicsCharacterController::stop_crouch 0 1 402 0
51
void PhysicsCharacterController::stop_crouch(void);

837 12 is_on_ground 0 4 914 40 PhysicsCharacterController::is_on_ground 0 1 403 0
52
bool PhysicsCharacterController::is_on_ground(void);

838 10 start_jump 0 4 914 38 PhysicsCharacterController::start_jump 0 1 404 0
68
void PhysicsCharacterController::start_jump(float max_height = 3.0);

839 20 set_angular_movement 0 4 914 48 PhysicsCharacterController::set_angular_movement 0 1 405 0
67
void PhysicsCharacterController::set_angular_movement(float omega);

840 19 set_linear_movement 0 4 914 47 PhysicsCharacterController::set_linear_movement 0 1 406 0
79
void PhysicsCharacterController::set_linear_movement(LVector3 const &movement);

841 15 place_on_ground 0 4 914 43 PhysicsCharacterController::place_on_ground 0 1 407 0
55
void PhysicsCharacterController::place_on_ground(void);

842 6 update 0 4 914 34 PhysicsCharacterController::update 0 1 408 0
46
void PhysicsCharacterController::update(void);

843 15 remove_capsules 0 4 914 43 PhysicsCharacterController::remove_capsules 0 1 409 0
55
void PhysicsCharacterController::remove_capsules(void);

844 27 ~PhysicsCharacterController 0 4 914 55 PhysicsCharacterController::~PhysicsCharacterController 0 0 0
62
PhysicsCharacterController::~PhysicsCharacterController(void);

409
1 0 0 7 12 915 421 0 0 0 
2 0 0 7 12 915 421 0 0 1 6 param0 0 916  
3 0 0 7 2 920 0 0 0 1 4 name 1 919  
4 0 0 7 2 920 0 0 0 2 4 name 1 919  7 uv_name 1 919  
5 0 0 7 3 920 0 0 0 0 
6 0 0 7 4 920 0 0 0 0 
7 0 0 7 5 920 0 0 0 0 
8 0 0 7 6 920 0 0 0 0 
9 0 0 7 7 920 0 0 0 0 
10 0 0 7 8 920 0 0 0 0 
11 0 0 7 9 920 0 0 0 0 
12 0 0 7 10 920 0 0 0 0 
13 0 0 7 11 920 0 0 0 0 
14 0 0 7 16 923 444 0 0 1 4 copy 1 921  
15 0 0 7 16 923 444 0 0 1 4 name 1 919  
16 0 0 7 17 923 444 0 0 2 4 this 3 923  4 copy 1 921  
17 0 0 4 18 924 0 0 0 3 4 this 3 923  3 key 1 919  5 value 1 919  
18 0 0 6 19 919 0 0 0 2 4 this 3 921  3 key 1 919  
19 0 0 6 20 925 0 0 0 1 4 this 3 921  
20 0 0 6 21 919 0 0 0 2 4 this 3 921  1 i 1 925  
21 0 0 6 22 919 0 0 0 2 4 this 3 921  1 i 1 925  
22 0 0 6 23 850 0 0 0 2 4 this 3 921  3 key 1 919  
23 0 0 6 24 927 0 0 0 2 4 this 3 921  3 key 1 919  
24 0 0 4 25 924 0 0 0 2 4 this 3 923  11 shader_name 1 919  
25 0 0 6 26 919 0 0 0 1 4 this 3 921  
26 0 0 7 27 929 0 0 0 1 4 this 3 921  
27 0 0 6 28 930 0 0 0 2 4 this 3 921  3 key 1 919  
28 0 0 6 29 930 0 0 0 1 4 this 3 921  
29 0 0 6 30 930 0 0 0 1 4 this 3 921  
30 0 0 6 31 919 0 0 0 1 4 this 3 921  
31 0 0 6 32 919 0 0 0 1 4 this 3 921  
32 0 0 6 33 930 0 0 0 1 4 this 3 921  
33 0 0 6 34 930 0 0 0 1 4 this 3 921  
34 0 0 6 35 930 0 0 0 1 4 this 3 921  
35 0 0 7 36 921 0 0 0 1 4 file 1 931  
36 0 0 7 37 934 0 0 0 0 
37 0 0 7 41 936 0 0 0 1 3 mat 1 921  
38 0 0 7 42 936 0 0 0 1 3 mat 1 921  
39 0 0 7 43 936 0 0 0 0 
40 0 0 6 44 919 0 0 0 1 4 this 3 937  
41 0 0 6 45 930 0 0 0 1 4 this 3 937  
42 0 0 7 46 921 0 0 0 1 4 this 3 937  
43 0 0 6 47 850 0 0 0 0 
44 0 0 7 50 934 0 0 0 0 
45 0 0 6 54 925 0 0 0 1 4 this 3 939  
46 0 0 7 55 943 0 0 0 2 4 this 3 939  1 n 1 850  
47 0 0 6 56 925 0 0 0 1 4 this 3 939  
48 0 0 7 57 946 0 0 0 2 4 this 3 939  1 n 1 850  
49 0 0 7 58 934 0 0 0 0 
50 0 0 7 62 947 469 0 0 0 
51 0 0 7 62 947 469 0 0 1 6 param0 0 948  
52 0 0 7 61 934 0 0 0 0 
53 0 0 6 63 950 0 0 0 1 4 this 3 948  
54 0 0 6 64 919 0 0 0 2 4 this 3 948  3 key 1 919  
55 0 0 7 65 953 0 0 0 2 4 this 3 948  3 key 1 919  
56 0 0 7 66 957 0 0 0 3 4 this 3 948  3 key 1 919  5 scale 1 930  
57 0 0 6 67 919 0 0 0 1 4 this 3 948  
58 0 0 6 68 919 0 0 0 1 4 this 3 948  
59 0 0 6 69 850 0 0 0 1 4 this 3 948  
60 0 0 7 73 958 474 0 0 0 
61 0 0 7 73 958 474 0 0 1 6 param0 0 959  
62 0 0 7 72 934 0 0 0 0 
63 0 0 7 74 943 0 0 0 1 4 this 3 959  
64 0 0 7 75 953 0 0 0 1 4 this 3 959  
65 0 0 7 79 961 480 0 0 0 
66 0 0 7 79 961 480 0 0 1 6 param0 0 962  
67 0 0 7 78 934 0 0 0 0 
68 0 0 7 80 964 459 0 0 1 4 this 3 962  
69 0 0 6 81 930 0 0 0 2 4 this 3 962  3 pos 1 965  
70 0 0 4 82 924 0 0 0 3 4 this 3 961  4 mins 1 943  4 maxs 1 943  
71 0 0 7 86 967 485 0 0 0 
72 0 0 7 86 967 485 0 0 1 6 param0 0 968  
73 0 0 7 85 934 0 0 0 0 
74 0 0 7 87 971 0 0 0 1 4 this 3 968  
75 0 0 4 88 924 0 0 0 3 4 this 3 967  4 mins 1 943  4 maxs 1 943  
76 0 0 7 94 974 490 0 0 1 6 param0 0 972  
77 0 0 6 91 850 0 0 0 1 4 this 3 972  
78 0 0 6 92 850 0 0 0 1 4 this 3 972  
79 0 0 6 93 850 0 0 0 1 4 this 3 972  
80 0 0 7 102 977 497 0 0 1 6 param0 0 975  
81 0 0 6 97 850 0 0 0 1 4 this 3 975  
82 0 0 6 98 850 0 0 0 1 4 this 3 975  
83 0 0 6 99 850 0 0 0 1 4 this 3 975  
84 0 0 6 100 850 0 0 0 1 4 this 3 975  
85 0 0 6 101 930 0 0 0 1 4 this 3 975  
86 0 0 6 105 850 0 0 0 1 4 this 3 978  
87 0 0 4 106 924 0 0 35 // number of textures to consider.. 2 4 this 3 978  6 tcount 1 850  
88 0 0 4 107 924 0 0 21 // add textures 0 - n 3 4 this 3 978  3 wid 1 850  3 hit 1 850  
89 0 0 6 108 930 0 0 0 7 4 this 3 978  3 wid 1 850  3 hit 1 850  15 forcePowerOfTwo 1 930  14 onePixelBorder 1 930  7 max_wid 1 850  7 max_hit 1 850  
90 0 0 4 109 924 0 0 0 3 4 this 3 978  3 wid 1 850  3 hit 1 850  
91 0 0 7 110 974 490 0 74 // pack the textures, the return code is the amount of wasted/unused area. 3 4 this 3 978  15 forcePowerOfTwo 1 930  14 onePixelBorder 1 930  
92 0 0 7 111 977 497 0 58 // returns true if the texture has been rotated 90 degrees 2 4 this 3 978  5 index 1 850  
93 0 0 6 112 978 0 0 0 0 
94 0 0 4 113 924 0 0 0 1 2 tp 1 978  
95 0 0 7 118 979 511 0 0 0 
96 0 0 7 118 979 511 0 0 1 6 param0 0 980  
97 0 0 4 116 924 0 0 0 0 
98 0 0 4 117 924 0 0 0 0 
99 0 0 7 121 982 519 0 0 0 
100 0 0 7 121 982 519 0 0 1 6 param0 0 983  
101 0 0 6 122 930 0 0 0 1 4 this 3 983  
102 0 0 7 123 953 0 0 0 1 4 this 3 983  
103 0 0 7 124 987 0 0 0 1 4 this 3 983  
104 0 0 6 125 988 0 0 0 1 4 this 3 983  
105 0 0 6 126 988 0 0 0 1 4 this 3 983  
106 0 0 6 127 927 0 0 0 1 4 this 3 983  
107 0 0 7 131 989 0 0 0 0 
108 0 0 7 131 989 0 0 0 1 6 param0 0 990  
109 0 0 4 132 924 0 0 0 2 4 this 3 989  4 geom 1 992  
110 0 0 4 133 924 0 0 0 2 4 this 3 989  4 geom 1 992  
111 0 0 4 134 924 0 0 0 1 4 this 3 989  
112 0 0 7 136 982 519 0 0 4 4 this 3 989  5 start 1 965  3 end 1 965  4 mask 1 993  
113 0 0 7 137 982 519 0 0 5 4 this 3 989  6 origin 1 965  9 direction 1 997  8 distance 1 927  4 mask 1 993  
114 0 0 4 138 924 0 0 0 2 4 this 3 989  7 quality 1 850  
115 0 0 4 139 924 0 0 0 1 4 this 3 989  
116 0 0 7 140 992 0 0 0 2 4 this 3 989  7 geom_id 1 988  
117 0 0 7 143 934 0 0 0 0 
118 0 0 4 144 924 0 0 0 2 4 this 3 992  4 mask 1 993  
119 0 0 4 144 924 0 0 0 2 4 this 3 992  4 mask 1 988  
120 0 0 7 145 1001 0 0 0 1 4 this 3 999  
121 0 0 6 146 988 0 0 0 1 4 this 3 999  
122 0 0 4 147 924 0 0 0 2 4 this 3 992  7 quality 1 850  
123 0 0 4 148 924 0 0 0 1 4 this 3 992  
124 0 0 7 151 1002 539 0 0 1 4 name 1 919  
125 0 0 7 150 934 0 0 0 0 
126 0 0 4 152 924 0 0 0 4 4 this 3 1002  2 p1 1 965  2 p2 1 965  2 p3 1 965  
127 0 0 4 153 924 0 0 0 3 4 this 3 1002  4 geom 1 1003  2 ts 1 1006  
128 0 0 7 157 936 0 0 0 2 13 face_material 1 919  9 face_type 1 850  
129 0 0 7 158 936 0 0 0 0 
130 0 0 7 159 936 0 0 0 0 
131 0 0 6 160 919 0 0 0 1 4 this 3 1009  
132 0 0 6 161 850 0 0 0 1 4 this 3 1009  
133 0 0 6 162 930 0 0 0 1 4 this 3 1009  
134 0 0 6 163 850 0 0 0 0 
135 0 0 7 165 934 0 0 0 0 
136 0 0 7 168 950 619 0 0 0 
137 0 0 4 169 924 0 0 0 2 4 this 3 950  4 root 1 1011  
138 0 0 4 170 924 0 0 0 2 4 this 3 950  5 world 1 1013  
139 0 0 7 171 1013 0 0 0 1 4 this 3 1015  
140 0 0 6 172 930 0 0 0 2 4 this 3 1015  6 rbnode 1 1017  
141 0 0 6 173 930 0 0 0 3 4 this 3 950  6 rbnode 1 1017  12 triangle_idx 1 850  
142 0 0 6 174 919 0 0 0 3 4 this 3 950  6 rbnode 1 1017  12 triangle_idx 1 850  
143 0 0 6 175 850 0 0 0 3 4 this 3 950  6 rbnode 1 1017  12 triangle_idx 1 850  
144 0 0 6 176 850 0 0 0 3 4 this 3 950  6 rbnode 1 1017  12 triangle_idx 1 850  
145 0 0 7 177 943 0 0 0 2 4 this 3 950  8 modelnum 1 850  
146 0 0 4 178 924 0 0 0 2 4 this 3 950  5 pyent 1 1019  
147 0 0 4 179 924 0 0 0 2 4 this 3 950  5 pyent 1 1019  
148 0 0 4 180 924 0 0 0 3 4 this 3 950  1 n 1 850  9 preserved 1 930  
149 0 0 6 181 850 0 0 0 1 4 this 3 1015  
150 0 0 6 182 1019 0 0 0 2 4 this 3 1015  1 n 1 850  
151 0 0 4 183 924 0 0 0 4 4 this 3 950  4 name 1 919  6 origin 1 997  6 angles 1 997  
152 0 0 4 184 924 0 0 0 1 4 this 3 950  
153 0 0 6 185 930 0 0 0 3 4 this 3 950  4 file 1 931  13 is_transition 1 930  
154 0 0 4 186 924 0 0 0 1 4 this 3 950  
155 0 0 4 187 924 0 0 0 1 4 this 3 950  
156 0 0 4 188 924 0 0 0 3 4 this 3 950  5 gamma 1 1022  10 overbright 1 850  
157 0 0 6 189 1022 0 0 0 1 4 this 3 1015  
158 0 0 4 190 924 0 0 0 2 4 this 3 950  3 win 1 1023  
159 0 0 4 191 924 0 0 0 2 4 this 3 950  6 camera 1 1011  
160 0 0 4 192 924 0 0 0 2 4 this 3 950  6 render 1 1011  
161 0 0 4 193 924 0 0 0 2 4 this 3 950  5 shgen 1 1025  
162 0 0 4 194 924 0 0 0 2 4 this 3 950  4 flag 1 930  
163 0 0 4 195 924 0 0 0 2 4 this 3 950  4 flag 1 930  
164 0 0 4 196 924 0 0 0 2 4 this 3 950  4 type 1 850  
165 0 0 4 197 924 0 0 0 2 4 this 3 950  4 flag 1 930  
166 0 0 4 198 924 0 0 0 2 4 this 3 950  4 file 1 931  
167 0 0 4 199 924 0 0 0 2 4 this 3 950  4 flag 1 930  
168 0 0 6 200 930 0 0 0 1 4 this 3 1015  
169 0 0 7 201 971 0 0 0 1 4 this 3 1015  
170 0 0 4 202 924 0 0 0 7 4 this 3 950  14 decal_material 1 919  11 decal_scale 1 1026  6 rotate 1 927  5 start 1 965  3 end 1 965  11 decal_color 1 1030  
171 0 0 7 203 1033 0 0 0 2 4 this 3 950  3 pos 1 965  
172 0 0 4 204 924 0 0 0 1 4 this 3 950  
173 0 0 4 205 924 0 0 0 2 4 this 3 950  4 flag 1 930  
174 0 0 4 206 924 0 0 0 2 4 this 3 950  3 dir 1 997  
175 0 0 6 207 850 0 0 0 2 4 this 3 950  6 entnum 1 850  
176 0 0 4 208 924 0 0 0 4 4 this 3 950  8 modelnum 1 850  4 mins 1 943  4 maxs 1 943  
177 0 0 4 209 924 0 0 0 2 4 this 3 950  10 dispatcher 1 1019  
178 0 0 4 210 924 0 0 0 3 4 this 3 950  4 name 1 919  4 type 1 1034  
179 0 0 4 211 924 0 0 0 2 4 this 3 950  2 ai 1 930  
180 0 0 6 212 930 0 0 0 1 4 this 3 1015  
181 0 0 6 213 930 0 0 0 3 4 this 3 950  5 start 1 965  3 end 1 965  
182 0 0 7 214 943 0 0 0 3 4 this 3 950  5 start 1 965  3 end 1 965  
183 0 0 4 215 924 0 0 0 3 4 this 3 950  7 entname 1 919  4 type 1 1034  
184 0 0 6 216 1019 0 0 0 2 4 this 3 1015  10 targetname 1 919  
185 0 0 6 217 1019 0 0 0 2 4 this 3 950  9 classname 1 919  
186 0 0 4 218 924 0 0 0 3 4 this 3 950  4 list 1 1019  6 entnum 1 1037  
187 0 0 4 219 924 0 0 0 3 4 this 3 950  5 entum 1 850  5 pyent 1 1019  
188 0 0 4 220 924 0 0 0 2 4 this 3 950  3 ent 1 1019  
189 0 0 7 221 971 0 0 0 2 4 this 3 1015  8 modelnum 1 850  
190 0 0 7 222 947 469 0 0 2 4 this 3 1015  6 entnum 1 1037  
191 0 0 6 223 850 0 0 0 3 4 this 3 950  3 pos 1 965  8 headnode 1 850  
192 0 0 6 223 850 0 0 0 2 4 this 3 950  2 np 1 1011  
193 0 0 6 224 850 0 0 0 2 4 this 3 950  3 pos 1 965  
194 0 0 6 225 930 0 0 0 3 4 this 3 1015  12 curr_cluster 1 850  7 cluster 1 850  
195 0 0 6 226 930 0 0 0 3 4 this 3 950  6 bounds 1 1038  19 required_leaf_flags 1 988  
196 0 0 7 227 1038 0 0 0 3 4 this 3 950  13 net_transform 1 1006  8 original 1 1038  
197 0 0 6 228 930 0 0 0 1 4 this 3 1015  
198 0 0 6 229 930 0 0 0 1 4 this 3 1015  
199 0 0 4 230 924 0 0 0 2 4 this 3 950  13 is_transition 1 930  
200 0 0 7 231 971 0 0 0 1 4 this 3 1015  
201 0 0 4 232 924 0 0 0 2 4 this 3 950  4 leaf 1 850  
202 0 0 6 233 850 0 0 0 1 4 this 3 1015  
203 0 0 6 234 850 0 0 0 1 4 this 3 1015  
204 0 0 7 235 943 0 0 0 2 4 this 3 1015  4 leaf 1 850  
205 0 0 7 236 1043 0 0 0 3 4 this 3 950  7 facenum 1 850  5 point 1 997  
206 0 0 6 237 950 0 0 0 0 
207 0 0 7 241 1044 626 0 0 0 
208 0 0 4 242 924 0 0 0 3 4 this 3 1044  3 key 1 919  5 value 1 919  
209 0 0 4 243 924 0 0 0 1 4 this 3 1044  
210 0 0 4 244 924 0 0 0 2 4 this 3 1044  3 inp 1 1045  
211 0 0 4 245 924 0 0 0 2 4 this 3 1044  4 flag 1 850  
212 0 0 6 246 925 0 0 0 1 4 this 3 1048  
213 0 0 4 254 924 0 0 0 4 4 this 3 1050  9 vert_file 1 931  10 pixel_file 1 931  9 geom_file 1 931  
214 0 0 7 255 934 0 0 0 0 
215 0 0 7 249 1051 0 0 0 1 4 this 3 1050  
216 0 0 6 252 1052 0 0 0 1 4 this 3 1050  
217 0 0 7 259 1055 636 0 0 1 6 param0 0 1053  
218 0 0 7 258 1033 0 0 0 1 4 this 3 1053  
219 0 0 7 266 1025 662 0 0 1 6 param0 0 1056  
220 0 0 7 266 1025 662 0 0 4 6 output 1 1058  3 gsg 1 1060  6 camera 1 1011  6 render 1 1011  
221 0 0 4 267 924 0 0 0 2 4 this 3 1025  2 np 1 1011  
222 0 0 4 268 924 0 0 0 1 4 this 3 1025  
223 0 0 4 269 924 0 0 0 2 4 this 3 1025  4 spec 1 1050  
224 0 0 7 270 953 0 0 0 1 4 this 3 1056  
225 0 0 6 271 930 0 0 0 1 4 this 3 1056  
226 0 0 7 272 1033 0 0 0 1 4 this 3 1056  
227 0 0 6 273 1062 0 0 0 1 4 this 3 1056  
228 0 0 7 274 971 0 0 0 1 4 this 3 1056  
229 0 0 7 275 971 0 0 0 1 4 this 3 1056  
230 0 0 4 276 924 0 0 0 2 4 this 3 1025  7 quality 1 850  
231 0 0 6 277 850 0 0 0 1 4 this 3 1056  
232 0 0 4 278 924 0 0 0 2 4 this 3 1025  3 fog 1 1064  
233 0 0 4 279 924 0 0 0 1 4 this 3 1025  
234 0 0 7 280 1064 0 0 0 1 4 this 3 1056  
235 0 0 7 281 1068 0 0 0 1 4 this 3 1056  
236 0 0 4 282 924 0 0 0 2 4 this 3 1025  8 exposure 1 927  
237 0 0 7 283 1071 0 0 0 1 4 this 3 1056  
238 0 0 7 284 1060 0 0 0 1 4 this 3 1056  
239 0 0 7 285 1058 0 0 0 1 4 this 3 1056  
240 0 0 7 286 1055 636 0 0 1 4 this 3 1056  
241 0 0 4 287 924 0 0 0 1 3 tex 1 1033  
242 0 0 7 288 1033 0 0 0 0 
243 0 0 7 289 1076 0 0 0 2 4 spec 1 1074  5 perms 1 1048  
244 0 0 7 290 934 0 0 0 0 
245 0 0 7 295 1079 669 0 0 1 6 param0 0 1077  
246 0 0 7 295 1079 669 0 0 2 4 trav 1 1080  6 loader 1 950  
247 0 0 7 294 934 0 0 0 0 
248 0 0 6 296 930 0 0 0 2 4 this 3 1077  4 bits 1 988  
249 0 0 6 297 930 0 0 0 1 4 this 3 1077  
250 0 0 6 298 930 0 0 0 1 4 this 3 1077  
251 0 0 6 299 988 0 0 106 /**
	 * Returns the flags that must be set on a leaf for it to be
	 * rendered by the current camera.
	 */ 1 4 this 3 1077  
252 0 0 7 303 1083 672 0 0 1 6 param0 0 1081  
253 0 0 7 303 1083 672 0 0 2 4 name 1 919  6 loader 1 950  
254 0 0 7 302 934 0 0 0 0 
255 0 0 7 307 1086 675 0 0 1 6 param0 0 1084  
256 0 0 7 307 1086 675 0 0 1 4 name 1 919  
257 0 0 7 306 934 0 0 0 0 
258 0 0 7 312 1089 678 0 0 1 6 param0 0 1087  
259 0 0 7 312 1089 678 0 0 1 4 name 1 919  
260 0 0 7 311 934 0 0 0 0 
261 0 0 7 317 1092 681 0 0 1 6 param0 0 1090  
262 0 0 7 317 1092 681 0 0 1 4 name 1 919  
263 0 0 7 316 934 0 0 0 0 
264 0 0 7 320 1093 683 0 0 0 
265 0 0 7 323 1094 685 0 0 0 
266 0 0 7 326 1095 687 0 0 0 
267 0 0 7 329 1096 689 0 0 0 
268 0 0 7 332 1097 691 0 0 0 
269 0 0 7 335 1098 693 0 0 0 
270 0 0 7 339 1100 0 0 0 0 
271 0 0 7 340 934 0 0 0 0 
272 0 0 7 343 1103 715 0 0 1 6 param0 0 1101  
273 0 0 7 343 1103 715 0 0 4 3 mgr 1 1104  15 listener_target 1 1011  4 root 1 1011  13 task_priority 1 850  
274 0 0 4 344 924 0 0 0 2 4 this 3 1103  6 factor 1 1022  
275 0 0 6 345 1022 0 0 0 1 4 this 3 1101  
276 0 0 4 346 924 0 0 0 2 4 this 3 1103  6 factor 1 1022  
277 0 0 6 347 1022 0 0 0 1 4 this 3 1101  
278 0 0 4 348 924 0 0 0 2 4 this 3 1103  6 factor 1 1022  
279 0 0 6 349 1022 0 0 0 1 4 this 3 1101  
280 0 0 4 350 924 0 0 0 3 4 this 3 1103  5 sound 1 1106  4 dist 1 1022  
281 0 0 6 351 1022 0 0 0 2 4 this 3 1101  5 sound 1 1106  
282 0 0 4 352 924 0 0 0 3 4 this 3 1103  5 sound 1 1106  4 dist 1 1022  
283 0 0 6 353 1022 0 0 0 2 4 this 3 1101  5 sound 1 1106  
284 0 0 4 354 924 0 0 0 2 4 this 3 1103  8 listener 1 1011  
285 0 0 4 355 924 0 0 0 1 4 this 3 1103  
286 0 0 7 356 1106 0 0 0 2 4 this 3 1103  4 path 1 919  
287 0 0 4 357 924 0 0 0 3 4 this 3 1103  5 sound 1 1106  6 object 1 1011  
288 0 0 4 358 924 0 0 0 2 4 this 3 1103  5 sound 1 1106  
289 0 0 4 359 924 0 0 0 1 4 this 3 1103  
290 0 0 4 360 924 0 0 0 1 4 this 3 1103  
291 0 0 7 365 1108 719 0 0 0 
292 0 0 7 365 1108 719 0 0 1 6 param0 0 1109  
293 0 0 4 363 924 0 0 0 4 1 x 1 927  1 y 1 927  4 left 1 953  5 right 1 953  
294 0 0 7 364 987 0 0 0 3 4 node 1 1011  5 point 1 997  4 eyes 1 1011  
295 0 0 7 368 1111 721 0 0 0 
296 0 0 7 373 1114 724 0 0 2 4 copy 1 1112  10 query_size 1 927  
297 0 0 7 373 1114 724 0 0 1 6 param0 0 1115  
298 0 0 7 373 1114 724 0 0 2 4 name 1 919  10 query_size 1 927  
299 0 0 7 372 934 0 0 0 0 
300 0 0 7 380 934 0 0 0 0 
301 0 0 7 381 1033 0 0 0 1 4 this 3 1117  
302 0 0 4 382 924 0 0 0 2 4 this 3 1117  4 pass 1 1118  
303 0 0 4 383 924 0 0 0 2 4 this 3 1117  4 pass 1 1118  
304 0 0 7 384 1118 767 0 0 2 4 this 3 1117  4 name 1 919  
305 0 0 4 385 924 0 0 0 1 4 this 3 1117  
306 0 0 4 386 924 0 0 0 1 4 this 3 1117  
307 0 0 4 387 924 0 0 0 2 4 this 3 1117  3 win 1 1058  
308 0 0 4 388 924 0 0 0 1 4 this 3 1117  
309 0 0 7 376 1051 0 0 0 1 4 this 3 1117  
310 0 0 6 378 1052 0 0 0 1 4 this 3 1117  
311 0 0 7 397 1118 767 0 0 8 2 pp 1 1119  4 name 1 919  19 texture_output_bits 1 850  7 fbprops 1 1120  10 force_size 1 930  11 forced_size 1 1123  8 div_size 1 930  3 div 1 850  
312 0 0 7 397 1118 767 0 0 1 6 param0 0 1126  
313 0 0 7 396 934 0 0 0 0 
314 0 0 7 398 971 0 0 0 1 4 this 3 1126  
315 0 0 7 399 1128 0 0 0 1 4 this 3 1126  
316 0 0 7 400 971 0 0 0 1 4 this 3 1126  
317 0 0 6 401 930 0 0 0 2 4 this 3 1126  4 bits 1 850  
318 0 0 4 402 924 0 0 0 3 4 this 3 1118  8 div_size 1 930  3 div 1 850  
319 0 0 4 403 924 0 0 0 3 4 this 3 1118  10 force_size 1 930  11 forced_size 1 1123  
320 0 0 4 404 924 0 0 0 2 4 this 3 1118  7 fbprops 1 1120  
321 0 0 4 405 924 0 0 0 2 4 this 3 1118  4 bits 1 850  
322 0 0 7 406 1128 0 0 0 2 4 this 3 1118  4 size 1 1123  
323 0 0 7 407 1033 0 0 0 2 4 this 3 1118  3 bit 1 850  
324 0 0 7 408 1033 0 0 0 1 4 this 3 1118  
325 0 0 7 409 1033 0 0 0 1 4 this 3 1118  
326 0 0 6 410 930 0 0 0 1 4 this 3 1118  
327 0 0 4 411 924 0 0 0 1 4 this 3 1118  
328 0 0 4 412 924 0 0 0 1 4 this 3 1118  
329 0 0 4 413 924 0 0 0 1 4 this 3 1118  
330 0 0 4 414 924 0 0 0 1 4 this 3 1118  
331 0 0 4 415 924 0 0 0 1 4 this 3 1118  
332 0 0 4 416 924 0 0 0 1 4 this 3 1118  
333 0 0 4 417 924 0 0 0 2 4 this 3 1118  6 output 1 1058  
334 0 0 4 418 924 0 0 0 1 4 this 3 1118  
335 0 0 7 419 1129 0 0 0 0 
336 0 0 7 392 1051 0 0 0 1 4 this 3 1118  
337 0 0 6 394 1052 0 0 0 1 4 this 3 1118  
338 0 0 7 422 1130 771 0 0 3 2 pp 1 1119  19 output_texture_bits 1 850  7 auxbits 1 850  
339 0 0 7 422 1130 771 0 0 1 6 param0 0 1131  
340 0 0 4 423 924 0 0 0 2 4 this 3 1130  1 i 1 850  
341 0 0 4 424 924 0 0 0 2 4 this 3 1130  5 state 1 1133  
342 0 0 7 427 1119 792 0 0 0 
343 0 0 7 427 1119 792 0 0 1 6 param0 0 1136  
344 0 0 4 428 924 0 0 0 2 4 this 3 1119  6 output 1 1058  
345 0 0 4 429 924 0 0 0 2 4 this 3 1119  6 camera 1 1011  
346 0 0 4 430 924 0 0 0 2 4 this 3 1119  6 camera 1 1011  
347 0 0 4 431 924 0 0 0 2 4 this 3 1119  6 effect 1 1117  
348 0 0 4 432 924 0 0 0 2 4 this 3 1119  6 effect 1 1117  
349 0 0 7 433 1117 738 0 0 2 4 this 3 1119  4 name 1 919  
350 0 0 7 434 1033 0 0 0 1 4 this 3 1136  
351 0 0 7 435 1033 0 0 0 1 4 this 3 1136  
352 0 0 7 436 1130 771 0 0 1 4 this 3 1136  
353 0 0 7 437 1058 0 0 0 1 4 this 3 1136  
354 0 0 7 438 971 0 0 0 2 4 this 3 1136  1 n 1 850  
355 0 0 6 439 850 0 0 0 1 4 this 3 1119  
356 0 0 7 440 1139 0 0 0 1 4 this 3 1136  
357 0 0 6 441 930 0 0 0 1 4 this 3 1136  
358 0 0 4 442 924 0 0 0 2 4 this 3 1119  4 bits 1 850  
359 0 0 4 443 924 0 0 0 3 4 this 3 1119  1 n 1 850  6 region 1 1140  
360 0 0 4 444 924 0 0 0 2 4 this 3 1119  6 region 1 1140  
361 0 0 4 445 924 0 0 0 3 4 this 3 1119  1 n 1 850  6 region 1 1140  
362 0 0 4 446 924 0 0 0 1 4 this 3 1119  
363 0 0 7 450 1144 797 0 0 1 6 param0 0 1142  
364 0 0 7 450 1144 797 0 0 1 2 pp 1 1119  
365 0 0 7 449 934 0 0 0 0 
366 0 0 4 451 924 0 0 0 2 4 this 3 1144  6 output 1 1071  
367 0 0 6 452 927 0 0 56 /**
	 * Returns the calculated exposure adjustment.
	 */ 1 4 this 3 1142  
368 0 0 7 455 1145 800 0 0 1 2 pp 1 1119  
369 0 0 7 456 1144 797 0 0 1 4 this 3 1146  
370 0 0 7 460 1148 803 0 0 1 2 pp 1 1119  
371 0 0 7 459 934 0 0 0 0 
372 0 0 7 463 934 0 0 0 0 
373 0 0 7 464 1100 0 0 0 1 6 origin 1 997  
374 0 0 7 465 953 0 0 0 1 4 this 3 1149  
375 0 0 7 469 1151 810 0 0 1 2 pp 1 1119  
376 0 0 7 468 934 0 0 0 0 
377 0 0 6 472 850 0 0 0 0 
378 0 0 7 474 934 0 0 0 0 
379 0 0 7 475 936 0 0 0 1 13 bloom_enabled 1 930  
380 0 0 6 476 930 0 0 0 1 4 this 3 1152  
381 0 0 7 480 1154 844 0 0 11 5 world 1 1013  6 render 1 1011  6 parent 1 1011  11 walk_height 1 927  13 crouch_height 1 927  11 step_height 1 927  6 radius 1 927  7 gravity 1 927  9 wall_mask 1 993  10 floor_mask 1 993  10 event_mask 1 993  
382 0 0 7 480 1154 844 0 0 1 6 param0 0 1155  
383 0 0 4 481 924 0 0 0 3 4 this 3 1154  4 degs 1 927  12 affect_speed 1 930  
384 0 0 4 482 924 0 0 0 2 4 this 3 1154  4 mask 1 993  
385 0 0 4 483 924 0 0 0 2 4 this 3 1154  8 callback 1 1019  
386 0 0 4 484 924 0 0 0 2 4 this 3 1154  8 callback 1 1019  
387 0 0 4 485 924 0 0 0 2 4 this 3 1154  7 limiter 1 930  
388 0 0 4 486 924 0 0 0 2 4 this 3 1154  3 mat 1 919  
389 0 0 4 487 924 0 0 0 2 4 this 3 1154  4 flag 1 930  
390 0 0 6 488 919 0 0 0 1 4 this 3 1155  
391 0 0 7 489 971 0 0 0 1 4 this 3 1155  
392 0 0 7 490 971 0 0 0 1 4 this 3 1155  
393 0 0 7 491 971 0 0 0 1 4 this 3 1155  
394 0 0 7 492 971 0 0 0 1 4 this 3 1155  
395 0 0 7 493 971 0 0 0 1 4 this 3 1155  
396 0 0 4 494 924 0 0 0 2 4 this 3 1154  4 grav 1 927  
397 0 0 4 495 924 0 0 0 2 4 this 3 1154  5 state 1 850  
398 0 0 6 496 850 0 0 0 1 4 this 3 1155  
399 0 0 4 497 924 0 0 0 2 4 this 3 1154  8 callback 1 1019  
400 0 0 4 498 924 0 0 0 2 4 this 3 1154  8 callback 1 1019  
401 0 0 4 499 924 0 0 0 1 4 this 3 1154  
402 0 0 4 500 924 0 0 0 1 4 this 3 1154  
403 0 0 6 501 930 0 0 0 1 4 this 3 1154  
404 0 0 4 502 924 0 0 0 2 4 this 3 1154  10 max_height 1 927  
405 0 0 4 503 924 0 0 0 2 4 this 3 1154  5 omega 1 927  
406 0 0 4 504 924 0 0 0 2 4 this 3 1154  8 movement 1 997  
407 0 0 4 505 924 0 0 0 1 4 this 3 1154  
408 0 0 4 506 924 0 0 0 1 4 this 3 1154  
409 0 0 4 507 924 0 0 0 1 4 this 3 1154  
312
845 13 TextureStages 0 141313 13 TextureStages 13 TextureStages 0 0 0 1 420 421 0 10 410 411 412 413 414 415 416 417 418 419 0 0 0 0 0 752
/**
 * This simple interface maintains a single TextureStage object for each unique name.
 * It avoids the creation of duplicate TextureStages with the same name, which
 * reduces texture swapping and draw call overhead.
 *
 * If using our shader system, you should always use this interface to get TextureStages.
 * You are not required to change any properties on the returned TextureStage, as the shader
 * specification will know what to do with the TextureStage from the name.
 * 
 * For example, you do not need to call TextureStage::set_mode() or NodePath::set_tex_gen().
 * If you apply a texture to a node with the get_normalmap() stage, the shader specification
 * will know that the texture you supplied is to be treated as a normal map.
 */

846 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 422 444 0 21 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 0 0 1 0 847 0 0 0 0 0

847 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

848 17 BSPMaterialAttrib 0 141313 17 BSPMaterialAttrib 17 BSPMaterialAttrib 0 0 0 0 453 1 1157 8 445 446 447 448 449 450 451 452 0 0 1 0 849 0 0 0 0 0

849 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

850 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

851 12 BoundingKDOP 0 141313 12 BoundingKDOP 12 BoundingKDOP 0 0 0 0 459 0 5 454 455 456 457 458 0 0 1 0 852 0 0 0 0 243
/**
 * This defines a bounding convex volume.  It may represent any enclosing convex volume,
 * including simple boxes.  However, if all you want is an axis-aligned
 * bounding box, you may be better off with the simpler BoundingBox class.
 */

852 20 FiniteBoundingVolume 0 2048 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 168
/**
 * A special kind of GeometricBoundingVolume that is known to be finite.  It
 * is possible to query this kind of volume for its minimum and maximum
 * extents.
 */

853 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 461 469 0 8 460 462 463 464 465 466 467 468 0 0 1 0 847 0 0 0 0 0

854 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 471 474 0 3 470 472 473 0 0 1 0 853 0 0 0 0 0

855 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 476 480 0 4 475 477 478 479 0 0 1 0 853 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

856 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 482 485 0 3 481 483 484 0 0 1 0 853 0 0 0 0 0

857 10 PackResult 0 141313 10 PackResult 10 PackResult 0 0 0 1 489 490 0 3 486 487 488 0 0 0 0 0 0

858 15 TextureLocation 0 141313 15 TextureLocation 15 TextureLocation 0 0 0 1 496 497 0 5 491 492 493 494 495 0 0 0 0 0 0

859 13 TexturePacker 0 141313 13 TexturePacker 13 TexturePacker 0 0 0 0 507 0 9 498 499 500 501 502 503 504 505 506 0 0 0 0 0 0

860 8 RayTrace 0 141313 8 RayTrace 8 RayTrace 0 0 0 1 510 511 0 2 508 509 0 0 0 0 0 0

861 17 RayTraceHitResult 0 141313 17 RayTraceHitResult 17 RayTraceHitResult 0 0 0 1 512 519 0 6 513 514 515 516 517 518 0 0 0 0 0 0

862 13 RayTraceScene 0 75777 13 RayTraceScene 13 RayTraceScene 0 0 0 1 520 0 0 8 521 522 523 524 525 526 527 528 0 0 1 0 863 0 0 0 1 864 0

863 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

864 0 0 794624 15 RayTraceScene:: 0 862 0 0 0 0 0 0 0 0 0 3 17 BUILD_QUALITY_LOW 32 RayTraceScene::BUILD_QUALITY_LOW 0
0 20 BUILD_QUALITY_MEDIUM 35 RayTraceScene::BUILD_QUALITY_MEDIUM 0
1 18 BUILD_QUALITY_HIGH 33 RayTraceScene::BUILD_QUALITY_HIGH 0
2 0 0

865 16 RayTraceGeometry 0 75777 16 RayTraceGeometry 16 RayTraceGeometry 0 0 0 0 0 0 6 529 530 531 532 533 534 0 0 1 0 866 0 0 0 0 0

866 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

867 20 RayTraceTriangleMesh 0 141313 20 RayTraceTriangleMesh 20 RayTraceTriangleMesh 0 0 0 1 536 539 0 3 535 537 538 0 0 1 0 865 0 0 0 0 0

868 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 548 1 1158 8 540 541 542 543 544 545 546 547 0 0 1 0 849 0 0 0 1 869 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

869 0 0 794624 15 BSPFaceAttrib:: 0 868 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

870 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 549 619 0 69 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 0 0 0 0 1 871 58
/**
 * Loads and handles the operations of PBSP files.
 */

871 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 870 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

872 18 ShaderPermutations 0 141313 18 ShaderPermutations 18 ShaderPermutations 0 0 0 1 620 626 0 5 621 622 623 624 625 0 0 1 0 863 0 0 0 0 97
/**
 * Represents a list of #defines and variable inputs to a shader that is being generated.
 */

873 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 0 633 0 2 631 632 0 0 2 3 863 627 628 3 874 629 630 0 0 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

874 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

875 17 PlanarReflections 0 141313 17 PlanarReflections 17 PlanarReflections 0 0 0 1 635 636 0 1 634 0 0 1 0 863 0 0 0 0 0

876 13 ShaderQuality 0 532481 13 ShaderQuality 13 ShaderQuality 0 0 0 0 0 0 0 0 0 0 3 17 SHADERQUALITY_LOW 17 SHADERQUALITY_LOW 0
0 20 SHADERQUALITY_MEDIUM 20 SHADERQUALITY_MEDIUM 0
1 18 SHADERQUALITY_HIGH 18 SHADERQUALITY_HIGH 0
2 0 0

877 10 CameraBits 0 532481 10 CameraBits 10 CameraBits 0 0 0 0 0 0 0 0 0 0 6 11 CAMERA_MAIN 11 CAMERA_MAIN 0
1 13 CAMERA_SHADOW 13 CAMERA_SHADOW 0
2 17 CAMERA_REFLECTION 17 CAMERA_REFLECTION 0
4 17 CAMERA_REFRACTION 17 CAMERA_REFRACTION 0
8 16 CAMERA_VIEWMODEL 16 CAMERA_VIEWMODEL 0
16 14 CAMERA_COMPUTE 14 CAMERA_COMPUTE 0
32 0 0

878 7 AuxBits 0 532481 7 AuxBits 7 AuxBits 0 0 0 0 0 0 0 0 0 0 2 14 AUXBITS_NORMAL 14 AUXBITS_NORMAL 0
1 12 AUXBITS_ARME 12 AUXBITS_ARME 0
2 0 0

879 18 BSPShaderGenerator 0 141313 18 BSPShaderGenerator 18 BSPShaderGenerator 0 0 0 1 637 662 0 24 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 0 0 1 0 880 0 0 0 0 0

880 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

881 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 664 669 0 5 663 665 666 667 668 0 0 1 0 882 0 0 0 0 0

882 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

883 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 671 672 0 1 670 0 0 1 0 866 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

884 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 674 675 0 1 673 0 0 1 0 866 0 0 0 0 0

885 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 677 678 0 1 676 0 0 1 0 886 0 0 0 0 0

886 9 ModelRoot 0 2048 9 ModelRoot 9 ModelRoot 0 0 0 0 0 0 0 0 0 0 0 0 314
/**
 * A node of this type is created automatically at the root of each model file
 * that is loaded.  It may eventually contain some information about the
 * contents of the model; at the moment, it contains no special information,
 * but can be used as a flag to indicate the presence of a loaded model file.
 */

887 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 680 681 0 1 679 0 0 1 0 888 0 0 0 0 0

888 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

889 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 682 683 0 0 0 0 1 0 873 0 0 0 0 0

890 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 684 685 0 0 0 0 1 0 873 0 0 0 0 0

891 16 UnlitGenericSpec 0 141313 16 UnlitGenericSpec 16 UnlitGenericSpec 0 0 0 1 686 687 0 0 0 0 1 0 873 0 0 0 0 160
/**
 * Shader that only supports a basetexture, no fancy lighting effects or anything.
 * Could be used for UI elements, emissive materials, particles, etc.
 */

892 14 UnlitNoMatSpec 0 141313 14 UnlitNoMatSpec 14 UnlitNoMatSpec 0 0 0 1 688 689 0 0 0 0 1 0 873 0 0 0 0 0

893 13 CSMRenderSpec 0 141313 13 CSMRenderSpec 13 CSMRenderSpec 0 0 0 1 690 691 0 0 0 0 1 0 873 0 0 0 0 0

894 10 SkyBoxSpec 0 141313 10 SkyBoxSpec 10 SkyBoxSpec 0 0 0 1 692 693 0 0 0 0 1 0 873 0 0 0 0 0

895 18 AmbientBoostEffect 0 141313 18 AmbientBoostEffect 18 AmbientBoostEffect 0 0 0 0 696 0 2 694 695 0 0 1 0 896 0 0 0 0 0

896 12 RenderEffect 0 2048 12 RenderEffect 12 RenderEffect 0 0 0 0 0 0 0 0 0 0 0 0 901
/**
 * This is the base class for a number of special render effects that may be
 * set on scene graph nodes to change the way they render.  This includes
 * BillboardEffect, DecalEffect, etc.
 *
 * RenderEffect represents render properties that must be applied as soon as
 * they are encountered in the scene graph, rather than propagating down to
 * the leaves.  This is different from RenderAttrib, which represents
 * properties like color and texture that don't do anything until they
 * propagate down to a GeomNode.
 *
 * You should not attempt to create or modify a RenderEffect directly;
 * instead, use the make() method of the appropriate kind of effect you want.
 * This will allocate and return a new RenderEffect of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderEffect
 * if you wish to change its properties; instead, create a new one.
 */

897 14 Audio3DManager 0 141313 14 Audio3DManager 14 Audio3DManager 0 0 0 1 697 715 0 17 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 0 0 1 0 863 0 0 0 0 0

898 6 CIOLib 0 141313 6 CIOLib 6 CIOLib 0 0 0 1 718 719 0 2 716 717 0 0 0 0 0 0

899 17 DecalModulateSpec 0 141313 17 DecalModulateSpec 17 DecalModulateSpec 0 0 0 1 720 721 0 0 0 0 1 0 891 0 0 0 0 90
/**
 * This is just an alias of UnlitGeneric that enables color blending on the decal.
 */

900 8 GlowNode 0 141313 8 GlowNode 8 GlowNode 0 0 0 1 723 724 0 1 722 0 0 1 0 901 0 0 0 0 207
/**
 * This is a specialization on GeomNode that uses a pixel occlusion query
 * to determine if the Geoms on the node should be rendered.
 *
 * This is useful for things like light glows or lens flares.
 */

901 8 GeomNode 0 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 0 0 0 0 0 208
/**
 * A node that holds Geom objects, renderable pieces of geometry.  This is the
 * primary kind of leaf node in the scene graph; almost all visible objects
 * will be contained in a GeomNode somewhere.
 */

902 17 PostProcessEffect 0 141313 17 PostProcessEffect 17 PostProcessEffect 0 0 0 0 738 0 9 729 730 731 732 733 734 735 736 737 0 0 2 3 863 725 726 3 874 727 728 0 0 0

903 15 PassTextureBits 0 532481 15 PassTextureBits 15 PassTextureBits 0 0 0 0 0 0 0 0 0 0 6 22 bits_PASSTEXTURE_COLOR 22 bits_PASSTEXTURE_COLOR 0
1 22 bits_PASSTEXTURE_DEPTH 22 bits_PASSTEXTURE_DEPTH 0
2 21 bits_PASSTEXTURE_AUX0 21 bits_PASSTEXTURE_AUX0 0
4 21 bits_PASSTEXTURE_AUX1 21 bits_PASSTEXTURE_AUX1 0
8 21 bits_PASSTEXTURE_AUX2 21 bits_PASSTEXTURE_AUX2 0
16 21 bits_PASSTEXTURE_AUX3 21 bits_PASSTEXTURE_AUX3 0
32 0 0

904 15 PostProcessPass 0 141313 15 PostProcessPass 15 PostProcessPass 0 0 0 1 744 767 0 23 743 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 0 0 2 3 863 739 740 3 874 741 742 0 0 0

905 20 PostProcessScenePass 0 141313 20 PostProcessScenePass 20 PostProcessScenePass 0 0 0 1 768 771 0 2 769 770 0 0 1 0 904 0 0 0 0 0

906 11 PostProcess 0 141313 11 PostProcess 11 PostProcess 0 0 0 1 772 792 0 19 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 0 0 1 0 863 0 0 0 0 0

907 7 HDRPass 0 141313 7 HDRPass 7 HDRPass 0 0 0 1 794 797 0 3 793 795 796 0 0 1 0 904 0 0 0 0 0

908 9 HDREffect 0 141313 9 HDREffect 9 HDREffect 0 0 0 1 798 800 0 1 799 0 0 1 0 902 0 0 0 0 0

909 11 BloomEffect 0 141313 11 BloomEffect 11 BloomEffect 0 0 0 1 802 803 0 1 801 0 0 1 0 902 0 0 0 0 0

910 20 LightingOriginEffect 0 141313 20 LightingOriginEffect 20 LightingOriginEffect 0 0 0 0 807 0 3 804 805 806 0 0 1 0 896 0 0 0 0 0

911 11 FXAA_Effect 0 141313 11 FXAA_Effect 11 FXAA_Effect 0 0 0 1 809 810 0 1 808 0 0 1 0 902 0 0 0 0 0

912 11 BloomAttrib 0 141313 11 BloomAttrib 11 BloomAttrib 0 0 0 0 815 1 1159 4 811 812 813 814 0 0 1 0 849 0 0 0 0 0

913 13 MovementState 0 532481 13 MovementState 13 MovementState 0 0 0 0 0 0 0 0 0 0 4 20 MOVEMENTSTATE_GROUND 20 MOVEMENTSTATE_GROUND 0
0 21 MOVEMENTSTATE_JUMPING 21 MOVEMENTSTATE_JUMPING 0
1 21 MOVEMENTSTATE_FALLING 21 MOVEMENTSTATE_FALLING 0
2 22 MOVEMENTSTATE_SWIMMING 22 MOVEMENTSTATE_SWIMMING 0
3 0 0

914 26 PhysicsCharacterController 0 141313 26 PhysicsCharacterController 26 PhysicsCharacterController 0 0 0 1 816 844 0 27 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 0 0 0 0 0 0

915 15 TextureStages * 0 8576 15 TextureStages * 15 TextureStages * 0 0 845 0 0 0 0 0 0 0 0 0 0

916 21 TextureStages const * 0 8576 21 TextureStages const * 21 TextureStages const * 0 0 917 0 0 0 0 0 0 0 0 0 0

917 19 TextureStages const 0 8832 19 TextureStages const 19 TextureStages const 0 0 845 0 0 0 0 0 0 0 0 0 0

918 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 336
/**
 * Defines the properties of a named stage of the multitexture pipeline.  The
 * TextureAttrib will associated a number of these stages with Texture
 * objects, and the GSG will render geometry by sorting all of the currently
 * active TextureStages in order and then issuing the appropriate rendering
 * calls to activate them.
 */

919 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

920 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 918 0 0 0 0 0 0 0 0 0 0

921 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 922 0 0 0 0 0 0 0 0 0 0

922 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 846 0 0 0 0 0 0 0 0 0 0

923 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 846 0 0 0 0 0 0 0 0 0 0

924 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

925 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 926 0 0 0 0 0 0 0 0 0 0

926 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

927 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

928 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

929 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 928 0 0 0 0 0 0 0 0 0 0

930 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

931 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 932 0 0 0 0 0 0 0 0 0 0

932 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 928 0 0 0 0 0 0 0 0 0 0

933 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

934 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 933 0 0 0 0 0 0 0 0 0 0

935 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 849 0 0 0 0 0 0 0 0 0 0

936 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 935 0 0 0 0 0 0 0 0 0 0

937 25 BSPMaterialAttrib const * 0 8576 25 BSPMaterialAttrib const * 25 BSPMaterialAttrib const * 0 0 938 0 0 0 0 0 0 0 0 0 0

938 23 BSPMaterialAttrib const 0 8832 23 BSPMaterialAttrib const 23 BSPMaterialAttrib const 0 0 848 0 0 0 0 0 0 0 0 0 0

939 20 BoundingKDOP const * 0 8576 20 BoundingKDOP const * 20 BoundingKDOP const * 0 0 940 0 0 0 0 0 0 0 0 0 0

940 18 BoundingKDOP const 0 8832 18 BoundingKDOP const 18 BoundingKDOP const 0 0 851 0 0 0 0 0 0 0 0 0 0

941 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 942 0 0 0 0 0 0 0 0 0 0

942 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

943 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 941 0 0 0 0 0 0 0 0 0 0

944 6 LPlane 0 2105344 6 LPlane 6 LPlane 0 0 945 0 0 0 0 0 0 0 0 0 0

945 7 LPlanef 0 2048 7 LPlanef 7 LPlanef 0 0 0 0 0 0 0 0 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

946 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 944 0 0 0 0 0 0 0 0 0 0

947 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 853 0 0 0 0 0 0 0 0 0 0

948 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 949 0 0 0 0 0 0 0 0 0 0

949 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 853 0 0 0 0 0 0 0 0 0 0

950 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 870 0 0 0 0 0 0 0 0 0 0

951 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 952 0 0 0 0 0 0 0 0 0 0

952 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

953 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 951 0 0 0 0 0 0 0 0 0 0

954 6 LColor 0 2105344 6 LColor 6 LColor 0 0 955 0 0 0 0 0 0 0 0 0 0

955 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 956 0 0 0 0 0 0 0 0 0 0

956 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

957 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 954 0 0 0 0 0 0 0 0 0 0

958 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 854 0 0 0 0 0 0 0 0 0 0

959 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 960 0 0 0 0 0 0 0 0 0 0

960 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 854 0 0 0 0 0 0 0 0 0 0

961 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 855 0 0 0 0 0 0 0 0 0 0

962 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 963 0 0 0 0 0 0 0 0 0 0

963 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 855 0 0 0 0 0 0 0 0 0 0

964 14 BoundingKDOP * 0 8576 14 BoundingKDOP * 14 BoundingKDOP * 0 0 851 0 0 0 0 0 0 0 0 0 0

965 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 966 0 0 0 0 0 0 0 0 0 0

966 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 941 0 0 0 0 0 0 0 0 0 0

967 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 856 0 0 0 0 0 0 0 0 0 0

968 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 969 0 0 0 0 0 0 0 0 0 0

969 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 856 0 0 0 0 0 0 0 0 0 0

970 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

971 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 970 0 0 0 0 0 0 0 0 0 0

972 18 PackResult const * 0 8576 18 PackResult const * 18 PackResult const * 0 0 973 0 0 0 0 0 0 0 0 0 0

973 16 PackResult const 0 8832 16 PackResult const 16 PackResult const 0 0 857 0 0 0 0 0 0 0 0 0 0

974 12 PackResult * 0 8576 12 PackResult * 12 PackResult * 0 0 857 0 0 0 0 0 0 0 0 0 0

975 23 TextureLocation const * 0 8576 23 TextureLocation const * 23 TextureLocation const * 0 0 976 0 0 0 0 0 0 0 0 0 0

976 21 TextureLocation const 0 8832 21 TextureLocation const 21 TextureLocation const 0 0 858 0 0 0 0 0 0 0 0 0 0

977 17 TextureLocation * 0 8576 17 TextureLocation * 17 TextureLocation * 0 0 858 0 0 0 0 0 0 0 0 0 0

978 15 TexturePacker * 0 8576 15 TexturePacker * 15 TexturePacker * 0 0 859 0 0 0 0 0 0 0 0 0 0

979 10 RayTrace * 0 8576 10 RayTrace * 10 RayTrace * 0 0 860 0 0 0 0 0 0 0 0 0 0

980 16 RayTrace const * 0 8576 16 RayTrace const * 16 RayTrace const * 0 0 981 0 0 0 0 0 0 0 0 0 0

981 14 RayTrace const 0 8832 14 RayTrace const 14 RayTrace const 0 0 860 0 0 0 0 0 0 0 0 0 0

982 19 RayTraceHitResult * 0 8576 19 RayTraceHitResult * 19 RayTraceHitResult * 0 0 861 0 0 0 0 0 0 0 0 0 0

983 25 RayTraceHitResult const * 0 8576 25 RayTraceHitResult const * 25 RayTraceHitResult const * 0 0 984 0 0 0 0 0 0 0 0 0 0

984 23 RayTraceHitResult const 0 8832 23 RayTraceHitResult const 23 RayTraceHitResult const 0 0 861 0 0 0 0 0 0 0 0 0 0

985 8 LVector2 0 2105344 8 LVector2 8 LVector2 0 0 986 0 0 0 0 0 0 0 0 0 0

986 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

987 10 LVector2 * 0 8576 10 LVector2 * 10 LVector2 * 0 0 985 0 0 0 0 0 0 0 0 0 0

988 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

989 15 RayTraceScene * 0 8576 15 RayTraceScene * 15 RayTraceScene * 0 0 862 0 0 0 0 0 0 0 0 0 0

990 21 RayTraceScene const * 0 8576 21 RayTraceScene const * 21 RayTraceScene const * 0 0 991 0 0 0 0 0 0 0 0 0 0

991 19 RayTraceScene const 0 8832 19 RayTraceScene const 19 RayTraceScene const 0 0 862 0 0 0 0 0 0 0 0 0 0

992 18 RayTraceGeometry * 0 8576 18 RayTraceGeometry * 18 RayTraceGeometry * 0 0 865 0 0 0 0 0 0 0 0 0 0

993 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 994 0 0 0 0 0 0 0 0 0 0

994 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 995 0 0 0 0 0 0 0 0 0 0

995 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 996 0 0 0 0 0 0 0 0 0 0

996 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

997 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 998 0 0 0 0 0 0 0 0 0 0

998 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 951 0 0 0 0 0 0 0 0 0 0

999 24 RayTraceGeometry const * 0 8576 24 RayTraceGeometry const * 24 RayTraceGeometry const * 0 0 1000 0 0 0 0 0 0 0 0 0 0

1000 22 RayTraceGeometry const 0 8832 22 RayTraceGeometry const 22 RayTraceGeometry const 0 0 865 0 0 0 0 0 0 0 0 0 0

1001 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 995 0 0 0 0 0 0 0 0 0 0

1002 22 RayTraceTriangleMesh * 0 8576 22 RayTraceTriangleMesh * 22 RayTraceTriangleMesh * 0 0 867 0 0 0 0 0 0 0 0 0 0

1003 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 1004 0 0 0 0 0 0 0 0 0 0

1004 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 1005 0 0 0 0 0 0 0 0 0 0

1005 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

1006 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 1007 0 0 0 0 0 0 0 0 0 0

1007 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 1008 0 0 0 0 0 0 0 0 0 0

1008 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

1009 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 1010 0 0 0 0 0 0 0 0 0 0

1010 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 868 0 0 0 0 0 0 0 0 0 0

1011 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 1012 0 0 0 0 0 0 0 0 0 0

1012 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 970 0 0 0 0 0 0 0 0 0 0

1013 13 BulletWorld * 0 8576 13 BulletWorld * 13 BulletWorld * 0 0 1014 0 0 0 0 0 0 0 0 0 0

1014 11 BulletWorld 0 2048 11 BulletWorld 11 BulletWorld 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

1015 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 1016 0 0 0 0 0 0 0 0 0 0

1016 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 870 0 0 0 0 0 0 0 0 0 0

1017 21 BulletRigidBodyNode * 0 8576 21 BulletRigidBodyNode * 21 BulletRigidBodyNode * 0 0 1018 0 0 0 0 0 0 0 0 0 0

1018 19 BulletRigidBodyNode 0 2048 19 BulletRigidBodyNode 19 BulletRigidBodyNode 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

1019 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1020 0 0 0 0 0 0 0 0 0 0

1020 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1021 0 0 0 0 0 0 0 0 0 0

1021 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1022 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 927 0 0 0 0 0 0 0 0 0 0

1023 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 1024 0 0 0 0 0 0 0 0 0 0

1024 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

1025 20 BSPShaderGenerator * 0 8576 20 BSPShaderGenerator * 20 BSPShaderGenerator * 0 0 879 0 0 0 0 0 0 0 0 0 0

1026 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 1027 0 0 0 0 0 0 0 0 0 0

1027 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 1028 0 0 0 0 0 0 0 0 0 0

1028 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 1029 0 0 0 0 0 0 0 0 0 0

1029 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

1030 15 LColorf const * 0 8576 15 LColorf const * 15 LColorf const * 0 0 1031 0 0 0 0 0 0 0 0 0 0

1031 13 LColorf const 0 8832 13 LColorf const 13 LColorf const 0 0 955 0 0 0 0 0 0 0 0 0 0

1032 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

1033 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 1032 0 0 0 0 0 0 0 0 0 0

1034 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 1035 0 0 0 0 0 0 0 0 0 0

1035 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 1036 0 0 0 0 0 0 0 0 0 0

1036 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

1037 9 int const 0 8832 9 int const 9 int const 0 0 850 0 0 0 0 0 0 0 0 0 0

1038 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 1039 0 0 0 0 0 0 0 0 0 0

1039 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 1040 0 0 0 0 0 0 0 0 0 0

1040 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

1041 9 LTexCoord 0 2105344 9 LTexCoord 9 LTexCoord 0 0 1042 0 0 0 0 0 0 0 0 0 0

1042 10 LTexCoordf 0 2105344 10 LTexCoordf 10 LTexCoordf 0 0 1029 0 0 0 0 0 0 0 0 0 0

1043 11 LTexCoord * 0 8576 11 LTexCoord * 11 LTexCoord * 0 0 1041 0 0 0 0 0 0 0 0 0 0

1044 20 ShaderPermutations * 0 8576 20 ShaderPermutations * 20 ShaderPermutations * 0 0 872 0 0 0 0 0 0 0 0 0 0

1045 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 1046 0 0 0 0 0 0 0 0 0 0

1046 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 1047 0 0 0 0 0 0 0 0 0 0

1047 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

1048 26 ShaderPermutations const * 0 8576 26 ShaderPermutations const * 26 ShaderPermutations const * 0 0 1049 0 0 0 0 0 0 0 0 0 0

1049 24 ShaderPermutations const 0 8832 24 ShaderPermutations const 24 ShaderPermutations const 0 0 872 0 0 0 0 0 0 0 0 0 0

1050 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 873 0 0 0 0 0 0 0 0 0 0

1051 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 863 0 0 0 0 0 0 0 0 0 0

1052 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 874 0 0 0 0 0 0 0 0 0 0

1053 25 PlanarReflections const * 0 8576 25 PlanarReflections const * 25 PlanarReflections const * 0 0 1054 0 0 0 0 0 0 0 0 0 0

1054 23 PlanarReflections const 0 8832 23 PlanarReflections const 23 PlanarReflections const 0 0 875 0 0 0 0 0 0 0 0 0 0

1055 19 PlanarReflections * 0 8576 19 PlanarReflections * 19 PlanarReflections * 0 0 875 0 0 0 0 0 0 0 0 0 0

1056 26 BSPShaderGenerator const * 0 8576 26 BSPShaderGenerator const * 26 BSPShaderGenerator const * 0 0 1057 0 0 0 0 0 0 0 0 0 0

1057 24 BSPShaderGenerator const 0 8832 24 BSPShaderGenerator const 24 BSPShaderGenerator const 0 0 879 0 0 0 0 0 0 0 0 0 0

1058 16 GraphicsOutput * 0 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 1059 0 0 0 0 0 0 0 0 0 0

1059 14 GraphicsOutput 0 2048 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 0 0 0 0 0 0 0 0 727
/**
 * This is a base class for the various different classes that represent the
 * result of a frame of rendering.  The most common kind of GraphicsOutput is
 * a GraphicsWindow, which is a real-time window on the desktop, but another
 * example is GraphicsBuffer, which is an offscreen buffer.
 *
 * The actual rendering, and anything associated with the graphics context
 * itself, is managed by the associated GraphicsStateGuardian (which might
 * output to multiple GraphicsOutput objects).
 *
 * GraphicsOutputs are not actually writable to bam files, of course, but they
 * may be passed as event parameters, so they inherit from
 * TypedWritableReferenceCount instead of TypedReferenceCount for that
 * convenience.
 */

1060 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 1061 0 0 0 0 0 0 0 0 0 0

1061 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

1062 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 1063 0 0 0 0 0 0 0 0 0 0

1063 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

1064 5 Fog * 0 8576 5 Fog * 5 Fog * 0 0 1065 0 0 0 0 0 0 0 0 0 0

1065 3 Fog 0 2048 3 Fog 3 Fog 0 0 0 0 0 0 0 0 0 0 0 0 782
/**
 * Specifies how atmospheric fog effects are applied to geometry.  The Fog
 * object is now a PandaNode, which means it can be used similarly to a Light
 * to define effects relative to a particular coordinate system within the
 * scene graph.
 *
 * In exponential mode, the fog effects are always camera-relative, and it
 * does not matter where the Fog node is parented.  However, in linear mode,
 * the onset and opaque distances are defined as offsets along the local
 * forward axis (e.g.  the Y axis).  This allows the fog effect to be
 * localized to a particular region in space, rather than always camera-
 * relative.  If the fog object is not parented to any node, it is used to
 * generate traditonal camera-relative fog, as if it were parented to the
 * camera.
 */

1066 14 PTA_LVecBase4f 0 2105344 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 1067 0 0 0 0 0 0 0 0 0 0

1067 37 PointerToArray< UnalignedLVecBase4f > 0 2048 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 0 0 0 0 0 0 0 0 0 0

1068 16 PTA_LVecBase4f * 0 8576 16 PTA_LVecBase4f * 16 PTA_LVecBase4f * 0 0 1066 0 0 0 0 0 0 0 0 0 0

1069 9 PTA_float 0 2105344 9 PTA_float 9 PTA_float 0 0 1070 0 0 0 0 0 0 0 0 0 0

1070 23 PointerToArray< float > 0 2048 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

1071 11 PTA_float * 0 8576 11 PTA_float * 11 PTA_float * 0 0 1069 0 0 0 0 0 0 0 0 0 0

1072 12 Shader const 0 8832 12 Shader const 12 Shader const 0 0 1073 0 0 0 0 0 0 0 0 0 0

1073 6 Shader 0 2048 6 Shader 6 Shader 0 0 0 0 0 0 0 0 0 0 0 0 8
/**

 */

1074 18 ShaderSpec const * 0 8576 18 ShaderSpec const * 18 ShaderSpec const * 0 0 1075 0 0 0 0 0 0 0 0 0 0

1075 16 ShaderSpec const 0 8832 16 ShaderSpec const 16 ShaderSpec const 0 0 873 0 0 0 0 0 0 0 0 0 0

1076 14 Shader const * 0 8576 14 Shader const * 14 Shader const * 0 0 1072 0 0 0 0 0 0 0 0 0 0

1077 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 1078 0 0 0 0 0 0 0 0 0 0

1078 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 881 0 0 0 0 0 0 0 0 0 0

1079 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 881 0 0 0 0 0 0 0 0 0 0

1080 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 882 0 0 0 0 0 0 0 0 0 0

1081 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 1082 0 0 0 0 0 0 0 0 0 0

1082 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 883 0 0 0 0 0 0 0 0 0 0

1083 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 883 0 0 0 0 0 0 0 0 0 0

1084 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 1085 0 0 0 0 0 0 0 0 0 0

1085 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 884 0 0 0 0 0 0 0 0 0 0

1086 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 884 0 0 0 0 0 0 0 0 0 0

1087 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 1088 0 0 0 0 0 0 0 0 0 0

1088 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 885 0 0 0 0 0 0 0 0 0 0

1089 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 885 0 0 0 0 0 0 0 0 0 0

1090 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 1091 0 0 0 0 0 0 0 0 0 0

1091 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 887 0 0 0 0 0 0 0 0 0 0

1092 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 887 0 0 0 0 0 0 0 0 0 0

1093 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 889 0 0 0 0 0 0 0 0 0 0

1094 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 890 0 0 0 0 0 0 0 0 0 0

1095 18 UnlitGenericSpec * 0 8576 18 UnlitGenericSpec * 18 UnlitGenericSpec * 0 0 891 0 0 0 0 0 0 0 0 0 0

1096 16 UnlitNoMatSpec * 0 8576 16 UnlitNoMatSpec * 16 UnlitNoMatSpec * 0 0 892 0 0 0 0 0 0 0 0 0 0

1097 15 CSMRenderSpec * 0 8576 15 CSMRenderSpec * 15 CSMRenderSpec * 0 0 893 0 0 0 0 0 0 0 0 0 0

1098 12 SkyBoxSpec * 0 8576 12 SkyBoxSpec * 12 SkyBoxSpec * 0 0 894 0 0 0 0 0 0 0 0 0 0

1099 18 RenderEffect const 0 8832 18 RenderEffect const 18 RenderEffect const 0 0 896 0 0 0 0 0 0 0 0 0 0

1100 20 RenderEffect const * 0 8576 20 RenderEffect const * 20 RenderEffect const * 0 0 1099 0 0 0 0 0 0 0 0 0 0

1101 22 Audio3DManager const * 0 8576 22 Audio3DManager const * 22 Audio3DManager const * 0 0 1102 0 0 0 0 0 0 0 0 0 0

1102 20 Audio3DManager const 0 8832 20 Audio3DManager const 20 Audio3DManager const 0 0 897 0 0 0 0 0 0 0 0 0 0

1103 16 Audio3DManager * 0 8576 16 Audio3DManager * 16 Audio3DManager * 0 0 897 0 0 0 0 0 0 0 0 0 0

1104 14 AudioManager * 0 8576 14 AudioManager * 14 AudioManager * 0 0 1105 0 0 0 0 0 0 0 0 0 0

1105 12 AudioManager 0 2048 12 AudioManager 12 AudioManager 0 0 0 0 0 0 0 0 0 0 0 0 0

1106 12 AudioSound * 0 8576 12 AudioSound * 12 AudioSound * 0 0 1107 0 0 0 0 0 0 0 0 0 0

1107 10 AudioSound 0 2048 10 AudioSound 10 AudioSound 0 0 0 0 0 0 0 0 0 0 0 0 0

1108 8 CIOLib * 0 8576 8 CIOLib * 8 CIOLib * 0 0 898 0 0 0 0 0 0 0 0 0 0

1109 14 CIOLib const * 0 8576 14 CIOLib const * 14 CIOLib const * 0 0 1110 0 0 0 0 0 0 0 0 0 0

1110 12 CIOLib const 0 8832 12 CIOLib const 12 CIOLib const 0 0 898 0 0 0 0 0 0 0 0 0 0

1111 19 DecalModulateSpec * 0 8576 19 DecalModulateSpec * 19 DecalModulateSpec * 0 0 899 0 0 0 0 0 0 0 0 0 0

1112 16 GeomNode const * 0 8576 16 GeomNode const * 16 GeomNode const * 0 0 1113 0 0 0 0 0 0 0 0 0 0

1113 14 GeomNode const 0 8832 14 GeomNode const 14 GeomNode const 0 0 901 0 0 0 0 0 0 0 0 0 0

1114 10 GlowNode * 0 8576 10 GlowNode * 10 GlowNode * 0 0 900 0 0 0 0 0 0 0 0 0 0

1115 16 GlowNode const * 0 8576 16 GlowNode const * 16 GlowNode const * 0 0 1116 0 0 0 0 0 0 0 0 0 0

1116 14 GlowNode const 0 8832 14 GlowNode const 14 GlowNode const 0 0 900 0 0 0 0 0 0 0 0 0 0

1117 19 PostProcessEffect * 0 8576 19 PostProcessEffect * 19 PostProcessEffect * 0 0 902 0 0 0 0 0 0 0 0 0 0

1118 17 PostProcessPass * 0 8576 17 PostProcessPass * 17 PostProcessPass * 0 0 904 0 0 0 0 0 0 0 0 0 0

1119 13 PostProcess * 0 8576 13 PostProcess * 13 PostProcess * 0 0 906 0 0 0 0 0 0 0 0 0 0

1120 29 FrameBufferProperties const * 0 8576 29 FrameBufferProperties const * 29 FrameBufferProperties const * 0 0 1121 0 0 0 0 0 0 0 0 0 0

1121 27 FrameBufferProperties const 0 8832 27 FrameBufferProperties const 27 FrameBufferProperties const 0 0 1122 0 0 0 0 0 0 0 0 0 0

1122 21 FrameBufferProperties 0 2048 21 FrameBufferProperties 21 FrameBufferProperties 0 0 0 0 0 0 0 0 0 0 0 0 132
/**
 * A container for the various kinds of properties we might ask to have on a
 * graphics frameBuffer before we create a GSG.
 */

1123 17 LVector2i const * 0 8576 17 LVector2i const * 17 LVector2i const * 0 0 1124 0 0 0 0 0 0 0 0 0 0

1124 15 LVector2i const 0 8832 15 LVector2i const 15 LVector2i const 0 0 1125 0 0 0 0 0 0 0 0 0 0

1125 9 LVector2i 0 2048 9 LVector2i 9 LVector2i 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

1126 23 PostProcessPass const * 0 8576 23 PostProcessPass const * 23 PostProcessPass const * 0 0 1127 0 0 0 0 0 0 0 0 0 0

1127 21 PostProcessPass const 0 8832 21 PostProcessPass const 21 PostProcessPass const 0 0 904 0 0 0 0 0 0 0 0 0 0

1128 11 LVector2i * 0 8576 11 LVector2i * 11 LVector2i * 0 0 1125 0 0 0 0 0 0 0 0 0 0

1129 23 FrameBufferProperties * 0 8576 23 FrameBufferProperties * 23 FrameBufferProperties * 0 0 1122 0 0 0 0 0 0 0 0 0 0

1130 22 PostProcessScenePass * 0 8576 22 PostProcessScenePass * 22 PostProcessScenePass * 0 0 905 0 0 0 0 0 0 0 0 0 0

1131 28 PostProcessScenePass const * 0 8576 28 PostProcessScenePass const * 28 PostProcessScenePass const * 0 0 1132 0 0 0 0 0 0 0 0 0 0

1132 26 PostProcessScenePass const 0 8832 26 PostProcessScenePass const 26 PostProcessScenePass const 0 0 905 0 0 0 0 0 0 0 0 0 0

1133 19 RenderState const * 0 8576 19 RenderState const * 19 RenderState const * 0 0 1134 0 0 0 0 0 0 0 0 0 0

1134 17 RenderState const 0 8832 17 RenderState const 17 RenderState const 0 0 1135 0 0 0 0 0 0 0 0 0 0

1135 11 RenderState 0 2048 11 RenderState 11 RenderState 0 0 0 0 0 0 0 0 0 0 0 0 340
/**
 * This represents a unique collection of RenderAttrib objects that correspond
 * to a particular renderable state.
 *
 * You should not attempt to create or modify a RenderState object directly.
 * Instead, call one of the make() functions to create one for you.  And
 * instead of modifying a RenderState object, create a new one.
 */

1136 19 PostProcess const * 0 8576 19 PostProcess const * 19 PostProcess const * 0 0 1137 0 0 0 0 0 0 0 0 0 0

1137 17 PostProcess const 0 8832 17 PostProcess const 17 PostProcess const 0 0 906 0 0 0 0 0 0 0 0 0 0

1138 13 DisplayRegion 0 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 399
/**
 * A rectangular subregion within a window for rendering into.  Typically,
 * there is one DisplayRegion that covers the whole window, but you may also
 * create smaller DisplayRegions for having different regions within the
 * window that represent different scenes.  You may also stack up
 * DisplayRegions like panes of glass, usually for layering 2-d interfaces on
 * top of a 3-d scene.
 */

1139 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 1138 0 0 0 0 0 0 0 0 0 0

1140 16 DrawableRegion * 0 8576 16 DrawableRegion * 16 DrawableRegion * 0 0 1141 0 0 0 0 0 0 0 0 0 0

1141 14 DrawableRegion 0 2048 14 DrawableRegion 14 DrawableRegion 0 0 0 0 0 0 0 0 0 0 0 0 389
/**
 * This is a base class for GraphicsWindow (actually, GraphicsOutput) and
 * DisplayRegion, both of which are conceptually rectangular regions into
 * which drawing commands may be issued.  Sometimes you want to deal with a
 * single display region, and sometimes you want to deal with the whole window
 * at once, particularly for issuing clear commands and capturing screenshots.
 */

1142 15 HDRPass const * 0 8576 15 HDRPass const * 15 HDRPass const * 0 0 1143 0 0 0 0 0 0 0 0 0 0

1143 13 HDRPass const 0 8832 13 HDRPass const 13 HDRPass const 0 0 907 0 0 0 0 0 0 0 0 0 0

1144 9 HDRPass * 0 8576 9 HDRPass * 9 HDRPass * 0 0 907 0 0 0 0 0 0 0 0 0 0

1145 11 HDREffect * 0 8576 11 HDREffect * 11 HDREffect * 0 0 908 0 0 0 0 0 0 0 0 0 0

1146 17 HDREffect const * 0 8576 17 HDREffect const * 17 HDREffect const * 0 0 1147 0 0 0 0 0 0 0 0 0 0

1147 15 HDREffect const 0 8832 15 HDREffect const 15 HDREffect const 0 0 908 0 0 0 0 0 0 0 0 0 0

1148 13 BloomEffect * 0 8576 13 BloomEffect * 13 BloomEffect * 0 0 909 0 0 0 0 0 0 0 0 0 0

1149 28 LightingOriginEffect const * 0 8576 28 LightingOriginEffect const * 28 LightingOriginEffect const * 0 0 1150 0 0 0 0 0 0 0 0 0 0

1150 26 LightingOriginEffect const 0 8832 26 LightingOriginEffect const 26 LightingOriginEffect const 0 0 910 0 0 0 0 0 0 0 0 0 0

1151 13 FXAA_Effect * 0 8576 13 FXAA_Effect * 13 FXAA_Effect * 0 0 911 0 0 0 0 0 0 0 0 0 0

1152 19 BloomAttrib const * 0 8576 19 BloomAttrib const * 19 BloomAttrib const * 0 0 1153 0 0 0 0 0 0 0 0 0 0

1153 17 BloomAttrib const 0 8832 17 BloomAttrib const 17 BloomAttrib const 0 0 912 0 0 0 0 0 0 0 0 0 0

1154 28 PhysicsCharacterController * 0 8576 28 PhysicsCharacterController * 28 PhysicsCharacterController * 0 0 914 0 0 0 0 0 0 0 0 0 0

1155 34 PhysicsCharacterController const * 0 8576 34 PhysicsCharacterController const * 34 PhysicsCharacterController const * 0 0 1156 0 0 0 0 0 0 0 0 0 0

1156 32 PhysicsCharacterController const 0 8832 32 PhysicsCharacterController const 32 PhysicsCharacterController const 0 0 914 0 0 0 0 0 0 0 0 0 0

0
3
1157 10 class_slot 0 2 850 451 0 0 0 0 0 0 0 29 BSPMaterialAttrib::class_slot 0

1158 10 class_slot 0 2 850 546 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

1159 10 class_slot 0 2 850 811 0 0 0 0 0 0 0 23 BloomAttrib::class_slot 0

0
