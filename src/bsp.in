1575695172
3 3
3 bsp 4 t5GT 3 bsp 
401
376 3 get 0 4 777 18 TextureStages::get 0 2 3 4 0
159
static TextureStage *TextureStages::get(std::string const &name);
static TextureStage *TextureStages::get(std::string const &name, std::string const &uv_name);

377 15 get_basetexture 0 4 777 30 TextureStages::get_basetexture 0 1 5 0
58
static TextureStage *TextureStages::get_basetexture(void);

378 12 get_lightmap 0 4 777 27 TextureStages::get_lightmap 0 1 6 0
55
static TextureStage *TextureStages::get_lightmap(void);

379 19 get_bumped_lightmap 0 4 777 34 TextureStages::get_bumped_lightmap 0 1 7 0
62
static TextureStage *TextureStages::get_bumped_lightmap(void);

380 13 get_spheremap 0 4 777 28 TextureStages::get_spheremap 0 1 8 0
56
static TextureStage *TextureStages::get_spheremap(void);

381 11 get_cubemap 0 4 777 26 TextureStages::get_cubemap 0 1 9 0
54
static TextureStage *TextureStages::get_cubemap(void);

382 13 get_normalmap 0 4 777 28 TextureStages::get_normalmap 0 1 10 0
56
static TextureStage *TextureStages::get_normalmap(void);

383 13 get_heightmap 0 4 777 28 TextureStages::get_heightmap 0 1 11 0
56
static TextureStage *TextureStages::get_heightmap(void);

384 12 get_glossmap 0 4 777 27 TextureStages::get_glossmap 0 1 12 0
55
static TextureStage *TextureStages::get_glossmap(void);

385 11 get_glowmap 0 4 777 26 TextureStages::get_glowmap 0 1 13 0
54
static TextureStage *TextureStages::get_glowmap(void);

386 13 TextureStages 0 4 777 28 TextureStages::TextureStages 0 2 1 2 0
122
inline TextureStages::TextureStages(void) = default;
inline TextureStages::TextureStages(TextureStages const &) = default;

387 14 ~TextureStages 0 4 777 29 TextureStages::~TextureStages 0 0 0
36
TextureStages::~TextureStages(void);

388 11 BSPMaterial 0 4 778 24 BSPMaterial::BSPMaterial 0 2 14 15 0
139
inline explicit BSPMaterial::BSPMaterial(std::string const &name = "UnlitNoMat");
inline BSPMaterial::BSPMaterial(BSPMaterial const &copy);

389 10 operator = 0 4 778 23 BSPMaterial::operator = 0 1 16 0
61
inline void BSPMaterial::operator =(BSPMaterial const &copy);

390 12 set_keyvalue 0 4 778 25 BSPMaterial::set_keyvalue 0 1 17 0
88
inline void BSPMaterial::set_keyvalue(std::string const &key, std::string const &value);

391 12 get_keyvalue 0 4 778 25 BSPMaterial::get_keyvalue 0 1 18 0
75
inline std::string BSPMaterial::get_keyvalue(std::string const &key) const;

392 17 get_num_keyvalues 0 4 778 30 BSPMaterial::get_num_keyvalues 0 1 19 0
62
inline std::size_t BSPMaterial::get_num_keyvalues(void) const;

393 7 get_key 0 4 778 20 BSPMaterial::get_key 0 1 20 0
68
inline std::string const &BSPMaterial::get_key(std::size_t i) const;

394 9 get_value 0 4 778 22 BSPMaterial::get_value 0 1 21 0
70
inline std::string const &BSPMaterial::get_value(std::size_t i) const;

395 16 get_keyvalue_int 0 4 778 29 BSPMaterial::get_keyvalue_int 0 1 22 0
71
inline int BSPMaterial::get_keyvalue_int(std::string const &key) const;

396 18 get_keyvalue_float 0 4 778 31 BSPMaterial::get_keyvalue_float 0 1 23 0
75
inline float BSPMaterial::get_keyvalue_float(std::string const &key) const;

397 10 set_shader 0 4 778 23 BSPMaterial::set_shader 0 1 24 0
68
inline void BSPMaterial::set_shader(std::string const &shader_name);

398 10 get_shader 0 4 778 23 BSPMaterial::get_shader 0 1 25 0
55
inline std::string BSPMaterial::get_shader(void) const;

399 8 get_file 0 4 778 21 BSPMaterial::get_file 0 1 26 0
50
inline Filename BSPMaterial::get_file(void) const;

400 12 has_keyvalue 0 4 778 25 BSPMaterial::has_keyvalue 0 1 27 0
68
inline bool BSPMaterial::has_keyvalue(std::string const &key) const;

401 15 has_env_cubemap 0 4 778 28 BSPMaterial::has_env_cubemap 0 1 28 0
53
inline bool BSPMaterial::has_env_cubemap(void) const;

402 16 has_transparency 0 4 778 29 BSPMaterial::has_transparency 0 1 29 0
54
inline bool BSPMaterial::has_transparency(void) const;

403 16 get_surface_prop 0 4 778 29 BSPMaterial::get_surface_prop 0 1 30 0
61
inline std::string BSPMaterial::get_surface_prop(void) const;

404 12 get_contents 0 4 778 25 BSPMaterial::get_contents 0 1 31 0
57
inline std::string BSPMaterial::get_contents(void) const;

405 14 is_lightmapped 0 4 778 27 BSPMaterial::is_lightmapped 0 1 32 0
52
inline bool BSPMaterial::is_lightmapped(void) const;

406 11 has_bumpmap 0 4 778 24 BSPMaterial::has_bumpmap 0 1 33 0
49
inline bool BSPMaterial::has_bumpmap(void) const;

407 13 get_from_file 0 4 778 26 BSPMaterial::get_from_file 0 1 34 0
75
static BSPMaterial const *BSPMaterial::get_from_file(Filename const &file);

408 14 get_class_type 0 4 778 27 BSPMaterial::get_class_type 0 1 35 0
52
static TypeHandle BSPMaterial::get_class_type(void);

409 12 ~BSPMaterial 0 4 778 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

410 4 make 0 4 780 23 BSPMaterialAttrib::make 0 1 36 0
86
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make(BSPMaterial const *mat);

411 20 make_override_shader 0 4 780 39 BSPMaterialAttrib::make_override_shader 0 1 37 0
102
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_override_shader(BSPMaterial const *mat);

412 12 make_default 0 4 780 31 BSPMaterialAttrib::make_default 0 1 38 0
76
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_default(void);

413 19 get_override_shader 0 4 780 38 BSPMaterialAttrib::get_override_shader 0 1 39 0
70
inline std::string BSPMaterialAttrib::get_override_shader(void) const;

414 19 has_override_shader 0 4 780 38 BSPMaterialAttrib::has_override_shader 0 1 40 0
63
inline bool BSPMaterialAttrib::has_override_shader(void) const;

415 12 get_material 0 4 780 31 BSPMaterialAttrib::get_material 0 1 41 0
70
inline BSPMaterial const *BSPMaterialAttrib::get_material(void) const;

416 14 get_class_slot 0 4 780 33 BSPMaterialAttrib::get_class_slot 0 1 42 0
51
static int BSPMaterialAttrib::get_class_slot(void);

417 14 get_class_type 0 4 780 33 BSPMaterialAttrib::get_class_type 0 1 43 0
58
static TypeHandle BSPMaterialAttrib::get_class_type(void);

418 18 ~BSPMaterialAttrib 0 4 780 37 BSPMaterialAttrib::~BSPMaterialAttrib 0 0 0
44
BSPMaterialAttrib::~BSPMaterialAttrib(void);

419 14 get_num_points 0 4 783 28 BoundingKDOP::get_num_points 0 1 44 0
60
inline std::size_t BoundingKDOP::get_num_points(void) const;

420 9 get_point 0 4 783 23 BoundingKDOP::get_point 0 1 45 0
52
inline LPoint3 BoundingKDOP::get_point(int n) const;

421 14 get_num_planes 0 4 783 28 BoundingKDOP::get_num_planes 0 1 46 0
60
inline std::size_t BoundingKDOP::get_num_planes(void) const;

422 9 get_plane 0 4 783 23 BoundingKDOP::get_plane 0 1 47 0
51
inline LPlane BoundingKDOP::get_plane(int n) const;

423 14 get_class_type 0 4 783 28 BoundingKDOP::get_class_type 0 1 48 0
53
static TypeHandle BoundingKDOP::get_class_type(void);

424 13 ~BoundingKDOP 0 4 783 27 BoundingKDOP::~BoundingKDOP 0 0 0
34
BoundingKDOP::~BoundingKDOP(void);

425 14 get_class_type 0 4 785 27 CBaseEntity::get_class_type 0 1 51 0
52
static TypeHandle CBaseEntity::get_class_type(void);

426 11 CBaseEntity 0 4 785 24 CBaseEntity::CBaseEntity 0 2 49 50 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

427 10 get_loader 0 4 785 23 CBaseEntity::get_loader 0 1 52 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

428 16 get_entity_value 0 4 785 29 CBaseEntity::get_entity_value 0 1 53 0
79
inline std::string CBaseEntity::get_entity_value(std::string const &key) const;

429 23 get_entity_value_vector 0 4 785 36 CBaseEntity::get_entity_value_vector 0 1 54 0
76
LVector3 CBaseEntity::get_entity_value_vector(std::string const &key) const;

430 22 get_entity_value_color 0 4 785 35 CBaseEntity::get_entity_value_color 0 1 55 0
92
LColor CBaseEntity::get_entity_value_color(std::string const &key, bool scale = true) const;

431 13 get_classname 0 4 785 26 CBaseEntity::get_classname 0 1 56 0
58
inline std::string CBaseEntity::get_classname(void) const;

432 14 get_targetname 0 4 785 27 CBaseEntity::get_targetname 0 1 57 0
59
inline std::string CBaseEntity::get_targetname(void) const;

433 14 get_bsp_entnum 0 4 785 27 CBaseEntity::get_bsp_entnum 0 1 58 0
51
inline int CBaseEntity::get_bsp_entnum(void) const;

434 12 ~CBaseEntity 0 4 785 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

435 14 get_class_type 0 4 786 28 CPointEntity::get_class_type 0 1 61 0
53
static TypeHandle CPointEntity::get_class_type(void);

436 12 CPointEntity 0 4 786 26 CPointEntity::CPointEntity 0 2 59 60 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

437 10 get_origin 0 4 786 24 CPointEntity::get_origin 0 1 62 0
45
LPoint3 CPointEntity::get_origin(void) const;

438 10 get_angles 0 4 786 24 CPointEntity::get_angles 0 1 63 0
46
LVector3 CPointEntity::get_angles(void) const;

439 13 ~CPointEntity 0 4 786 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

440 14 get_class_type 0 4 787 29 CBoundsEntity::get_class_type 0 1 66 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

441 13 CBoundsEntity 0 4 787 28 CBoundsEntity::CBoundsEntity 0 2 64 65 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

442 10 get_bounds 0 4 787 25 CBoundsEntity::get_bounds 0 1 67 0
52
BoundingKDOP *CBoundsEntity::get_bounds(void) const;

443 9 is_inside 0 4 787 24 CBoundsEntity::is_inside 0 1 68 0
56
bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

444 13 fillin_bounds 0 4 787 28 CBoundsEntity::fillin_bounds 0 1 69 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

445 14 ~CBoundsEntity 0 4 787 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

446 14 get_class_type 0 4 788 28 CBrushEntity::get_class_type 0 1 72 0
53
static TypeHandle CBrushEntity::get_class_type(void);

447 12 CBrushEntity 0 4 788 26 CBrushEntity::CBrushEntity 0 2 70 71 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

448 12 get_model_np 0 4 788 26 CBrushEntity::get_model_np 0 1 73 0
48
NodePath CBrushEntity::get_model_np(void) const;

449 16 get_model_bounds 0 4 788 30 CBrushEntity::get_model_bounds 0 1 74 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

450 13 ~CBrushEntity 0 4 788 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

451 9 get_width 0 4 789 21 PackResult::get_width 0 1 76 0
45
inline int PackResult::get_width(void) const;

452 10 get_height 0 4 789 22 PackResult::get_height 0 1 77 0
46
inline int PackResult::get_height(void) const;

453 15 get_unused_area 0 4 789 27 PackResult::get_unused_area 0 1 78 0
51
inline int PackResult::get_unused_area(void) const;

454 10 PackResult 0 4 789 22 PackResult::PackResult 0 1 75 0
60
inline PackResult::PackResult(PackResult const &) = default;

455 11 ~PackResult 0 4 789 23 PackResult::~PackResult 0 0 0
30
PackResult::~PackResult(void);

456 5 get_x 0 4 790 22 TextureLocation::get_x 0 1 80 0
46
inline int TextureLocation::get_x(void) const;

457 5 get_y 0 4 790 22 TextureLocation::get_y 0 1 81 0
46
inline int TextureLocation::get_y(void) const;

458 9 get_width 0 4 790 26 TextureLocation::get_width 0 1 82 0
50
inline int TextureLocation::get_width(void) const;

459 10 get_height 0 4 790 27 TextureLocation::get_height 0 1 83 0
51
inline int TextureLocation::get_height(void) const;

460 11 get_rotated 0 4 790 28 TextureLocation::get_rotated 0 1 84 0
53
inline bool TextureLocation::get_rotated(void) const;

461 15 TextureLocation 0 4 790 32 TextureLocation::TextureLocation 0 1 79 0
75
inline TextureLocation::TextureLocation(TextureLocation const &) = default;

462 16 ~TextureLocation 0 4 790 33 TextureLocation::~TextureLocation 0 0 0
40
TextureLocation::~TextureLocation(void);

463 15 getTextureCount 0 6 791 30 TexturePacker::getTextureCount 0 1 85 0
53
virtual int TexturePacker::getTextureCount(void) = 0;

464 15 setTextureCount 0 6 791 30 TexturePacker::setTextureCount 0 1 86 35
// number of textures to consider..
60
virtual void TexturePacker::setTextureCount(int tcount) = 0;

465 10 addTexture 0 6 791 25 TexturePacker::addTexture 0 1 87 21
// add textures 0 - n
61
virtual void TexturePacker::addTexture(int wid, int hit) = 0;

466 15 wouldTextureFit 0 6 791 30 TexturePacker::wouldTextureFit 0 1 88 0
135
virtual bool TexturePacker::wouldTextureFit(int wid, int hit, bool forcePowerOfTwo, bool onePixelBorder, int max_wid, int max_hit) = 0;

467 13 addNewTexture 0 6 791 28 TexturePacker::addNewTexture 0 1 89 0
64
virtual void TexturePacker::addNewTexture(int wid, int hit) = 0;

468 12 packTextures 0 6 791 27 TexturePacker::packTextures 0 1 90 74
// pack the textures, the return code is the amount of wasted/unused area.
94
virtual PackResult TexturePacker::packTextures(bool forcePowerOfTwo, bool onePixelBorder) = 0;

469 18 getTextureLocation 0 6 791 33 TexturePacker::getTextureLocation 0 1 91 58
// returns true if the texture has been rotated 90 degrees
73
virtual TextureLocation TexturePacker::getTextureLocation(int index) = 0;

470 19 createTexturePacker 0 4 791 34 TexturePacker::createTexturePacker 0 1 92 0
63
static TexturePacker *TexturePacker::createTexturePacker(void);

471 20 releaseTexturePacker 0 4 791 35 TexturePacker::releaseTexturePacker 0 1 93 0
67
static void TexturePacker::releaseTexturePacker(TexturePacker *tp);

472 14 ~TexturePacker 0 4 791 29 TexturePacker::~TexturePacker 0 0 0
36
TexturePacker::~TexturePacker(void);

473 10 initialize 0 4 792 20 RayTrace::initialize 0 1 96 0
39
static void RayTrace::initialize(void);

474 8 destruct 0 4 792 18 RayTrace::destruct 0 1 97 0
37
static void RayTrace::destruct(void);

475 8 RayTrace 0 4 792 18 RayTrace::RayTrace 0 2 94 95 0
97
inline RayTrace::RayTrace(void) = default;
inline RayTrace::RayTrace(RayTrace const &) = default;

476 9 ~RayTrace 0 4 792 19 RayTrace::~RayTrace 0 0 0
26
RayTrace::~RayTrace(void);

477 17 RayTraceHitResult 0 4 793 36 RayTraceHitResult::RayTraceHitResult 0 2 98 99 0
132
inline RayTraceHitResult::RayTraceHitResult(void);
inline RayTraceHitResult::RayTraceHitResult(RayTraceHitResult const &) = default;

478 7 has_hit 0 4 793 26 RayTraceHitResult::has_hit 0 1 100 0
51
inline bool RayTraceHitResult::has_hit(void) const;

479 14 get_hit_normal 0 4 793 33 RayTraceHitResult::get_hit_normal 0 1 101 0
62
inline LVector3 RayTraceHitResult::get_hit_normal(void) const;

480 6 get_uv 0 4 793 25 RayTraceHitResult::get_uv 0 1 102 0
54
inline LVector2 RayTraceHitResult::get_uv(void) const;

481 11 get_prim_id 0 4 793 30 RayTraceHitResult::get_prim_id 0 1 103 0
63
inline unsigned int RayTraceHitResult::get_prim_id(void) const;

482 11 get_geom_id 0 4 793 30 RayTraceHitResult::get_geom_id 0 1 104 0
63
inline unsigned int RayTraceHitResult::get_geom_id(void) const;

483 16 get_hit_fraction 0 4 793 35 RayTraceHitResult::get_hit_fraction 0 1 105 0
61
inline float RayTraceHitResult::get_hit_fraction(void) const;

484 18 ~RayTraceHitResult 0 4 793 37 RayTraceHitResult::~RayTraceHitResult 0 0 0
44
RayTraceHitResult::~RayTraceHitResult(void);

485 13 RayTraceScene 0 4 794 28 RayTraceScene::RayTraceScene 0 2 106 107 0
105
RayTraceScene::RayTraceScene(void);
inline RayTraceScene::RayTraceScene(RayTraceScene const &) = default;

486 12 add_geometry 0 4 794 27 RayTraceScene::add_geometry 0 1 108 0
57
void RayTraceScene::add_geometry(RayTraceGeometry *geom);

487 15 remove_geometry 0 4 794 30 RayTraceScene::remove_geometry 0 1 109 0
60
void RayTraceScene::remove_geometry(RayTraceGeometry *geom);

488 10 remove_all 0 4 794 25 RayTraceScene::remove_all 0 1 110 0
37
void RayTraceScene::remove_all(void);

489 10 trace_line 0 4 794 25 RayTraceScene::trace_line 0 1 111 0
116
inline RayTraceHitResult RayTraceScene::trace_line(LPoint3 const &start, LPoint3 const &end, BitMask32 const &mask);

490 9 trace_ray 0 4 794 24 RayTraceScene::trace_ray 0 1 112 0
132
RayTraceHitResult RayTraceScene::trace_ray(LPoint3 const &origin, LVector3 const &direction, float distance, BitMask32 const &mask);

491 17 set_build_quality 0 4 794 32 RayTraceScene::set_build_quality 0 1 113 0
51
void RayTraceScene::set_build_quality(int quality);

492 6 update 0 4 794 21 RayTraceScene::update 0 1 114 0
33
void RayTraceScene::update(void);

493 12 get_geometry 0 4 794 27 RayTraceScene::get_geometry 0 1 115 0
75
inline RayTraceGeometry *RayTraceScene::get_geometry(unsigned int geom_id);

494 14 get_class_type 0 4 797 32 RayTraceGeometry::get_class_type 0 1 116 0
57
static TypeHandle RayTraceGeometry::get_class_type(void);

495 8 set_mask 0 4 797 26 RayTraceGeometry::set_mask 0 2 117 118 0
114
inline void RayTraceGeometry::set_mask(BitMask32 const &mask);
void RayTraceGeometry::set_mask(unsigned int mask);

496 8 get_mask 0 4 797 26 RayTraceGeometry::get_mask 0 1 119 0
56
inline BitMask32 RayTraceGeometry::get_mask(void) const;

497 11 get_geom_id 0 4 797 29 RayTraceGeometry::get_geom_id 0 1 120 0
62
inline unsigned int RayTraceGeometry::get_geom_id(void) const;

498 17 set_build_quality 0 4 797 35 RayTraceGeometry::set_build_quality 0 1 121 0
54
void RayTraceGeometry::set_build_quality(int quality);

499 5 build 0 6 797 23 RayTraceGeometry::build 0 1 122 0
47
virtual void RayTraceGeometry::build(void) = 0;

500 14 get_class_type 0 4 799 36 RayTraceTriangleMesh::get_class_type 0 1 124 0
61
static TypeHandle RayTraceTriangleMesh::get_class_type(void);

501 20 RayTraceTriangleMesh 0 4 799 42 RayTraceTriangleMesh::RayTraceTriangleMesh 0 1 123 0
73
RayTraceTriangleMesh::RayTraceTriangleMesh(std::string const &name = "");

502 12 add_triangle 0 4 799 34 RayTraceTriangleMesh::add_triangle 0 1 125 0
97
void RayTraceTriangleMesh::add_triangle(LPoint3 const &p1, LPoint3 const &p2, LPoint3 const &p3);

503 23 add_triangles_from_geom 0 4 799 45 RayTraceTriangleMesh::add_triangles_from_geom 0 1 126 0
105
void RayTraceTriangleMesh::add_triangles_from_geom(Geom const *geom, TransformState const *ts = nullptr);

504 21 ~RayTraceTriangleMesh 0 4 799 43 RayTraceTriangleMesh::~RayTraceTriangleMesh 0 0 0
50
RayTraceTriangleMesh::~RayTraceTriangleMesh(void);

505 4 make 0 4 800 19 BSPFaceAttrib::make 0 1 127 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

506 12 make_default 0 4 800 27 BSPFaceAttrib::make_default 0 1 128 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

507 15 make_ignore_pvs 0 4 800 30 BSPFaceAttrib::make_ignore_pvs 0 1 129 0
75
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_ignore_pvs(void);

508 12 get_material 0 4 800 27 BSPFaceAttrib::get_material 0 1 130 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

509 13 get_face_type 0 4 800 28 BSPFaceAttrib::get_face_type 0 1 131 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

510 14 get_ignore_pvs 0 4 800 29 BSPFaceAttrib::get_ignore_pvs 0 1 132 0
54
inline bool BSPFaceAttrib::get_ignore_pvs(void) const;

511 14 get_class_slot 0 4 800 29 BSPFaceAttrib::get_class_slot 0 1 133 0
47
static int BSPFaceAttrib::get_class_slot(void);

512 14 get_class_type 0 4 800 29 BSPFaceAttrib::get_class_type 0 1 134 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

513 14 ~BSPFaceAttrib 0 4 800 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

514 9 BSPLoader 0 4 802 20 BSPLoader::BSPLoader 0 1 135 0
27
BSPLoader::BSPLoader(void);

515 14 remove_physics 0 4 802 25 BSPLoader::remove_physics 0 1 136 0
53
void BSPLoader::remove_physics(NodePath const &root);

516 17 set_physics_world 0 4 802 28 BSPLoader::set_physics_world 0 1 137 0
54
void BSPLoader::set_physics_world(BulletWorld *world);

517 17 get_physics_world 0 4 802 28 BSPLoader::get_physics_world 0 1 138 0
61
inline BulletWorld *BSPLoader::get_physics_world(void) const;

518 24 has_brush_collision_node 0 4 802 35 BSPLoader::has_brush_collision_node 0 1 139 0
83
inline bool BSPLoader::has_brush_collision_node(BulletRigidBodyNode *rbnode) const;

519 28 has_brush_collision_triangle 0 4 802 39 BSPLoader::has_brush_collision_triangle 0 1 140 0
99
inline bool BSPLoader::has_brush_collision_triangle(BulletRigidBodyNode *rbnode, int triangle_idx);

520 27 get_brush_triangle_material 0 4 802 38 BSPLoader::get_brush_triangle_material 0 1 141 0
105
inline std::string BSPLoader::get_brush_triangle_material(BulletRigidBodyNode *rbnode, int triangle_idx);

521 24 get_brush_triangle_model 0 4 802 35 BSPLoader::get_brush_triangle_model 0 1 142 0
94
inline int BSPLoader::get_brush_triangle_model(BulletRigidBodyNode *rbnode, int triangle_idx);

522 29 get_brush_triangle_model_fast 0 4 802 40 BSPLoader::get_brush_triangle_model_fast 0 1 143 0
92
int BSPLoader::get_brush_triangle_model_fast(BulletRigidBodyNode *rbnode, int triangle_idx);

523 16 get_model_origin 0 4 802 27 BSPLoader::get_model_origin 0 1 144 0
57
inline LPoint3 BSPLoader::get_model_origin(int modelnum);

524 18 add_dynamic_entity 0 4 802 29 BSPLoader::add_dynamic_entity 0 1 145 0
52
void BSPLoader::add_dynamic_entity(PyObject *pyent);

525 21 remove_dynamic_entity 0 4 802 32 BSPLoader::remove_dynamic_entity 0 1 146 0
55
void BSPLoader::remove_dynamic_entity(PyObject *pyent);

526 21 mark_entity_preserved 0 4 802 32 BSPLoader::mark_entity_preserved 0 1 147 0
68
void BSPLoader::mark_entity_preserved(int n, bool preserved = true);

527 16 get_num_entities 0 4 802 27 BSPLoader::get_num_entities 0 1 148 0
51
inline int BSPLoader::get_num_entities(void) const;

528 10 get_entity 0 4 802 21 BSPLoader::get_entity 0 1 149 0
45
PyObject *BSPLoader::get_entity(int n) const;

529 23 set_transition_landmark 0 4 802 34 BSPLoader::set_transition_landmark 0 1 150 0
120
inline void BSPLoader::set_transition_landmark(std::string const &name, LVector3 const &origin, LVector3 const &angles);

530 25 clear_transition_landmark 0 4 802 36 BSPLoader::clear_transition_landmark 0 1 151 0
55
inline void BSPLoader::clear_transition_landmark(void);

531 4 read 0 4 802 15 BSPLoader::read 0 1 152 0
71
bool BSPLoader::read(Filename const &file, bool is_transition = false);

532 16 do_optimizations 0 4 802 27 BSPLoader::do_optimizations 0 1 153 0
39
void BSPLoader::do_optimizations(void);

533 14 spawn_entities 0 4 802 25 BSPLoader::spawn_entities 0 1 154 0
37
void BSPLoader::spawn_entities(void);

534 9 set_gamma 0 4 802 20 BSPLoader::set_gamma 0 1 155 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

535 9 get_gamma 0 4 802 20 BSPLoader::get_gamma 0 1 156 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

536 7 set_win 0 4 802 18 BSPLoader::set_win 0 1 157 0
45
void BSPLoader::set_win(GraphicsWindow *win);

537 10 set_camera 0 4 802 21 BSPLoader::set_camera 0 1 158 0
51
void BSPLoader::set_camera(NodePath const &camera);

538 10 set_render 0 4 802 21 BSPLoader::set_render 0 1 159 0
51
void BSPLoader::set_render(NodePath const &render);

539 20 set_shader_generator 0 4 802 31 BSPLoader::set_shader_generator 0 1 160 0
64
void BSPLoader::set_shader_generator(BSPShaderGenerator *shgen);

540 19 set_want_visibility 0 4 802 30 BSPLoader::set_want_visibility 0 1 161 0
47
void BSPLoader::set_want_visibility(bool flag);

541 18 set_want_lightmaps 0 4 802 29 BSPLoader::set_want_lightmaps 0 1 162 0
46
void BSPLoader::set_want_lightmaps(bool flag);

542 16 set_physics_type 0 4 802 27 BSPLoader::set_physics_type 0 1 163 0
43
void BSPLoader::set_physics_type(int type);

543 19 set_visualize_leafs 0 4 802 30 BSPLoader::set_visualize_leafs 0 1 164 0
47
void BSPLoader::set_visualize_leafs(bool flag);

544 18 set_materials_file 0 4 802 29 BSPLoader::set_materials_file 0 1 165 0
57
void BSPLoader::set_materials_file(Filename const &file);

545 13 set_wireframe 0 4 802 24 BSPLoader::set_wireframe 0 1 166 0
41
void BSPLoader::set_wireframe(bool flag);

546 13 get_wireframe 0 4 802 24 BSPLoader::get_wireframe 0 1 167 0
49
inline bool BSPLoader::get_wireframe(void) const;

547 10 get_camera 0 4 802 21 BSPLoader::get_camera 0 1 168 0
50
inline NodePath BSPLoader::get_camera(void) const;

548 11 trace_decal 0 4 802 22 BSPLoader::trace_decal 0 1 169 0
195
inline void BSPLoader::trace_decal(std::string const &decal_material, LPoint2 const &decal_scale, float rotate, LPoint3 const &start, LPoint3 const &end, LColorf const &decal_color = LColorf(1));

549 27 get_closest_cubemap_texture 0 4 802 38 BSPLoader::get_closest_cubemap_texture 0 1 170 0
68
Texture *BSPLoader::get_closest_cubemap_texture(LPoint3 const &pos);

550 14 build_cubemaps 0 4 802 25 BSPLoader::build_cubemaps 0 1 171 0
37
void BSPLoader::build_cubemaps(void);

551 16 set_want_shadows 0 4 802 27 BSPLoader::set_want_shadows 0 1 172 0
44
void BSPLoader::set_want_shadows(bool flag);

552 14 set_shadow_dir 0 4 802 25 BSPLoader::set_shadow_dir 0 1 173 0
52
void BSPLoader::set_shadow_dir(LVector3 const &dir);

553 16 extract_modelnum 0 4 802 27 BSPLoader::extract_modelnum 0 1 174 0
44
int BSPLoader::extract_modelnum(int entnum);

554 16 get_model_bounds 0 4 802 27 BSPLoader::get_model_bounds 0 1 175 0
77
void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

555 28 set_server_entity_dispatcher 0 4 802 39 BSPLoader::set_server_entity_dispatcher 0 1 176 0
67
void BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

556 27 link_server_entity_to_class 0 4 802 38 BSPLoader::link_server_entity_to_class 0 1 177 0
89
void BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

557 6 set_ai 0 4 802 17 BSPLoader::set_ai 0 1 178 0
32
void BSPLoader::set_ai(bool ai);

558 5 is_ai 0 4 802 16 BSPLoader::is_ai 0 1 179 0
41
inline bool BSPLoader::is_ai(void) const;

559 10 trace_line 0 4 802 21 BSPLoader::trace_line 0 1 180 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

560 9 clip_line 0 4 802 20 BSPLoader::clip_line 0 1 181 0
71
LPoint3 BSPLoader::clip_line(LPoint3 const &start, LPoint3 const &end);

561 20 link_entity_to_class 0 4 802 31 BSPLoader::link_entity_to_class 0 1 182 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

562 28 get_py_entity_by_target_name 0 4 802 39 BSPLoader::get_py_entity_by_target_name 0 1 183 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

563 17 find_all_entities 0 4 802 28 BSPLoader::find_all_entities 0 1 184 0
69
PyObject *BSPLoader::find_all_entities(std::string const &classname);

564 20 get_entity_keyvalues 0 4 802 31 BSPLoader::get_entity_keyvalues 0 1 185 0
71
void BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

565 18 link_cent_to_pyent 0 4 802 29 BSPLoader::link_cent_to_pyent 0 1 186 0
63
void BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

566 16 remove_py_entity 0 4 802 27 BSPLoader::remove_py_entity 0 1 187 0
48
void BSPLoader::remove_py_entity(PyObject *ent);

567 9 get_model 0 4 802 20 BSPLoader::get_model 0 1 188 0
50
NodePath BSPLoader::get_model(int modelnum) const;

568 12 get_c_entity 0 4 802 23 BSPLoader::get_c_entity 0 1 189 0
61
CBaseEntity *BSPLoader::get_c_entity(int const entnum) const;

569 9 find_leaf 0 4 802 20 BSPLoader::find_leaf 0 2 190 191 0
116
inline int BSPLoader::find_leaf(NodePath const &np);
int BSPLoader::find_leaf(LPoint3 const &pos, int headnode = 0);

570 9 find_node 0 4 802 20 BSPLoader::find_node 0 1 192 0
45
int BSPLoader::find_node(LPoint3 const &pos);

571 18 is_cluster_visible 0 4 802 29 BSPLoader::is_cluster_visible 0 1 193 0
72
bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

572 15 pvs_bounds_test 0 4 802 26 BSPLoader::pvs_bounds_test 0 1 194 0
109
bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds, unsigned int required_leaf_flags = 0);

573 15 make_net_bounds 0 4 802 26 BSPLoader::make_net_bounds 0 1 195 0
147
ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

574 16 has_active_level 0 4 802 27 BSPLoader::has_active_level 0 1 196 0
52
inline bool BSPLoader::has_active_level(void) const;

575 14 has_visibility 0 4 802 25 BSPLoader::has_visibility 0 1 197 0
50
inline bool BSPLoader::has_visibility(void) const;

576 7 cleanup 0 4 802 18 BSPLoader::cleanup 0 1 198 0
52
void BSPLoader::cleanup(bool is_transition = false);

577 10 get_result 0 4 802 21 BSPLoader::get_result 0 1 199 0
50
inline NodePath BSPLoader::get_result(void) const;

578 16 set_current_leaf 0 4 802 27 BSPLoader::set_current_leaf 0 1 200 0
50
inline void BSPLoader::set_current_leaf(int leaf);

579 16 get_current_leaf 0 4 802 27 BSPLoader::get_current_leaf 0 1 201 0
51
inline int BSPLoader::get_current_leaf(void) const;

580 16 get_num_visleafs 0 4 802 27 BSPLoader::get_num_visleafs 0 1 202 0
51
inline int BSPLoader::get_num_visleafs(void) const;

581 15 get_leaf_center 0 4 802 26 BSPLoader::get_leaf_center 0 1 203 0
58
inline LPoint3 BSPLoader::get_leaf_center(int leaf) const;

582 15 get_lightcoords 0 4 802 26 BSPLoader::get_lightcoords 0 1 204 0
73
LTexCoord BSPLoader::get_lightcoords(int facenum, LVector3 const &point);

583 6 update 0 4 802 17 BSPLoader::update 0 1 205 0
29
void BSPLoader::update(void);

584 14 get_global_ptr 0 4 802 25 BSPLoader::get_global_ptr 0 1 206 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

585 10 ~BSPLoader 0 4 802 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

586 18 ShaderPermutations 0 4 804 38 ShaderPermutations::ShaderPermutations 0 1 207 0
52
inline ShaderPermutations::ShaderPermutations(void);

587 15 add_permutation 0 4 804 35 ShaderPermutations::add_permutation 0 1 208 0
104
inline void ShaderPermutations::add_permutation(std::string const &key, std::string const &value = "1");

588 8 complete 0 4 804 28 ShaderPermutations::complete 0 1 209 0
47
inline void ShaderPermutations::complete(void);

589 9 add_input 0 4 804 29 ShaderPermutations::add_input 0 1 210 0
66
inline void ShaderPermutations::add_input(ShaderInput const &inp);

590 8 add_flag 0 4 804 28 ShaderPermutations::add_flag 0 1 211 0
51
inline void ShaderPermutations::add_flag(int flag);

591 8 get_hash 0 4 804 28 ShaderPermutations::get_hash 0 1 212 0
60
inline std::size_t ShaderPermutations::get_hash(void) const;

592 19 ~ShaderPermutations 0 4 804 39 ShaderPermutations::~ShaderPermutations 0 0 0
46
ShaderPermutations::~ShaderPermutations(void);

593 24 upcast_to_ReferenceCount 0 12 805 36 ShaderSpec::upcast_to_ReferenceCount 0 1 215 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

594 22 downcast_to_ShaderSpec 0 12 795 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

595 17 upcast_to_Namable 0 12 805 29 ShaderSpec::upcast_to_Namable 0 1 216 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

596 22 downcast_to_ShaderSpec 0 12 806 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

597 17 read_shader_files 0 4 805 29 ShaderSpec::read_shader_files 0 1 213 0
117
void ShaderSpec::read_shader_files(Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file);

598 14 get_class_type 0 4 805 26 ShaderSpec::get_class_type 0 1 214 0
51
static TypeHandle ShaderSpec::get_class_type(void);

599 11 ~ShaderSpec 0 4 805 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

600 22 get_reflection_texture 0 4 807 41 PlanarReflections::get_reflection_texture 0 1 218 0
63
Texture *PlanarReflections::get_reflection_texture(void) const;

601 17 PlanarReflections 0 4 807 36 PlanarReflections::PlanarReflections 0 1 217 0
81
inline PlanarReflections::PlanarReflections(PlanarReflections const &) = default;

602 18 ~PlanarReflections 0 4 807 37 PlanarReflections::~PlanarReflections 0 0 0
44
PlanarReflections::~PlanarReflections(void);

603 18 BSPShaderGenerator 0 4 811 38 BSPShaderGenerator::BSPShaderGenerator 0 2 219 220 0
224
BSPShaderGenerator::BSPShaderGenerator(GraphicsOutput *output, GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline BSPShaderGenerator::BSPShaderGenerator(BSPShaderGenerator const &) = default;

604 13 set_sun_light 0 4 811 33 BSPShaderGenerator::set_sun_light 0 1 221 0
59
void BSPShaderGenerator::set_sun_light(NodePath const &np);

605 12 start_update 0 4 811 32 BSPShaderGenerator::start_update 0 1 222 0
44
void BSPShaderGenerator::start_update(void);

606 10 add_shader 0 4 811 30 BSPShaderGenerator::add_shader 0 1 223 0
66
void BSPShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

607 14 get_sun_vector 0 4 811 34 BSPShaderGenerator::get_sun_vector 0 1 224 0
63
inline LVector3 BSPShaderGenerator::get_sun_vector(void) const;

608 19 has_shadow_sunlight 0 4 811 39 BSPShaderGenerator::has_shadow_sunlight 0 1 225 0
64
inline bool BSPShaderGenerator::has_shadow_sunlight(void) const;

609 22 get_pssm_array_texture 0 4 811 42 BSPShaderGenerator::get_pssm_array_texture 0 1 226 0
71
inline Texture *BSPShaderGenerator::get_pssm_array_texture(void) const;

610 12 get_pssm_rig 0 4 811 32 BSPShaderGenerator::get_pssm_rig 0 1 227 0
67
inline PSSMCameraRig *BSPShaderGenerator::get_pssm_rig(void) const;

611 10 get_camera 0 4 811 30 BSPShaderGenerator::get_camera 0 1 228 0
59
inline NodePath BSPShaderGenerator::get_camera(void) const;

612 10 get_render 0 4 811 30 BSPShaderGenerator::get_render 0 1 229 0
59
inline NodePath BSPShaderGenerator::get_render(void) const;

613 18 set_shader_quality 0 4 811 38 BSPShaderGenerator::set_shader_quality 0 1 230 0
57
void BSPShaderGenerator::set_shader_quality(int quality);

614 18 get_shader_quality 0 4 811 38 BSPShaderGenerator::get_shader_quality 0 1 231 0
62
inline int BSPShaderGenerator::get_shader_quality(void) const;

615 7 set_fog 0 4 811 27 BSPShaderGenerator::set_fog 0 1 232 0
50
inline void BSPShaderGenerator::set_fog(Fog *fog);

616 9 clear_fog 0 4 811 29 BSPShaderGenerator::clear_fog 0 1 233 0
48
inline void BSPShaderGenerator::clear_fog(void);

617 7 get_fog 0 4 811 27 BSPShaderGenerator::get_fog 0 1 234 0
52
inline Fog *BSPShaderGenerator::get_fog(void) const;

618 12 get_fog_data 0 4 811 32 BSPShaderGenerator::get_fog_data 0 1 235 0
67
inline PTA_LVecBase4f BSPShaderGenerator::get_fog_data(void) const;

619 22 set_exposure_adustment 0 4 811 42 BSPShaderGenerator::set_exposure_adustment 0 1 236 0
71
inline void BSPShaderGenerator::set_exposure_adustment(float exposure);

620 23 get_exposure_adjustment 0 4 811 43 BSPShaderGenerator::get_exposure_adjustment 0 1 237 0
73
inline PTA_float BSPShaderGenerator::get_exposure_adjustment(void) const;

621 7 get_gsg 0 4 811 27 BSPShaderGenerator::get_gsg 0 1 238 0
70
inline GraphicsStateGuardian *BSPShaderGenerator::get_gsg(void) const;

622 10 get_output 0 4 811 30 BSPShaderGenerator::get_output 0 1 239 0
66
inline GraphicsOutput *BSPShaderGenerator::get_output(void) const;

623 22 get_planar_reflections 0 4 811 42 BSPShaderGenerator::get_planar_reflections 0 1 240 0
81
inline PlanarReflections *BSPShaderGenerator::get_planar_reflections(void) const;

624 20 set_identity_cubemap 0 4 811 40 BSPShaderGenerator::set_identity_cubemap 0 1 241 0
67
static void BSPShaderGenerator::set_identity_cubemap(Texture *tex);

625 20 get_identity_cubemap 0 4 811 40 BSPShaderGenerator::get_identity_cubemap 0 1 242 0
63
static Texture *BSPShaderGenerator::get_identity_cubemap(void);

626 11 make_shader 0 4 811 31 BSPShaderGenerator::make_shader 0 1 243 0
121
static ConstPointerTo< Shader > BSPShaderGenerator::make_shader(ShaderSpec const *spec, ShaderPermutations const *perms);

627 14 get_class_type 0 4 811 34 BSPShaderGenerator::get_class_type 0 1 244 0
59
static TypeHandle BSPShaderGenerator::get_class_type(void);

628 19 ~BSPShaderGenerator 0 4 811 39 BSPShaderGenerator::~BSPShaderGenerator 0 0 0
46
BSPShaderGenerator::~BSPShaderGenerator(void);

629 14 get_class_type 0 4 813 32 BSPCullTraverser::get_class_type 0 1 247 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

630 16 BSPCullTraverser 0 4 813 34 BSPCullTraverser::BSPCullTraverser 0 2 245 246 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

631 17 ~BSPCullTraverser 0 4 813 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

632 14 get_class_type 0 4 815 25 BSPRender::get_class_type 0 1 250 0
50
static TypeHandle BSPRender::get_class_type(void);

633 9 BSPRender 0 4 815 20 BSPRender::BSPRender 0 2 248 249 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

634 10 ~BSPRender 0 4 815 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

635 14 get_class_type 0 4 816 23 BSPRoot::get_class_type 0 1 253 0
48
static TypeHandle BSPRoot::get_class_type(void);

636 7 BSPRoot 0 4 816 16 BSPRoot::BSPRoot 0 2 251 252 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

637 8 ~BSPRoot 0 4 816 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

638 14 get_class_type 0 4 817 23 BSPProp::get_class_type 0 1 256 0
48
static TypeHandle BSPProp::get_class_type(void);

639 7 BSPProp 0 4 817 16 BSPProp::BSPProp 0 2 254 255 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

640 8 ~BSPProp 0 4 817 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

641 14 get_class_type 0 4 819 24 BSPModel::get_class_type 0 1 259 0
49
static TypeHandle BSPModel::get_class_type(void);

642 8 BSPModel 0 4 819 18 BSPModel::BSPModel 0 2 257 258 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

643 9 ~BSPModel 0 4 819 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

644 20 VertexLitGenericSpec 0 4 821 42 VertexLitGenericSpec::VertexLitGenericSpec 0 1 260 0
49
VertexLitGenericSpec::VertexLitGenericSpec(void);

645 21 ~VertexLitGenericSpec 0 4 821 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

646 22 LightmappedGenericSpec 0 4 822 46 LightmappedGenericSpec::LightmappedGenericSpec 0 1 261 0
53
LightmappedGenericSpec::LightmappedGenericSpec(void);

647 23 ~LightmappedGenericSpec 0 4 822 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

648 16 UnlitGenericSpec 0 4 823 34 UnlitGenericSpec::UnlitGenericSpec 0 1 262 0
41
UnlitGenericSpec::UnlitGenericSpec(void);

649 17 ~UnlitGenericSpec 0 4 823 35 UnlitGenericSpec::~UnlitGenericSpec 0 0 0
42
UnlitGenericSpec::~UnlitGenericSpec(void);

650 14 UnlitNoMatSpec 0 4 824 30 UnlitNoMatSpec::UnlitNoMatSpec 0 1 263 0
37
UnlitNoMatSpec::UnlitNoMatSpec(void);

651 15 ~UnlitNoMatSpec 0 4 824 31 UnlitNoMatSpec::~UnlitNoMatSpec 0 0 0
38
UnlitNoMatSpec::~UnlitNoMatSpec(void);

652 13 CSMRenderSpec 0 4 825 28 CSMRenderSpec::CSMRenderSpec 0 1 264 0
35
CSMRenderSpec::CSMRenderSpec(void);

653 14 ~CSMRenderSpec 0 4 825 29 CSMRenderSpec::~CSMRenderSpec 0 0 0
36
CSMRenderSpec::~CSMRenderSpec(void);

654 10 SkyBoxSpec 0 4 826 22 SkyBoxSpec::SkyBoxSpec 0 1 265 0
29
SkyBoxSpec::SkyBoxSpec(void);

655 11 ~SkyBoxSpec 0 4 826 23 SkyBoxSpec::~SkyBoxSpec 0 0 0
30
SkyBoxSpec::~SkyBoxSpec(void);

656 4 make 0 4 827 24 AmbientBoostEffect::make 0 1 266 0
69
static ConstPointerTo< RenderEffect > AmbientBoostEffect::make(void);

657 14 get_class_type 0 4 827 34 AmbientBoostEffect::get_class_type 0 1 267 0
59
static TypeHandle AmbientBoostEffect::get_class_type(void);

658 19 ~AmbientBoostEffect 0 4 827 39 AmbientBoostEffect::~AmbientBoostEffect 0 0 0
46
AmbientBoostEffect::~AmbientBoostEffect(void);

659 14 Audio3DManager 0 4 829 30 Audio3DManager::Audio3DManager 0 2 268 269 0
228
Audio3DManager::Audio3DManager(AudioManager *mgr, NodePath const &listener_target = NodePath(), NodePath const &root = NodePath(), int task_priority = 51);
inline Audio3DManager::Audio3DManager(Audio3DManager const &) = default;

660 19 set_distance_factor 0 4 829 35 Audio3DManager::set_distance_factor 0 1 270 0
68
inline void Audio3DManager::set_distance_factor(PN_stdfloat factor);

661 19 get_distance_factor 0 4 829 35 Audio3DManager::get_distance_factor 0 1 271 0
67
inline PN_stdfloat Audio3DManager::get_distance_factor(void) const;

662 18 set_doppler_factor 0 4 829 34 Audio3DManager::set_doppler_factor 0 1 272 0
67
inline void Audio3DManager::set_doppler_factor(PN_stdfloat factor);

663 18 get_doppler_factor 0 4 829 34 Audio3DManager::get_doppler_factor 0 1 273 0
66
inline PN_stdfloat Audio3DManager::get_doppler_factor(void) const;

664 19 set_drop_off_factor 0 4 829 35 Audio3DManager::set_drop_off_factor 0 1 274 0
68
inline void Audio3DManager::set_drop_off_factor(PN_stdfloat factor);

665 19 get_drop_off_factor 0 4 829 35 Audio3DManager::get_drop_off_factor 0 1 275 0
67
inline PN_stdfloat Audio3DManager::get_drop_off_factor(void) const;

666 22 set_sound_min_distance 0 4 829 38 Audio3DManager::set_sound_min_distance 0 1 276 0
88
inline void Audio3DManager::set_sound_min_distance(AudioSound *sound, PN_stdfloat dist);

667 22 get_sound_min_distance 0 4 829 38 Audio3DManager::get_sound_min_distance 0 1 277 0
83
inline PN_stdfloat Audio3DManager::get_sound_min_distance(AudioSound *sound) const;

668 22 set_sound_max_distance 0 4 829 38 Audio3DManager::set_sound_max_distance 0 1 278 0
88
inline void Audio3DManager::set_sound_max_distance(AudioSound *sound, PN_stdfloat dist);

669 22 get_sound_max_distance 0 4 829 38 Audio3DManager::get_sound_max_distance 0 1 279 0
83
inline PN_stdfloat Audio3DManager::get_sound_max_distance(AudioSound *sound) const;

670 15 attach_listener 0 4 829 31 Audio3DManager::attach_listener 0 1 280 0
70
inline void Audio3DManager::attach_listener(NodePath const &listener);

671 15 detach_listener 0 4 829 31 Audio3DManager::detach_listener 0 1 281 0
50
inline void Audio3DManager::detach_listener(void);

672 8 load_sfx 0 4 829 24 Audio3DManager::load_sfx 0 1 282 0
81
inline PointerTo< AudioSound > Audio3DManager::load_sfx(std::string const &path);

673 22 attach_sound_to_object 0 4 829 38 Audio3DManager::attach_sound_to_object 0 1 283 0
87
void Audio3DManager::attach_sound_to_object(AudioSound *sound, NodePath const &object);

674 12 detach_sound 0 4 829 28 Audio3DManager::detach_sound 0 1 284 0
53
void Audio3DManager::detach_sound(AudioSound *sound);

675 18 print_audio_digest 0 4 829 34 Audio3DManager::print_audio_digest 0 1 285 0
46
void Audio3DManager::print_audio_digest(void);

676 6 update 0 4 829 22 Audio3DManager::update 0 1 286 0
34
void Audio3DManager::update(void);

677 15 ~Audio3DManager 0 4 829 31 Audio3DManager::~Audio3DManager 0 0 0
38
Audio3DManager::~Audio3DManager(void);

678 19 set_pupil_direction 0 4 830 27 CIOLib::set_pupil_direction 0 1 289 0
91
static void CIOLib::set_pupil_direction(float x, float y, LVector3 &left, LVector3 &right);

679 14 look_pupils_at 0 4 830 22 CIOLib::look_pupils_at 0 1 290 0
106
static LVector2 CIOLib::look_pupils_at(NodePath const &node, LVector3 const &point, NodePath const &eyes);

680 6 CIOLib 0 4 830 14 CIOLib::CIOLib 0 2 287 288 0
87
inline CIOLib::CIOLib(void) = default;
inline CIOLib::CIOLib(CIOLib const &) = default;

681 7 ~CIOLib 0 4 830 15 CIOLib::~CIOLib 0 0 0
22
CIOLib::~CIOLib(void);

682 17 DecalModulateSpec 0 4 831 36 DecalModulateSpec::DecalModulateSpec 0 1 291 0
43
DecalModulateSpec::DecalModulateSpec(void);

683 18 ~DecalModulateSpec 0 4 831 37 DecalModulateSpec::~DecalModulateSpec 0 0 0
44
DecalModulateSpec::~DecalModulateSpec(void);

684 14 get_class_type 0 4 832 24 GlowNode::get_class_type 0 1 295 0
49
static TypeHandle GlowNode::get_class_type(void);

685 8 GlowNode 0 4 832 18 GlowNode::GlowNode 0 3 292 293 294 0
219
GlowNode::GlowNode(std::string const &name, float query_size = ::r_glow_querysize);
GlowNode::GlowNode(GeomNode const &copy, float query_size = ::r_glow_querysize);
inline GlowNode::GlowNode(GlowNode const &) = default;

686 9 ~GlowNode 0 4 832 19 GlowNode::~GlowNode 0 0 0
26
GlowNode::~GlowNode(void);

687 24 upcast_to_ReferenceCount 0 12 834 43 PostProcessEffect::upcast_to_ReferenceCount 0 1 305 47
upcast from PostProcessEffect to ReferenceCount
66
ReferenceCount *PostProcessEffect::upcast_to_ReferenceCount(void);

688 29 downcast_to_PostProcessEffect 0 12 795 45 ReferenceCount::downcast_to_PostProcessEffect 0 0 49
downcast from ReferenceCount to PostProcessEffect
71
PostProcessEffect *ReferenceCount::downcast_to_PostProcessEffect(void);

689 17 upcast_to_Namable 0 12 834 36 PostProcessEffect::upcast_to_Namable 0 1 306 40
upcast from PostProcessEffect to Namable
52
Namable *PostProcessEffect::upcast_to_Namable(void);

690 29 downcast_to_PostProcessEffect 0 12 806 38 Namable::downcast_to_PostProcessEffect 0 0 42
downcast from Namable to PostProcessEffect
64
PostProcessEffect *Namable::downcast_to_PostProcessEffect(void);

691 14 get_class_type 0 4 834 33 PostProcessEffect::get_class_type 0 1 296 0
58
static TypeHandle PostProcessEffect::get_class_type(void);

692 17 get_final_texture 0 6 834 36 PostProcessEffect::get_final_texture 0 1 297 0
64
virtual Texture *PostProcessEffect::get_final_texture(void) = 0;

693 8 add_pass 0 4 834 27 PostProcessEffect::add_pass 0 1 298 0
56
void PostProcessEffect::add_pass(PostProcessPass *pass);

694 11 remove_pass 0 4 834 30 PostProcessEffect::remove_pass 0 1 299 0
59
void PostProcessEffect::remove_pass(PostProcessPass *pass);

695 8 get_pass 0 4 834 27 PostProcessEffect::get_pass 0 1 300 0
70
PostProcessPass *PostProcessEffect::get_pass(std::string const &name);

696 5 setup 0 6 834 24 PostProcessEffect::setup 0 1 301 0
44
virtual void PostProcessEffect::setup(void);

697 6 update 0 6 834 25 PostProcessEffect::update 0 1 302 0
45
virtual void PostProcessEffect::update(void);

698 12 window_event 0 4 834 31 PostProcessEffect::window_event 0 1 303 0
58
void PostProcessEffect::window_event(GraphicsOutput *win);

699 8 shutdown 0 6 834 27 PostProcessEffect::shutdown 0 1 304 0
47
virtual void PostProcessEffect::shutdown(void);

700 18 ~PostProcessEffect 0 4 834 37 PostProcessEffect::~PostProcessEffect 0 0 0
44
PostProcessEffect::~PostProcessEffect(void);

701 24 upcast_to_ReferenceCount 0 12 836 41 PostProcessPass::upcast_to_ReferenceCount 0 1 332 45
upcast from PostProcessPass to ReferenceCount
64
ReferenceCount *PostProcessPass::upcast_to_ReferenceCount(void);

702 27 downcast_to_PostProcessPass 0 12 795 43 ReferenceCount::downcast_to_PostProcessPass 0 0 47
downcast from ReferenceCount to PostProcessPass
67
PostProcessPass *ReferenceCount::downcast_to_PostProcessPass(void);

703 17 upcast_to_Namable 0 12 836 34 PostProcessPass::upcast_to_Namable 0 1 333 38
upcast from PostProcessPass to Namable
50
Namable *PostProcessPass::upcast_to_Namable(void);

704 27 downcast_to_PostProcessPass 0 12 806 36 Namable::downcast_to_PostProcessPass 0 0 40
downcast from Namable to PostProcessPass
60
PostProcessPass *Namable::downcast_to_PostProcessPass(void);

705 14 get_class_type 0 4 836 31 PostProcessPass::get_class_type 0 1 309 0
56
static TypeHandle PostProcessPass::get_class_type(void);

706 15 PostProcessPass 0 4 836 32 PostProcessPass::PostProcessPass 0 2 307 308 0
379
PostProcessPass::PostProcessPass(PostProcess *pp, std::string const &name = "pass", int texture_output_bits = 0, FrameBufferProperties const &fbprops = PostProcessPass::get_default_fbprops(), bool force_size = false, LVector2i const &forced_size = LVector2i::zero(), bool div_size = false, int div = 1);
inline PostProcessPass::PostProcessPass(PostProcessPass const &) = default;

707 8 get_quad 0 4 836 25 PostProcessPass::get_quad 0 1 310 0
54
inline NodePath PostProcessPass::get_quad(void) const;

708 26 get_back_buffer_dimensions 0 4 836 43 PostProcessPass::get_back_buffer_dimensions 0 1 311 0
66
LVector2i PostProcessPass::get_back_buffer_dimensions(void) const;

709 10 get_camera 0 4 836 27 PostProcessPass::get_camera 0 1 312 0
56
inline NodePath PostProcessPass::get_camera(void) const;

710 16 has_texture_bits 0 4 836 33 PostProcessPass::has_texture_bits 0 1 313 0
62
inline bool PostProcessPass::has_texture_bits(int bits) const;

711 12 set_div_size 0 4 836 29 PostProcessPass::set_div_size 0 1 314 0
66
inline void PostProcessPass::set_div_size(bool div_size, int div);

712 15 set_forced_size 0 4 836 32 PostProcessPass::set_forced_size 0 1 315 0
92
inline void PostProcessPass::set_forced_size(bool force_size, LVector2i const &forced_size);

713 26 set_framebuffer_properties 0 4 836 43 PostProcessPass::set_framebuffer_properties 0 1 316 0
94
inline void PostProcessPass::set_framebuffer_properties(FrameBufferProperties const &fbprops);

714 23 set_output_texture_bits 0 4 836 40 PostProcessPass::set_output_texture_bits 0 1 317 0
63
inline void PostProcessPass::set_output_texture_bits(int bits);

715 18 get_corrected_size 0 4 836 35 PostProcessPass::get_corrected_size 0 1 318 0
69
LVector2i PostProcessPass::get_corrected_size(LVector2i const &size);

716 11 get_texture 0 4 836 28 PostProcessPass::get_texture 0 1 319 0
47
Texture *PostProcessPass::get_texture(int bit);

717 17 get_color_texture 0 4 836 34 PostProcessPass::get_color_texture 0 1 320 0
57
inline Texture *PostProcessPass::get_color_texture(void);

718 17 get_depth_texture 0 4 836 34 PostProcessPass::get_depth_texture 0 1 321 0
57
inline Texture *PostProcessPass::get_depth_texture(void);

719 12 setup_buffer 0 6 836 29 PostProcessPass::setup_buffer 0 1 322 0
49
virtual bool PostProcessPass::setup_buffer(void);

720 14 setup_textures 0 6 836 31 PostProcessPass::setup_textures 0 1 323 0
51
virtual void PostProcessPass::setup_textures(void);

721 10 setup_quad 0 6 836 27 PostProcessPass::setup_quad 0 1 324 0
47
virtual void PostProcessPass::setup_quad(void);

722 12 setup_camera 0 6 836 29 PostProcessPass::setup_camera 0 1 325 0
49
virtual void PostProcessPass::setup_camera(void);

723 12 setup_region 0 6 836 29 PostProcessPass::setup_region 0 1 326 0
49
virtual void PostProcessPass::setup_region(void);

724 5 setup 0 6 836 22 PostProcessPass::setup 0 1 327 0
42
virtual void PostProcessPass::setup(void);

725 6 update 0 6 836 23 PostProcessPass::update 0 1 328 0
43
virtual void PostProcessPass::update(void);

726 12 window_event 0 6 836 29 PostProcessPass::window_event 0 1 329 0
67
virtual void PostProcessPass::window_event(GraphicsOutput *output);

727 8 shutdown 0 6 836 25 PostProcessPass::shutdown 0 1 330 0
45
virtual void PostProcessPass::shutdown(void);

728 19 get_default_fbprops 0 4 836 36 PostProcessPass::get_default_fbprops 0 1 331 0
72
static FrameBufferProperties PostProcessPass::get_default_fbprops(void);

729 16 ~PostProcessPass 0 4 836 33 PostProcessPass::~PostProcessPass 0 0 0
40
PostProcessPass::~PostProcessPass(void);

730 20 PostProcessScenePass 0 4 837 42 PostProcessScenePass::PostProcessScenePass 0 2 334 335 0
220
PostProcessScenePass::PostProcessScenePass(PostProcess *pp, int output_texture_bits = ::bits_PASSTEXTURE_COLOR, int auxbits = 0);
inline PostProcessScenePass::PostProcessScenePass(PostProcessScenePass const &) = default;

731 18 setup_scene_camera 0 4 837 40 PostProcessScenePass::setup_scene_camera 0 1 336 0
53
void PostProcessScenePass::setup_scene_camera(int i);

732 16 set_camera_state 0 4 837 38 PostProcessScenePass::set_camera_state 0 1 337 0
70
void PostProcessScenePass::set_camera_state(RenderState const *state);

733 21 ~PostProcessScenePass 0 4 837 43 PostProcessScenePass::~PostProcessScenePass 0 0 0
50
PostProcessScenePass::~PostProcessScenePass(void);

734 11 PostProcess 0 4 838 24 PostProcess::PostProcess 0 2 338 339 0
113
PostProcess::PostProcess(GraphicsOutput *output);
inline PostProcess::PostProcess(PostProcess const &) = default;

735 10 add_camera 0 4 838 23 PostProcess::add_camera 0 1 340 0
53
void PostProcess::add_camera(NodePath const &camera);

736 13 remove_camera 0 4 838 26 PostProcess::remove_camera 0 1 341 0
56
void PostProcess::remove_camera(NodePath const &camera);

737 10 add_effect 0 4 838 23 PostProcess::add_effect 0 1 342 0
63
inline void PostProcess::add_effect(PostProcessEffect *effect);

738 13 remove_effect 0 4 838 26 PostProcess::remove_effect 0 1 343 0
66
inline void PostProcess::remove_effect(PostProcessEffect *effect);

739 10 get_effect 0 4 838 23 PostProcess::get_effect 0 1 344 0
75
inline PostProcessEffect *PostProcess::get_effect(std::string const &name);

740 23 get_scene_color_texture 0 4 838 36 PostProcess::get_scene_color_texture 0 1 345 0
65
inline Texture *PostProcess::get_scene_color_texture(void) const;

741 23 get_scene_depth_texture 0 4 838 36 PostProcess::get_scene_depth_texture 0 1 346 0
65
inline Texture *PostProcess::get_scene_depth_texture(void) const;

742 14 get_scene_pass 0 4 838 27 PostProcess::get_scene_pass 0 1 347 0
69
inline PostProcessScenePass *PostProcess::get_scene_pass(void) const;

743 10 get_output 0 4 838 23 PostProcess::get_output 0 1 348 0
59
inline GraphicsOutput *PostProcess::get_output(void) const;

744 10 get_camera 0 4 838 23 PostProcess::get_camera 0 1 349 0
53
inline NodePath PostProcess::get_camera(int n) const;

745 9 next_sort 0 4 838 22 PostProcess::next_sort 0 1 350 0
40
inline int PostProcess::next_sort(void);

746 25 get_output_display_region 0 4 838 38 PostProcess::get_output_display_region 0 1 351 0
73
inline DisplayRegion *PostProcess::get_output_display_region(void) const;

747 13 is_fullscreen 0 4 838 26 PostProcess::is_fullscreen 0 1 352 0
51
inline bool PostProcess::is_fullscreen(void) const;

748 18 set_scene_aux_bits 0 4 838 31 PostProcess::set_scene_aux_bits 0 1 353 0
47
void PostProcess::set_scene_aux_bits(int bits);

749 18 set_stacked_clears 0 4 838 31 PostProcess::set_stacked_clears 0 1 354 0
68
void PostProcess::set_stacked_clears(int n, DrawableRegion *region);

750 17 set_window_clears 0 4 838 30 PostProcess::set_window_clears 0 1 355 0
60
void PostProcess::set_window_clears(DrawableRegion *region);

751 10 set_clears 0 4 838 23 PostProcess::set_clears 0 1 356 0
60
void PostProcess::set_clears(int n, DrawableRegion *region);

752 8 shutdown 0 4 838 21 PostProcess::shutdown 0 1 357 0
33
void PostProcess::shutdown(void);

753 12 ~PostProcess 0 4 838 25 PostProcess::~PostProcess 0 0 0
32
PostProcess::~PostProcess(void);

754 14 get_class_type 0 4 839 23 HDRPass::get_class_type 0 1 360 0
48
static TypeHandle HDRPass::get_class_type(void);

755 7 HDRPass 0 4 839 16 HDRPass::HDRPass 0 2 358 359 0
86
HDRPass::HDRPass(PostProcess *pp);
inline HDRPass::HDRPass(HDRPass const &) = default;

756 19 set_exposure_output 0 4 839 28 HDRPass::set_exposure_output 0 1 361 0
59
inline void HDRPass::set_exposure_output(PTA_float output);

757 12 get_exposure 0 4 839 21 HDRPass::get_exposure 0 1 362 56
/**
	 * Returns the calculated exposure adjustment.
	 */
47
inline float HDRPass::get_exposure(void) const;

758 8 ~HDRPass 0 4 839 17 HDRPass::~HDRPass 0 0 0
24
HDRPass::~HDRPass(void);

759 9 HDREffect 0 4 840 20 HDREffect::HDREffect 0 1 363 0
38
HDREffect::HDREffect(PostProcess *pp);

760 12 get_hdr_pass 0 4 840 23 HDREffect::get_hdr_pass 0 1 364 0
52
inline HDRPass *HDREffect::get_hdr_pass(void) const;

761 10 ~HDREffect 0 4 840 21 HDREffect::~HDREffect 0 0 0
28
HDREffect::~HDREffect(void);

762 14 get_class_type 0 4 841 27 BloomEffect::get_class_type 0 1 366 0
52
static TypeHandle BloomEffect::get_class_type(void);

763 11 BloomEffect 0 4 841 24 BloomEffect::BloomEffect 0 1 365 0
42
BloomEffect::BloomEffect(PostProcess *pp);

764 12 ~BloomEffect 0 4 841 25 BloomEffect::~BloomEffect 0 0 0
32
BloomEffect::~BloomEffect(void);

765 14 get_class_type 0 4 842 36 LightingOriginEffect::get_class_type 0 1 367 0
61
static TypeHandle LightingOriginEffect::get_class_type(void);

766 4 make 0 4 842 26 LightingOriginEffect::make 0 1 368 0
89
static ConstPointerTo< RenderEffect > LightingOriginEffect::make(LVector3 const &origin);

767 19 get_lighting_origin 0 4 842 41 LightingOriginEffect::get_lighting_origin 0 1 369 0
70
inline LVector3 LightingOriginEffect::get_lighting_origin(void) const;

768 21 ~LightingOriginEffect 0 4 842 43 LightingOriginEffect::~LightingOriginEffect 0 0 0
50
LightingOriginEffect::~LightingOriginEffect(void);

769 14 get_class_type 0 4 843 27 FXAA_Effect::get_class_type 0 1 371 0
52
static TypeHandle FXAA_Effect::get_class_type(void);

770 11 FXAA_Effect 0 4 843 24 FXAA_Effect::FXAA_Effect 0 1 370 0
42
FXAA_Effect::FXAA_Effect(PostProcess *pp);

771 12 ~FXAA_Effect 0 4 843 25 FXAA_Effect::~FXAA_Effect 0 0 0
32
FXAA_Effect::~FXAA_Effect(void);

772 14 get_class_slot 0 4 844 27 BloomAttrib::get_class_slot 0 1 372 0
45
static int BloomAttrib::get_class_slot(void);

773 14 get_class_type 0 4 844 27 BloomAttrib::get_class_type 0 1 373 0
52
static TypeHandle BloomAttrib::get_class_type(void);

774 4 make 0 4 844 17 BloomAttrib::make 0 1 374 0
83
static ConstPointerTo< RenderAttrib > BloomAttrib::make(bool bloom_enabled = true);

775 16 is_bloom_enabled 0 4 844 29 BloomAttrib::is_bloom_enabled 0 1 375 0
54
inline bool BloomAttrib::is_bloom_enabled(void) const;

776 12 ~BloomAttrib 0 4 844 25 BloomAttrib::~BloomAttrib 0 0 0
32
BloomAttrib::~BloomAttrib(void);

375
1 0 0 7 12 845 387 0 0 0 
2 0 0 7 12 845 387 0 0 1 6 param0 0 846  
3 0 0 7 2 850 0 0 0 1 4 name 1 849  
4 0 0 7 2 850 0 0 0 2 4 name 1 849  7 uv_name 1 849  
5 0 0 7 3 850 0 0 0 0 
6 0 0 7 4 850 0 0 0 0 
7 0 0 7 5 850 0 0 0 0 
8 0 0 7 6 850 0 0 0 0 
9 0 0 7 7 850 0 0 0 0 
10 0 0 7 8 850 0 0 0 0 
11 0 0 7 9 850 0 0 0 0 
12 0 0 7 10 850 0 0 0 0 
13 0 0 7 11 850 0 0 0 0 
14 0 0 7 16 853 409 0 0 1 4 copy 1 851  
15 0 0 7 16 853 409 0 0 1 4 name 1 849  
16 0 0 7 17 853 409 0 0 2 4 this 3 853  4 copy 1 851  
17 0 0 4 18 854 0 0 0 3 4 this 3 853  3 key 1 849  5 value 1 849  
18 0 0 6 19 849 0 0 0 2 4 this 3 851  3 key 1 849  
19 0 0 6 20 855 0 0 0 1 4 this 3 851  
20 0 0 6 21 849 0 0 0 2 4 this 3 851  1 i 1 855  
21 0 0 6 22 849 0 0 0 2 4 this 3 851  1 i 1 855  
22 0 0 6 23 782 0 0 0 2 4 this 3 851  3 key 1 849  
23 0 0 6 24 857 0 0 0 2 4 this 3 851  3 key 1 849  
24 0 0 4 25 854 0 0 0 2 4 this 3 853  11 shader_name 1 849  
25 0 0 6 26 849 0 0 0 1 4 this 3 851  
26 0 0 7 27 859 0 0 0 1 4 this 3 851  
27 0 0 6 28 860 0 0 0 2 4 this 3 851  3 key 1 849  
28 0 0 6 29 860 0 0 0 1 4 this 3 851  
29 0 0 6 30 860 0 0 0 1 4 this 3 851  
30 0 0 6 31 849 0 0 0 1 4 this 3 851  
31 0 0 6 32 849 0 0 0 1 4 this 3 851  
32 0 0 6 33 860 0 0 0 1 4 this 3 851  
33 0 0 6 34 860 0 0 0 1 4 this 3 851  
34 0 0 7 35 851 0 0 0 1 4 file 1 861  
35 0 0 7 36 864 0 0 0 0 
36 0 0 7 40 866 0 0 0 1 3 mat 1 851  
37 0 0 7 41 866 0 0 0 1 3 mat 1 851  
38 0 0 7 42 866 0 0 0 0 
39 0 0 6 43 849 0 0 0 1 4 this 3 867  
40 0 0 6 44 860 0 0 0 1 4 this 3 867  
41 0 0 7 45 851 0 0 0 1 4 this 3 867  
42 0 0 6 46 782 0 0 0 0 
43 0 0 7 49 864 0 0 0 0 
44 0 0 6 53 855 0 0 0 1 4 this 3 869  
45 0 0 7 54 873 0 0 0 2 4 this 3 869  1 n 1 782  
46 0 0 6 55 855 0 0 0 1 4 this 3 869  
47 0 0 7 56 876 0 0 0 2 4 this 3 869  1 n 1 782  
48 0 0 7 57 864 0 0 0 0 
49 0 0 7 61 877 434 0 0 0 
50 0 0 7 61 877 434 0 0 1 6 param0 0 878  
51 0 0 7 60 864 0 0 0 0 
52 0 0 6 62 880 0 0 0 1 4 this 3 878  
53 0 0 6 63 849 0 0 0 2 4 this 3 878  3 key 1 849  
54 0 0 7 64 883 0 0 0 2 4 this 3 878  3 key 1 849  
55 0 0 7 65 887 0 0 0 3 4 this 3 878  3 key 1 849  5 scale 1 860  
56 0 0 6 66 849 0 0 0 1 4 this 3 878  
57 0 0 6 67 849 0 0 0 1 4 this 3 878  
58 0 0 6 68 782 0 0 0 1 4 this 3 878  
59 0 0 7 72 888 439 0 0 0 
60 0 0 7 72 888 439 0 0 1 6 param0 0 889  
61 0 0 7 71 864 0 0 0 0 
62 0 0 7 73 873 0 0 0 1 4 this 3 889  
63 0 0 7 74 883 0 0 0 1 4 this 3 889  
64 0 0 7 78 891 445 0 0 0 
65 0 0 7 78 891 445 0 0 1 6 param0 0 892  
66 0 0 7 77 864 0 0 0 0 
67 0 0 7 79 894 424 0 0 1 4 this 3 892  
68 0 0 6 80 860 0 0 0 2 4 this 3 892  3 pos 1 895  
69 0 0 4 81 854 0 0 0 3 4 this 3 891  4 mins 1 873  4 maxs 1 873  
70 0 0 7 85 897 450 0 0 0 
71 0 0 7 85 897 450 0 0 1 6 param0 0 898  
72 0 0 7 84 864 0 0 0 0 
73 0 0 7 86 901 0 0 0 1 4 this 3 898  
74 0 0 4 87 854 0 0 0 3 4 this 3 897  4 mins 1 873  4 maxs 1 873  
75 0 0 7 93 904 455 0 0 1 6 param0 0 902  
76 0 0 6 90 782 0 0 0 1 4 this 3 902  
77 0 0 6 91 782 0 0 0 1 4 this 3 902  
78 0 0 6 92 782 0 0 0 1 4 this 3 902  
79 0 0 7 101 907 462 0 0 1 6 param0 0 905  
80 0 0 6 96 782 0 0 0 1 4 this 3 905  
81 0 0 6 97 782 0 0 0 1 4 this 3 905  
82 0 0 6 98 782 0 0 0 1 4 this 3 905  
83 0 0 6 99 782 0 0 0 1 4 this 3 905  
84 0 0 6 100 860 0 0 0 1 4 this 3 905  
85 0 0 6 104 782 0 0 0 1 4 this 3 908  
86 0 0 4 105 854 0 0 35 // number of textures to consider.. 2 4 this 3 908  6 tcount 1 782  
87 0 0 4 106 854 0 0 21 // add textures 0 - n 3 4 this 3 908  3 wid 1 782  3 hit 1 782  
88 0 0 6 107 860 0 0 0 7 4 this 3 908  3 wid 1 782  3 hit 1 782  15 forcePowerOfTwo 1 860  14 onePixelBorder 1 860  7 max_wid 1 782  7 max_hit 1 782  
89 0 0 4 108 854 0 0 0 3 4 this 3 908  3 wid 1 782  3 hit 1 782  
90 0 0 7 109 904 455 0 74 // pack the textures, the return code is the amount of wasted/unused area. 3 4 this 3 908  15 forcePowerOfTwo 1 860  14 onePixelBorder 1 860  
91 0 0 7 110 907 462 0 58 // returns true if the texture has been rotated 90 degrees 2 4 this 3 908  5 index 1 782  
92 0 0 6 111 908 0 0 0 0 
93 0 0 4 112 854 0 0 0 1 2 tp 1 908  
94 0 0 7 117 909 476 0 0 0 
95 0 0 7 117 909 476 0 0 1 6 param0 0 910  
96 0 0 4 115 854 0 0 0 0 
97 0 0 4 116 854 0 0 0 0 
98 0 0 7 120 912 484 0 0 0 
99 0 0 7 120 912 484 0 0 1 6 param0 0 913  
100 0 0 6 121 860 0 0 0 1 4 this 3 913  
101 0 0 7 122 883 0 0 0 1 4 this 3 913  
102 0 0 7 123 917 0 0 0 1 4 this 3 913  
103 0 0 6 124 918 0 0 0 1 4 this 3 913  
104 0 0 6 125 918 0 0 0 1 4 this 3 913  
105 0 0 6 126 857 0 0 0 1 4 this 3 913  
106 0 0 7 130 919 0 0 0 0 
107 0 0 7 130 919 0 0 0 1 6 param0 0 920  
108 0 0 4 131 854 0 0 0 2 4 this 3 919  4 geom 1 922  
109 0 0 4 132 854 0 0 0 2 4 this 3 919  4 geom 1 922  
110 0 0 4 133 854 0 0 0 1 4 this 3 919  
111 0 0 7 135 912 484 0 0 4 4 this 3 919  5 start 1 895  3 end 1 895  4 mask 1 923  
112 0 0 7 136 912 484 0 0 5 4 this 3 919  6 origin 1 895  9 direction 1 927  8 distance 1 857  4 mask 1 923  
113 0 0 4 137 854 0 0 0 2 4 this 3 919  7 quality 1 782  
114 0 0 4 138 854 0 0 0 1 4 this 3 919  
115 0 0 7 139 922 0 0 0 2 4 this 3 919  7 geom_id 1 918  
116 0 0 7 142 864 0 0 0 0 
117 0 0 4 143 854 0 0 0 2 4 this 3 922  4 mask 1 923  
118 0 0 4 143 854 0 0 0 2 4 this 3 922  4 mask 1 918  
119 0 0 7 144 931 0 0 0 1 4 this 3 929  
120 0 0 6 145 918 0 0 0 1 4 this 3 929  
121 0 0 4 146 854 0 0 0 2 4 this 3 922  7 quality 1 782  
122 0 0 4 147 854 0 0 0 1 4 this 3 922  
123 0 0 7 150 932 504 0 0 1 4 name 1 849  
124 0 0 7 149 864 0 0 0 0 
125 0 0 4 151 854 0 0 0 4 4 this 3 932  2 p1 1 895  2 p2 1 895  2 p3 1 895  
126 0 0 4 152 854 0 0 0 3 4 this 3 932  4 geom 1 933  2 ts 1 936  
127 0 0 7 156 866 0 0 0 2 13 face_material 1 849  9 face_type 1 782  
128 0 0 7 157 866 0 0 0 0 
129 0 0 7 158 866 0 0 0 0 
130 0 0 6 159 849 0 0 0 1 4 this 3 939  
131 0 0 6 160 782 0 0 0 1 4 this 3 939  
132 0 0 6 161 860 0 0 0 1 4 this 3 939  
133 0 0 6 162 782 0 0 0 0 
134 0 0 7 164 864 0 0 0 0 
135 0 0 7 167 880 585 0 0 0 
136 0 0 4 168 854 0 0 0 2 4 this 3 880  4 root 1 941  
137 0 0 4 169 854 0 0 0 2 4 this 3 880  5 world 1 943  
138 0 0 7 170 943 0 0 0 1 4 this 3 945  
139 0 0 6 171 860 0 0 0 2 4 this 3 945  6 rbnode 1 947  
140 0 0 6 172 860 0 0 0 3 4 this 3 880  6 rbnode 1 947  12 triangle_idx 1 782  
141 0 0 6 173 849 0 0 0 3 4 this 3 880  6 rbnode 1 947  12 triangle_idx 1 782  
142 0 0 6 174 782 0 0 0 3 4 this 3 880  6 rbnode 1 947  12 triangle_idx 1 782  
143 0 0 6 175 782 0 0 0 3 4 this 3 880  6 rbnode 1 947  12 triangle_idx 1 782  
144 0 0 7 176 873 0 0 0 2 4 this 3 880  8 modelnum 1 782  
145 0 0 4 177 854 0 0 0 2 4 this 3 880  5 pyent 1 949  
146 0 0 4 178 854 0 0 0 2 4 this 3 880  5 pyent 1 949  
147 0 0 4 179 854 0 0 0 3 4 this 3 880  1 n 1 782  9 preserved 1 860  
148 0 0 6 180 782 0 0 0 1 4 this 3 945  
149 0 0 6 181 949 0 0 0 2 4 this 3 945  1 n 1 782  
150 0 0 4 182 854 0 0 0 4 4 this 3 880  4 name 1 849  6 origin 1 927  6 angles 1 927  
151 0 0 4 183 854 0 0 0 1 4 this 3 880  
152 0 0 6 184 860 0 0 0 3 4 this 3 880  4 file 1 861  13 is_transition 1 860  
153 0 0 4 185 854 0 0 0 1 4 this 3 880  
154 0 0 4 186 854 0 0 0 1 4 this 3 880  
155 0 0 4 187 854 0 0 0 3 4 this 3 880  5 gamma 1 952  10 overbright 1 782  
156 0 0 6 188 952 0 0 0 1 4 this 3 945  
157 0 0 4 189 854 0 0 0 2 4 this 3 880  3 win 1 953  
158 0 0 4 190 854 0 0 0 2 4 this 3 880  6 camera 1 941  
159 0 0 4 191 854 0 0 0 2 4 this 3 880  6 render 1 941  
160 0 0 4 192 854 0 0 0 2 4 this 3 880  5 shgen 1 955  
161 0 0 4 193 854 0 0 0 2 4 this 3 880  4 flag 1 860  
162 0 0 4 194 854 0 0 0 2 4 this 3 880  4 flag 1 860  
163 0 0 4 195 854 0 0 0 2 4 this 3 880  4 type 1 782  
164 0 0 4 196 854 0 0 0 2 4 this 3 880  4 flag 1 860  
165 0 0 4 197 854 0 0 0 2 4 this 3 880  4 file 1 861  
166 0 0 4 198 854 0 0 0 2 4 this 3 880  4 flag 1 860  
167 0 0 6 199 860 0 0 0 1 4 this 3 945  
168 0 0 7 200 901 0 0 0 1 4 this 3 945  
169 0 0 4 201 854 0 0 0 7 4 this 3 880  14 decal_material 1 849  11 decal_scale 1 956  6 rotate 1 857  5 start 1 895  3 end 1 895  11 decal_color 1 960  
170 0 0 7 202 963 0 0 0 2 4 this 3 880  3 pos 1 895  
171 0 0 4 203 854 0 0 0 1 4 this 3 880  
172 0 0 4 204 854 0 0 0 2 4 this 3 880  4 flag 1 860  
173 0 0 4 205 854 0 0 0 2 4 this 3 880  3 dir 1 927  
174 0 0 6 206 782 0 0 0 2 4 this 3 880  6 entnum 1 782  
175 0 0 4 207 854 0 0 0 4 4 this 3 880  8 modelnum 1 782  4 mins 1 873  4 maxs 1 873  
176 0 0 4 208 854 0 0 0 2 4 this 3 880  10 dispatcher 1 949  
177 0 0 4 209 854 0 0 0 3 4 this 3 880  4 name 1 849  4 type 1 964  
178 0 0 4 210 854 0 0 0 2 4 this 3 880  2 ai 1 860  
179 0 0 6 211 860 0 0 0 1 4 this 3 945  
180 0 0 6 212 860 0 0 0 3 4 this 3 880  5 start 1 895  3 end 1 895  
181 0 0 7 213 873 0 0 0 3 4 this 3 880  5 start 1 895  3 end 1 895  
182 0 0 4 214 854 0 0 0 3 4 this 3 880  7 entname 1 849  4 type 1 964  
183 0 0 6 215 949 0 0 0 2 4 this 3 945  10 targetname 1 849  
184 0 0 6 216 949 0 0 0 2 4 this 3 880  9 classname 1 849  
185 0 0 4 217 854 0 0 0 3 4 this 3 880  4 list 1 949  6 entnum 1 967  
186 0 0 4 218 854 0 0 0 3 4 this 3 880  5 entum 1 782  5 pyent 1 949  
187 0 0 4 219 854 0 0 0 2 4 this 3 880  3 ent 1 949  
188 0 0 7 220 901 0 0 0 2 4 this 3 945  8 modelnum 1 782  
189 0 0 7 221 877 434 0 0 2 4 this 3 945  6 entnum 1 967  
190 0 0 6 222 782 0 0 0 3 4 this 3 880  3 pos 1 895  8 headnode 1 782  
191 0 0 6 222 782 0 0 0 2 4 this 3 880  2 np 1 941  
192 0 0 6 223 782 0 0 0 2 4 this 3 880  3 pos 1 895  
193 0 0 6 224 860 0 0 0 3 4 this 3 945  12 curr_cluster 1 782  7 cluster 1 782  
194 0 0 6 225 860 0 0 0 3 4 this 3 880  6 bounds 1 968  19 required_leaf_flags 1 918  
195 0 0 7 226 968 0 0 0 3 4 this 3 880  13 net_transform 1 936  8 original 1 968  
196 0 0 6 227 860 0 0 0 1 4 this 3 945  
197 0 0 6 228 860 0 0 0 1 4 this 3 945  
198 0 0 4 229 854 0 0 0 2 4 this 3 880  13 is_transition 1 860  
199 0 0 7 230 901 0 0 0 1 4 this 3 945  
200 0 0 4 231 854 0 0 0 2 4 this 3 880  4 leaf 1 782  
201 0 0 6 232 782 0 0 0 1 4 this 3 945  
202 0 0 6 233 782 0 0 0 1 4 this 3 945  
203 0 0 7 234 873 0 0 0 2 4 this 3 945  4 leaf 1 782  
204 0 0 7 235 973 0 0 0 3 4 this 3 880  7 facenum 1 782  5 point 1 927  
205 0 0 4 236 854 0 0 0 1 4 this 3 880  
206 0 0 6 237 880 0 0 0 0 
207 0 0 7 241 974 592 0 0 0 
208 0 0 4 242 854 0 0 0 3 4 this 3 974  3 key 1 849  5 value 1 849  
209 0 0 4 243 854 0 0 0 1 4 this 3 974  
210 0 0 4 244 854 0 0 0 2 4 this 3 974  3 inp 1 975  
211 0 0 4 245 854 0 0 0 2 4 this 3 974  4 flag 1 782  
212 0 0 6 246 855 0 0 0 1 4 this 3 978  
213 0 0 4 254 854 0 0 0 4 4 this 3 980  9 vert_file 1 861  10 pixel_file 1 861  9 geom_file 1 861  
214 0 0 7 255 864 0 0 0 0 
215 0 0 7 249 981 0 0 0 1 4 this 3 980  
216 0 0 6 252 982 0 0 0 1 4 this 3 980  
217 0 0 7 259 985 602 0 0 1 6 param0 0 983  
218 0 0 7 258 963 0 0 0 1 4 this 3 983  
219 0 0 7 266 955 628 0 0 1 6 param0 0 986  
220 0 0 7 266 955 628 0 0 4 6 output 1 988  3 gsg 1 990  6 camera 1 941  6 render 1 941  
221 0 0 4 267 854 0 0 0 2 4 this 3 955  2 np 1 941  
222 0 0 4 268 854 0 0 0 1 4 this 3 955  
223 0 0 4 269 854 0 0 0 2 4 this 3 955  4 spec 1 980  
224 0 0 7 270 883 0 0 0 1 4 this 3 986  
225 0 0 6 271 860 0 0 0 1 4 this 3 986  
226 0 0 7 272 963 0 0 0 1 4 this 3 986  
227 0 0 6 273 992 0 0 0 1 4 this 3 986  
228 0 0 7 274 901 0 0 0 1 4 this 3 986  
229 0 0 7 275 901 0 0 0 1 4 this 3 986  
230 0 0 4 276 854 0 0 0 2 4 this 3 955  7 quality 1 782  
231 0 0 6 277 782 0 0 0 1 4 this 3 986  
232 0 0 4 278 854 0 0 0 2 4 this 3 955  3 fog 1 994  
233 0 0 4 279 854 0 0 0 1 4 this 3 955  
234 0 0 7 280 994 0 0 0 1 4 this 3 986  
235 0 0 7 281 998 0 0 0 1 4 this 3 986  
236 0 0 4 282 854 0 0 0 2 4 this 3 955  8 exposure 1 857  
237 0 0 7 283 1001 0 0 0 1 4 this 3 986  
238 0 0 7 284 990 0 0 0 1 4 this 3 986  
239 0 0 7 285 988 0 0 0 1 4 this 3 986  
240 0 0 7 286 985 602 0 0 1 4 this 3 986  
241 0 0 4 287 854 0 0 0 1 3 tex 1 963  
242 0 0 7 288 963 0 0 0 0 
243 0 0 7 289 1006 0 0 0 2 4 spec 1 1004  5 perms 1 978  
244 0 0 7 290 864 0 0 0 0 
245 0 0 7 295 1009 631 0 0 1 6 param0 0 1007  
246 0 0 7 295 1009 631 0 0 2 4 trav 1 1010  6 loader 1 880  
247 0 0 7 294 864 0 0 0 0 
248 0 0 7 299 1013 634 0 0 1 6 param0 0 1011  
249 0 0 7 299 1013 634 0 0 2 4 name 1 849  6 loader 1 880  
250 0 0 7 298 864 0 0 0 0 
251 0 0 7 303 1016 637 0 0 1 6 param0 0 1014  
252 0 0 7 303 1016 637 0 0 1 4 name 1 849  
253 0 0 7 302 864 0 0 0 0 
254 0 0 7 308 1019 640 0 0 1 6 param0 0 1017  
255 0 0 7 308 1019 640 0 0 1 4 name 1 849  
256 0 0 7 307 864 0 0 0 0 
257 0 0 7 313 1022 643 0 0 1 6 param0 0 1020  
258 0 0 7 313 1022 643 0 0 1 4 name 1 849  
259 0 0 7 312 864 0 0 0 0 
260 0 0 7 316 1023 645 0 0 0 
261 0 0 7 319 1024 647 0 0 0 
262 0 0 7 322 1025 649 0 0 0 
263 0 0 7 325 1026 651 0 0 0 
264 0 0 7 328 1027 653 0 0 0 
265 0 0 7 331 1028 655 0 0 0 
266 0 0 7 335 1030 0 0 0 0 
267 0 0 7 336 864 0 0 0 0 
268 0 0 7 339 1033 677 0 0 1 6 param0 0 1031  
269 0 0 7 339 1033 677 0 0 4 3 mgr 1 1034  15 listener_target 1 941  4 root 1 941  13 task_priority 1 782  
270 0 0 4 340 854 0 0 0 2 4 this 3 1033  6 factor 1 952  
271 0 0 6 341 952 0 0 0 1 4 this 3 1031  
272 0 0 4 342 854 0 0 0 2 4 this 3 1033  6 factor 1 952  
273 0 0 6 343 952 0 0 0 1 4 this 3 1031  
274 0 0 4 344 854 0 0 0 2 4 this 3 1033  6 factor 1 952  
275 0 0 6 345 952 0 0 0 1 4 this 3 1031  
276 0 0 4 346 854 0 0 0 3 4 this 3 1033  5 sound 1 1036  4 dist 1 952  
277 0 0 6 347 952 0 0 0 2 4 this 3 1031  5 sound 1 1036  
278 0 0 4 348 854 0 0 0 3 4 this 3 1033  5 sound 1 1036  4 dist 1 952  
279 0 0 6 349 952 0 0 0 2 4 this 3 1031  5 sound 1 1036  
280 0 0 4 350 854 0 0 0 2 4 this 3 1033  8 listener 1 941  
281 0 0 4 351 854 0 0 0 1 4 this 3 1033  
282 0 0 7 352 1036 0 0 0 2 4 this 3 1033  4 path 1 849  
283 0 0 4 353 854 0 0 0 3 4 this 3 1033  5 sound 1 1036  6 object 1 941  
284 0 0 4 354 854 0 0 0 2 4 this 3 1033  5 sound 1 1036  
285 0 0 4 355 854 0 0 0 1 4 this 3 1033  
286 0 0 4 356 854 0 0 0 1 4 this 3 1033  
287 0 0 7 361 1038 681 0 0 0 
288 0 0 7 361 1038 681 0 0 1 6 param0 0 1039  
289 0 0 4 359 854 0 0 0 4 1 x 1 857  1 y 1 857  4 left 1 883  5 right 1 883  
290 0 0 7 360 917 0 0 0 3 4 node 1 941  5 point 1 927  4 eyes 1 941  
291 0 0 7 364 1041 683 0 0 0 
292 0 0 7 369 1044 686 0 0 2 4 copy 1 1042  10 query_size 1 857  
293 0 0 7 369 1044 686 0 0 1 6 param0 0 1045  
294 0 0 7 369 1044 686 0 0 2 4 name 1 849  10 query_size 1 857  
295 0 0 7 368 864 0 0 0 0 
296 0 0 7 376 864 0 0 0 0 
297 0 0 7 377 963 0 0 0 1 4 this 3 1047  
298 0 0 4 378 854 0 0 0 2 4 this 3 1047  4 pass 1 1048  
299 0 0 4 379 854 0 0 0 2 4 this 3 1047  4 pass 1 1048  
300 0 0 7 380 1048 729 0 0 2 4 this 3 1047  4 name 1 849  
301 0 0 4 381 854 0 0 0 1 4 this 3 1047  
302 0 0 4 382 854 0 0 0 1 4 this 3 1047  
303 0 0 4 383 854 0 0 0 2 4 this 3 1047  3 win 1 988  
304 0 0 4 384 854 0 0 0 1 4 this 3 1047  
305 0 0 7 372 981 0 0 0 1 4 this 3 1047  
306 0 0 6 374 982 0 0 0 1 4 this 3 1047  
307 0 0 7 393 1048 729 0 0 8 2 pp 1 1049  4 name 1 849  19 texture_output_bits 1 782  7 fbprops 1 1050  10 force_size 1 860  11 forced_size 1 1053  8 div_size 1 860  3 div 1 782  
308 0 0 7 393 1048 729 0 0 1 6 param0 0 1056  
309 0 0 7 392 864 0 0 0 0 
310 0 0 7 394 901 0 0 0 1 4 this 3 1056  
311 0 0 7 395 1058 0 0 0 1 4 this 3 1056  
312 0 0 7 396 901 0 0 0 1 4 this 3 1056  
313 0 0 6 397 860 0 0 0 2 4 this 3 1056  4 bits 1 782  
314 0 0 4 398 854 0 0 0 3 4 this 3 1048  8 div_size 1 860  3 div 1 782  
315 0 0 4 399 854 0 0 0 3 4 this 3 1048  10 force_size 1 860  11 forced_size 1 1053  
316 0 0 4 400 854 0 0 0 2 4 this 3 1048  7 fbprops 1 1050  
317 0 0 4 401 854 0 0 0 2 4 this 3 1048  4 bits 1 782  
318 0 0 7 402 1058 0 0 0 2 4 this 3 1048  4 size 1 1053  
319 0 0 7 403 963 0 0 0 2 4 this 3 1048  3 bit 1 782  
320 0 0 7 404 963 0 0 0 1 4 this 3 1048  
321 0 0 7 405 963 0 0 0 1 4 this 3 1048  
322 0 0 6 406 860 0 0 0 1 4 this 3 1048  
323 0 0 4 407 854 0 0 0 1 4 this 3 1048  
324 0 0 4 408 854 0 0 0 1 4 this 3 1048  
325 0 0 4 409 854 0 0 0 1 4 this 3 1048  
326 0 0 4 410 854 0 0 0 1 4 this 3 1048  
327 0 0 4 411 854 0 0 0 1 4 this 3 1048  
328 0 0 4 412 854 0 0 0 1 4 this 3 1048  
329 0 0 4 413 854 0 0 0 2 4 this 3 1048  6 output 1 988  
330 0 0 4 414 854 0 0 0 1 4 this 3 1048  
331 0 0 7 415 1059 0 0 0 0 
332 0 0 7 388 981 0 0 0 1 4 this 3 1048  
333 0 0 6 390 982 0 0 0 1 4 this 3 1048  
334 0 0 7 418 1060 733 0 0 3 2 pp 1 1049  19 output_texture_bits 1 782  7 auxbits 1 782  
335 0 0 7 418 1060 733 0 0 1 6 param0 0 1061  
336 0 0 4 419 854 0 0 0 2 4 this 3 1060  1 i 1 782  
337 0 0 4 420 854 0 0 0 2 4 this 3 1060  5 state 1 1063  
338 0 0 7 423 1049 753 0 0 1 6 output 1 988  
339 0 0 7 423 1049 753 0 0 1 6 param0 0 1066  
340 0 0 4 424 854 0 0 0 2 4 this 3 1049  6 camera 1 941  
341 0 0 4 425 854 0 0 0 2 4 this 3 1049  6 camera 1 941  
342 0 0 4 426 854 0 0 0 2 4 this 3 1049  6 effect 1 1047  
343 0 0 4 427 854 0 0 0 2 4 this 3 1049  6 effect 1 1047  
344 0 0 7 428 1047 700 0 0 2 4 this 3 1049  4 name 1 849  
345 0 0 7 429 963 0 0 0 1 4 this 3 1066  
346 0 0 7 430 963 0 0 0 1 4 this 3 1066  
347 0 0 7 431 1060 733 0 0 1 4 this 3 1066  
348 0 0 7 432 988 0 0 0 1 4 this 3 1066  
349 0 0 7 433 901 0 0 0 2 4 this 3 1066  1 n 1 782  
350 0 0 6 434 782 0 0 0 1 4 this 3 1049  
351 0 0 7 435 1069 0 0 0 1 4 this 3 1066  
352 0 0 6 436 860 0 0 0 1 4 this 3 1066  
353 0 0 4 437 854 0 0 0 2 4 this 3 1049  4 bits 1 782  
354 0 0 4 438 854 0 0 0 3 4 this 3 1049  1 n 1 782  6 region 1 1070  
355 0 0 4 439 854 0 0 0 2 4 this 3 1049  6 region 1 1070  
356 0 0 4 440 854 0 0 0 3 4 this 3 1049  1 n 1 782  6 region 1 1070  
357 0 0 4 441 854 0 0 0 1 4 this 3 1049  
358 0 0 7 445 1074 758 0 0 1 6 param0 0 1072  
359 0 0 7 445 1074 758 0 0 1 2 pp 1 1049  
360 0 0 7 444 864 0 0 0 0 
361 0 0 4 446 854 0 0 0 2 4 this 3 1074  6 output 1 1001  
362 0 0 6 447 857 0 0 56 /**
	 * Returns the calculated exposure adjustment.
	 */ 1 4 this 3 1072  
363 0 0 7 450 1075 761 0 0 1 2 pp 1 1049  
364 0 0 7 451 1074 758 0 0 1 4 this 3 1076  
365 0 0 7 455 1078 764 0 0 1 2 pp 1 1049  
366 0 0 7 454 864 0 0 0 0 
367 0 0 7 458 864 0 0 0 0 
368 0 0 7 459 1030 0 0 0 1 6 origin 1 927  
369 0 0 7 460 883 0 0 0 1 4 this 3 1079  
370 0 0 7 464 1081 771 0 0 1 2 pp 1 1049  
371 0 0 7 463 864 0 0 0 0 
372 0 0 6 467 782 0 0 0 0 
373 0 0 7 469 864 0 0 0 0 
374 0 0 7 470 866 0 0 0 1 13 bloom_enabled 1 860  
375 0 0 6 471 860 0 0 0 1 4 this 3 1082  
307
777 13 TextureStages 0 141313 13 TextureStages 13 TextureStages 0 0 0 1 386 387 0 10 376 377 378 379 380 381 382 383 384 385 0 0 0 0 0 752
/**
 * This simple interface maintains a single TextureStage object for each unique name.
 * It avoids the creation of duplicate TextureStages with the same name, which
 * reduces texture swapping and draw call overhead.
 *
 * If using our shader system, you should always use this interface to get TextureStages.
 * You are not required to change any properties on the returned TextureStage, as the shader
 * specification will know what to do with the TextureStage from the name.
 * 
 * For example, you do not need to call TextureStage::set_mode() or NodePath::set_tex_gen().
 * If you apply a texture to a node with the get_normalmap() stage, the shader specification
 * will know that the texture you supplied is to be treated as a normal map.
 */

778 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 388 409 0 20 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 0 0 1 0 779 0 0 0 0 0

779 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

780 17 BSPMaterialAttrib 0 141313 17 BSPMaterialAttrib 17 BSPMaterialAttrib 0 0 0 0 418 1 1084 8 410 411 412 413 414 415 416 417 0 0 1 0 781 0 0 0 0 0

781 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

782 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

783 12 BoundingKDOP 0 141313 12 BoundingKDOP 12 BoundingKDOP 0 0 0 0 424 0 5 419 420 421 422 423 0 0 1 0 784 0 0 0 0 243
/**
 * This defines a bounding convex volume.  It may represent any enclosing convex volume,
 * including simple boxes.  However, if all you want is an axis-aligned
 * bounding box, you may be better off with the simpler BoundingBox class.
 */

784 20 FiniteBoundingVolume 0 2048 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 168
/**
 * A special kind of GeometricBoundingVolume that is known to be finite.  It
 * is possible to query this kind of volume for its minimum and maximum
 * extents.
 */

785 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 426 434 0 8 425 427 428 429 430 431 432 433 0 0 1 0 779 0 0 0 0 0

786 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 436 439 0 3 435 437 438 0 0 1 0 785 0 0 0 0 0

787 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 441 445 0 4 440 442 443 444 0 0 1 0 785 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

788 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 447 450 0 3 446 448 449 0 0 1 0 785 0 0 0 0 0

789 10 PackResult 0 141313 10 PackResult 10 PackResult 0 0 0 1 454 455 0 3 451 452 453 0 0 0 0 0 0

790 15 TextureLocation 0 141313 15 TextureLocation 15 TextureLocation 0 0 0 1 461 462 0 5 456 457 458 459 460 0 0 0 0 0 0

791 13 TexturePacker 0 141313 13 TexturePacker 13 TexturePacker 0 0 0 0 472 0 9 463 464 465 466 467 468 469 470 471 0 0 0 0 0 0

792 8 RayTrace 0 141313 8 RayTrace 8 RayTrace 0 0 0 1 475 476 0 2 473 474 0 0 0 0 0 0

793 17 RayTraceHitResult 0 141313 17 RayTraceHitResult 17 RayTraceHitResult 0 0 0 1 477 484 0 6 478 479 480 481 482 483 0 0 0 0 0 0

794 13 RayTraceScene 0 75777 13 RayTraceScene 13 RayTraceScene 0 0 0 1 485 0 0 8 486 487 488 489 490 491 492 493 0 0 1 0 795 0 0 0 1 796 0

795 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

796 0 0 794624 15 RayTraceScene:: 0 794 0 0 0 0 0 0 0 0 0 3 17 BUILD_QUALITY_LOW 32 RayTraceScene::BUILD_QUALITY_LOW 0
0 20 BUILD_QUALITY_MEDIUM 35 RayTraceScene::BUILD_QUALITY_MEDIUM 0
1 18 BUILD_QUALITY_HIGH 33 RayTraceScene::BUILD_QUALITY_HIGH 0
2 0 0

797 16 RayTraceGeometry 0 75777 16 RayTraceGeometry 16 RayTraceGeometry 0 0 0 0 0 0 6 494 495 496 497 498 499 0 0 1 0 798 0 0 0 0 0

798 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

799 20 RayTraceTriangleMesh 0 141313 20 RayTraceTriangleMesh 20 RayTraceTriangleMesh 0 0 0 1 501 504 0 3 500 502 503 0 0 1 0 797 0 0 0 0 0

800 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 513 1 1085 8 505 506 507 508 509 510 511 512 0 0 1 0 781 0 0 0 1 801 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

801 0 0 794624 15 BSPFaceAttrib:: 0 800 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

802 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 514 585 0 70 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 0 0 0 0 1 803 58
/**
 * Loads and handles the operations of PBSP files.
 */

803 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 802 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

804 18 ShaderPermutations 0 141313 18 ShaderPermutations 18 ShaderPermutations 0 0 0 1 586 592 0 5 587 588 589 590 591 0 0 1 0 795 0 0 0 0 97
/**
 * Represents a list of #defines and variable inputs to a shader that is being generated.
 */

805 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 0 599 0 2 597 598 0 0 2 3 795 593 594 3 806 595 596 0 0 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

806 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

807 17 PlanarReflections 0 141313 17 PlanarReflections 17 PlanarReflections 0 0 0 1 601 602 0 1 600 0 0 1 0 795 0 0 0 0 0

808 13 ShaderQuality 0 532481 13 ShaderQuality 13 ShaderQuality 0 0 0 0 0 0 0 0 0 0 3 17 SHADERQUALITY_LOW 17 SHADERQUALITY_LOW 0
0 20 SHADERQUALITY_MEDIUM 20 SHADERQUALITY_MEDIUM 0
1 18 SHADERQUALITY_HIGH 18 SHADERQUALITY_HIGH 0
2 0 0

809 10 CameraBits 0 532481 10 CameraBits 10 CameraBits 0 0 0 0 0 0 0 0 0 0 6 11 CAMERA_MAIN 11 CAMERA_MAIN 0
1 13 CAMERA_SHADOW 13 CAMERA_SHADOW 0
2 17 CAMERA_REFLECTION 17 CAMERA_REFLECTION 0
4 17 CAMERA_REFRACTION 17 CAMERA_REFRACTION 0
8 16 CAMERA_VIEWMODEL 16 CAMERA_VIEWMODEL 0
16 14 CAMERA_COMPUTE 14 CAMERA_COMPUTE 0
32 0 0

810 7 AuxBits 0 532481 7 AuxBits 7 AuxBits 0 0 0 0 0 0 0 0 0 0 2 14 AUXBITS_NORMAL 14 AUXBITS_NORMAL 0
1 12 AUXBITS_ARME 12 AUXBITS_ARME 0
2 0 0

811 18 BSPShaderGenerator 0 141313 18 BSPShaderGenerator 18 BSPShaderGenerator 0 0 0 1 603 628 0 24 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 0 0 1 0 812 0 0 0 0 0

812 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

813 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 630 631 0 1 629 0 0 1 0 814 0 0 0 0 0

814 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

815 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 633 634 0 1 632 0 0 1 0 798 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

816 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 636 637 0 1 635 0 0 1 0 798 0 0 0 0 0

817 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 639 640 0 1 638 0 0 1 0 818 0 0 0 0 0

818 9 ModelRoot 0 2048 9 ModelRoot 9 ModelRoot 0 0 0 0 0 0 0 0 0 0 0 0 314
/**
 * A node of this type is created automatically at the root of each model file
 * that is loaded.  It may eventually contain some information about the
 * contents of the model; at the moment, it contains no special information,
 * but can be used as a flag to indicate the presence of a loaded model file.
 */

819 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 642 643 0 1 641 0 0 1 0 820 0 0 0 0 0

820 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

821 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 644 645 0 0 0 0 1 0 805 0 0 0 0 0

822 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 646 647 0 0 0 0 1 0 805 0 0 0 0 0

823 16 UnlitGenericSpec 0 141313 16 UnlitGenericSpec 16 UnlitGenericSpec 0 0 0 1 648 649 0 0 0 0 1 0 805 0 0 0 0 160
/**
 * Shader that only supports a basetexture, no fancy lighting effects or anything.
 * Could be used for UI elements, emissive materials, particles, etc.
 */

824 14 UnlitNoMatSpec 0 141313 14 UnlitNoMatSpec 14 UnlitNoMatSpec 0 0 0 1 650 651 0 0 0 0 1 0 805 0 0 0 0 0

825 13 CSMRenderSpec 0 141313 13 CSMRenderSpec 13 CSMRenderSpec 0 0 0 1 652 653 0 0 0 0 1 0 805 0 0 0 0 0

826 10 SkyBoxSpec 0 141313 10 SkyBoxSpec 10 SkyBoxSpec 0 0 0 1 654 655 0 0 0 0 1 0 805 0 0 0 0 0

827 18 AmbientBoostEffect 0 141313 18 AmbientBoostEffect 18 AmbientBoostEffect 0 0 0 0 658 0 2 656 657 0 0 1 0 828 0 0 0 0 0

828 12 RenderEffect 0 2048 12 RenderEffect 12 RenderEffect 0 0 0 0 0 0 0 0 0 0 0 0 901
/**
 * This is the base class for a number of special render effects that may be
 * set on scene graph nodes to change the way they render.  This includes
 * BillboardEffect, DecalEffect, etc.
 *
 * RenderEffect represents render properties that must be applied as soon as
 * they are encountered in the scene graph, rather than propagating down to
 * the leaves.  This is different from RenderAttrib, which represents
 * properties like color and texture that don't do anything until they
 * propagate down to a GeomNode.
 *
 * You should not attempt to create or modify a RenderEffect directly;
 * instead, use the make() method of the appropriate kind of effect you want.
 * This will allocate and return a new RenderEffect of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderEffect
 * if you wish to change its properties; instead, create a new one.
 */

829 14 Audio3DManager 0 141313 14 Audio3DManager 14 Audio3DManager 0 0 0 1 659 677 0 17 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 0 0 0 0 0 0

830 6 CIOLib 0 141313 6 CIOLib 6 CIOLib 0 0 0 1 680 681 0 2 678 679 0 0 0 0 0 0

831 17 DecalModulateSpec 0 141313 17 DecalModulateSpec 17 DecalModulateSpec 0 0 0 1 682 683 0 0 0 0 1 0 823 0 0 0 0 90
/**
 * This is just an alias of UnlitGeneric that enables color blending on the decal.
 */

832 8 GlowNode 0 141313 8 GlowNode 8 GlowNode 0 0 0 1 685 686 0 1 684 0 0 1 0 833 0 0 0 0 207
/**
 * This is a specialization on GeomNode that uses a pixel occlusion query
 * to determine if the Geoms on the node should be rendered.
 *
 * This is useful for things like light glows or lens flares.
 */

833 8 GeomNode 0 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 0 0 0 0 0 208
/**
 * A node that holds Geom objects, renderable pieces of geometry.  This is the
 * primary kind of leaf node in the scene graph; almost all visible objects
 * will be contained in a GeomNode somewhere.
 */

834 17 PostProcessEffect 0 141313 17 PostProcessEffect 17 PostProcessEffect 0 0 0 0 700 0 9 691 692 693 694 695 696 697 698 699 0 0 2 3 795 687 688 3 806 689 690 0 0 0

835 15 PassTextureBits 0 532481 15 PassTextureBits 15 PassTextureBits 0 0 0 0 0 0 0 0 0 0 6 22 bits_PASSTEXTURE_COLOR 22 bits_PASSTEXTURE_COLOR 0
1 22 bits_PASSTEXTURE_DEPTH 22 bits_PASSTEXTURE_DEPTH 0
2 21 bits_PASSTEXTURE_AUX0 21 bits_PASSTEXTURE_AUX0 0
4 21 bits_PASSTEXTURE_AUX1 21 bits_PASSTEXTURE_AUX1 0
8 21 bits_PASSTEXTURE_AUX2 21 bits_PASSTEXTURE_AUX2 0
16 21 bits_PASSTEXTURE_AUX3 21 bits_PASSTEXTURE_AUX3 0
32 0 0

836 15 PostProcessPass 0 141313 15 PostProcessPass 15 PostProcessPass 0 0 0 1 706 729 0 23 705 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 0 0 2 3 795 701 702 3 806 703 704 0 0 0

837 20 PostProcessScenePass 0 141313 20 PostProcessScenePass 20 PostProcessScenePass 0 0 0 1 730 733 0 2 731 732 0 0 1 0 836 0 0 0 0 0

838 11 PostProcess 0 141313 11 PostProcess 11 PostProcess 0 0 0 1 734 753 0 18 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 0 0 0 0 0 0

839 7 HDRPass 0 141313 7 HDRPass 7 HDRPass 0 0 0 1 755 758 0 3 754 756 757 0 0 1 0 836 0 0 0 0 0

840 9 HDREffect 0 141313 9 HDREffect 9 HDREffect 0 0 0 1 759 761 0 1 760 0 0 1 0 834 0 0 0 0 0

841 11 BloomEffect 0 141313 11 BloomEffect 11 BloomEffect 0 0 0 1 763 764 0 1 762 0 0 1 0 834 0 0 0 0 0

842 20 LightingOriginEffect 0 141313 20 LightingOriginEffect 20 LightingOriginEffect 0 0 0 0 768 0 3 765 766 767 0 0 1 0 828 0 0 0 0 0

843 11 FXAA_Effect 0 141313 11 FXAA_Effect 11 FXAA_Effect 0 0 0 1 770 771 0 1 769 0 0 1 0 834 0 0 0 0 0

844 11 BloomAttrib 0 141313 11 BloomAttrib 11 BloomAttrib 0 0 0 0 776 1 1086 4 772 773 774 775 0 0 1 0 781 0 0 0 0 0

845 15 TextureStages * 0 8576 15 TextureStages * 15 TextureStages * 0 0 777 0 0 0 0 0 0 0 0 0 0

846 21 TextureStages const * 0 8576 21 TextureStages const * 21 TextureStages const * 0 0 847 0 0 0 0 0 0 0 0 0 0

847 19 TextureStages const 0 8832 19 TextureStages const 19 TextureStages const 0 0 777 0 0 0 0 0 0 0 0 0 0

848 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 336
/**
 * Defines the properties of a named stage of the multitexture pipeline.  The
 * TextureAttrib will associated a number of these stages with Texture
 * objects, and the GSG will render geometry by sorting all of the currently
 * active TextureStages in order and then issuing the appropriate rendering
 * calls to activate them.
 */

849 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

850 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 848 0 0 0 0 0 0 0 0 0 0

851 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 852 0 0 0 0 0 0 0 0 0 0

852 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 778 0 0 0 0 0 0 0 0 0 0

853 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 778 0 0 0 0 0 0 0 0 0 0

854 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

855 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 856 0 0 0 0 0 0 0 0 0 0

856 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

857 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

858 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

859 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 858 0 0 0 0 0 0 0 0 0 0

860 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

861 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 862 0 0 0 0 0 0 0 0 0 0

862 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 858 0 0 0 0 0 0 0 0 0 0

863 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

864 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 863 0 0 0 0 0 0 0 0 0 0

865 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 781 0 0 0 0 0 0 0 0 0 0

866 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 865 0 0 0 0 0 0 0 0 0 0

867 25 BSPMaterialAttrib const * 0 8576 25 BSPMaterialAttrib const * 25 BSPMaterialAttrib const * 0 0 868 0 0 0 0 0 0 0 0 0 0

868 23 BSPMaterialAttrib const 0 8832 23 BSPMaterialAttrib const 23 BSPMaterialAttrib const 0 0 780 0 0 0 0 0 0 0 0 0 0

869 20 BoundingKDOP const * 0 8576 20 BoundingKDOP const * 20 BoundingKDOP const * 0 0 870 0 0 0 0 0 0 0 0 0 0

870 18 BoundingKDOP const 0 8832 18 BoundingKDOP const 18 BoundingKDOP const 0 0 783 0 0 0 0 0 0 0 0 0 0

871 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 872 0 0 0 0 0 0 0 0 0 0

872 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

873 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 871 0 0 0 0 0 0 0 0 0 0

874 6 LPlane 0 2105344 6 LPlane 6 LPlane 0 0 875 0 0 0 0 0 0 0 0 0 0

875 7 LPlanef 0 2048 7 LPlanef 7 LPlanef 0 0 0 0 0 0 0 0 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

876 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 874 0 0 0 0 0 0 0 0 0 0

877 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 785 0 0 0 0 0 0 0 0 0 0

878 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 879 0 0 0 0 0 0 0 0 0 0

879 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 785 0 0 0 0 0 0 0 0 0 0

880 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 802 0 0 0 0 0 0 0 0 0 0

881 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 882 0 0 0 0 0 0 0 0 0 0

882 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

883 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 881 0 0 0 0 0 0 0 0 0 0

884 6 LColor 0 2105344 6 LColor 6 LColor 0 0 885 0 0 0 0 0 0 0 0 0 0

885 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 886 0 0 0 0 0 0 0 0 0 0

886 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

887 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 884 0 0 0 0 0 0 0 0 0 0

888 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 786 0 0 0 0 0 0 0 0 0 0

889 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 890 0 0 0 0 0 0 0 0 0 0

890 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 786 0 0 0 0 0 0 0 0 0 0

891 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 787 0 0 0 0 0 0 0 0 0 0

892 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 893 0 0 0 0 0 0 0 0 0 0

893 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 787 0 0 0 0 0 0 0 0 0 0

894 14 BoundingKDOP * 0 8576 14 BoundingKDOP * 14 BoundingKDOP * 0 0 783 0 0 0 0 0 0 0 0 0 0

895 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 896 0 0 0 0 0 0 0 0 0 0

896 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 871 0 0 0 0 0 0 0 0 0 0

897 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 788 0 0 0 0 0 0 0 0 0 0

898 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 899 0 0 0 0 0 0 0 0 0 0

899 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 788 0 0 0 0 0 0 0 0 0 0

900 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

901 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 900 0 0 0 0 0 0 0 0 0 0

902 18 PackResult const * 0 8576 18 PackResult const * 18 PackResult const * 0 0 903 0 0 0 0 0 0 0 0 0 0

903 16 PackResult const 0 8832 16 PackResult const 16 PackResult const 0 0 789 0 0 0 0 0 0 0 0 0 0

904 12 PackResult * 0 8576 12 PackResult * 12 PackResult * 0 0 789 0 0 0 0 0 0 0 0 0 0

905 23 TextureLocation const * 0 8576 23 TextureLocation const * 23 TextureLocation const * 0 0 906 0 0 0 0 0 0 0 0 0 0

906 21 TextureLocation const 0 8832 21 TextureLocation const 21 TextureLocation const 0 0 790 0 0 0 0 0 0 0 0 0 0

907 17 TextureLocation * 0 8576 17 TextureLocation * 17 TextureLocation * 0 0 790 0 0 0 0 0 0 0 0 0 0

908 15 TexturePacker * 0 8576 15 TexturePacker * 15 TexturePacker * 0 0 791 0 0 0 0 0 0 0 0 0 0

909 10 RayTrace * 0 8576 10 RayTrace * 10 RayTrace * 0 0 792 0 0 0 0 0 0 0 0 0 0

910 16 RayTrace const * 0 8576 16 RayTrace const * 16 RayTrace const * 0 0 911 0 0 0 0 0 0 0 0 0 0

911 14 RayTrace const 0 8832 14 RayTrace const 14 RayTrace const 0 0 792 0 0 0 0 0 0 0 0 0 0

912 19 RayTraceHitResult * 0 8576 19 RayTraceHitResult * 19 RayTraceHitResult * 0 0 793 0 0 0 0 0 0 0 0 0 0

913 25 RayTraceHitResult const * 0 8576 25 RayTraceHitResult const * 25 RayTraceHitResult const * 0 0 914 0 0 0 0 0 0 0 0 0 0

914 23 RayTraceHitResult const 0 8832 23 RayTraceHitResult const 23 RayTraceHitResult const 0 0 793 0 0 0 0 0 0 0 0 0 0

915 8 LVector2 0 2105344 8 LVector2 8 LVector2 0 0 916 0 0 0 0 0 0 0 0 0 0

916 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

917 10 LVector2 * 0 8576 10 LVector2 * 10 LVector2 * 0 0 915 0 0 0 0 0 0 0 0 0 0

918 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

919 15 RayTraceScene * 0 8576 15 RayTraceScene * 15 RayTraceScene * 0 0 794 0 0 0 0 0 0 0 0 0 0

920 21 RayTraceScene const * 0 8576 21 RayTraceScene const * 21 RayTraceScene const * 0 0 921 0 0 0 0 0 0 0 0 0 0

921 19 RayTraceScene const 0 8832 19 RayTraceScene const 19 RayTraceScene const 0 0 794 0 0 0 0 0 0 0 0 0 0

922 18 RayTraceGeometry * 0 8576 18 RayTraceGeometry * 18 RayTraceGeometry * 0 0 797 0 0 0 0 0 0 0 0 0 0

923 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 924 0 0 0 0 0 0 0 0 0 0

924 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 925 0 0 0 0 0 0 0 0 0 0

925 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 926 0 0 0 0 0 0 0 0 0 0

926 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

927 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 928 0 0 0 0 0 0 0 0 0 0

928 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 881 0 0 0 0 0 0 0 0 0 0

929 24 RayTraceGeometry const * 0 8576 24 RayTraceGeometry const * 24 RayTraceGeometry const * 0 0 930 0 0 0 0 0 0 0 0 0 0

930 22 RayTraceGeometry const 0 8832 22 RayTraceGeometry const 22 RayTraceGeometry const 0 0 797 0 0 0 0 0 0 0 0 0 0

931 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 925 0 0 0 0 0 0 0 0 0 0

932 22 RayTraceTriangleMesh * 0 8576 22 RayTraceTriangleMesh * 22 RayTraceTriangleMesh * 0 0 799 0 0 0 0 0 0 0 0 0 0

933 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 934 0 0 0 0 0 0 0 0 0 0

934 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 935 0 0 0 0 0 0 0 0 0 0

935 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

936 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 937 0 0 0 0 0 0 0 0 0 0

937 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 938 0 0 0 0 0 0 0 0 0 0

938 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

939 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 940 0 0 0 0 0 0 0 0 0 0

940 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 800 0 0 0 0 0 0 0 0 0 0

941 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 942 0 0 0 0 0 0 0 0 0 0

942 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 900 0 0 0 0 0 0 0 0 0 0

943 13 BulletWorld * 0 8576 13 BulletWorld * 13 BulletWorld * 0 0 944 0 0 0 0 0 0 0 0 0 0

944 11 BulletWorld 0 2048 11 BulletWorld 11 BulletWorld 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

945 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 946 0 0 0 0 0 0 0 0 0 0

946 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 802 0 0 0 0 0 0 0 0 0 0

947 21 BulletRigidBodyNode * 0 8576 21 BulletRigidBodyNode * 21 BulletRigidBodyNode * 0 0 948 0 0 0 0 0 0 0 0 0 0

948 19 BulletRigidBodyNode 0 2048 19 BulletRigidBodyNode 19 BulletRigidBodyNode 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

949 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 950 0 0 0 0 0 0 0 0 0 0

950 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 951 0 0 0 0 0 0 0 0 0 0

951 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

952 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 857 0 0 0 0 0 0 0 0 0 0

953 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 954 0 0 0 0 0 0 0 0 0 0

954 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

955 20 BSPShaderGenerator * 0 8576 20 BSPShaderGenerator * 20 BSPShaderGenerator * 0 0 811 0 0 0 0 0 0 0 0 0 0

956 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 957 0 0 0 0 0 0 0 0 0 0

957 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 958 0 0 0 0 0 0 0 0 0 0

958 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 959 0 0 0 0 0 0 0 0 0 0

959 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

960 15 LColorf const * 0 8576 15 LColorf const * 15 LColorf const * 0 0 961 0 0 0 0 0 0 0 0 0 0

961 13 LColorf const 0 8832 13 LColorf const 13 LColorf const 0 0 885 0 0 0 0 0 0 0 0 0 0

962 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

963 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 962 0 0 0 0 0 0 0 0 0 0

964 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 965 0 0 0 0 0 0 0 0 0 0

965 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 966 0 0 0 0 0 0 0 0 0 0

966 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

967 9 int const 0 8832 9 int const 9 int const 0 0 782 0 0 0 0 0 0 0 0 0 0

968 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 969 0 0 0 0 0 0 0 0 0 0

969 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 970 0 0 0 0 0 0 0 0 0 0

970 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

971 9 LTexCoord 0 2105344 9 LTexCoord 9 LTexCoord 0 0 972 0 0 0 0 0 0 0 0 0 0

972 10 LTexCoordf 0 2105344 10 LTexCoordf 10 LTexCoordf 0 0 959 0 0 0 0 0 0 0 0 0 0

973 11 LTexCoord * 0 8576 11 LTexCoord * 11 LTexCoord * 0 0 971 0 0 0 0 0 0 0 0 0 0

974 20 ShaderPermutations * 0 8576 20 ShaderPermutations * 20 ShaderPermutations * 0 0 804 0 0 0 0 0 0 0 0 0 0

975 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 976 0 0 0 0 0 0 0 0 0 0

976 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 977 0 0 0 0 0 0 0 0 0 0

977 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

978 26 ShaderPermutations const * 0 8576 26 ShaderPermutations const * 26 ShaderPermutations const * 0 0 979 0 0 0 0 0 0 0 0 0 0

979 24 ShaderPermutations const 0 8832 24 ShaderPermutations const 24 ShaderPermutations const 0 0 804 0 0 0 0 0 0 0 0 0 0

980 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 805 0 0 0 0 0 0 0 0 0 0

981 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 795 0 0 0 0 0 0 0 0 0 0

982 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 806 0 0 0 0 0 0 0 0 0 0

983 25 PlanarReflections const * 0 8576 25 PlanarReflections const * 25 PlanarReflections const * 0 0 984 0 0 0 0 0 0 0 0 0 0

984 23 PlanarReflections const 0 8832 23 PlanarReflections const 23 PlanarReflections const 0 0 807 0 0 0 0 0 0 0 0 0 0

985 19 PlanarReflections * 0 8576 19 PlanarReflections * 19 PlanarReflections * 0 0 807 0 0 0 0 0 0 0 0 0 0

986 26 BSPShaderGenerator const * 0 8576 26 BSPShaderGenerator const * 26 BSPShaderGenerator const * 0 0 987 0 0 0 0 0 0 0 0 0 0

987 24 BSPShaderGenerator const 0 8832 24 BSPShaderGenerator const 24 BSPShaderGenerator const 0 0 811 0 0 0 0 0 0 0 0 0 0

988 16 GraphicsOutput * 0 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 989 0 0 0 0 0 0 0 0 0 0

989 14 GraphicsOutput 0 2048 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 0 0 0 0 0 0 0 0 727
/**
 * This is a base class for the various different classes that represent the
 * result of a frame of rendering.  The most common kind of GraphicsOutput is
 * a GraphicsWindow, which is a real-time window on the desktop, but another
 * example is GraphicsBuffer, which is an offscreen buffer.
 *
 * The actual rendering, and anything associated with the graphics context
 * itself, is managed by the associated GraphicsStateGuardian (which might
 * output to multiple GraphicsOutput objects).
 *
 * GraphicsOutputs are not actually writable to bam files, of course, but they
 * may be passed as event parameters, so they inherit from
 * TypedWritableReferenceCount instead of TypedReferenceCount for that
 * convenience.
 */

990 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 991 0 0 0 0 0 0 0 0 0 0

991 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

992 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 993 0 0 0 0 0 0 0 0 0 0

993 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

994 5 Fog * 0 8576 5 Fog * 5 Fog * 0 0 995 0 0 0 0 0 0 0 0 0 0

995 3 Fog 0 2048 3 Fog 3 Fog 0 0 0 0 0 0 0 0 0 0 0 0 782
/**
 * Specifies how atmospheric fog effects are applied to geometry.  The Fog
 * object is now a PandaNode, which means it can be used similarly to a Light
 * to define effects relative to a particular coordinate system within the
 * scene graph.
 *
 * In exponential mode, the fog effects are always camera-relative, and it
 * does not matter where the Fog node is parented.  However, in linear mode,
 * the onset and opaque distances are defined as offsets along the local
 * forward axis (e.g.  the Y axis).  This allows the fog effect to be
 * localized to a particular region in space, rather than always camera-
 * relative.  If the fog object is not parented to any node, it is used to
 * generate traditonal camera-relative fog, as if it were parented to the
 * camera.
 */

996 14 PTA_LVecBase4f 0 2105344 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 997 0 0 0 0 0 0 0 0 0 0

997 37 PointerToArray< UnalignedLVecBase4f > 0 2048 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 0 0 0 0 0 0 0 0 0 0

998 16 PTA_LVecBase4f * 0 8576 16 PTA_LVecBase4f * 16 PTA_LVecBase4f * 0 0 996 0 0 0 0 0 0 0 0 0 0

999 9 PTA_float 0 2105344 9 PTA_float 9 PTA_float 0 0 1000 0 0 0 0 0 0 0 0 0 0

1000 23 PointerToArray< float > 0 2048 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

1001 11 PTA_float * 0 8576 11 PTA_float * 11 PTA_float * 0 0 999 0 0 0 0 0 0 0 0 0 0

1002 12 Shader const 0 8832 12 Shader const 12 Shader const 0 0 1003 0 0 0 0 0 0 0 0 0 0

1003 6 Shader 0 2048 6 Shader 6 Shader 0 0 0 0 0 0 0 0 0 0 0 0 8
/**

 */

1004 18 ShaderSpec const * 0 8576 18 ShaderSpec const * 18 ShaderSpec const * 0 0 1005 0 0 0 0 0 0 0 0 0 0

1005 16 ShaderSpec const 0 8832 16 ShaderSpec const 16 ShaderSpec const 0 0 805 0 0 0 0 0 0 0 0 0 0

1006 14 Shader const * 0 8576 14 Shader const * 14 Shader const * 0 0 1002 0 0 0 0 0 0 0 0 0 0

1007 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 1008 0 0 0 0 0 0 0 0 0 0

1008 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 813 0 0 0 0 0 0 0 0 0 0

1009 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 813 0 0 0 0 0 0 0 0 0 0

1010 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 814 0 0 0 0 0 0 0 0 0 0

1011 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 1012 0 0 0 0 0 0 0 0 0 0

1012 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 815 0 0 0 0 0 0 0 0 0 0

1013 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 815 0 0 0 0 0 0 0 0 0 0

1014 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 1015 0 0 0 0 0 0 0 0 0 0

1015 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 816 0 0 0 0 0 0 0 0 0 0

1016 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 816 0 0 0 0 0 0 0 0 0 0

1017 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 1018 0 0 0 0 0 0 0 0 0 0

1018 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 817 0 0 0 0 0 0 0 0 0 0

1019 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 817 0 0 0 0 0 0 0 0 0 0

1020 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 1021 0 0 0 0 0 0 0 0 0 0

1021 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 819 0 0 0 0 0 0 0 0 0 0

1022 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 819 0 0 0 0 0 0 0 0 0 0

1023 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 821 0 0 0 0 0 0 0 0 0 0

1024 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 822 0 0 0 0 0 0 0 0 0 0

1025 18 UnlitGenericSpec * 0 8576 18 UnlitGenericSpec * 18 UnlitGenericSpec * 0 0 823 0 0 0 0 0 0 0 0 0 0

1026 16 UnlitNoMatSpec * 0 8576 16 UnlitNoMatSpec * 16 UnlitNoMatSpec * 0 0 824 0 0 0 0 0 0 0 0 0 0

1027 15 CSMRenderSpec * 0 8576 15 CSMRenderSpec * 15 CSMRenderSpec * 0 0 825 0 0 0 0 0 0 0 0 0 0

1028 12 SkyBoxSpec * 0 8576 12 SkyBoxSpec * 12 SkyBoxSpec * 0 0 826 0 0 0 0 0 0 0 0 0 0

1029 18 RenderEffect const 0 8832 18 RenderEffect const 18 RenderEffect const 0 0 828 0 0 0 0 0 0 0 0 0 0

1030 20 RenderEffect const * 0 8576 20 RenderEffect const * 20 RenderEffect const * 0 0 1029 0 0 0 0 0 0 0 0 0 0

1031 22 Audio3DManager const * 0 8576 22 Audio3DManager const * 22 Audio3DManager const * 0 0 1032 0 0 0 0 0 0 0 0 0 0

1032 20 Audio3DManager const 0 8832 20 Audio3DManager const 20 Audio3DManager const 0 0 829 0 0 0 0 0 0 0 0 0 0

1033 16 Audio3DManager * 0 8576 16 Audio3DManager * 16 Audio3DManager * 0 0 829 0 0 0 0 0 0 0 0 0 0

1034 14 AudioManager * 0 8576 14 AudioManager * 14 AudioManager * 0 0 1035 0 0 0 0 0 0 0 0 0 0

1035 12 AudioManager 0 2048 12 AudioManager 12 AudioManager 0 0 0 0 0 0 0 0 0 0 0 0 0

1036 12 AudioSound * 0 8576 12 AudioSound * 12 AudioSound * 0 0 1037 0 0 0 0 0 0 0 0 0 0

1037 10 AudioSound 0 2048 10 AudioSound 10 AudioSound 0 0 0 0 0 0 0 0 0 0 0 0 0

1038 8 CIOLib * 0 8576 8 CIOLib * 8 CIOLib * 0 0 830 0 0 0 0 0 0 0 0 0 0

1039 14 CIOLib const * 0 8576 14 CIOLib const * 14 CIOLib const * 0 0 1040 0 0 0 0 0 0 0 0 0 0

1040 12 CIOLib const 0 8832 12 CIOLib const 12 CIOLib const 0 0 830 0 0 0 0 0 0 0 0 0 0

1041 19 DecalModulateSpec * 0 8576 19 DecalModulateSpec * 19 DecalModulateSpec * 0 0 831 0 0 0 0 0 0 0 0 0 0

1042 16 GeomNode const * 0 8576 16 GeomNode const * 16 GeomNode const * 0 0 1043 0 0 0 0 0 0 0 0 0 0

1043 14 GeomNode const 0 8832 14 GeomNode const 14 GeomNode const 0 0 833 0 0 0 0 0 0 0 0 0 0

1044 10 GlowNode * 0 8576 10 GlowNode * 10 GlowNode * 0 0 832 0 0 0 0 0 0 0 0 0 0

1045 16 GlowNode const * 0 8576 16 GlowNode const * 16 GlowNode const * 0 0 1046 0 0 0 0 0 0 0 0 0 0

1046 14 GlowNode const 0 8832 14 GlowNode const 14 GlowNode const 0 0 832 0 0 0 0 0 0 0 0 0 0

1047 19 PostProcessEffect * 0 8576 19 PostProcessEffect * 19 PostProcessEffect * 0 0 834 0 0 0 0 0 0 0 0 0 0

1048 17 PostProcessPass * 0 8576 17 PostProcessPass * 17 PostProcessPass * 0 0 836 0 0 0 0 0 0 0 0 0 0

1049 13 PostProcess * 0 8576 13 PostProcess * 13 PostProcess * 0 0 838 0 0 0 0 0 0 0 0 0 0

1050 29 FrameBufferProperties const * 0 8576 29 FrameBufferProperties const * 29 FrameBufferProperties const * 0 0 1051 0 0 0 0 0 0 0 0 0 0

1051 27 FrameBufferProperties const 0 8832 27 FrameBufferProperties const 27 FrameBufferProperties const 0 0 1052 0 0 0 0 0 0 0 0 0 0

1052 21 FrameBufferProperties 0 2048 21 FrameBufferProperties 21 FrameBufferProperties 0 0 0 0 0 0 0 0 0 0 0 0 132
/**
 * A container for the various kinds of properties we might ask to have on a
 * graphics frameBuffer before we create a GSG.
 */

1053 17 LVector2i const * 0 8576 17 LVector2i const * 17 LVector2i const * 0 0 1054 0 0 0 0 0 0 0 0 0 0

1054 15 LVector2i const 0 8832 15 LVector2i const 15 LVector2i const 0 0 1055 0 0 0 0 0 0 0 0 0 0

1055 9 LVector2i 0 2048 9 LVector2i 9 LVector2i 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

1056 23 PostProcessPass const * 0 8576 23 PostProcessPass const * 23 PostProcessPass const * 0 0 1057 0 0 0 0 0 0 0 0 0 0

1057 21 PostProcessPass const 0 8832 21 PostProcessPass const 21 PostProcessPass const 0 0 836 0 0 0 0 0 0 0 0 0 0

1058 11 LVector2i * 0 8576 11 LVector2i * 11 LVector2i * 0 0 1055 0 0 0 0 0 0 0 0 0 0

1059 23 FrameBufferProperties * 0 8576 23 FrameBufferProperties * 23 FrameBufferProperties * 0 0 1052 0 0 0 0 0 0 0 0 0 0

1060 22 PostProcessScenePass * 0 8576 22 PostProcessScenePass * 22 PostProcessScenePass * 0 0 837 0 0 0 0 0 0 0 0 0 0

1061 28 PostProcessScenePass const * 0 8576 28 PostProcessScenePass const * 28 PostProcessScenePass const * 0 0 1062 0 0 0 0 0 0 0 0 0 0

1062 26 PostProcessScenePass const 0 8832 26 PostProcessScenePass const 26 PostProcessScenePass const 0 0 837 0 0 0 0 0 0 0 0 0 0

1063 19 RenderState const * 0 8576 19 RenderState const * 19 RenderState const * 0 0 1064 0 0 0 0 0 0 0 0 0 0

1064 17 RenderState const 0 8832 17 RenderState const 17 RenderState const 0 0 1065 0 0 0 0 0 0 0 0 0 0

1065 11 RenderState 0 2048 11 RenderState 11 RenderState 0 0 0 0 0 0 0 0 0 0 0 0 340
/**
 * This represents a unique collection of RenderAttrib objects that correspond
 * to a particular renderable state.
 *
 * You should not attempt to create or modify a RenderState object directly.
 * Instead, call one of the make() functions to create one for you.  And
 * instead of modifying a RenderState object, create a new one.
 */

1066 19 PostProcess const * 0 8576 19 PostProcess const * 19 PostProcess const * 0 0 1067 0 0 0 0 0 0 0 0 0 0

1067 17 PostProcess const 0 8832 17 PostProcess const 17 PostProcess const 0 0 838 0 0 0 0 0 0 0 0 0 0

1068 13 DisplayRegion 0 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 399
/**
 * A rectangular subregion within a window for rendering into.  Typically,
 * there is one DisplayRegion that covers the whole window, but you may also
 * create smaller DisplayRegions for having different regions within the
 * window that represent different scenes.  You may also stack up
 * DisplayRegions like panes of glass, usually for layering 2-d interfaces on
 * top of a 3-d scene.
 */

1069 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 1068 0 0 0 0 0 0 0 0 0 0

1070 16 DrawableRegion * 0 8576 16 DrawableRegion * 16 DrawableRegion * 0 0 1071 0 0 0 0 0 0 0 0 0 0

1071 14 DrawableRegion 0 2048 14 DrawableRegion 14 DrawableRegion 0 0 0 0 0 0 0 0 0 0 0 0 389
/**
 * This is a base class for GraphicsWindow (actually, GraphicsOutput) and
 * DisplayRegion, both of which are conceptually rectangular regions into
 * which drawing commands may be issued.  Sometimes you want to deal with a
 * single display region, and sometimes you want to deal with the whole window
 * at once, particularly for issuing clear commands and capturing screenshots.
 */

1072 15 HDRPass const * 0 8576 15 HDRPass const * 15 HDRPass const * 0 0 1073 0 0 0 0 0 0 0 0 0 0

1073 13 HDRPass const 0 8832 13 HDRPass const 13 HDRPass const 0 0 839 0 0 0 0 0 0 0 0 0 0

1074 9 HDRPass * 0 8576 9 HDRPass * 9 HDRPass * 0 0 839 0 0 0 0 0 0 0 0 0 0

1075 11 HDREffect * 0 8576 11 HDREffect * 11 HDREffect * 0 0 840 0 0 0 0 0 0 0 0 0 0

1076 17 HDREffect const * 0 8576 17 HDREffect const * 17 HDREffect const * 0 0 1077 0 0 0 0 0 0 0 0 0 0

1077 15 HDREffect const 0 8832 15 HDREffect const 15 HDREffect const 0 0 840 0 0 0 0 0 0 0 0 0 0

1078 13 BloomEffect * 0 8576 13 BloomEffect * 13 BloomEffect * 0 0 841 0 0 0 0 0 0 0 0 0 0

1079 28 LightingOriginEffect const * 0 8576 28 LightingOriginEffect const * 28 LightingOriginEffect const * 0 0 1080 0 0 0 0 0 0 0 0 0 0

1080 26 LightingOriginEffect const 0 8832 26 LightingOriginEffect const 26 LightingOriginEffect const 0 0 842 0 0 0 0 0 0 0 0 0 0

1081 13 FXAA_Effect * 0 8576 13 FXAA_Effect * 13 FXAA_Effect * 0 0 843 0 0 0 0 0 0 0 0 0 0

1082 19 BloomAttrib const * 0 8576 19 BloomAttrib const * 19 BloomAttrib const * 0 0 1083 0 0 0 0 0 0 0 0 0 0

1083 17 BloomAttrib const 0 8832 17 BloomAttrib const 17 BloomAttrib const 0 0 844 0 0 0 0 0 0 0 0 0 0

0
3
1084 10 class_slot 0 2 782 416 0 0 0 0 0 0 0 29 BSPMaterialAttrib::class_slot 0

1085 10 class_slot 0 2 782 511 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

1086 10 class_slot 0 2 782 772 0 0 0 0 0 0 0 23 BloomAttrib::class_slot 0

0
