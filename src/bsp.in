1565540063
3 3
3 bsp 4 t5GT 3 bsp 
371
350 3 get 0 4 721 18 TextureStages::get 0 2 3 4 0
159
static TextureStage *TextureStages::get(std::string const &name);
static TextureStage *TextureStages::get(std::string const &name, std::string const &uv_name);

351 15 get_basetexture 0 4 721 30 TextureStages::get_basetexture 0 1 5 0
58
static TextureStage *TextureStages::get_basetexture(void);

352 12 get_lightmap 0 4 721 27 TextureStages::get_lightmap 0 1 6 0
55
static TextureStage *TextureStages::get_lightmap(void);

353 19 get_bumped_lightmap 0 4 721 34 TextureStages::get_bumped_lightmap 0 1 7 0
62
static TextureStage *TextureStages::get_bumped_lightmap(void);

354 13 get_spheremap 0 4 721 28 TextureStages::get_spheremap 0 1 8 0
56
static TextureStage *TextureStages::get_spheremap(void);

355 11 get_cubemap 0 4 721 26 TextureStages::get_cubemap 0 1 9 0
54
static TextureStage *TextureStages::get_cubemap(void);

356 13 get_normalmap 0 4 721 28 TextureStages::get_normalmap 0 1 10 0
56
static TextureStage *TextureStages::get_normalmap(void);

357 13 get_heightmap 0 4 721 28 TextureStages::get_heightmap 0 1 11 0
56
static TextureStage *TextureStages::get_heightmap(void);

358 12 get_glossmap 0 4 721 27 TextureStages::get_glossmap 0 1 12 0
55
static TextureStage *TextureStages::get_glossmap(void);

359 11 get_glowmap 0 4 721 26 TextureStages::get_glowmap 0 1 13 0
54
static TextureStage *TextureStages::get_glowmap(void);

360 13 TextureStages 0 4 721 28 TextureStages::TextureStages 0 2 1 2 0
122
inline TextureStages::TextureStages(void) = default;
inline TextureStages::TextureStages(TextureStages const &) = default;

361 14 ~TextureStages 0 4 721 29 TextureStages::~TextureStages 0 0 0
36
TextureStages::~TextureStages(void);

362 11 BSPMaterial 0 4 722 24 BSPMaterial::BSPMaterial 0 2 14 15 0
137
inline explicit BSPMaterial::BSPMaterial(std::string const &name = "material");
inline BSPMaterial::BSPMaterial(BSPMaterial const &copy);

363 10 operator = 0 4 722 23 BSPMaterial::operator = 0 1 16 0
61
inline void BSPMaterial::operator =(BSPMaterial const &copy);

364 12 set_keyvalue 0 4 722 25 BSPMaterial::set_keyvalue 0 1 17 0
88
inline void BSPMaterial::set_keyvalue(std::string const &key, std::string const &value);

365 12 get_keyvalue 0 4 722 25 BSPMaterial::get_keyvalue 0 1 18 0
75
inline std::string BSPMaterial::get_keyvalue(std::string const &key) const;

366 17 get_num_keyvalues 0 4 722 30 BSPMaterial::get_num_keyvalues 0 1 19 0
62
inline std::size_t BSPMaterial::get_num_keyvalues(void) const;

367 7 get_key 0 4 722 20 BSPMaterial::get_key 0 1 20 0
68
inline std::string const &BSPMaterial::get_key(std::size_t i) const;

368 9 get_value 0 4 722 22 BSPMaterial::get_value 0 1 21 0
70
inline std::string const &BSPMaterial::get_value(std::size_t i) const;

369 16 get_keyvalue_int 0 4 722 29 BSPMaterial::get_keyvalue_int 0 1 22 0
71
inline int BSPMaterial::get_keyvalue_int(std::string const &key) const;

370 18 get_keyvalue_float 0 4 722 31 BSPMaterial::get_keyvalue_float 0 1 23 0
75
inline float BSPMaterial::get_keyvalue_float(std::string const &key) const;

371 10 set_shader 0 4 722 23 BSPMaterial::set_shader 0 1 24 0
68
inline void BSPMaterial::set_shader(std::string const &shader_name);

372 10 get_shader 0 4 722 23 BSPMaterial::get_shader 0 1 25 0
55
inline std::string BSPMaterial::get_shader(void) const;

373 8 get_file 0 4 722 21 BSPMaterial::get_file 0 1 26 0
50
inline Filename BSPMaterial::get_file(void) const;

374 12 has_keyvalue 0 4 722 25 BSPMaterial::has_keyvalue 0 1 27 0
68
inline bool BSPMaterial::has_keyvalue(std::string const &key) const;

375 15 has_env_cubemap 0 4 722 28 BSPMaterial::has_env_cubemap 0 1 28 0
53
inline bool BSPMaterial::has_env_cubemap(void) const;

376 16 has_transparency 0 4 722 29 BSPMaterial::has_transparency 0 1 29 0
54
inline bool BSPMaterial::has_transparency(void) const;

377 16 get_surface_prop 0 4 722 29 BSPMaterial::get_surface_prop 0 1 30 0
61
inline std::string BSPMaterial::get_surface_prop(void) const;

378 12 get_contents 0 4 722 25 BSPMaterial::get_contents 0 1 31 0
57
inline std::string BSPMaterial::get_contents(void) const;

379 14 is_lightmapped 0 4 722 27 BSPMaterial::is_lightmapped 0 1 32 0
52
inline bool BSPMaterial::is_lightmapped(void) const;

380 11 has_bumpmap 0 4 722 24 BSPMaterial::has_bumpmap 0 1 33 0
49
inline bool BSPMaterial::has_bumpmap(void) const;

381 13 get_from_file 0 4 722 26 BSPMaterial::get_from_file 0 1 34 0
75
static BSPMaterial const *BSPMaterial::get_from_file(Filename const &file);

382 14 get_class_type 0 4 722 27 BSPMaterial::get_class_type 0 1 35 0
52
static TypeHandle BSPMaterial::get_class_type(void);

383 12 ~BSPMaterial 0 4 722 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

384 4 make 0 4 724 23 BSPMaterialAttrib::make 0 1 36 0
86
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make(BSPMaterial const *mat);

385 20 make_override_shader 0 4 724 39 BSPMaterialAttrib::make_override_shader 0 1 37 0
102
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_override_shader(BSPMaterial const *mat);

386 12 make_default 0 4 724 31 BSPMaterialAttrib::make_default 0 1 38 0
76
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_default(void);

387 19 get_override_shader 0 4 724 38 BSPMaterialAttrib::get_override_shader 0 1 39 0
70
inline std::string BSPMaterialAttrib::get_override_shader(void) const;

388 19 has_override_shader 0 4 724 38 BSPMaterialAttrib::has_override_shader 0 1 40 0
63
inline bool BSPMaterialAttrib::has_override_shader(void) const;

389 12 get_material 0 4 724 31 BSPMaterialAttrib::get_material 0 1 41 0
70
inline BSPMaterial const *BSPMaterialAttrib::get_material(void) const;

390 14 get_class_slot 0 4 724 33 BSPMaterialAttrib::get_class_slot 0 1 42 0
51
static int BSPMaterialAttrib::get_class_slot(void);

391 14 get_class_type 0 4 724 33 BSPMaterialAttrib::get_class_type 0 1 43 0
58
static TypeHandle BSPMaterialAttrib::get_class_type(void);

392 18 ~BSPMaterialAttrib 0 4 724 37 BSPMaterialAttrib::~BSPMaterialAttrib 0 0 0
44
BSPMaterialAttrib::~BSPMaterialAttrib(void);

393 14 get_num_points 0 4 727 28 BoundingKDOP::get_num_points 0 1 44 0
60
inline std::size_t BoundingKDOP::get_num_points(void) const;

394 9 get_point 0 4 727 23 BoundingKDOP::get_point 0 1 45 0
52
inline LPoint3 BoundingKDOP::get_point(int n) const;

395 14 get_num_planes 0 4 727 28 BoundingKDOP::get_num_planes 0 1 46 0
60
inline std::size_t BoundingKDOP::get_num_planes(void) const;

396 9 get_plane 0 4 727 23 BoundingKDOP::get_plane 0 1 47 0
51
inline LPlane BoundingKDOP::get_plane(int n) const;

397 14 get_class_type 0 4 727 28 BoundingKDOP::get_class_type 0 1 48 0
53
static TypeHandle BoundingKDOP::get_class_type(void);

398 13 ~BoundingKDOP 0 4 727 27 BoundingKDOP::~BoundingKDOP 0 0 0
34
BoundingKDOP::~BoundingKDOP(void);

399 14 get_class_type 0 4 729 27 CBaseEntity::get_class_type 0 1 51 0
52
static TypeHandle CBaseEntity::get_class_type(void);

400 11 CBaseEntity 0 4 729 24 CBaseEntity::CBaseEntity 0 2 49 50 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

401 10 get_loader 0 4 729 23 CBaseEntity::get_loader 0 1 52 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

402 16 get_entity_value 0 4 729 29 CBaseEntity::get_entity_value 0 1 53 0
79
inline std::string CBaseEntity::get_entity_value(std::string const &key) const;

403 23 get_entity_value_vector 0 4 729 36 CBaseEntity::get_entity_value_vector 0 1 54 0
76
LVector3 CBaseEntity::get_entity_value_vector(std::string const &key) const;

404 22 get_entity_value_color 0 4 729 35 CBaseEntity::get_entity_value_color 0 1 55 0
92
LColor CBaseEntity::get_entity_value_color(std::string const &key, bool scale = true) const;

405 13 get_classname 0 4 729 26 CBaseEntity::get_classname 0 1 56 0
58
inline std::string CBaseEntity::get_classname(void) const;

406 14 get_targetname 0 4 729 27 CBaseEntity::get_targetname 0 1 57 0
59
inline std::string CBaseEntity::get_targetname(void) const;

407 14 get_bsp_entnum 0 4 729 27 CBaseEntity::get_bsp_entnum 0 1 58 0
51
inline int CBaseEntity::get_bsp_entnum(void) const;

408 12 ~CBaseEntity 0 4 729 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

409 14 get_class_type 0 4 730 28 CPointEntity::get_class_type 0 1 61 0
53
static TypeHandle CPointEntity::get_class_type(void);

410 12 CPointEntity 0 4 730 26 CPointEntity::CPointEntity 0 2 59 60 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

411 10 get_origin 0 4 730 24 CPointEntity::get_origin 0 1 62 0
45
LPoint3 CPointEntity::get_origin(void) const;

412 10 get_angles 0 4 730 24 CPointEntity::get_angles 0 1 63 0
46
LVector3 CPointEntity::get_angles(void) const;

413 13 ~CPointEntity 0 4 730 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

414 14 get_class_type 0 4 731 29 CBoundsEntity::get_class_type 0 1 66 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

415 13 CBoundsEntity 0 4 731 28 CBoundsEntity::CBoundsEntity 0 2 64 65 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

416 10 get_bounds 0 4 731 25 CBoundsEntity::get_bounds 0 1 67 0
52
BoundingKDOP *CBoundsEntity::get_bounds(void) const;

417 9 is_inside 0 4 731 24 CBoundsEntity::is_inside 0 1 68 0
56
bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

418 13 fillin_bounds 0 4 731 28 CBoundsEntity::fillin_bounds 0 1 69 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

419 14 ~CBoundsEntity 0 4 731 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

420 14 get_class_type 0 4 732 28 CBrushEntity::get_class_type 0 1 72 0
53
static TypeHandle CBrushEntity::get_class_type(void);

421 12 CBrushEntity 0 4 732 26 CBrushEntity::CBrushEntity 0 2 70 71 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

422 12 get_model_np 0 4 732 26 CBrushEntity::get_model_np 0 1 73 0
48
NodePath CBrushEntity::get_model_np(void) const;

423 16 get_model_bounds 0 4 732 30 CBrushEntity::get_model_bounds 0 1 74 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

424 13 ~CBrushEntity 0 4 732 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

425 9 get_width 0 4 733 21 PackResult::get_width 0 1 76 0
45
inline int PackResult::get_width(void) const;

426 10 get_height 0 4 733 22 PackResult::get_height 0 1 77 0
46
inline int PackResult::get_height(void) const;

427 15 get_unused_area 0 4 733 27 PackResult::get_unused_area 0 1 78 0
51
inline int PackResult::get_unused_area(void) const;

428 10 PackResult 0 4 733 22 PackResult::PackResult 0 1 75 0
60
inline PackResult::PackResult(PackResult const &) = default;

429 11 ~PackResult 0 4 733 23 PackResult::~PackResult 0 0 0
30
PackResult::~PackResult(void);

430 5 get_x 0 4 734 22 TextureLocation::get_x 0 1 80 0
46
inline int TextureLocation::get_x(void) const;

431 5 get_y 0 4 734 22 TextureLocation::get_y 0 1 81 0
46
inline int TextureLocation::get_y(void) const;

432 9 get_width 0 4 734 26 TextureLocation::get_width 0 1 82 0
50
inline int TextureLocation::get_width(void) const;

433 10 get_height 0 4 734 27 TextureLocation::get_height 0 1 83 0
51
inline int TextureLocation::get_height(void) const;

434 11 get_rotated 0 4 734 28 TextureLocation::get_rotated 0 1 84 0
53
inline bool TextureLocation::get_rotated(void) const;

435 15 TextureLocation 0 4 734 32 TextureLocation::TextureLocation 0 1 79 0
75
inline TextureLocation::TextureLocation(TextureLocation const &) = default;

436 16 ~TextureLocation 0 4 734 33 TextureLocation::~TextureLocation 0 0 0
40
TextureLocation::~TextureLocation(void);

437 15 getTextureCount 0 6 735 30 TexturePacker::getTextureCount 0 1 85 0
53
virtual int TexturePacker::getTextureCount(void) = 0;

438 15 setTextureCount 0 6 735 30 TexturePacker::setTextureCount 0 1 86 35
// number of textures to consider..
60
virtual void TexturePacker::setTextureCount(int tcount) = 0;

439 10 addTexture 0 6 735 25 TexturePacker::addTexture 0 1 87 21
// add textures 0 - n
61
virtual void TexturePacker::addTexture(int wid, int hit) = 0;

440 15 wouldTextureFit 0 6 735 30 TexturePacker::wouldTextureFit 0 1 88 0
135
virtual bool TexturePacker::wouldTextureFit(int wid, int hit, bool forcePowerOfTwo, bool onePixelBorder, int max_wid, int max_hit) = 0;

441 13 addNewTexture 0 6 735 28 TexturePacker::addNewTexture 0 1 89 0
64
virtual void TexturePacker::addNewTexture(int wid, int hit) = 0;

442 12 packTextures 0 6 735 27 TexturePacker::packTextures 0 1 90 74
// pack the textures, the return code is the amount of wasted/unused area.
94
virtual PackResult TexturePacker::packTextures(bool forcePowerOfTwo, bool onePixelBorder) = 0;

443 18 getTextureLocation 0 6 735 33 TexturePacker::getTextureLocation 0 1 91 58
// returns true if the texture has been rotated 90 degrees
73
virtual TextureLocation TexturePacker::getTextureLocation(int index) = 0;

444 19 createTexturePacker 0 4 735 34 TexturePacker::createTexturePacker 0 1 92 0
63
static TexturePacker *TexturePacker::createTexturePacker(void);

445 20 releaseTexturePacker 0 4 735 35 TexturePacker::releaseTexturePacker 0 1 93 0
67
static void TexturePacker::releaseTexturePacker(TexturePacker *tp);

446 14 ~TexturePacker 0 4 735 29 TexturePacker::~TexturePacker 0 0 0
36
TexturePacker::~TexturePacker(void);

447 10 initialize 0 4 736 20 RayTrace::initialize 0 1 96 0
39
static void RayTrace::initialize(void);

448 8 destruct 0 4 736 18 RayTrace::destruct 0 1 97 0
37
static void RayTrace::destruct(void);

449 8 RayTrace 0 4 736 18 RayTrace::RayTrace 0 2 94 95 0
97
inline RayTrace::RayTrace(void) = default;
inline RayTrace::RayTrace(RayTrace const &) = default;

450 9 ~RayTrace 0 4 736 19 RayTrace::~RayTrace 0 0 0
26
RayTrace::~RayTrace(void);

451 17 RayTraceHitResult 0 4 737 36 RayTraceHitResult::RayTraceHitResult 0 2 98 99 0
132
inline RayTraceHitResult::RayTraceHitResult(void);
inline RayTraceHitResult::RayTraceHitResult(RayTraceHitResult const &) = default;

452 7 has_hit 0 4 737 26 RayTraceHitResult::has_hit 0 1 100 0
51
inline bool RayTraceHitResult::has_hit(void) const;

453 14 get_hit_normal 0 4 737 33 RayTraceHitResult::get_hit_normal 0 1 101 0
62
inline LVector3 RayTraceHitResult::get_hit_normal(void) const;

454 6 get_uv 0 4 737 25 RayTraceHitResult::get_uv 0 1 102 0
54
inline LVector2 RayTraceHitResult::get_uv(void) const;

455 11 get_prim_id 0 4 737 30 RayTraceHitResult::get_prim_id 0 1 103 0
63
inline unsigned int RayTraceHitResult::get_prim_id(void) const;

456 11 get_geom_id 0 4 737 30 RayTraceHitResult::get_geom_id 0 1 104 0
63
inline unsigned int RayTraceHitResult::get_geom_id(void) const;

457 16 get_hit_fraction 0 4 737 35 RayTraceHitResult::get_hit_fraction 0 1 105 0
61
inline float RayTraceHitResult::get_hit_fraction(void) const;

458 18 ~RayTraceHitResult 0 4 737 37 RayTraceHitResult::~RayTraceHitResult 0 0 0
44
RayTraceHitResult::~RayTraceHitResult(void);

459 13 RayTraceScene 0 4 738 28 RayTraceScene::RayTraceScene 0 2 106 107 0
105
RayTraceScene::RayTraceScene(void);
inline RayTraceScene::RayTraceScene(RayTraceScene const &) = default;

460 12 add_geometry 0 4 738 27 RayTraceScene::add_geometry 0 1 108 0
57
void RayTraceScene::add_geometry(RayTraceGeometry *geom);

461 15 remove_geometry 0 4 738 30 RayTraceScene::remove_geometry 0 1 109 0
60
void RayTraceScene::remove_geometry(RayTraceGeometry *geom);

462 10 remove_all 0 4 738 25 RayTraceScene::remove_all 0 1 110 0
37
void RayTraceScene::remove_all(void);

463 10 trace_line 0 4 738 25 RayTraceScene::trace_line 0 1 111 0
116
inline RayTraceHitResult RayTraceScene::trace_line(LPoint3 const &start, LPoint3 const &end, BitMask32 const &mask);

464 9 trace_ray 0 4 738 24 RayTraceScene::trace_ray 0 1 112 0
132
RayTraceHitResult RayTraceScene::trace_ray(LPoint3 const &origin, LVector3 const &direction, float distance, BitMask32 const &mask);

465 17 set_build_quality 0 4 738 32 RayTraceScene::set_build_quality 0 1 113 0
51
void RayTraceScene::set_build_quality(int quality);

466 6 update 0 4 738 21 RayTraceScene::update 0 1 114 0
33
void RayTraceScene::update(void);

467 12 get_geometry 0 4 738 27 RayTraceScene::get_geometry 0 1 115 0
75
inline RayTraceGeometry *RayTraceScene::get_geometry(unsigned int geom_id);

468 14 get_class_type 0 4 741 32 RayTraceGeometry::get_class_type 0 1 116 0
57
static TypeHandle RayTraceGeometry::get_class_type(void);

469 8 set_mask 0 4 741 26 RayTraceGeometry::set_mask 0 2 117 118 0
114
inline void RayTraceGeometry::set_mask(BitMask32 const &mask);
void RayTraceGeometry::set_mask(unsigned int mask);

470 8 get_mask 0 4 741 26 RayTraceGeometry::get_mask 0 1 119 0
56
inline BitMask32 RayTraceGeometry::get_mask(void) const;

471 11 get_geom_id 0 4 741 29 RayTraceGeometry::get_geom_id 0 1 120 0
62
inline unsigned int RayTraceGeometry::get_geom_id(void) const;

472 17 set_build_quality 0 4 741 35 RayTraceGeometry::set_build_quality 0 1 121 0
54
void RayTraceGeometry::set_build_quality(int quality);

473 5 build 0 6 741 23 RayTraceGeometry::build 0 1 122 0
47
virtual void RayTraceGeometry::build(void) = 0;

474 14 get_class_type 0 4 743 36 RayTraceTriangleMesh::get_class_type 0 1 124 0
61
static TypeHandle RayTraceTriangleMesh::get_class_type(void);

475 20 RayTraceTriangleMesh 0 4 743 42 RayTraceTriangleMesh::RayTraceTriangleMesh 0 1 123 0
73
RayTraceTriangleMesh::RayTraceTriangleMesh(std::string const &name = "");

476 12 add_triangle 0 4 743 34 RayTraceTriangleMesh::add_triangle 0 1 125 0
97
void RayTraceTriangleMesh::add_triangle(LPoint3 const &p1, LPoint3 const &p2, LPoint3 const &p3);

477 23 add_triangles_from_geom 0 4 743 45 RayTraceTriangleMesh::add_triangles_from_geom 0 1 126 0
105
void RayTraceTriangleMesh::add_triangles_from_geom(Geom const *geom, TransformState const *ts = nullptr);

478 21 ~RayTraceTriangleMesh 0 4 743 43 RayTraceTriangleMesh::~RayTraceTriangleMesh 0 0 0
50
RayTraceTriangleMesh::~RayTraceTriangleMesh(void);

479 4 make 0 4 744 19 BSPFaceAttrib::make 0 1 127 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

480 12 make_default 0 4 744 27 BSPFaceAttrib::make_default 0 1 128 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

481 15 make_ignore_pvs 0 4 744 30 BSPFaceAttrib::make_ignore_pvs 0 1 129 0
75
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_ignore_pvs(void);

482 12 get_material 0 4 744 27 BSPFaceAttrib::get_material 0 1 130 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

483 13 get_face_type 0 4 744 28 BSPFaceAttrib::get_face_type 0 1 131 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

484 14 get_ignore_pvs 0 4 744 29 BSPFaceAttrib::get_ignore_pvs 0 1 132 0
54
inline bool BSPFaceAttrib::get_ignore_pvs(void) const;

485 14 get_class_slot 0 4 744 29 BSPFaceAttrib::get_class_slot 0 1 133 0
47
static int BSPFaceAttrib::get_class_slot(void);

486 14 get_class_type 0 4 744 29 BSPFaceAttrib::get_class_type 0 1 134 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

487 14 ~BSPFaceAttrib 0 4 744 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

488 9 BSPLoader 0 4 746 20 BSPLoader::BSPLoader 0 1 135 0
27
BSPLoader::BSPLoader(void);

489 18 add_dynamic_entity 0 4 746 29 BSPLoader::add_dynamic_entity 0 1 136 0
52
void BSPLoader::add_dynamic_entity(PyObject *pyent);

490 21 remove_dynamic_entity 0 4 746 32 BSPLoader::remove_dynamic_entity 0 1 137 0
55
void BSPLoader::remove_dynamic_entity(PyObject *pyent);

491 21 mark_entity_preserved 0 4 746 32 BSPLoader::mark_entity_preserved 0 1 138 0
68
void BSPLoader::mark_entity_preserved(int n, bool preserved = true);

492 16 get_num_entities 0 4 746 27 BSPLoader::get_num_entities 0 1 139 0
51
inline int BSPLoader::get_num_entities(void) const;

493 10 get_entity 0 4 746 21 BSPLoader::get_entity 0 1 140 0
45
PyObject *BSPLoader::get_entity(int n) const;

494 23 set_transition_landmark 0 4 746 34 BSPLoader::set_transition_landmark 0 1 141 0
120
inline void BSPLoader::set_transition_landmark(std::string const &name, LVector3 const &origin, LVector3 const &angles);

495 25 clear_transition_landmark 0 4 746 36 BSPLoader::clear_transition_landmark 0 1 142 0
55
inline void BSPLoader::clear_transition_landmark(void);

496 4 read 0 4 746 15 BSPLoader::read 0 1 143 0
71
bool BSPLoader::read(Filename const &file, bool is_transition = false);

497 16 do_optimizations 0 4 746 27 BSPLoader::do_optimizations 0 1 144 0
39
void BSPLoader::do_optimizations(void);

498 9 set_gamma 0 4 746 20 BSPLoader::set_gamma 0 1 145 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

499 9 get_gamma 0 4 746 20 BSPLoader::get_gamma 0 1 146 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

500 7 set_win 0 4 746 18 BSPLoader::set_win 0 1 147 0
45
void BSPLoader::set_win(GraphicsWindow *win);

501 10 set_camera 0 4 746 21 BSPLoader::set_camera 0 1 148 0
51
void BSPLoader::set_camera(NodePath const &camera);

502 10 set_render 0 4 746 21 BSPLoader::set_render 0 1 149 0
51
void BSPLoader::set_render(NodePath const &render);

503 20 set_shader_generator 0 4 746 31 BSPLoader::set_shader_generator 0 1 150 0
64
void BSPLoader::set_shader_generator(BSPShaderGenerator *shgen);

504 19 set_want_visibility 0 4 746 30 BSPLoader::set_want_visibility 0 1 151 0
47
void BSPLoader::set_want_visibility(bool flag);

505 18 set_want_lightmaps 0 4 746 29 BSPLoader::set_want_lightmaps 0 1 152 0
46
void BSPLoader::set_want_lightmaps(bool flag);

506 16 set_physics_type 0 4 746 27 BSPLoader::set_physics_type 0 1 153 0
43
void BSPLoader::set_physics_type(int type);

507 19 set_visualize_leafs 0 4 746 30 BSPLoader::set_visualize_leafs 0 1 154 0
47
void BSPLoader::set_visualize_leafs(bool flag);

508 18 set_materials_file 0 4 746 29 BSPLoader::set_materials_file 0 1 155 0
57
void BSPLoader::set_materials_file(Filename const &file);

509 13 set_wireframe 0 4 746 24 BSPLoader::set_wireframe 0 1 156 0
41
void BSPLoader::set_wireframe(bool flag);

510 13 get_wireframe 0 4 746 24 BSPLoader::get_wireframe 0 1 157 0
49
inline bool BSPLoader::get_wireframe(void) const;

511 10 get_camera 0 4 746 21 BSPLoader::get_camera 0 1 158 0
50
inline NodePath BSPLoader::get_camera(void) const;

512 11 trace_decal 0 4 746 22 BSPLoader::trace_decal 0 1 159 0
195
inline void BSPLoader::trace_decal(std::string const &decal_material, LPoint2 const &decal_scale, float rotate, LPoint3 const &start, LPoint3 const &end, LColorf const &decal_color = LColorf(1));

513 27 get_closest_cubemap_texture 0 4 746 38 BSPLoader::get_closest_cubemap_texture 0 1 160 0
68
Texture *BSPLoader::get_closest_cubemap_texture(LPoint3 const &pos);

514 14 build_cubemaps 0 4 746 25 BSPLoader::build_cubemaps 0 1 161 0
37
void BSPLoader::build_cubemaps(void);

515 16 set_want_shadows 0 4 746 27 BSPLoader::set_want_shadows 0 1 162 0
44
void BSPLoader::set_want_shadows(bool flag);

516 14 set_shadow_dir 0 4 746 25 BSPLoader::set_shadow_dir 0 1 163 0
52
void BSPLoader::set_shadow_dir(LVector3 const &dir);

517 16 extract_modelnum 0 4 746 27 BSPLoader::extract_modelnum 0 1 164 0
44
int BSPLoader::extract_modelnum(int entnum);

518 16 get_model_bounds 0 4 746 27 BSPLoader::get_model_bounds 0 1 165 0
77
void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

519 28 set_server_entity_dispatcher 0 4 746 39 BSPLoader::set_server_entity_dispatcher 0 1 166 0
67
void BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

520 27 link_server_entity_to_class 0 4 746 38 BSPLoader::link_server_entity_to_class 0 1 167 0
89
void BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

521 6 set_ai 0 4 746 17 BSPLoader::set_ai 0 1 168 0
32
void BSPLoader::set_ai(bool ai);

522 5 is_ai 0 4 746 16 BSPLoader::is_ai 0 1 169 0
41
inline bool BSPLoader::is_ai(void) const;

523 10 trace_line 0 4 746 21 BSPLoader::trace_line 0 1 170 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

524 9 clip_line 0 4 746 20 BSPLoader::clip_line 0 1 171 0
71
LPoint3 BSPLoader::clip_line(LPoint3 const &start, LPoint3 const &end);

525 20 link_entity_to_class 0 4 746 31 BSPLoader::link_entity_to_class 0 1 172 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

526 28 get_py_entity_by_target_name 0 4 746 39 BSPLoader::get_py_entity_by_target_name 0 1 173 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

527 17 find_all_entities 0 4 746 28 BSPLoader::find_all_entities 0 1 174 0
69
PyObject *BSPLoader::find_all_entities(std::string const &classname);

528 20 get_entity_keyvalues 0 4 746 31 BSPLoader::get_entity_keyvalues 0 1 175 0
71
void BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

529 18 link_cent_to_pyent 0 4 746 29 BSPLoader::link_cent_to_pyent 0 1 176 0
63
void BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

530 16 remove_py_entity 0 4 746 27 BSPLoader::remove_py_entity 0 1 177 0
48
void BSPLoader::remove_py_entity(PyObject *ent);

531 9 get_model 0 4 746 20 BSPLoader::get_model 0 1 178 0
50
NodePath BSPLoader::get_model(int modelnum) const;

532 12 get_c_entity 0 4 746 23 BSPLoader::get_c_entity 0 1 179 0
61
CBaseEntity *BSPLoader::get_c_entity(int const entnum) const;

533 9 find_leaf 0 4 746 20 BSPLoader::find_leaf 0 2 180 181 0
116
inline int BSPLoader::find_leaf(NodePath const &np);
int BSPLoader::find_leaf(LPoint3 const &pos, int headnode = 0);

534 9 find_node 0 4 746 20 BSPLoader::find_node 0 1 182 0
45
int BSPLoader::find_node(LPoint3 const &pos);

535 18 is_cluster_visible 0 4 746 29 BSPLoader::is_cluster_visible 0 1 183 0
72
bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

536 15 pvs_bounds_test 0 4 746 26 BSPLoader::pvs_bounds_test 0 1 184 0
109
bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds, unsigned int required_leaf_flags = 0);

537 15 make_net_bounds 0 4 746 26 BSPLoader::make_net_bounds 0 1 185 0
147
ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

538 16 has_active_level 0 4 746 27 BSPLoader::has_active_level 0 1 186 0
52
inline bool BSPLoader::has_active_level(void) const;

539 14 has_visibility 0 4 746 25 BSPLoader::has_visibility 0 1 187 0
50
inline bool BSPLoader::has_visibility(void) const;

540 7 cleanup 0 4 746 18 BSPLoader::cleanup 0 1 188 0
52
void BSPLoader::cleanup(bool is_transition = false);

541 10 get_result 0 4 746 21 BSPLoader::get_result 0 1 189 0
50
inline NodePath BSPLoader::get_result(void) const;

542 16 set_current_leaf 0 4 746 27 BSPLoader::set_current_leaf 0 1 190 0
50
inline void BSPLoader::set_current_leaf(int leaf);

543 16 get_current_leaf 0 4 746 27 BSPLoader::get_current_leaf 0 1 191 0
51
inline int BSPLoader::get_current_leaf(void) const;

544 16 get_num_visleafs 0 4 746 27 BSPLoader::get_num_visleafs 0 1 192 0
51
inline int BSPLoader::get_num_visleafs(void) const;

545 15 get_leaf_center 0 4 746 26 BSPLoader::get_leaf_center 0 1 193 0
58
inline LPoint3 BSPLoader::get_leaf_center(int leaf) const;

546 15 get_lightcoords 0 4 746 26 BSPLoader::get_lightcoords 0 1 194 0
73
LTexCoord BSPLoader::get_lightcoords(int facenum, LVector3 const &point);

547 6 update 0 4 746 17 BSPLoader::update 0 1 195 0
29
void BSPLoader::update(void);

548 14 get_global_ptr 0 4 746 25 BSPLoader::get_global_ptr 0 1 196 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

549 10 ~BSPLoader 0 4 746 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

550 18 ShaderPermutations 0 4 748 38 ShaderPermutations::ShaderPermutations 0 1 197 0
52
inline ShaderPermutations::ShaderPermutations(void);

551 15 add_permutation 0 4 748 35 ShaderPermutations::add_permutation 0 1 198 0
104
inline void ShaderPermutations::add_permutation(std::string const &key, std::string const &value = "1");

552 8 complete 0 4 748 28 ShaderPermutations::complete 0 1 199 0
47
inline void ShaderPermutations::complete(void);

553 9 add_input 0 4 748 29 ShaderPermutations::add_input 0 1 200 0
66
inline void ShaderPermutations::add_input(ShaderInput const &inp);

554 8 add_flag 0 4 748 28 ShaderPermutations::add_flag 0 1 201 0
51
inline void ShaderPermutations::add_flag(int flag);

555 8 get_hash 0 4 748 28 ShaderPermutations::get_hash 0 1 202 0
60
inline std::size_t ShaderPermutations::get_hash(void) const;

556 19 ~ShaderPermutations 0 4 748 39 ShaderPermutations::~ShaderPermutations 0 0 0
46
ShaderPermutations::~ShaderPermutations(void);

557 24 upcast_to_ReferenceCount 0 12 749 36 ShaderSpec::upcast_to_ReferenceCount 0 1 205 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

558 22 downcast_to_ShaderSpec 0 12 739 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

559 17 upcast_to_Namable 0 12 749 29 ShaderSpec::upcast_to_Namable 0 1 206 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

560 22 downcast_to_ShaderSpec 0 12 750 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

561 17 read_shader_files 0 4 749 29 ShaderSpec::read_shader_files 0 1 203 0
117
void ShaderSpec::read_shader_files(Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file);

562 14 get_class_type 0 4 749 26 ShaderSpec::get_class_type 0 1 204 0
51
static TypeHandle ShaderSpec::get_class_type(void);

563 11 ~ShaderSpec 0 4 749 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

564 18 BSPShaderGenerator 0 4 754 38 BSPShaderGenerator::BSPShaderGenerator 0 2 207 208 0
200
BSPShaderGenerator::BSPShaderGenerator(GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline BSPShaderGenerator::BSPShaderGenerator(BSPShaderGenerator const &) = default;

565 13 set_sun_light 0 4 754 33 BSPShaderGenerator::set_sun_light 0 1 209 0
59
void BSPShaderGenerator::set_sun_light(NodePath const &np);

566 12 start_update 0 4 754 32 BSPShaderGenerator::start_update 0 1 210 0
44
void BSPShaderGenerator::start_update(void);

567 10 add_shader 0 4 754 30 BSPShaderGenerator::add_shader 0 1 211 0
66
void BSPShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

568 14 get_sun_vector 0 4 754 34 BSPShaderGenerator::get_sun_vector 0 1 212 0
63
inline LVector3 BSPShaderGenerator::get_sun_vector(void) const;

569 19 has_shadow_sunlight 0 4 754 39 BSPShaderGenerator::has_shadow_sunlight 0 1 213 0
64
inline bool BSPShaderGenerator::has_shadow_sunlight(void) const;

570 22 get_pssm_array_texture 0 4 754 42 BSPShaderGenerator::get_pssm_array_texture 0 1 214 0
71
inline Texture *BSPShaderGenerator::get_pssm_array_texture(void) const;

571 12 get_pssm_rig 0 4 754 32 BSPShaderGenerator::get_pssm_rig 0 1 215 0
67
inline PSSMCameraRig *BSPShaderGenerator::get_pssm_rig(void) const;

572 18 set_shader_quality 0 4 754 38 BSPShaderGenerator::set_shader_quality 0 1 216 0
57
void BSPShaderGenerator::set_shader_quality(int quality);

573 18 get_shader_quality 0 4 754 38 BSPShaderGenerator::get_shader_quality 0 1 217 0
62
inline int BSPShaderGenerator::get_shader_quality(void) const;

574 7 set_fog 0 4 754 27 BSPShaderGenerator::set_fog 0 1 218 0
50
inline void BSPShaderGenerator::set_fog(Fog *fog);

575 9 clear_fog 0 4 754 29 BSPShaderGenerator::clear_fog 0 1 219 0
48
inline void BSPShaderGenerator::clear_fog(void);

576 7 get_fog 0 4 754 27 BSPShaderGenerator::get_fog 0 1 220 0
52
inline Fog *BSPShaderGenerator::get_fog(void) const;

577 12 get_fog_data 0 4 754 32 BSPShaderGenerator::get_fog_data 0 1 221 0
67
inline PTA_LVecBase4f BSPShaderGenerator::get_fog_data(void) const;

578 22 set_exposure_adustment 0 4 754 42 BSPShaderGenerator::set_exposure_adustment 0 1 222 0
71
inline void BSPShaderGenerator::set_exposure_adustment(float exposure);

579 23 get_exposure_adjustment 0 4 754 43 BSPShaderGenerator::get_exposure_adjustment 0 1 223 0
73
inline PTA_float BSPShaderGenerator::get_exposure_adjustment(void) const;

580 20 set_identity_cubemap 0 4 754 40 BSPShaderGenerator::set_identity_cubemap 0 1 224 0
67
static void BSPShaderGenerator::set_identity_cubemap(Texture *tex);

581 20 get_identity_cubemap 0 4 754 40 BSPShaderGenerator::get_identity_cubemap 0 1 225 0
63
static Texture *BSPShaderGenerator::get_identity_cubemap(void);

582 11 make_shader 0 4 754 31 BSPShaderGenerator::make_shader 0 1 226 0
121
static ConstPointerTo< Shader > BSPShaderGenerator::make_shader(ShaderSpec const *spec, ShaderPermutations const *perms);

583 14 get_class_type 0 4 754 34 BSPShaderGenerator::get_class_type 0 1 227 0
59
static TypeHandle BSPShaderGenerator::get_class_type(void);

584 19 ~BSPShaderGenerator 0 4 754 39 BSPShaderGenerator::~BSPShaderGenerator 0 0 0
46
BSPShaderGenerator::~BSPShaderGenerator(void);

585 14 get_class_type 0 4 756 32 BSPCullTraverser::get_class_type 0 1 230 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

586 16 BSPCullTraverser 0 4 756 34 BSPCullTraverser::BSPCullTraverser 0 2 228 229 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

587 17 ~BSPCullTraverser 0 4 756 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

588 14 get_class_type 0 4 758 25 BSPRender::get_class_type 0 1 233 0
50
static TypeHandle BSPRender::get_class_type(void);

589 9 BSPRender 0 4 758 20 BSPRender::BSPRender 0 2 231 232 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

590 10 ~BSPRender 0 4 758 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

591 14 get_class_type 0 4 759 23 BSPRoot::get_class_type 0 1 236 0
48
static TypeHandle BSPRoot::get_class_type(void);

592 7 BSPRoot 0 4 759 16 BSPRoot::BSPRoot 0 2 234 235 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

593 8 ~BSPRoot 0 4 759 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

594 14 get_class_type 0 4 760 23 BSPProp::get_class_type 0 1 239 0
48
static TypeHandle BSPProp::get_class_type(void);

595 7 BSPProp 0 4 760 16 BSPProp::BSPProp 0 2 237 238 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

596 8 ~BSPProp 0 4 760 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

597 14 get_class_type 0 4 762 24 BSPModel::get_class_type 0 1 242 0
49
static TypeHandle BSPModel::get_class_type(void);

598 8 BSPModel 0 4 762 18 BSPModel::BSPModel 0 2 240 241 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

599 9 ~BSPModel 0 4 762 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

600 20 VertexLitGenericSpec 0 4 764 42 VertexLitGenericSpec::VertexLitGenericSpec 0 1 243 0
49
VertexLitGenericSpec::VertexLitGenericSpec(void);

601 21 ~VertexLitGenericSpec 0 4 764 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

602 22 LightmappedGenericSpec 0 4 765 46 LightmappedGenericSpec::LightmappedGenericSpec 0 1 244 0
53
LightmappedGenericSpec::LightmappedGenericSpec(void);

603 23 ~LightmappedGenericSpec 0 4 765 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

604 16 UnlitGenericSpec 0 4 766 34 UnlitGenericSpec::UnlitGenericSpec 0 1 245 0
41
UnlitGenericSpec::UnlitGenericSpec(void);

605 17 ~UnlitGenericSpec 0 4 766 35 UnlitGenericSpec::~UnlitGenericSpec 0 0 0
42
UnlitGenericSpec::~UnlitGenericSpec(void);

606 14 UnlitNoMatSpec 0 4 767 30 UnlitNoMatSpec::UnlitNoMatSpec 0 1 246 0
37
UnlitNoMatSpec::UnlitNoMatSpec(void);

607 15 ~UnlitNoMatSpec 0 4 767 31 UnlitNoMatSpec::~UnlitNoMatSpec 0 0 0
38
UnlitNoMatSpec::~UnlitNoMatSpec(void);

608 13 CSMRenderSpec 0 4 768 28 CSMRenderSpec::CSMRenderSpec 0 1 247 0
35
CSMRenderSpec::CSMRenderSpec(void);

609 14 ~CSMRenderSpec 0 4 768 29 CSMRenderSpec::~CSMRenderSpec 0 0 0
36
CSMRenderSpec::~CSMRenderSpec(void);

610 10 SkyBoxSpec 0 4 769 22 SkyBoxSpec::SkyBoxSpec 0 1 248 0
29
SkyBoxSpec::SkyBoxSpec(void);

611 11 ~SkyBoxSpec 0 4 769 23 SkyBoxSpec::~SkyBoxSpec 0 0 0
30
SkyBoxSpec::~SkyBoxSpec(void);

612 4 make 0 4 770 24 AmbientBoostEffect::make 0 1 249 0
69
static ConstPointerTo< RenderEffect > AmbientBoostEffect::make(void);

613 14 get_class_type 0 4 770 34 AmbientBoostEffect::get_class_type 0 1 250 0
59
static TypeHandle AmbientBoostEffect::get_class_type(void);

614 19 ~AmbientBoostEffect 0 4 770 39 AmbientBoostEffect::~AmbientBoostEffect 0 0 0
46
AmbientBoostEffect::~AmbientBoostEffect(void);

615 14 Audio3DManager 0 4 772 30 Audio3DManager::Audio3DManager 0 2 251 252 0
228
Audio3DManager::Audio3DManager(AudioManager *mgr, NodePath const &listener_target = NodePath(), NodePath const &root = NodePath(), int task_priority = 51);
inline Audio3DManager::Audio3DManager(Audio3DManager const &) = default;

616 19 set_distance_factor 0 4 772 35 Audio3DManager::set_distance_factor 0 1 253 0
68
inline void Audio3DManager::set_distance_factor(PN_stdfloat factor);

617 19 get_distance_factor 0 4 772 35 Audio3DManager::get_distance_factor 0 1 254 0
67
inline PN_stdfloat Audio3DManager::get_distance_factor(void) const;

618 18 set_doppler_factor 0 4 772 34 Audio3DManager::set_doppler_factor 0 1 255 0
67
inline void Audio3DManager::set_doppler_factor(PN_stdfloat factor);

619 18 get_doppler_factor 0 4 772 34 Audio3DManager::get_doppler_factor 0 1 256 0
66
inline PN_stdfloat Audio3DManager::get_doppler_factor(void) const;

620 19 set_drop_off_factor 0 4 772 35 Audio3DManager::set_drop_off_factor 0 1 257 0
68
inline void Audio3DManager::set_drop_off_factor(PN_stdfloat factor);

621 19 get_drop_off_factor 0 4 772 35 Audio3DManager::get_drop_off_factor 0 1 258 0
67
inline PN_stdfloat Audio3DManager::get_drop_off_factor(void) const;

622 22 set_sound_min_distance 0 4 772 38 Audio3DManager::set_sound_min_distance 0 1 259 0
88
inline void Audio3DManager::set_sound_min_distance(AudioSound *sound, PN_stdfloat dist);

623 22 get_sound_min_distance 0 4 772 38 Audio3DManager::get_sound_min_distance 0 1 260 0
83
inline PN_stdfloat Audio3DManager::get_sound_min_distance(AudioSound *sound) const;

624 22 set_sound_max_distance 0 4 772 38 Audio3DManager::set_sound_max_distance 0 1 261 0
88
inline void Audio3DManager::set_sound_max_distance(AudioSound *sound, PN_stdfloat dist);

625 22 get_sound_max_distance 0 4 772 38 Audio3DManager::get_sound_max_distance 0 1 262 0
83
inline PN_stdfloat Audio3DManager::get_sound_max_distance(AudioSound *sound) const;

626 15 attach_listener 0 4 772 31 Audio3DManager::attach_listener 0 1 263 0
70
inline void Audio3DManager::attach_listener(NodePath const &listener);

627 15 detach_listener 0 4 772 31 Audio3DManager::detach_listener 0 1 264 0
50
inline void Audio3DManager::detach_listener(void);

628 8 load_sfx 0 4 772 24 Audio3DManager::load_sfx 0 1 265 0
81
inline PointerTo< AudioSound > Audio3DManager::load_sfx(std::string const &path);

629 22 attach_sound_to_object 0 4 772 38 Audio3DManager::attach_sound_to_object 0 1 266 0
87
void Audio3DManager::attach_sound_to_object(AudioSound *sound, NodePath const &object);

630 12 detach_sound 0 4 772 28 Audio3DManager::detach_sound 0 1 267 0
53
void Audio3DManager::detach_sound(AudioSound *sound);

631 18 print_audio_digest 0 4 772 34 Audio3DManager::print_audio_digest 0 1 268 0
46
void Audio3DManager::print_audio_digest(void);

632 6 update 0 4 772 22 Audio3DManager::update 0 1 269 0
34
void Audio3DManager::update(void);

633 15 ~Audio3DManager 0 4 772 31 Audio3DManager::~Audio3DManager 0 0 0
38
Audio3DManager::~Audio3DManager(void);

634 19 set_pupil_direction 0 4 773 27 CIOLib::set_pupil_direction 0 1 272 0
91
static void CIOLib::set_pupil_direction(float x, float y, LVector3 &left, LVector3 &right);

635 14 look_pupils_at 0 4 773 22 CIOLib::look_pupils_at 0 1 273 0
106
static LVector2 CIOLib::look_pupils_at(NodePath const &node, LVector3 const &point, NodePath const &eyes);

636 6 CIOLib 0 4 773 14 CIOLib::CIOLib 0 2 270 271 0
87
inline CIOLib::CIOLib(void) = default;
inline CIOLib::CIOLib(CIOLib const &) = default;

637 7 ~CIOLib 0 4 773 15 CIOLib::~CIOLib 0 0 0
22
CIOLib::~CIOLib(void);

638 17 DecalModulateSpec 0 4 774 36 DecalModulateSpec::DecalModulateSpec 0 1 274 0
43
DecalModulateSpec::DecalModulateSpec(void);

639 18 ~DecalModulateSpec 0 4 774 37 DecalModulateSpec::~DecalModulateSpec 0 0 0
44
DecalModulateSpec::~DecalModulateSpec(void);

640 14 get_class_type 0 4 775 24 GlowNode::get_class_type 0 1 278 0
49
static TypeHandle GlowNode::get_class_type(void);

641 8 GlowNode 0 4 775 18 GlowNode::GlowNode 0 3 275 276 277 0
219
GlowNode::GlowNode(std::string const &name, float query_size = ::r_glow_querysize);
GlowNode::GlowNode(GeomNode const &copy, float query_size = ::r_glow_querysize);
inline GlowNode::GlowNode(GlowNode const &) = default;

642 9 ~GlowNode 0 4 775 19 GlowNode::~GlowNode 0 0 0
26
GlowNode::~GlowNode(void);

643 24 upcast_to_ReferenceCount 0 12 777 43 PostProcessEffect::upcast_to_ReferenceCount 0 1 288 47
upcast from PostProcessEffect to ReferenceCount
66
ReferenceCount *PostProcessEffect::upcast_to_ReferenceCount(void);

644 29 downcast_to_PostProcessEffect 0 12 739 45 ReferenceCount::downcast_to_PostProcessEffect 0 0 49
downcast from ReferenceCount to PostProcessEffect
71
PostProcessEffect *ReferenceCount::downcast_to_PostProcessEffect(void);

645 17 upcast_to_Namable 0 12 777 36 PostProcessEffect::upcast_to_Namable 0 1 289 40
upcast from PostProcessEffect to Namable
52
Namable *PostProcessEffect::upcast_to_Namable(void);

646 29 downcast_to_PostProcessEffect 0 12 750 38 Namable::downcast_to_PostProcessEffect 0 0 42
downcast from Namable to PostProcessEffect
64
PostProcessEffect *Namable::downcast_to_PostProcessEffect(void);

647 14 get_class_type 0 4 777 33 PostProcessEffect::get_class_type 0 1 279 0
58
static TypeHandle PostProcessEffect::get_class_type(void);

648 17 get_final_texture 0 6 777 36 PostProcessEffect::get_final_texture 0 1 280 0
64
virtual Texture *PostProcessEffect::get_final_texture(void) = 0;

649 8 add_pass 0 4 777 27 PostProcessEffect::add_pass 0 1 281 0
56
void PostProcessEffect::add_pass(PostProcessPass *pass);

650 11 remove_pass 0 4 777 30 PostProcessEffect::remove_pass 0 1 282 0
59
void PostProcessEffect::remove_pass(PostProcessPass *pass);

651 8 get_pass 0 4 777 27 PostProcessEffect::get_pass 0 1 283 0
70
PostProcessPass *PostProcessEffect::get_pass(std::string const &name);

652 5 setup 0 6 777 24 PostProcessEffect::setup 0 1 284 0
44
virtual void PostProcessEffect::setup(void);

653 6 update 0 6 777 25 PostProcessEffect::update 0 1 285 0
45
virtual void PostProcessEffect::update(void);

654 12 window_event 0 4 777 31 PostProcessEffect::window_event 0 1 286 0
58
void PostProcessEffect::window_event(GraphicsOutput *win);

655 8 shutdown 0 6 777 27 PostProcessEffect::shutdown 0 1 287 0
47
virtual void PostProcessEffect::shutdown(void);

656 18 ~PostProcessEffect 0 4 777 37 PostProcessEffect::~PostProcessEffect 0 0 0
44
PostProcessEffect::~PostProcessEffect(void);

657 24 upcast_to_ReferenceCount 0 12 779 41 PostProcessPass::upcast_to_ReferenceCount 0 1 315 45
upcast from PostProcessPass to ReferenceCount
64
ReferenceCount *PostProcessPass::upcast_to_ReferenceCount(void);

658 27 downcast_to_PostProcessPass 0 12 739 43 ReferenceCount::downcast_to_PostProcessPass 0 0 47
downcast from ReferenceCount to PostProcessPass
67
PostProcessPass *ReferenceCount::downcast_to_PostProcessPass(void);

659 17 upcast_to_Namable 0 12 779 34 PostProcessPass::upcast_to_Namable 0 1 316 38
upcast from PostProcessPass to Namable
50
Namable *PostProcessPass::upcast_to_Namable(void);

660 27 downcast_to_PostProcessPass 0 12 750 36 Namable::downcast_to_PostProcessPass 0 0 40
downcast from Namable to PostProcessPass
60
PostProcessPass *Namable::downcast_to_PostProcessPass(void);

661 14 get_class_type 0 4 779 31 PostProcessPass::get_class_type 0 1 292 0
56
static TypeHandle PostProcessPass::get_class_type(void);

662 15 PostProcessPass 0 4 779 32 PostProcessPass::PostProcessPass 0 2 290 291 0
379
PostProcessPass::PostProcessPass(PostProcess *pp, std::string const &name = "pass", int texture_output_bits = 0, FrameBufferProperties const &fbprops = PostProcessPass::get_default_fbprops(), bool force_size = false, LVector2i const &forced_size = LVector2i::zero(), bool div_size = false, int div = 1);
inline PostProcessPass::PostProcessPass(PostProcessPass const &) = default;

663 8 get_quad 0 4 779 25 PostProcessPass::get_quad 0 1 293 0
54
inline NodePath PostProcessPass::get_quad(void) const;

664 26 get_back_buffer_dimensions 0 4 779 43 PostProcessPass::get_back_buffer_dimensions 0 1 294 0
66
LVector2i PostProcessPass::get_back_buffer_dimensions(void) const;

665 10 get_camera 0 4 779 27 PostProcessPass::get_camera 0 1 295 0
56
inline NodePath PostProcessPass::get_camera(void) const;

666 16 has_texture_bits 0 4 779 33 PostProcessPass::has_texture_bits 0 1 296 0
62
inline bool PostProcessPass::has_texture_bits(int bits) const;

667 12 set_div_size 0 4 779 29 PostProcessPass::set_div_size 0 1 297 0
66
inline void PostProcessPass::set_div_size(bool div_size, int div);

668 15 set_forced_size 0 4 779 32 PostProcessPass::set_forced_size 0 1 298 0
92
inline void PostProcessPass::set_forced_size(bool force_size, LVector2i const &forced_size);

669 26 set_framebuffer_properties 0 4 779 43 PostProcessPass::set_framebuffer_properties 0 1 299 0
94
inline void PostProcessPass::set_framebuffer_properties(FrameBufferProperties const &fbprops);

670 23 set_output_texture_bits 0 4 779 40 PostProcessPass::set_output_texture_bits 0 1 300 0
63
inline void PostProcessPass::set_output_texture_bits(int bits);

671 18 get_corrected_size 0 4 779 35 PostProcessPass::get_corrected_size 0 1 301 0
69
LVector2i PostProcessPass::get_corrected_size(LVector2i const &size);

672 11 get_texture 0 4 779 28 PostProcessPass::get_texture 0 1 302 0
47
Texture *PostProcessPass::get_texture(int bit);

673 17 get_color_texture 0 4 779 34 PostProcessPass::get_color_texture 0 1 303 0
57
inline Texture *PostProcessPass::get_color_texture(void);

674 17 get_depth_texture 0 4 779 34 PostProcessPass::get_depth_texture 0 1 304 0
57
inline Texture *PostProcessPass::get_depth_texture(void);

675 12 setup_buffer 0 6 779 29 PostProcessPass::setup_buffer 0 1 305 0
49
virtual bool PostProcessPass::setup_buffer(void);

676 14 setup_textures 0 6 779 31 PostProcessPass::setup_textures 0 1 306 0
51
virtual void PostProcessPass::setup_textures(void);

677 10 setup_quad 0 6 779 27 PostProcessPass::setup_quad 0 1 307 0
47
virtual void PostProcessPass::setup_quad(void);

678 12 setup_camera 0 6 779 29 PostProcessPass::setup_camera 0 1 308 0
49
virtual void PostProcessPass::setup_camera(void);

679 12 setup_region 0 6 779 29 PostProcessPass::setup_region 0 1 309 0
49
virtual void PostProcessPass::setup_region(void);

680 5 setup 0 6 779 22 PostProcessPass::setup 0 1 310 0
42
virtual void PostProcessPass::setup(void);

681 6 update 0 6 779 23 PostProcessPass::update 0 1 311 0
43
virtual void PostProcessPass::update(void);

682 12 window_event 0 6 779 29 PostProcessPass::window_event 0 1 312 0
67
virtual void PostProcessPass::window_event(GraphicsOutput *output);

683 8 shutdown 0 6 779 25 PostProcessPass::shutdown 0 1 313 0
45
virtual void PostProcessPass::shutdown(void);

684 19 get_default_fbprops 0 4 779 36 PostProcessPass::get_default_fbprops 0 1 314 0
72
static FrameBufferProperties PostProcessPass::get_default_fbprops(void);

685 16 ~PostProcessPass 0 4 779 33 PostProcessPass::~PostProcessPass 0 0 0
40
PostProcessPass::~PostProcessPass(void);

686 20 PostProcessScenePass 0 4 780 42 PostProcessScenePass::PostProcessScenePass 0 2 317 318 0
220
PostProcessScenePass::PostProcessScenePass(PostProcess *pp, int output_texture_bits = ::bits_PASSTEXTURE_COLOR, int auxbits = 0);
inline PostProcessScenePass::PostProcessScenePass(PostProcessScenePass const &) = default;

687 18 setup_scene_camera 0 4 780 40 PostProcessScenePass::setup_scene_camera 0 1 319 0
53
void PostProcessScenePass::setup_scene_camera(int i);

688 16 set_camera_state 0 4 780 38 PostProcessScenePass::set_camera_state 0 1 320 0
70
void PostProcessScenePass::set_camera_state(RenderState const *state);

689 21 ~PostProcessScenePass 0 4 780 43 PostProcessScenePass::~PostProcessScenePass 0 0 0
50
PostProcessScenePass::~PostProcessScenePass(void);

690 11 PostProcess 0 4 781 24 PostProcess::PostProcess 0 2 321 322 0
113
PostProcess::PostProcess(GraphicsOutput *output);
inline PostProcess::PostProcess(PostProcess const &) = default;

691 10 add_camera 0 4 781 23 PostProcess::add_camera 0 1 323 0
53
void PostProcess::add_camera(NodePath const &camera);

692 13 remove_camera 0 4 781 26 PostProcess::remove_camera 0 1 324 0
56
void PostProcess::remove_camera(NodePath const &camera);

693 10 add_effect 0 4 781 23 PostProcess::add_effect 0 1 325 0
63
inline void PostProcess::add_effect(PostProcessEffect *effect);

694 13 remove_effect 0 4 781 26 PostProcess::remove_effect 0 1 326 0
66
inline void PostProcess::remove_effect(PostProcessEffect *effect);

695 10 get_effect 0 4 781 23 PostProcess::get_effect 0 1 327 0
75
inline PostProcessEffect *PostProcess::get_effect(std::string const &name);

696 23 get_scene_color_texture 0 4 781 36 PostProcess::get_scene_color_texture 0 1 328 0
65
inline Texture *PostProcess::get_scene_color_texture(void) const;

697 23 get_scene_depth_texture 0 4 781 36 PostProcess::get_scene_depth_texture 0 1 329 0
65
inline Texture *PostProcess::get_scene_depth_texture(void) const;

698 14 get_scene_pass 0 4 781 27 PostProcess::get_scene_pass 0 1 330 0
69
inline PostProcessScenePass *PostProcess::get_scene_pass(void) const;

699 10 get_output 0 4 781 23 PostProcess::get_output 0 1 331 0
59
inline GraphicsOutput *PostProcess::get_output(void) const;

700 10 get_camera 0 4 781 23 PostProcess::get_camera 0 1 332 0
53
inline NodePath PostProcess::get_camera(int n) const;

701 9 next_sort 0 4 781 22 PostProcess::next_sort 0 1 333 0
40
inline int PostProcess::next_sort(void);

702 25 get_output_display_region 0 4 781 38 PostProcess::get_output_display_region 0 1 334 0
73
inline DisplayRegion *PostProcess::get_output_display_region(void) const;

703 13 is_fullscreen 0 4 781 26 PostProcess::is_fullscreen 0 1 335 0
51
inline bool PostProcess::is_fullscreen(void) const;

704 18 set_scene_aux_bits 0 4 781 31 PostProcess::set_scene_aux_bits 0 1 336 0
47
void PostProcess::set_scene_aux_bits(int bits);

705 18 set_stacked_clears 0 4 781 31 PostProcess::set_stacked_clears 0 1 337 0
68
void PostProcess::set_stacked_clears(int n, DrawableRegion *region);

706 17 set_window_clears 0 4 781 30 PostProcess::set_window_clears 0 1 338 0
60
void PostProcess::set_window_clears(DrawableRegion *region);

707 10 set_clears 0 4 781 23 PostProcess::set_clears 0 1 339 0
60
void PostProcess::set_clears(int n, DrawableRegion *region);

708 8 shutdown 0 4 781 21 PostProcess::shutdown 0 1 340 0
33
void PostProcess::shutdown(void);

709 12 ~PostProcess 0 4 781 25 PostProcess::~PostProcess 0 0 0
32
PostProcess::~PostProcess(void);

710 14 get_class_type 0 4 782 23 HDRPass::get_class_type 0 1 343 0
48
static TypeHandle HDRPass::get_class_type(void);

711 7 HDRPass 0 4 782 16 HDRPass::HDRPass 0 2 341 342 0
86
HDRPass::HDRPass(PostProcess *pp);
inline HDRPass::HDRPass(HDRPass const &) = default;

712 19 set_exposure_output 0 4 782 28 HDRPass::set_exposure_output 0 1 344 0
59
inline void HDRPass::set_exposure_output(PTA_float output);

713 12 get_exposure 0 4 782 21 HDRPass::get_exposure 0 1 345 56
/**
	 * Returns the calculated exposure adjustment.
	 */
47
inline float HDRPass::get_exposure(void) const;

714 8 ~HDRPass 0 4 782 17 HDRPass::~HDRPass 0 0 0
24
HDRPass::~HDRPass(void);

715 9 HDREffect 0 4 783 20 HDREffect::HDREffect 0 1 346 0
38
HDREffect::HDREffect(PostProcess *pp);

716 12 get_hdr_pass 0 4 783 23 HDREffect::get_hdr_pass 0 1 347 0
52
inline HDRPass *HDREffect::get_hdr_pass(void) const;

717 10 ~HDREffect 0 4 783 21 HDREffect::~HDREffect 0 0 0
28
HDREffect::~HDREffect(void);

718 14 get_class_type 0 4 784 27 BloomEffect::get_class_type 0 1 349 0
52
static TypeHandle BloomEffect::get_class_type(void);

719 11 BloomEffect 0 4 784 24 BloomEffect::BloomEffect 0 1 348 0
42
BloomEffect::BloomEffect(PostProcess *pp);

720 12 ~BloomEffect 0 4 784 25 BloomEffect::~BloomEffect 0 0 0
32
BloomEffect::~BloomEffect(void);

349
1 0 0 7 12 785 361 0 0 0 
2 0 0 7 12 785 361 0 0 1 6 param0 0 786  
3 0 0 7 2 790 0 0 0 1 4 name 1 789  
4 0 0 7 2 790 0 0 0 2 4 name 1 789  7 uv_name 1 789  
5 0 0 7 3 790 0 0 0 0 
6 0 0 7 4 790 0 0 0 0 
7 0 0 7 5 790 0 0 0 0 
8 0 0 7 6 790 0 0 0 0 
9 0 0 7 7 790 0 0 0 0 
10 0 0 7 8 790 0 0 0 0 
11 0 0 7 9 790 0 0 0 0 
12 0 0 7 10 790 0 0 0 0 
13 0 0 7 11 790 0 0 0 0 
14 0 0 7 16 793 383 0 0 1 4 copy 1 791  
15 0 0 7 16 793 383 0 0 1 4 name 1 789  
16 0 0 7 17 793 383 0 0 2 4 this 3 793  4 copy 1 791  
17 0 0 4 18 794 0 0 0 3 4 this 3 793  3 key 1 789  5 value 1 789  
18 0 0 6 19 789 0 0 0 2 4 this 3 791  3 key 1 789  
19 0 0 6 20 795 0 0 0 1 4 this 3 791  
20 0 0 6 21 789 0 0 0 2 4 this 3 791  1 i 1 795  
21 0 0 6 22 789 0 0 0 2 4 this 3 791  1 i 1 795  
22 0 0 6 23 726 0 0 0 2 4 this 3 791  3 key 1 789  
23 0 0 6 24 797 0 0 0 2 4 this 3 791  3 key 1 789  
24 0 0 4 25 794 0 0 0 2 4 this 3 793  11 shader_name 1 789  
25 0 0 6 26 789 0 0 0 1 4 this 3 791  
26 0 0 7 27 799 0 0 0 1 4 this 3 791  
27 0 0 6 28 800 0 0 0 2 4 this 3 791  3 key 1 789  
28 0 0 6 29 800 0 0 0 1 4 this 3 791  
29 0 0 6 30 800 0 0 0 1 4 this 3 791  
30 0 0 6 31 789 0 0 0 1 4 this 3 791  
31 0 0 6 32 789 0 0 0 1 4 this 3 791  
32 0 0 6 33 800 0 0 0 1 4 this 3 791  
33 0 0 6 34 800 0 0 0 1 4 this 3 791  
34 0 0 7 35 791 0 0 0 1 4 file 1 801  
35 0 0 7 36 804 0 0 0 0 
36 0 0 7 40 806 0 0 0 1 3 mat 1 791  
37 0 0 7 41 806 0 0 0 1 3 mat 1 791  
38 0 0 7 42 806 0 0 0 0 
39 0 0 6 43 789 0 0 0 1 4 this 3 807  
40 0 0 6 44 800 0 0 0 1 4 this 3 807  
41 0 0 7 45 791 0 0 0 1 4 this 3 807  
42 0 0 6 46 726 0 0 0 0 
43 0 0 7 49 804 0 0 0 0 
44 0 0 6 53 795 0 0 0 1 4 this 3 809  
45 0 0 7 54 813 0 0 0 2 4 this 3 809  1 n 1 726  
46 0 0 6 55 795 0 0 0 1 4 this 3 809  
47 0 0 7 56 816 0 0 0 2 4 this 3 809  1 n 1 726  
48 0 0 7 57 804 0 0 0 0 
49 0 0 7 61 817 408 0 0 0 
50 0 0 7 61 817 408 0 0 1 6 param0 0 818  
51 0 0 7 60 804 0 0 0 0 
52 0 0 6 62 820 0 0 0 1 4 this 3 818  
53 0 0 6 63 789 0 0 0 2 4 this 3 818  3 key 1 789  
54 0 0 7 64 823 0 0 0 2 4 this 3 818  3 key 1 789  
55 0 0 7 65 827 0 0 0 3 4 this 3 818  3 key 1 789  5 scale 1 800  
56 0 0 6 66 789 0 0 0 1 4 this 3 818  
57 0 0 6 67 789 0 0 0 1 4 this 3 818  
58 0 0 6 68 726 0 0 0 1 4 this 3 818  
59 0 0 7 72 828 413 0 0 0 
60 0 0 7 72 828 413 0 0 1 6 param0 0 829  
61 0 0 7 71 804 0 0 0 0 
62 0 0 7 73 813 0 0 0 1 4 this 3 829  
63 0 0 7 74 823 0 0 0 1 4 this 3 829  
64 0 0 7 78 831 419 0 0 0 
65 0 0 7 78 831 419 0 0 1 6 param0 0 832  
66 0 0 7 77 804 0 0 0 0 
67 0 0 7 79 834 398 0 0 1 4 this 3 832  
68 0 0 6 80 800 0 0 0 2 4 this 3 832  3 pos 1 835  
69 0 0 4 81 794 0 0 0 3 4 this 3 831  4 mins 1 813  4 maxs 1 813  
70 0 0 7 85 837 424 0 0 0 
71 0 0 7 85 837 424 0 0 1 6 param0 0 838  
72 0 0 7 84 804 0 0 0 0 
73 0 0 7 86 841 0 0 0 1 4 this 3 838  
74 0 0 4 87 794 0 0 0 3 4 this 3 837  4 mins 1 813  4 maxs 1 813  
75 0 0 7 93 844 429 0 0 1 6 param0 0 842  
76 0 0 6 90 726 0 0 0 1 4 this 3 842  
77 0 0 6 91 726 0 0 0 1 4 this 3 842  
78 0 0 6 92 726 0 0 0 1 4 this 3 842  
79 0 0 7 101 847 436 0 0 1 6 param0 0 845  
80 0 0 6 96 726 0 0 0 1 4 this 3 845  
81 0 0 6 97 726 0 0 0 1 4 this 3 845  
82 0 0 6 98 726 0 0 0 1 4 this 3 845  
83 0 0 6 99 726 0 0 0 1 4 this 3 845  
84 0 0 6 100 800 0 0 0 1 4 this 3 845  
85 0 0 6 104 726 0 0 0 1 4 this 3 848  
86 0 0 4 105 794 0 0 35 // number of textures to consider.. 2 4 this 3 848  6 tcount 1 726  
87 0 0 4 106 794 0 0 21 // add textures 0 - n 3 4 this 3 848  3 wid 1 726  3 hit 1 726  
88 0 0 6 107 800 0 0 0 7 4 this 3 848  3 wid 1 726  3 hit 1 726  15 forcePowerOfTwo 1 800  14 onePixelBorder 1 800  7 max_wid 1 726  7 max_hit 1 726  
89 0 0 4 108 794 0 0 0 3 4 this 3 848  3 wid 1 726  3 hit 1 726  
90 0 0 7 109 844 429 0 74 // pack the textures, the return code is the amount of wasted/unused area. 3 4 this 3 848  15 forcePowerOfTwo 1 800  14 onePixelBorder 1 800  
91 0 0 7 110 847 436 0 58 // returns true if the texture has been rotated 90 degrees 2 4 this 3 848  5 index 1 726  
92 0 0 6 111 848 0 0 0 0 
93 0 0 4 112 794 0 0 0 1 2 tp 1 848  
94 0 0 7 117 849 450 0 0 0 
95 0 0 7 117 849 450 0 0 1 6 param0 0 850  
96 0 0 4 115 794 0 0 0 0 
97 0 0 4 116 794 0 0 0 0 
98 0 0 7 120 852 458 0 0 0 
99 0 0 7 120 852 458 0 0 1 6 param0 0 853  
100 0 0 6 121 800 0 0 0 1 4 this 3 853  
101 0 0 7 122 823 0 0 0 1 4 this 3 853  
102 0 0 7 123 857 0 0 0 1 4 this 3 853  
103 0 0 6 124 858 0 0 0 1 4 this 3 853  
104 0 0 6 125 858 0 0 0 1 4 this 3 853  
105 0 0 6 126 797 0 0 0 1 4 this 3 853  
106 0 0 7 130 859 0 0 0 0 
107 0 0 7 130 859 0 0 0 1 6 param0 0 860  
108 0 0 4 131 794 0 0 0 2 4 this 3 859  4 geom 1 862  
109 0 0 4 132 794 0 0 0 2 4 this 3 859  4 geom 1 862  
110 0 0 4 133 794 0 0 0 1 4 this 3 859  
111 0 0 7 135 852 458 0 0 4 4 this 3 859  5 start 1 835  3 end 1 835  4 mask 1 863  
112 0 0 7 136 852 458 0 0 5 4 this 3 859  6 origin 1 835  9 direction 1 867  8 distance 1 797  4 mask 1 863  
113 0 0 4 137 794 0 0 0 2 4 this 3 859  7 quality 1 726  
114 0 0 4 138 794 0 0 0 1 4 this 3 859  
115 0 0 7 139 862 0 0 0 2 4 this 3 859  7 geom_id 1 858  
116 0 0 7 142 804 0 0 0 0 
117 0 0 4 143 794 0 0 0 2 4 this 3 862  4 mask 1 863  
118 0 0 4 143 794 0 0 0 2 4 this 3 862  4 mask 1 858  
119 0 0 7 144 871 0 0 0 1 4 this 3 869  
120 0 0 6 145 858 0 0 0 1 4 this 3 869  
121 0 0 4 146 794 0 0 0 2 4 this 3 862  7 quality 1 726  
122 0 0 4 147 794 0 0 0 1 4 this 3 862  
123 0 0 7 150 872 478 0 0 1 4 name 1 789  
124 0 0 7 149 804 0 0 0 0 
125 0 0 4 151 794 0 0 0 4 4 this 3 872  2 p1 1 835  2 p2 1 835  2 p3 1 835  
126 0 0 4 152 794 0 0 0 3 4 this 3 872  4 geom 1 873  2 ts 1 876  
127 0 0 7 156 806 0 0 0 2 13 face_material 1 789  9 face_type 1 726  
128 0 0 7 157 806 0 0 0 0 
129 0 0 7 158 806 0 0 0 0 
130 0 0 6 159 789 0 0 0 1 4 this 3 879  
131 0 0 6 160 726 0 0 0 1 4 this 3 879  
132 0 0 6 161 800 0 0 0 1 4 this 3 879  
133 0 0 6 162 726 0 0 0 0 
134 0 0 7 164 804 0 0 0 0 
135 0 0 7 167 820 549 0 0 0 
136 0 0 4 168 794 0 0 0 2 4 this 3 820  5 pyent 1 881  
137 0 0 4 169 794 0 0 0 2 4 this 3 820  5 pyent 1 881  
138 0 0 4 170 794 0 0 0 3 4 this 3 820  1 n 1 726  9 preserved 1 800  
139 0 0 6 171 726 0 0 0 1 4 this 3 884  
140 0 0 6 172 881 0 0 0 2 4 this 3 884  1 n 1 726  
141 0 0 4 173 794 0 0 0 4 4 this 3 820  4 name 1 789  6 origin 1 867  6 angles 1 867  
142 0 0 4 174 794 0 0 0 1 4 this 3 820  
143 0 0 6 175 800 0 0 0 3 4 this 3 820  4 file 1 801  13 is_transition 1 800  
144 0 0 4 176 794 0 0 0 1 4 this 3 820  
145 0 0 4 177 794 0 0 0 3 4 this 3 820  5 gamma 1 886  10 overbright 1 726  
146 0 0 6 178 886 0 0 0 1 4 this 3 884  
147 0 0 4 179 794 0 0 0 2 4 this 3 820  3 win 1 887  
148 0 0 4 180 794 0 0 0 2 4 this 3 820  6 camera 1 889  
149 0 0 4 181 794 0 0 0 2 4 this 3 820  6 render 1 889  
150 0 0 4 182 794 0 0 0 2 4 this 3 820  5 shgen 1 891  
151 0 0 4 183 794 0 0 0 2 4 this 3 820  4 flag 1 800  
152 0 0 4 184 794 0 0 0 2 4 this 3 820  4 flag 1 800  
153 0 0 4 185 794 0 0 0 2 4 this 3 820  4 type 1 726  
154 0 0 4 186 794 0 0 0 2 4 this 3 820  4 flag 1 800  
155 0 0 4 187 794 0 0 0 2 4 this 3 820  4 file 1 801  
156 0 0 4 188 794 0 0 0 2 4 this 3 820  4 flag 1 800  
157 0 0 6 189 800 0 0 0 1 4 this 3 884  
158 0 0 7 190 841 0 0 0 1 4 this 3 884  
159 0 0 4 191 794 0 0 0 7 4 this 3 820  14 decal_material 1 789  11 decal_scale 1 892  6 rotate 1 797  5 start 1 835  3 end 1 835  11 decal_color 1 896  
160 0 0 7 192 899 0 0 0 2 4 this 3 820  3 pos 1 835  
161 0 0 4 193 794 0 0 0 1 4 this 3 820  
162 0 0 4 194 794 0 0 0 2 4 this 3 820  4 flag 1 800  
163 0 0 4 195 794 0 0 0 2 4 this 3 820  3 dir 1 867  
164 0 0 6 196 726 0 0 0 2 4 this 3 820  6 entnum 1 726  
165 0 0 4 197 794 0 0 0 4 4 this 3 820  8 modelnum 1 726  4 mins 1 813  4 maxs 1 813  
166 0 0 4 198 794 0 0 0 2 4 this 3 820  10 dispatcher 1 881  
167 0 0 4 199 794 0 0 0 3 4 this 3 820  4 name 1 789  4 type 1 900  
168 0 0 4 200 794 0 0 0 2 4 this 3 820  2 ai 1 800  
169 0 0 6 201 800 0 0 0 1 4 this 3 884  
170 0 0 6 202 800 0 0 0 3 4 this 3 820  5 start 1 835  3 end 1 835  
171 0 0 7 203 813 0 0 0 3 4 this 3 820  5 start 1 835  3 end 1 835  
172 0 0 4 204 794 0 0 0 3 4 this 3 820  7 entname 1 789  4 type 1 900  
173 0 0 6 205 881 0 0 0 2 4 this 3 884  10 targetname 1 789  
174 0 0 6 206 881 0 0 0 2 4 this 3 820  9 classname 1 789  
175 0 0 4 207 794 0 0 0 3 4 this 3 820  4 list 1 881  6 entnum 1 903  
176 0 0 4 208 794 0 0 0 3 4 this 3 820  5 entum 1 726  5 pyent 1 881  
177 0 0 4 209 794 0 0 0 2 4 this 3 820  3 ent 1 881  
178 0 0 7 210 841 0 0 0 2 4 this 3 884  8 modelnum 1 726  
179 0 0 7 211 817 408 0 0 2 4 this 3 884  6 entnum 1 903  
180 0 0 6 212 726 0 0 0 3 4 this 3 820  3 pos 1 835  8 headnode 1 726  
181 0 0 6 212 726 0 0 0 2 4 this 3 820  2 np 1 889  
182 0 0 6 213 726 0 0 0 2 4 this 3 820  3 pos 1 835  
183 0 0 6 214 800 0 0 0 3 4 this 3 884  12 curr_cluster 1 726  7 cluster 1 726  
184 0 0 6 215 800 0 0 0 3 4 this 3 820  6 bounds 1 904  19 required_leaf_flags 1 858  
185 0 0 7 216 904 0 0 0 3 4 this 3 820  13 net_transform 1 876  8 original 1 904  
186 0 0 6 217 800 0 0 0 1 4 this 3 884  
187 0 0 6 218 800 0 0 0 1 4 this 3 884  
188 0 0 4 219 794 0 0 0 2 4 this 3 820  13 is_transition 1 800  
189 0 0 7 220 841 0 0 0 1 4 this 3 884  
190 0 0 4 221 794 0 0 0 2 4 this 3 820  4 leaf 1 726  
191 0 0 6 222 726 0 0 0 1 4 this 3 884  
192 0 0 6 223 726 0 0 0 1 4 this 3 884  
193 0 0 7 224 813 0 0 0 2 4 this 3 884  4 leaf 1 726  
194 0 0 7 225 909 0 0 0 3 4 this 3 820  7 facenum 1 726  5 point 1 867  
195 0 0 4 226 794 0 0 0 1 4 this 3 820  
196 0 0 6 227 820 0 0 0 0 
197 0 0 7 231 910 556 0 0 0 
198 0 0 4 232 794 0 0 0 3 4 this 3 910  3 key 1 789  5 value 1 789  
199 0 0 4 233 794 0 0 0 1 4 this 3 910  
200 0 0 4 234 794 0 0 0 2 4 this 3 910  3 inp 1 911  
201 0 0 4 235 794 0 0 0 2 4 this 3 910  4 flag 1 726  
202 0 0 6 236 795 0 0 0 1 4 this 3 914  
203 0 0 4 244 794 0 0 0 4 4 this 3 916  9 vert_file 1 801  10 pixel_file 1 801  9 geom_file 1 801  
204 0 0 7 245 804 0 0 0 0 
205 0 0 7 239 917 0 0 0 1 4 this 3 916  
206 0 0 6 242 918 0 0 0 1 4 this 3 916  
207 0 0 7 252 891 584 0 0 1 6 param0 0 919  
208 0 0 7 252 891 584 0 0 3 3 gsg 1 921  6 camera 1 889  6 render 1 889  
209 0 0 4 253 794 0 0 0 2 4 this 3 891  2 np 1 889  
210 0 0 4 254 794 0 0 0 1 4 this 3 891  
211 0 0 4 255 794 0 0 0 2 4 this 3 891  4 spec 1 916  
212 0 0 7 256 823 0 0 0 1 4 this 3 919  
213 0 0 6 257 800 0 0 0 1 4 this 3 919  
214 0 0 7 258 899 0 0 0 1 4 this 3 919  
215 0 0 6 259 923 0 0 0 1 4 this 3 919  
216 0 0 4 260 794 0 0 0 2 4 this 3 891  7 quality 1 726  
217 0 0 6 261 726 0 0 0 1 4 this 3 919  
218 0 0 4 262 794 0 0 0 2 4 this 3 891  3 fog 1 925  
219 0 0 4 263 794 0 0 0 1 4 this 3 891  
220 0 0 7 264 925 0 0 0 1 4 this 3 919  
221 0 0 7 265 929 0 0 0 1 4 this 3 919  
222 0 0 4 266 794 0 0 0 2 4 this 3 891  8 exposure 1 797  
223 0 0 7 267 932 0 0 0 1 4 this 3 919  
224 0 0 4 268 794 0 0 0 1 3 tex 1 899  
225 0 0 7 269 899 0 0 0 0 
226 0 0 7 270 937 0 0 0 2 4 spec 1 935  5 perms 1 914  
227 0 0 7 271 804 0 0 0 0 
228 0 0 7 276 940 587 0 0 1 6 param0 0 938  
229 0 0 7 276 940 587 0 0 2 4 trav 1 941  6 loader 1 820  
230 0 0 7 275 804 0 0 0 0 
231 0 0 7 280 944 590 0 0 1 6 param0 0 942  
232 0 0 7 280 944 590 0 0 2 4 name 1 789  6 loader 1 820  
233 0 0 7 279 804 0 0 0 0 
234 0 0 7 284 947 593 0 0 1 6 param0 0 945  
235 0 0 7 284 947 593 0 0 1 4 name 1 789  
236 0 0 7 283 804 0 0 0 0 
237 0 0 7 289 950 596 0 0 1 6 param0 0 948  
238 0 0 7 289 950 596 0 0 1 4 name 1 789  
239 0 0 7 288 804 0 0 0 0 
240 0 0 7 294 953 599 0 0 1 6 param0 0 951  
241 0 0 7 294 953 599 0 0 1 4 name 1 789  
242 0 0 7 293 804 0 0 0 0 
243 0 0 7 297 954 601 0 0 0 
244 0 0 7 300 955 603 0 0 0 
245 0 0 7 303 956 605 0 0 0 
246 0 0 7 306 957 607 0 0 0 
247 0 0 7 309 958 609 0 0 0 
248 0 0 7 312 959 611 0 0 0 
249 0 0 7 316 961 0 0 0 0 
250 0 0 7 317 804 0 0 0 0 
251 0 0 7 320 964 633 0 0 1 6 param0 0 962  
252 0 0 7 320 964 633 0 0 4 3 mgr 1 965  15 listener_target 1 889  4 root 1 889  13 task_priority 1 726  
253 0 0 4 321 794 0 0 0 2 4 this 3 964  6 factor 1 886  
254 0 0 6 322 886 0 0 0 1 4 this 3 962  
255 0 0 4 323 794 0 0 0 2 4 this 3 964  6 factor 1 886  
256 0 0 6 324 886 0 0 0 1 4 this 3 962  
257 0 0 4 325 794 0 0 0 2 4 this 3 964  6 factor 1 886  
258 0 0 6 326 886 0 0 0 1 4 this 3 962  
259 0 0 4 327 794 0 0 0 3 4 this 3 964  5 sound 1 967  4 dist 1 886  
260 0 0 6 328 886 0 0 0 2 4 this 3 962  5 sound 1 967  
261 0 0 4 329 794 0 0 0 3 4 this 3 964  5 sound 1 967  4 dist 1 886  
262 0 0 6 330 886 0 0 0 2 4 this 3 962  5 sound 1 967  
263 0 0 4 331 794 0 0 0 2 4 this 3 964  8 listener 1 889  
264 0 0 4 332 794 0 0 0 1 4 this 3 964  
265 0 0 7 333 967 0 0 0 2 4 this 3 964  4 path 1 789  
266 0 0 4 334 794 0 0 0 3 4 this 3 964  5 sound 1 967  6 object 1 889  
267 0 0 4 335 794 0 0 0 2 4 this 3 964  5 sound 1 967  
268 0 0 4 336 794 0 0 0 1 4 this 3 964  
269 0 0 4 337 794 0 0 0 1 4 this 3 964  
270 0 0 7 342 969 637 0 0 0 
271 0 0 7 342 969 637 0 0 1 6 param0 0 970  
272 0 0 4 340 794 0 0 0 4 1 x 1 797  1 y 1 797  4 left 1 823  5 right 1 823  
273 0 0 7 341 857 0 0 0 3 4 node 1 889  5 point 1 867  4 eyes 1 889  
274 0 0 7 345 972 639 0 0 0 
275 0 0 7 350 975 642 0 0 2 4 copy 1 973  10 query_size 1 797  
276 0 0 7 350 975 642 0 0 1 6 param0 0 976  
277 0 0 7 350 975 642 0 0 2 4 name 1 789  10 query_size 1 797  
278 0 0 7 349 804 0 0 0 0 
279 0 0 7 357 804 0 0 0 0 
280 0 0 7 358 899 0 0 0 1 4 this 3 978  
281 0 0 4 359 794 0 0 0 2 4 this 3 978  4 pass 1 979  
282 0 0 4 360 794 0 0 0 2 4 this 3 978  4 pass 1 979  
283 0 0 7 361 979 685 0 0 2 4 this 3 978  4 name 1 789  
284 0 0 4 362 794 0 0 0 1 4 this 3 978  
285 0 0 4 363 794 0 0 0 1 4 this 3 978  
286 0 0 4 364 794 0 0 0 2 4 this 3 978  3 win 1 980  
287 0 0 4 365 794 0 0 0 1 4 this 3 978  
288 0 0 7 353 917 0 0 0 1 4 this 3 978  
289 0 0 6 355 918 0 0 0 1 4 this 3 978  
290 0 0 7 374 979 685 0 0 8 2 pp 1 982  4 name 1 789  19 texture_output_bits 1 726  7 fbprops 1 983  10 force_size 1 800  11 forced_size 1 986  8 div_size 1 800  3 div 1 726  
291 0 0 7 374 979 685 0 0 1 6 param0 0 989  
292 0 0 7 373 804 0 0 0 0 
293 0 0 7 375 841 0 0 0 1 4 this 3 989  
294 0 0 7 376 991 0 0 0 1 4 this 3 989  
295 0 0 7 377 841 0 0 0 1 4 this 3 989  
296 0 0 6 378 800 0 0 0 2 4 this 3 989  4 bits 1 726  
297 0 0 4 379 794 0 0 0 3 4 this 3 979  8 div_size 1 800  3 div 1 726  
298 0 0 4 380 794 0 0 0 3 4 this 3 979  10 force_size 1 800  11 forced_size 1 986  
299 0 0 4 381 794 0 0 0 2 4 this 3 979  7 fbprops 1 983  
300 0 0 4 382 794 0 0 0 2 4 this 3 979  4 bits 1 726  
301 0 0 7 383 991 0 0 0 2 4 this 3 979  4 size 1 986  
302 0 0 7 384 899 0 0 0 2 4 this 3 979  3 bit 1 726  
303 0 0 7 385 899 0 0 0 1 4 this 3 979  
304 0 0 7 386 899 0 0 0 1 4 this 3 979  
305 0 0 6 387 800 0 0 0 1 4 this 3 979  
306 0 0 4 388 794 0 0 0 1 4 this 3 979  
307 0 0 4 389 794 0 0 0 1 4 this 3 979  
308 0 0 4 390 794 0 0 0 1 4 this 3 979  
309 0 0 4 391 794 0 0 0 1 4 this 3 979  
310 0 0 4 392 794 0 0 0 1 4 this 3 979  
311 0 0 4 393 794 0 0 0 1 4 this 3 979  
312 0 0 4 394 794 0 0 0 2 4 this 3 979  6 output 1 980  
313 0 0 4 395 794 0 0 0 1 4 this 3 979  
314 0 0 7 396 992 0 0 0 0 
315 0 0 7 369 917 0 0 0 1 4 this 3 979  
316 0 0 6 371 918 0 0 0 1 4 this 3 979  
317 0 0 7 399 993 689 0 0 3 2 pp 1 982  19 output_texture_bits 1 726  7 auxbits 1 726  
318 0 0 7 399 993 689 0 0 1 6 param0 0 994  
319 0 0 4 400 794 0 0 0 2 4 this 3 993  1 i 1 726  
320 0 0 4 401 794 0 0 0 2 4 this 3 993  5 state 1 996  
321 0 0 7 404 982 709 0 0 1 6 output 1 980  
322 0 0 7 404 982 709 0 0 1 6 param0 0 999  
323 0 0 4 405 794 0 0 0 2 4 this 3 982  6 camera 1 889  
324 0 0 4 406 794 0 0 0 2 4 this 3 982  6 camera 1 889  
325 0 0 4 407 794 0 0 0 2 4 this 3 982  6 effect 1 978  
326 0 0 4 408 794 0 0 0 2 4 this 3 982  6 effect 1 978  
327 0 0 7 409 978 656 0 0 2 4 this 3 982  4 name 1 789  
328 0 0 7 410 899 0 0 0 1 4 this 3 999  
329 0 0 7 411 899 0 0 0 1 4 this 3 999  
330 0 0 7 412 993 689 0 0 1 4 this 3 999  
331 0 0 7 413 980 0 0 0 1 4 this 3 999  
332 0 0 7 414 841 0 0 0 2 4 this 3 999  1 n 1 726  
333 0 0 6 415 726 0 0 0 1 4 this 3 982  
334 0 0 7 416 1002 0 0 0 1 4 this 3 999  
335 0 0 6 417 800 0 0 0 1 4 this 3 999  
336 0 0 4 418 794 0 0 0 2 4 this 3 982  4 bits 1 726  
337 0 0 4 419 794 0 0 0 3 4 this 3 982  1 n 1 726  6 region 1 1003  
338 0 0 4 420 794 0 0 0 2 4 this 3 982  6 region 1 1003  
339 0 0 4 421 794 0 0 0 3 4 this 3 982  1 n 1 726  6 region 1 1003  
340 0 0 4 422 794 0 0 0 1 4 this 3 982  
341 0 0 7 426 1007 714 0 0 1 6 param0 0 1005  
342 0 0 7 426 1007 714 0 0 1 2 pp 1 982  
343 0 0 7 425 804 0 0 0 0 
344 0 0 4 427 794 0 0 0 2 4 this 3 1007  6 output 1 932  
345 0 0 6 428 797 0 0 56 /**
	 * Returns the calculated exposure adjustment.
	 */ 1 4 this 3 1005  
346 0 0 7 431 1008 717 0 0 1 2 pp 1 982  
347 0 0 7 432 1007 714 0 0 1 4 this 3 1009  
348 0 0 7 436 1011 720 0 0 1 2 pp 1 982  
349 0 0 7 435 804 0 0 0 0 
291
721 13 TextureStages 0 141313 13 TextureStages 13 TextureStages 0 0 0 1 360 361 0 10 350 351 352 353 354 355 356 357 358 359 0 0 0 0 0 752
/**
 * This simple interface maintains a single TextureStage object for each unique name.
 * It avoids the creation of duplicate TextureStages with the same name, which
 * reduces texture swapping and draw call overhead.
 *
 * If using our shader system, you should always use this interface to get TextureStages.
 * You are not required to change any properties on the returned TextureStage, as the shader
 * specification will know what to do with the TextureStage from the name.
 * 
 * For example, you do not need to call TextureStage::set_mode() or NodePath::set_tex_gen().
 * If you apply a texture to a node with the get_normalmap() stage, the shader specification
 * will know that the texture you supplied is to be treated as a normal map.
 */

722 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 362 383 0 20 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 0 0 1 0 723 0 0 0 0 0

723 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

724 17 BSPMaterialAttrib 0 141313 17 BSPMaterialAttrib 17 BSPMaterialAttrib 0 0 0 0 392 1 1012 8 384 385 386 387 388 389 390 391 0 0 1 0 725 0 0 0 0 0

725 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

726 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

727 12 BoundingKDOP 0 141313 12 BoundingKDOP 12 BoundingKDOP 0 0 0 0 398 0 5 393 394 395 396 397 0 0 1 0 728 0 0 0 0 243
/**
 * This defines a bounding convex volume.  It may represent any enclosing convex volume,
 * including simple boxes.  However, if all you want is an axis-aligned
 * bounding box, you may be better off with the simpler BoundingBox class.
 */

728 20 FiniteBoundingVolume 0 2048 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 168
/**
 * A special kind of GeometricBoundingVolume that is known to be finite.  It
 * is possible to query this kind of volume for its minimum and maximum
 * extents.
 */

729 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 400 408 0 8 399 401 402 403 404 405 406 407 0 0 1 0 723 0 0 0 0 0

730 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 410 413 0 3 409 411 412 0 0 1 0 729 0 0 0 0 0

731 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 415 419 0 4 414 416 417 418 0 0 1 0 729 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

732 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 421 424 0 3 420 422 423 0 0 1 0 729 0 0 0 0 0

733 10 PackResult 0 141313 10 PackResult 10 PackResult 0 0 0 1 428 429 0 3 425 426 427 0 0 0 0 0 0

734 15 TextureLocation 0 141313 15 TextureLocation 15 TextureLocation 0 0 0 1 435 436 0 5 430 431 432 433 434 0 0 0 0 0 0

735 13 TexturePacker 0 141313 13 TexturePacker 13 TexturePacker 0 0 0 0 446 0 9 437 438 439 440 441 442 443 444 445 0 0 0 0 0 0

736 8 RayTrace 0 141313 8 RayTrace 8 RayTrace 0 0 0 1 449 450 0 2 447 448 0 0 0 0 0 0

737 17 RayTraceHitResult 0 141313 17 RayTraceHitResult 17 RayTraceHitResult 0 0 0 1 451 458 0 6 452 453 454 455 456 457 0 0 0 0 0 0

738 13 RayTraceScene 0 75777 13 RayTraceScene 13 RayTraceScene 0 0 0 1 459 0 0 8 460 461 462 463 464 465 466 467 0 0 1 0 739 0 0 0 1 740 0

739 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

740 0 0 794624 15 RayTraceScene:: 0 738 0 0 0 0 0 0 0 0 0 3 17 BUILD_QUALITY_LOW 32 RayTraceScene::BUILD_QUALITY_LOW 0
0 20 BUILD_QUALITY_MEDIUM 35 RayTraceScene::BUILD_QUALITY_MEDIUM 0
1 18 BUILD_QUALITY_HIGH 33 RayTraceScene::BUILD_QUALITY_HIGH 0
2 0 0

741 16 RayTraceGeometry 0 75777 16 RayTraceGeometry 16 RayTraceGeometry 0 0 0 0 0 0 6 468 469 470 471 472 473 0 0 1 0 742 0 0 0 0 0

742 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

743 20 RayTraceTriangleMesh 0 141313 20 RayTraceTriangleMesh 20 RayTraceTriangleMesh 0 0 0 1 475 478 0 3 474 476 477 0 0 1 0 741 0 0 0 0 0

744 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 487 1 1013 8 479 480 481 482 483 484 485 486 0 0 1 0 725 0 0 0 1 745 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

745 0 0 794624 15 BSPFaceAttrib:: 0 744 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

746 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 488 549 0 60 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 0 0 0 0 1 747 58
/**
 * Loads and handles the operations of PBSP files.
 */

747 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 746 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

748 18 ShaderPermutations 0 141313 18 ShaderPermutations 18 ShaderPermutations 0 0 0 1 550 556 0 5 551 552 553 554 555 0 0 1 0 739 0 0 0 0 97
/**
 * Represents a list of #defines and variable inputs to a shader that is being generated.
 */

749 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 0 563 0 2 561 562 0 0 2 3 739 557 558 3 750 559 560 0 0 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

750 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

751 13 ShaderQuality 0 532481 13 ShaderQuality 13 ShaderQuality 0 0 0 0 0 0 0 0 0 0 3 17 SHADERQUALITY_LOW 17 SHADERQUALITY_LOW 0
0 20 SHADERQUALITY_MEDIUM 20 SHADERQUALITY_MEDIUM 0
1 18 SHADERQUALITY_HIGH 18 SHADERQUALITY_HIGH 0
2 0 0

752 10 CameraBits 0 532481 10 CameraBits 10 CameraBits 0 0 0 0 0 0 0 0 0 0 6 11 CAMERA_MAIN 11 CAMERA_MAIN 0
1 13 CAMERA_SHADOW 13 CAMERA_SHADOW 0
2 17 CAMERA_REFLECTION 17 CAMERA_REFLECTION 0
4 17 CAMERA_REFRACTION 17 CAMERA_REFRACTION 0
8 16 CAMERA_VIEWMODEL 16 CAMERA_VIEWMODEL 0
16 14 CAMERA_COMPUTE 14 CAMERA_COMPUTE 0
32 0 0

753 7 AuxBits 0 532481 7 AuxBits 7 AuxBits 0 0 0 0 0 0 0 0 0 0 2 14 AUXBITS_NORMAL 14 AUXBITS_NORMAL 0
1 12 AUXBITS_ARME 12 AUXBITS_ARME 0
2 0 0

754 18 BSPShaderGenerator 0 141313 18 BSPShaderGenerator 18 BSPShaderGenerator 0 0 0 1 564 584 0 19 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 0 0 1 0 755 0 0 0 0 0

755 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

756 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 586 587 0 1 585 0 0 1 0 757 0 0 0 0 0

757 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

758 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 589 590 0 1 588 0 0 1 0 742 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

759 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 592 593 0 1 591 0 0 1 0 742 0 0 0 0 0

760 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 595 596 0 1 594 0 0 1 0 761 0 0 0 0 0

761 9 ModelRoot 0 2048 9 ModelRoot 9 ModelRoot 0 0 0 0 0 0 0 0 0 0 0 0 314
/**
 * A node of this type is created automatically at the root of each model file
 * that is loaded.  It may eventually contain some information about the
 * contents of the model; at the moment, it contains no special information,
 * but can be used as a flag to indicate the presence of a loaded model file.
 */

762 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 598 599 0 1 597 0 0 1 0 763 0 0 0 0 0

763 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

764 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 600 601 0 0 0 0 1 0 749 0 0 0 0 0

765 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 602 603 0 0 0 0 1 0 749 0 0 0 0 0

766 16 UnlitGenericSpec 0 141313 16 UnlitGenericSpec 16 UnlitGenericSpec 0 0 0 1 604 605 0 0 0 0 1 0 749 0 0 0 0 160
/**
 * Shader that only supports a basetexture, no fancy lighting effects or anything.
 * Could be used for UI elements, emissive materials, particles, etc.
 */

767 14 UnlitNoMatSpec 0 141313 14 UnlitNoMatSpec 14 UnlitNoMatSpec 0 0 0 1 606 607 0 0 0 0 1 0 749 0 0 0 0 0

768 13 CSMRenderSpec 0 141313 13 CSMRenderSpec 13 CSMRenderSpec 0 0 0 1 608 609 0 0 0 0 1 0 749 0 0 0 0 0

769 10 SkyBoxSpec 0 141313 10 SkyBoxSpec 10 SkyBoxSpec 0 0 0 1 610 611 0 0 0 0 1 0 749 0 0 0 0 0

770 18 AmbientBoostEffect 0 141313 18 AmbientBoostEffect 18 AmbientBoostEffect 0 0 0 0 614 0 2 612 613 0 0 1 0 771 0 0 0 0 0

771 12 RenderEffect 0 2048 12 RenderEffect 12 RenderEffect 0 0 0 0 0 0 0 0 0 0 0 0 901
/**
 * This is the base class for a number of special render effects that may be
 * set on scene graph nodes to change the way they render.  This includes
 * BillboardEffect, DecalEffect, etc.
 *
 * RenderEffect represents render properties that must be applied as soon as
 * they are encountered in the scene graph, rather than propagating down to
 * the leaves.  This is different from RenderAttrib, which represents
 * properties like color and texture that don't do anything until they
 * propagate down to a GeomNode.
 *
 * You should not attempt to create or modify a RenderEffect directly;
 * instead, use the make() method of the appropriate kind of effect you want.
 * This will allocate and return a new RenderEffect of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderEffect
 * if you wish to change its properties; instead, create a new one.
 */

772 14 Audio3DManager 0 141313 14 Audio3DManager 14 Audio3DManager 0 0 0 1 615 633 0 17 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 0 0 0 0 0 0

773 6 CIOLib 0 141313 6 CIOLib 6 CIOLib 0 0 0 1 636 637 0 2 634 635 0 0 0 0 0 0

774 17 DecalModulateSpec 0 141313 17 DecalModulateSpec 17 DecalModulateSpec 0 0 0 1 638 639 0 0 0 0 1 0 766 0 0 0 0 90
/**
 * This is just an alias of UnlitGeneric that enables color blending on the decal.
 */

775 8 GlowNode 0 141313 8 GlowNode 8 GlowNode 0 0 0 1 641 642 0 1 640 0 0 1 0 776 0 0 0 0 207
/**
 * This is a specialization on GeomNode that uses a pixel occlusion query
 * to determine if the Geoms on the node should be rendered.
 *
 * This is useful for things like light glows or lens flares.
 */

776 8 GeomNode 0 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 0 0 0 0 0 208
/**
 * A node that holds Geom objects, renderable pieces of geometry.  This is the
 * primary kind of leaf node in the scene graph; almost all visible objects
 * will be contained in a GeomNode somewhere.
 */

777 17 PostProcessEffect 0 141313 17 PostProcessEffect 17 PostProcessEffect 0 0 0 0 656 0 9 647 648 649 650 651 652 653 654 655 0 0 2 3 739 643 644 3 750 645 646 0 0 0

778 15 PassTextureBits 0 532481 15 PassTextureBits 15 PassTextureBits 0 0 0 0 0 0 0 0 0 0 6 22 bits_PASSTEXTURE_COLOR 22 bits_PASSTEXTURE_COLOR 0
1 22 bits_PASSTEXTURE_DEPTH 22 bits_PASSTEXTURE_DEPTH 0
2 21 bits_PASSTEXTURE_AUX0 21 bits_PASSTEXTURE_AUX0 0
4 21 bits_PASSTEXTURE_AUX1 21 bits_PASSTEXTURE_AUX1 0
8 21 bits_PASSTEXTURE_AUX2 21 bits_PASSTEXTURE_AUX2 0
16 21 bits_PASSTEXTURE_AUX3 21 bits_PASSTEXTURE_AUX3 0
32 0 0

779 15 PostProcessPass 0 141313 15 PostProcessPass 15 PostProcessPass 0 0 0 1 662 685 0 23 661 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 0 0 2 3 739 657 658 3 750 659 660 0 0 0

780 20 PostProcessScenePass 0 141313 20 PostProcessScenePass 20 PostProcessScenePass 0 0 0 1 686 689 0 2 687 688 0 0 1 0 779 0 0 0 0 0

781 11 PostProcess 0 141313 11 PostProcess 11 PostProcess 0 0 0 1 690 709 0 18 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 0 0 0 0 0 0

782 7 HDRPass 0 141313 7 HDRPass 7 HDRPass 0 0 0 1 711 714 0 3 710 712 713 0 0 1 0 779 0 0 0 0 0

783 9 HDREffect 0 141313 9 HDREffect 9 HDREffect 0 0 0 1 715 717 0 1 716 0 0 1 0 777 0 0 0 0 0

784 11 BloomEffect 0 141313 11 BloomEffect 11 BloomEffect 0 0 0 1 719 720 0 1 718 0 0 1 0 777 0 0 0 0 0

785 15 TextureStages * 0 8576 15 TextureStages * 15 TextureStages * 0 0 721 0 0 0 0 0 0 0 0 0 0

786 21 TextureStages const * 0 8576 21 TextureStages const * 21 TextureStages const * 0 0 787 0 0 0 0 0 0 0 0 0 0

787 19 TextureStages const 0 8832 19 TextureStages const 19 TextureStages const 0 0 721 0 0 0 0 0 0 0 0 0 0

788 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 336
/**
 * Defines the properties of a named stage of the multitexture pipeline.  The
 * TextureAttrib will associated a number of these stages with Texture
 * objects, and the GSG will render geometry by sorting all of the currently
 * active TextureStages in order and then issuing the appropriate rendering
 * calls to activate them.
 */

789 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

790 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 788 0 0 0 0 0 0 0 0 0 0

791 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 792 0 0 0 0 0 0 0 0 0 0

792 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 722 0 0 0 0 0 0 0 0 0 0

793 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 722 0 0 0 0 0 0 0 0 0 0

794 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

795 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 796 0 0 0 0 0 0 0 0 0 0

796 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

797 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

798 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

799 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 798 0 0 0 0 0 0 0 0 0 0

800 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

801 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 802 0 0 0 0 0 0 0 0 0 0

802 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 798 0 0 0 0 0 0 0 0 0 0

803 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

804 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 803 0 0 0 0 0 0 0 0 0 0

805 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 725 0 0 0 0 0 0 0 0 0 0

806 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 805 0 0 0 0 0 0 0 0 0 0

807 25 BSPMaterialAttrib const * 0 8576 25 BSPMaterialAttrib const * 25 BSPMaterialAttrib const * 0 0 808 0 0 0 0 0 0 0 0 0 0

808 23 BSPMaterialAttrib const 0 8832 23 BSPMaterialAttrib const 23 BSPMaterialAttrib const 0 0 724 0 0 0 0 0 0 0 0 0 0

809 20 BoundingKDOP const * 0 8576 20 BoundingKDOP const * 20 BoundingKDOP const * 0 0 810 0 0 0 0 0 0 0 0 0 0

810 18 BoundingKDOP const 0 8832 18 BoundingKDOP const 18 BoundingKDOP const 0 0 727 0 0 0 0 0 0 0 0 0 0

811 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 812 0 0 0 0 0 0 0 0 0 0

812 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

813 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 811 0 0 0 0 0 0 0 0 0 0

814 6 LPlane 0 2105344 6 LPlane 6 LPlane 0 0 815 0 0 0 0 0 0 0 0 0 0

815 7 LPlanef 0 2048 7 LPlanef 7 LPlanef 0 0 0 0 0 0 0 0 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

816 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 814 0 0 0 0 0 0 0 0 0 0

817 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 729 0 0 0 0 0 0 0 0 0 0

818 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 819 0 0 0 0 0 0 0 0 0 0

819 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 729 0 0 0 0 0 0 0 0 0 0

820 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 746 0 0 0 0 0 0 0 0 0 0

821 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 822 0 0 0 0 0 0 0 0 0 0

822 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

823 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 821 0 0 0 0 0 0 0 0 0 0

824 6 LColor 0 2105344 6 LColor 6 LColor 0 0 825 0 0 0 0 0 0 0 0 0 0

825 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 826 0 0 0 0 0 0 0 0 0 0

826 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

827 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 824 0 0 0 0 0 0 0 0 0 0

828 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 730 0 0 0 0 0 0 0 0 0 0

829 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 830 0 0 0 0 0 0 0 0 0 0

830 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 730 0 0 0 0 0 0 0 0 0 0

831 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 731 0 0 0 0 0 0 0 0 0 0

832 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 833 0 0 0 0 0 0 0 0 0 0

833 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 731 0 0 0 0 0 0 0 0 0 0

834 14 BoundingKDOP * 0 8576 14 BoundingKDOP * 14 BoundingKDOP * 0 0 727 0 0 0 0 0 0 0 0 0 0

835 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 836 0 0 0 0 0 0 0 0 0 0

836 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 811 0 0 0 0 0 0 0 0 0 0

837 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 732 0 0 0 0 0 0 0 0 0 0

838 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 839 0 0 0 0 0 0 0 0 0 0

839 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 732 0 0 0 0 0 0 0 0 0 0

840 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

841 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 840 0 0 0 0 0 0 0 0 0 0

842 18 PackResult const * 0 8576 18 PackResult const * 18 PackResult const * 0 0 843 0 0 0 0 0 0 0 0 0 0

843 16 PackResult const 0 8832 16 PackResult const 16 PackResult const 0 0 733 0 0 0 0 0 0 0 0 0 0

844 12 PackResult * 0 8576 12 PackResult * 12 PackResult * 0 0 733 0 0 0 0 0 0 0 0 0 0

845 23 TextureLocation const * 0 8576 23 TextureLocation const * 23 TextureLocation const * 0 0 846 0 0 0 0 0 0 0 0 0 0

846 21 TextureLocation const 0 8832 21 TextureLocation const 21 TextureLocation const 0 0 734 0 0 0 0 0 0 0 0 0 0

847 17 TextureLocation * 0 8576 17 TextureLocation * 17 TextureLocation * 0 0 734 0 0 0 0 0 0 0 0 0 0

848 15 TexturePacker * 0 8576 15 TexturePacker * 15 TexturePacker * 0 0 735 0 0 0 0 0 0 0 0 0 0

849 10 RayTrace * 0 8576 10 RayTrace * 10 RayTrace * 0 0 736 0 0 0 0 0 0 0 0 0 0

850 16 RayTrace const * 0 8576 16 RayTrace const * 16 RayTrace const * 0 0 851 0 0 0 0 0 0 0 0 0 0

851 14 RayTrace const 0 8832 14 RayTrace const 14 RayTrace const 0 0 736 0 0 0 0 0 0 0 0 0 0

852 19 RayTraceHitResult * 0 8576 19 RayTraceHitResult * 19 RayTraceHitResult * 0 0 737 0 0 0 0 0 0 0 0 0 0

853 25 RayTraceHitResult const * 0 8576 25 RayTraceHitResult const * 25 RayTraceHitResult const * 0 0 854 0 0 0 0 0 0 0 0 0 0

854 23 RayTraceHitResult const 0 8832 23 RayTraceHitResult const 23 RayTraceHitResult const 0 0 737 0 0 0 0 0 0 0 0 0 0

855 8 LVector2 0 2105344 8 LVector2 8 LVector2 0 0 856 0 0 0 0 0 0 0 0 0 0

856 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

857 10 LVector2 * 0 8576 10 LVector2 * 10 LVector2 * 0 0 855 0 0 0 0 0 0 0 0 0 0

858 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

859 15 RayTraceScene * 0 8576 15 RayTraceScene * 15 RayTraceScene * 0 0 738 0 0 0 0 0 0 0 0 0 0

860 21 RayTraceScene const * 0 8576 21 RayTraceScene const * 21 RayTraceScene const * 0 0 861 0 0 0 0 0 0 0 0 0 0

861 19 RayTraceScene const 0 8832 19 RayTraceScene const 19 RayTraceScene const 0 0 738 0 0 0 0 0 0 0 0 0 0

862 18 RayTraceGeometry * 0 8576 18 RayTraceGeometry * 18 RayTraceGeometry * 0 0 741 0 0 0 0 0 0 0 0 0 0

863 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 864 0 0 0 0 0 0 0 0 0 0

864 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 865 0 0 0 0 0 0 0 0 0 0

865 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 866 0 0 0 0 0 0 0 0 0 0

866 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

867 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 868 0 0 0 0 0 0 0 0 0 0

868 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 821 0 0 0 0 0 0 0 0 0 0

869 24 RayTraceGeometry const * 0 8576 24 RayTraceGeometry const * 24 RayTraceGeometry const * 0 0 870 0 0 0 0 0 0 0 0 0 0

870 22 RayTraceGeometry const 0 8832 22 RayTraceGeometry const 22 RayTraceGeometry const 0 0 741 0 0 0 0 0 0 0 0 0 0

871 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 865 0 0 0 0 0 0 0 0 0 0

872 22 RayTraceTriangleMesh * 0 8576 22 RayTraceTriangleMesh * 22 RayTraceTriangleMesh * 0 0 743 0 0 0 0 0 0 0 0 0 0

873 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 874 0 0 0 0 0 0 0 0 0 0

874 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 875 0 0 0 0 0 0 0 0 0 0

875 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

876 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 877 0 0 0 0 0 0 0 0 0 0

877 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 878 0 0 0 0 0 0 0 0 0 0

878 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

879 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 880 0 0 0 0 0 0 0 0 0 0

880 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 744 0 0 0 0 0 0 0 0 0 0

881 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 882 0 0 0 0 0 0 0 0 0 0

882 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 883 0 0 0 0 0 0 0 0 0 0

883 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

884 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 885 0 0 0 0 0 0 0 0 0 0

885 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 746 0 0 0 0 0 0 0 0 0 0

886 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 797 0 0 0 0 0 0 0 0 0 0

887 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 888 0 0 0 0 0 0 0 0 0 0

888 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

889 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 890 0 0 0 0 0 0 0 0 0 0

890 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 840 0 0 0 0 0 0 0 0 0 0

891 20 BSPShaderGenerator * 0 8576 20 BSPShaderGenerator * 20 BSPShaderGenerator * 0 0 754 0 0 0 0 0 0 0 0 0 0

892 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 893 0 0 0 0 0 0 0 0 0 0

893 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 894 0 0 0 0 0 0 0 0 0 0

894 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 895 0 0 0 0 0 0 0 0 0 0

895 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

896 15 LColorf const * 0 8576 15 LColorf const * 15 LColorf const * 0 0 897 0 0 0 0 0 0 0 0 0 0

897 13 LColorf const 0 8832 13 LColorf const 13 LColorf const 0 0 825 0 0 0 0 0 0 0 0 0 0

898 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

899 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 898 0 0 0 0 0 0 0 0 0 0

900 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 901 0 0 0 0 0 0 0 0 0 0

901 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 902 0 0 0 0 0 0 0 0 0 0

902 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

903 9 int const 0 8832 9 int const 9 int const 0 0 726 0 0 0 0 0 0 0 0 0 0

904 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 905 0 0 0 0 0 0 0 0 0 0

905 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 906 0 0 0 0 0 0 0 0 0 0

906 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

907 9 LTexCoord 0 2105344 9 LTexCoord 9 LTexCoord 0 0 908 0 0 0 0 0 0 0 0 0 0

908 10 LTexCoordf 0 2105344 10 LTexCoordf 10 LTexCoordf 0 0 895 0 0 0 0 0 0 0 0 0 0

909 11 LTexCoord * 0 8576 11 LTexCoord * 11 LTexCoord * 0 0 907 0 0 0 0 0 0 0 0 0 0

910 20 ShaderPermutations * 0 8576 20 ShaderPermutations * 20 ShaderPermutations * 0 0 748 0 0 0 0 0 0 0 0 0 0

911 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 912 0 0 0 0 0 0 0 0 0 0

912 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 913 0 0 0 0 0 0 0 0 0 0

913 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

914 26 ShaderPermutations const * 0 8576 26 ShaderPermutations const * 26 ShaderPermutations const * 0 0 915 0 0 0 0 0 0 0 0 0 0

915 24 ShaderPermutations const 0 8832 24 ShaderPermutations const 24 ShaderPermutations const 0 0 748 0 0 0 0 0 0 0 0 0 0

916 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 749 0 0 0 0 0 0 0 0 0 0

917 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 739 0 0 0 0 0 0 0 0 0 0

918 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 750 0 0 0 0 0 0 0 0 0 0

919 26 BSPShaderGenerator const * 0 8576 26 BSPShaderGenerator const * 26 BSPShaderGenerator const * 0 0 920 0 0 0 0 0 0 0 0 0 0

920 24 BSPShaderGenerator const 0 8832 24 BSPShaderGenerator const 24 BSPShaderGenerator const 0 0 754 0 0 0 0 0 0 0 0 0 0

921 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 922 0 0 0 0 0 0 0 0 0 0

922 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

923 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 924 0 0 0 0 0 0 0 0 0 0

924 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

925 5 Fog * 0 8576 5 Fog * 5 Fog * 0 0 926 0 0 0 0 0 0 0 0 0 0

926 3 Fog 0 2048 3 Fog 3 Fog 0 0 0 0 0 0 0 0 0 0 0 0 782
/**
 * Specifies how atmospheric fog effects are applied to geometry.  The Fog
 * object is now a PandaNode, which means it can be used similarly to a Light
 * to define effects relative to a particular coordinate system within the
 * scene graph.
 *
 * In exponential mode, the fog effects are always camera-relative, and it
 * does not matter where the Fog node is parented.  However, in linear mode,
 * the onset and opaque distances are defined as offsets along the local
 * forward axis (e.g.  the Y axis).  This allows the fog effect to be
 * localized to a particular region in space, rather than always camera-
 * relative.  If the fog object is not parented to any node, it is used to
 * generate traditonal camera-relative fog, as if it were parented to the
 * camera.
 */

927 14 PTA_LVecBase4f 0 2105344 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 928 0 0 0 0 0 0 0 0 0 0

928 37 PointerToArray< UnalignedLVecBase4f > 0 2048 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 0 0 0 0 0 0 0 0 0 0

929 16 PTA_LVecBase4f * 0 8576 16 PTA_LVecBase4f * 16 PTA_LVecBase4f * 0 0 927 0 0 0 0 0 0 0 0 0 0

930 9 PTA_float 0 2105344 9 PTA_float 9 PTA_float 0 0 931 0 0 0 0 0 0 0 0 0 0

931 23 PointerToArray< float > 0 2048 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

932 11 PTA_float * 0 8576 11 PTA_float * 11 PTA_float * 0 0 930 0 0 0 0 0 0 0 0 0 0

933 12 Shader const 0 8832 12 Shader const 12 Shader const 0 0 934 0 0 0 0 0 0 0 0 0 0

934 6 Shader 0 2048 6 Shader 6 Shader 0 0 0 0 0 0 0 0 0 0 0 0 8
/**

 */

935 18 ShaderSpec const * 0 8576 18 ShaderSpec const * 18 ShaderSpec const * 0 0 936 0 0 0 0 0 0 0 0 0 0

936 16 ShaderSpec const 0 8832 16 ShaderSpec const 16 ShaderSpec const 0 0 749 0 0 0 0 0 0 0 0 0 0

937 14 Shader const * 0 8576 14 Shader const * 14 Shader const * 0 0 933 0 0 0 0 0 0 0 0 0 0

938 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 939 0 0 0 0 0 0 0 0 0 0

939 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 756 0 0 0 0 0 0 0 0 0 0

940 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 756 0 0 0 0 0 0 0 0 0 0

941 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 757 0 0 0 0 0 0 0 0 0 0

942 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 943 0 0 0 0 0 0 0 0 0 0

943 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 758 0 0 0 0 0 0 0 0 0 0

944 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 758 0 0 0 0 0 0 0 0 0 0

945 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 946 0 0 0 0 0 0 0 0 0 0

946 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 759 0 0 0 0 0 0 0 0 0 0

947 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 759 0 0 0 0 0 0 0 0 0 0

948 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 949 0 0 0 0 0 0 0 0 0 0

949 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 760 0 0 0 0 0 0 0 0 0 0

950 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 760 0 0 0 0 0 0 0 0 0 0

951 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 952 0 0 0 0 0 0 0 0 0 0

952 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 762 0 0 0 0 0 0 0 0 0 0

953 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 762 0 0 0 0 0 0 0 0 0 0

954 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 764 0 0 0 0 0 0 0 0 0 0

955 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 765 0 0 0 0 0 0 0 0 0 0

956 18 UnlitGenericSpec * 0 8576 18 UnlitGenericSpec * 18 UnlitGenericSpec * 0 0 766 0 0 0 0 0 0 0 0 0 0

957 16 UnlitNoMatSpec * 0 8576 16 UnlitNoMatSpec * 16 UnlitNoMatSpec * 0 0 767 0 0 0 0 0 0 0 0 0 0

958 15 CSMRenderSpec * 0 8576 15 CSMRenderSpec * 15 CSMRenderSpec * 0 0 768 0 0 0 0 0 0 0 0 0 0

959 12 SkyBoxSpec * 0 8576 12 SkyBoxSpec * 12 SkyBoxSpec * 0 0 769 0 0 0 0 0 0 0 0 0 0

960 18 RenderEffect const 0 8832 18 RenderEffect const 18 RenderEffect const 0 0 771 0 0 0 0 0 0 0 0 0 0

961 20 RenderEffect const * 0 8576 20 RenderEffect const * 20 RenderEffect const * 0 0 960 0 0 0 0 0 0 0 0 0 0

962 22 Audio3DManager const * 0 8576 22 Audio3DManager const * 22 Audio3DManager const * 0 0 963 0 0 0 0 0 0 0 0 0 0

963 20 Audio3DManager const 0 8832 20 Audio3DManager const 20 Audio3DManager const 0 0 772 0 0 0 0 0 0 0 0 0 0

964 16 Audio3DManager * 0 8576 16 Audio3DManager * 16 Audio3DManager * 0 0 772 0 0 0 0 0 0 0 0 0 0

965 14 AudioManager * 0 8576 14 AudioManager * 14 AudioManager * 0 0 966 0 0 0 0 0 0 0 0 0 0

966 12 AudioManager 0 2048 12 AudioManager 12 AudioManager 0 0 0 0 0 0 0 0 0 0 0 0 0

967 12 AudioSound * 0 8576 12 AudioSound * 12 AudioSound * 0 0 968 0 0 0 0 0 0 0 0 0 0

968 10 AudioSound 0 2048 10 AudioSound 10 AudioSound 0 0 0 0 0 0 0 0 0 0 0 0 0

969 8 CIOLib * 0 8576 8 CIOLib * 8 CIOLib * 0 0 773 0 0 0 0 0 0 0 0 0 0

970 14 CIOLib const * 0 8576 14 CIOLib const * 14 CIOLib const * 0 0 971 0 0 0 0 0 0 0 0 0 0

971 12 CIOLib const 0 8832 12 CIOLib const 12 CIOLib const 0 0 773 0 0 0 0 0 0 0 0 0 0

972 19 DecalModulateSpec * 0 8576 19 DecalModulateSpec * 19 DecalModulateSpec * 0 0 774 0 0 0 0 0 0 0 0 0 0

973 16 GeomNode const * 0 8576 16 GeomNode const * 16 GeomNode const * 0 0 974 0 0 0 0 0 0 0 0 0 0

974 14 GeomNode const 0 8832 14 GeomNode const 14 GeomNode const 0 0 776 0 0 0 0 0 0 0 0 0 0

975 10 GlowNode * 0 8576 10 GlowNode * 10 GlowNode * 0 0 775 0 0 0 0 0 0 0 0 0 0

976 16 GlowNode const * 0 8576 16 GlowNode const * 16 GlowNode const * 0 0 977 0 0 0 0 0 0 0 0 0 0

977 14 GlowNode const 0 8832 14 GlowNode const 14 GlowNode const 0 0 775 0 0 0 0 0 0 0 0 0 0

978 19 PostProcessEffect * 0 8576 19 PostProcessEffect * 19 PostProcessEffect * 0 0 777 0 0 0 0 0 0 0 0 0 0

979 17 PostProcessPass * 0 8576 17 PostProcessPass * 17 PostProcessPass * 0 0 779 0 0 0 0 0 0 0 0 0 0

980 16 GraphicsOutput * 0 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 981 0 0 0 0 0 0 0 0 0 0

981 14 GraphicsOutput 0 2048 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 0 0 0 0 0 0 0 0 727
/**
 * This is a base class for the various different classes that represent the
 * result of a frame of rendering.  The most common kind of GraphicsOutput is
 * a GraphicsWindow, which is a real-time window on the desktop, but another
 * example is GraphicsBuffer, which is an offscreen buffer.
 *
 * The actual rendering, and anything associated with the graphics context
 * itself, is managed by the associated GraphicsStateGuardian (which might
 * output to multiple GraphicsOutput objects).
 *
 * GraphicsOutputs are not actually writable to bam files, of course, but they
 * may be passed as event parameters, so they inherit from
 * TypedWritableReferenceCount instead of TypedReferenceCount for that
 * convenience.
 */

982 13 PostProcess * 0 8576 13 PostProcess * 13 PostProcess * 0 0 781 0 0 0 0 0 0 0 0 0 0

983 29 FrameBufferProperties const * 0 8576 29 FrameBufferProperties const * 29 FrameBufferProperties const * 0 0 984 0 0 0 0 0 0 0 0 0 0

984 27 FrameBufferProperties const 0 8832 27 FrameBufferProperties const 27 FrameBufferProperties const 0 0 985 0 0 0 0 0 0 0 0 0 0

985 21 FrameBufferProperties 0 2048 21 FrameBufferProperties 21 FrameBufferProperties 0 0 0 0 0 0 0 0 0 0 0 0 132
/**
 * A container for the various kinds of properties we might ask to have on a
 * graphics frameBuffer before we create a GSG.
 */

986 17 LVector2i const * 0 8576 17 LVector2i const * 17 LVector2i const * 0 0 987 0 0 0 0 0 0 0 0 0 0

987 15 LVector2i const 0 8832 15 LVector2i const 15 LVector2i const 0 0 988 0 0 0 0 0 0 0 0 0 0

988 9 LVector2i 0 2048 9 LVector2i 9 LVector2i 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

989 23 PostProcessPass const * 0 8576 23 PostProcessPass const * 23 PostProcessPass const * 0 0 990 0 0 0 0 0 0 0 0 0 0

990 21 PostProcessPass const 0 8832 21 PostProcessPass const 21 PostProcessPass const 0 0 779 0 0 0 0 0 0 0 0 0 0

991 11 LVector2i * 0 8576 11 LVector2i * 11 LVector2i * 0 0 988 0 0 0 0 0 0 0 0 0 0

992 23 FrameBufferProperties * 0 8576 23 FrameBufferProperties * 23 FrameBufferProperties * 0 0 985 0 0 0 0 0 0 0 0 0 0

993 22 PostProcessScenePass * 0 8576 22 PostProcessScenePass * 22 PostProcessScenePass * 0 0 780 0 0 0 0 0 0 0 0 0 0

994 28 PostProcessScenePass const * 0 8576 28 PostProcessScenePass const * 28 PostProcessScenePass const * 0 0 995 0 0 0 0 0 0 0 0 0 0

995 26 PostProcessScenePass const 0 8832 26 PostProcessScenePass const 26 PostProcessScenePass const 0 0 780 0 0 0 0 0 0 0 0 0 0

996 19 RenderState const * 0 8576 19 RenderState const * 19 RenderState const * 0 0 997 0 0 0 0 0 0 0 0 0 0

997 17 RenderState const 0 8832 17 RenderState const 17 RenderState const 0 0 998 0 0 0 0 0 0 0 0 0 0

998 11 RenderState 0 2048 11 RenderState 11 RenderState 0 0 0 0 0 0 0 0 0 0 0 0 340
/**
 * This represents a unique collection of RenderAttrib objects that correspond
 * to a particular renderable state.
 *
 * You should not attempt to create or modify a RenderState object directly.
 * Instead, call one of the make() functions to create one for you.  And
 * instead of modifying a RenderState object, create a new one.
 */

999 19 PostProcess const * 0 8576 19 PostProcess const * 19 PostProcess const * 0 0 1000 0 0 0 0 0 0 0 0 0 0

1000 17 PostProcess const 0 8832 17 PostProcess const 17 PostProcess const 0 0 781 0 0 0 0 0 0 0 0 0 0

1001 13 DisplayRegion 0 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 399
/**
 * A rectangular subregion within a window for rendering into.  Typically,
 * there is one DisplayRegion that covers the whole window, but you may also
 * create smaller DisplayRegions for having different regions within the
 * window that represent different scenes.  You may also stack up
 * DisplayRegions like panes of glass, usually for layering 2-d interfaces on
 * top of a 3-d scene.
 */

1002 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 1001 0 0 0 0 0 0 0 0 0 0

1003 16 DrawableRegion * 0 8576 16 DrawableRegion * 16 DrawableRegion * 0 0 1004 0 0 0 0 0 0 0 0 0 0

1004 14 DrawableRegion 0 2048 14 DrawableRegion 14 DrawableRegion 0 0 0 0 0 0 0 0 0 0 0 0 389
/**
 * This is a base class for GraphicsWindow (actually, GraphicsOutput) and
 * DisplayRegion, both of which are conceptually rectangular regions into
 * which drawing commands may be issued.  Sometimes you want to deal with a
 * single display region, and sometimes you want to deal with the whole window
 * at once, particularly for issuing clear commands and capturing screenshots.
 */

1005 15 HDRPass const * 0 8576 15 HDRPass const * 15 HDRPass const * 0 0 1006 0 0 0 0 0 0 0 0 0 0

1006 13 HDRPass const 0 8832 13 HDRPass const 13 HDRPass const 0 0 782 0 0 0 0 0 0 0 0 0 0

1007 9 HDRPass * 0 8576 9 HDRPass * 9 HDRPass * 0 0 782 0 0 0 0 0 0 0 0 0 0

1008 11 HDREffect * 0 8576 11 HDREffect * 11 HDREffect * 0 0 783 0 0 0 0 0 0 0 0 0 0

1009 17 HDREffect const * 0 8576 17 HDREffect const * 17 HDREffect const * 0 0 1010 0 0 0 0 0 0 0 0 0 0

1010 15 HDREffect const 0 8832 15 HDREffect const 15 HDREffect const 0 0 783 0 0 0 0 0 0 0 0 0 0

1011 13 BloomEffect * 0 8576 13 BloomEffect * 13 BloomEffect * 0 0 784 0 0 0 0 0 0 0 0 0 0

0
2
1012 10 class_slot 0 2 726 390 0 0 0 0 0 0 0 29 BSPMaterialAttrib::class_slot 0

1013 10 class_slot 0 2 726 485 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

0
