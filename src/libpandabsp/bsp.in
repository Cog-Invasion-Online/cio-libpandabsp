1587106955
3 3
3 bsp 4 t5GT 3 bsp 
394
369 3 get 0 4 763 18 TextureStages::get 0 2 3 4 0
159
static TextureStage *TextureStages::get(std::string const &name);
static TextureStage *TextureStages::get(std::string const &name, std::string const &uv_name);

370 15 get_basetexture 0 4 763 30 TextureStages::get_basetexture 0 1 5 0
58
static TextureStage *TextureStages::get_basetexture(void);

371 12 get_lightmap 0 4 763 27 TextureStages::get_lightmap 0 1 6 0
55
static TextureStage *TextureStages::get_lightmap(void);

372 19 get_bumped_lightmap 0 4 763 34 TextureStages::get_bumped_lightmap 0 1 7 0
62
static TextureStage *TextureStages::get_bumped_lightmap(void);

373 13 get_spheremap 0 4 763 28 TextureStages::get_spheremap 0 1 8 0
56
static TextureStage *TextureStages::get_spheremap(void);

374 11 get_cubemap 0 4 763 26 TextureStages::get_cubemap 0 1 9 0
54
static TextureStage *TextureStages::get_cubemap(void);

375 13 get_normalmap 0 4 763 28 TextureStages::get_normalmap 0 1 10 0
56
static TextureStage *TextureStages::get_normalmap(void);

376 13 get_heightmap 0 4 763 28 TextureStages::get_heightmap 0 1 11 0
56
static TextureStage *TextureStages::get_heightmap(void);

377 12 get_glossmap 0 4 763 27 TextureStages::get_glossmap 0 1 12 0
55
static TextureStage *TextureStages::get_glossmap(void);

378 11 get_glowmap 0 4 763 26 TextureStages::get_glowmap 0 1 13 0
54
static TextureStage *TextureStages::get_glowmap(void);

379 13 TextureStages 0 4 763 28 TextureStages::TextureStages 0 2 1 2 0
122
inline TextureStages::TextureStages(void) = default;
inline TextureStages::TextureStages(TextureStages const &) = default;

380 14 ~TextureStages 0 4 763 29 TextureStages::~TextureStages 0 0 0
36
TextureStages::~TextureStages(void);

381 11 BSPMaterial 0 4 764 24 BSPMaterial::BSPMaterial 0 2 14 15 0
139
inline explicit BSPMaterial::BSPMaterial(std::string const &name = "UnlitNoMat");
inline BSPMaterial::BSPMaterial(BSPMaterial const &copy);

382 10 operator = 0 4 764 23 BSPMaterial::operator = 0 1 16 0
61
inline void BSPMaterial::operator =(BSPMaterial const &copy);

383 12 set_keyvalue 0 4 764 25 BSPMaterial::set_keyvalue 0 1 17 0
88
inline void BSPMaterial::set_keyvalue(std::string const &key, std::string const &value);

384 12 get_keyvalue 0 4 764 25 BSPMaterial::get_keyvalue 0 1 18 0
75
inline std::string BSPMaterial::get_keyvalue(std::string const &key) const;

385 17 get_num_keyvalues 0 4 764 30 BSPMaterial::get_num_keyvalues 0 1 19 0
62
inline std::size_t BSPMaterial::get_num_keyvalues(void) const;

386 7 get_key 0 4 764 20 BSPMaterial::get_key 0 1 20 0
68
inline std::string const &BSPMaterial::get_key(std::size_t i) const;

387 9 get_value 0 4 764 22 BSPMaterial::get_value 0 1 21 0
70
inline std::string const &BSPMaterial::get_value(std::size_t i) const;

388 16 get_keyvalue_int 0 4 764 29 BSPMaterial::get_keyvalue_int 0 1 22 0
71
inline int BSPMaterial::get_keyvalue_int(std::string const &key) const;

389 18 get_keyvalue_float 0 4 764 31 BSPMaterial::get_keyvalue_float 0 1 23 0
75
inline float BSPMaterial::get_keyvalue_float(std::string const &key) const;

390 10 set_shader 0 4 764 23 BSPMaterial::set_shader 0 1 24 0
68
inline void BSPMaterial::set_shader(std::string const &shader_name);

391 10 get_shader 0 4 764 23 BSPMaterial::get_shader 0 1 25 0
55
inline std::string BSPMaterial::get_shader(void) const;

392 8 get_file 0 4 764 21 BSPMaterial::get_file 0 1 26 0
50
inline Filename BSPMaterial::get_file(void) const;

393 12 has_keyvalue 0 4 764 25 BSPMaterial::has_keyvalue 0 1 27 0
68
inline bool BSPMaterial::has_keyvalue(std::string const &key) const;

394 15 has_env_cubemap 0 4 764 28 BSPMaterial::has_env_cubemap 0 1 28 0
53
inline bool BSPMaterial::has_env_cubemap(void) const;

395 16 has_transparency 0 4 764 29 BSPMaterial::has_transparency 0 1 29 0
54
inline bool BSPMaterial::has_transparency(void) const;

396 16 get_surface_prop 0 4 764 29 BSPMaterial::get_surface_prop 0 1 30 0
61
inline std::string BSPMaterial::get_surface_prop(void) const;

397 12 get_contents 0 4 764 25 BSPMaterial::get_contents 0 1 31 0
57
inline std::string BSPMaterial::get_contents(void) const;

398 14 is_lightmapped 0 4 764 27 BSPMaterial::is_lightmapped 0 1 32 0
52
inline bool BSPMaterial::is_lightmapped(void) const;

399 9 is_skybox 0 4 764 22 BSPMaterial::is_skybox 0 1 33 0
47
inline bool BSPMaterial::is_skybox(void) const;

400 11 has_bumpmap 0 4 764 24 BSPMaterial::has_bumpmap 0 1 34 0
49
inline bool BSPMaterial::has_bumpmap(void) const;

401 13 get_from_file 0 4 764 26 BSPMaterial::get_from_file 0 1 35 0
75
static BSPMaterial const *BSPMaterial::get_from_file(Filename const &file);

402 14 get_class_type 0 4 764 27 BSPMaterial::get_class_type 0 1 36 0
52
static TypeHandle BSPMaterial::get_class_type(void);

403 12 ~BSPMaterial 0 4 764 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

404 4 make 0 4 766 23 BSPMaterialAttrib::make 0 1 37 0
86
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make(BSPMaterial const *mat);

405 20 make_override_shader 0 4 766 39 BSPMaterialAttrib::make_override_shader 0 1 38 0
102
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_override_shader(BSPMaterial const *mat);

406 12 make_default 0 4 766 31 BSPMaterialAttrib::make_default 0 1 39 0
76
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_default(void);

407 19 get_override_shader 0 4 766 38 BSPMaterialAttrib::get_override_shader 0 1 40 0
70
inline std::string BSPMaterialAttrib::get_override_shader(void) const;

408 19 has_override_shader 0 4 766 38 BSPMaterialAttrib::has_override_shader 0 1 41 0
63
inline bool BSPMaterialAttrib::has_override_shader(void) const;

409 12 get_material 0 4 766 31 BSPMaterialAttrib::get_material 0 1 42 0
70
inline BSPMaterial const *BSPMaterialAttrib::get_material(void) const;

410 14 get_class_slot 0 4 766 33 BSPMaterialAttrib::get_class_slot 0 1 43 0
51
static int BSPMaterialAttrib::get_class_slot(void);

411 14 get_class_type 0 4 766 33 BSPMaterialAttrib::get_class_type 0 1 44 0
58
static TypeHandle BSPMaterialAttrib::get_class_type(void);

412 18 ~BSPMaterialAttrib 0 4 766 37 BSPMaterialAttrib::~BSPMaterialAttrib 0 0 0
44
BSPMaterialAttrib::~BSPMaterialAttrib(void);

413 9 get_width 0 4 769 21 PackResult::get_width 0 1 46 0
45
inline int PackResult::get_width(void) const;

414 10 get_height 0 4 769 22 PackResult::get_height 0 1 47 0
46
inline int PackResult::get_height(void) const;

415 15 get_unused_area 0 4 769 27 PackResult::get_unused_area 0 1 48 0
51
inline int PackResult::get_unused_area(void) const;

416 10 PackResult 0 4 769 22 PackResult::PackResult 0 1 45 0
60
inline PackResult::PackResult(PackResult const &) = default;

417 11 ~PackResult 0 4 769 23 PackResult::~PackResult 0 0 0
30
PackResult::~PackResult(void);

418 5 get_x 0 4 770 22 TextureLocation::get_x 0 1 50 0
46
inline int TextureLocation::get_x(void) const;

419 5 get_y 0 4 770 22 TextureLocation::get_y 0 1 51 0
46
inline int TextureLocation::get_y(void) const;

420 9 get_width 0 4 770 26 TextureLocation::get_width 0 1 52 0
50
inline int TextureLocation::get_width(void) const;

421 10 get_height 0 4 770 27 TextureLocation::get_height 0 1 53 0
51
inline int TextureLocation::get_height(void) const;

422 11 get_rotated 0 4 770 28 TextureLocation::get_rotated 0 1 54 0
53
inline bool TextureLocation::get_rotated(void) const;

423 15 TextureLocation 0 4 770 32 TextureLocation::TextureLocation 0 1 49 0
75
inline TextureLocation::TextureLocation(TextureLocation const &) = default;

424 16 ~TextureLocation 0 4 770 33 TextureLocation::~TextureLocation 0 0 0
40
TextureLocation::~TextureLocation(void);

425 15 getTextureCount 0 6 771 30 TexturePacker::getTextureCount 0 1 55 0
53
virtual int TexturePacker::getTextureCount(void) = 0;

426 15 setTextureCount 0 6 771 30 TexturePacker::setTextureCount 0 1 56 35
// number of textures to consider..
60
virtual void TexturePacker::setTextureCount(int tcount) = 0;

427 10 addTexture 0 6 771 25 TexturePacker::addTexture 0 1 57 21
// add textures 0 - n
61
virtual void TexturePacker::addTexture(int wid, int hit) = 0;

428 15 wouldTextureFit 0 6 771 30 TexturePacker::wouldTextureFit 0 1 58 0
135
virtual bool TexturePacker::wouldTextureFit(int wid, int hit, bool forcePowerOfTwo, bool onePixelBorder, int max_wid, int max_hit) = 0;

429 13 addNewTexture 0 6 771 28 TexturePacker::addNewTexture 0 1 59 0
64
virtual void TexturePacker::addNewTexture(int wid, int hit) = 0;

430 12 packTextures 0 6 771 27 TexturePacker::packTextures 0 1 60 74
// pack the textures, the return code is the amount of wasted/unused area.
94
virtual PackResult TexturePacker::packTextures(bool forcePowerOfTwo, bool onePixelBorder) = 0;

431 18 getTextureLocation 0 6 771 33 TexturePacker::getTextureLocation 0 1 61 58
// returns true if the texture has been rotated 90 degrees
73
virtual TextureLocation TexturePacker::getTextureLocation(int index) = 0;

432 19 createTexturePacker 0 4 771 34 TexturePacker::createTexturePacker 0 1 62 0
63
static TexturePacker *TexturePacker::createTexturePacker(void);

433 20 releaseTexturePacker 0 4 771 35 TexturePacker::releaseTexturePacker 0 1 63 0
67
static void TexturePacker::releaseTexturePacker(TexturePacker *tp);

434 14 ~TexturePacker 0 4 771 29 TexturePacker::~TexturePacker 0 0 0
36
TexturePacker::~TexturePacker(void);

435 10 initialize 0 4 772 20 RayTrace::initialize 0 1 66 0
39
static void RayTrace::initialize(void);

436 8 destruct 0 4 772 18 RayTrace::destruct 0 1 67 0
37
static void RayTrace::destruct(void);

437 8 RayTrace 0 4 772 18 RayTrace::RayTrace 0 2 64 65 0
97
inline RayTrace::RayTrace(void) = default;
inline RayTrace::RayTrace(RayTrace const &) = default;

438 9 ~RayTrace 0 4 772 19 RayTrace::~RayTrace 0 0 0
26
RayTrace::~RayTrace(void);

439 17 RayTraceHitResult 0 4 773 36 RayTraceHitResult::RayTraceHitResult 0 2 68 69 0
132
inline RayTraceHitResult::RayTraceHitResult(void);
inline RayTraceHitResult::RayTraceHitResult(RayTraceHitResult const &) = default;

440 7 has_hit 0 4 773 26 RayTraceHitResult::has_hit 0 1 70 0
51
inline bool RayTraceHitResult::has_hit(void) const;

441 14 get_hit_normal 0 4 773 33 RayTraceHitResult::get_hit_normal 0 1 71 0
62
inline LVector3 RayTraceHitResult::get_hit_normal(void) const;

442 6 get_uv 0 4 773 25 RayTraceHitResult::get_uv 0 1 72 0
54
inline LVector2 RayTraceHitResult::get_uv(void) const;

443 11 get_prim_id 0 4 773 30 RayTraceHitResult::get_prim_id 0 1 73 0
63
inline unsigned int RayTraceHitResult::get_prim_id(void) const;

444 11 get_geom_id 0 4 773 30 RayTraceHitResult::get_geom_id 0 1 74 0
63
inline unsigned int RayTraceHitResult::get_geom_id(void) const;

445 16 get_hit_fraction 0 4 773 35 RayTraceHitResult::get_hit_fraction 0 1 75 0
61
inline float RayTraceHitResult::get_hit_fraction(void) const;

446 18 ~RayTraceHitResult 0 4 773 37 RayTraceHitResult::~RayTraceHitResult 0 0 0
44
RayTraceHitResult::~RayTraceHitResult(void);

447 13 RayTraceScene 0 4 774 28 RayTraceScene::RayTraceScene 0 2 76 77 0
105
RayTraceScene::RayTraceScene(void);
inline RayTraceScene::RayTraceScene(RayTraceScene const &) = default;

448 12 add_geometry 0 4 774 27 RayTraceScene::add_geometry 0 1 78 0
57
void RayTraceScene::add_geometry(RayTraceGeometry *geom);

449 15 remove_geometry 0 4 774 30 RayTraceScene::remove_geometry 0 1 79 0
60
void RayTraceScene::remove_geometry(RayTraceGeometry *geom);

450 10 remove_all 0 4 774 25 RayTraceScene::remove_all 0 1 80 0
37
void RayTraceScene::remove_all(void);

451 10 trace_line 0 4 774 25 RayTraceScene::trace_line 0 1 81 0
116
inline RayTraceHitResult RayTraceScene::trace_line(LPoint3 const &start, LPoint3 const &end, BitMask32 const &mask);

452 9 trace_ray 0 4 774 24 RayTraceScene::trace_ray 0 1 82 0
132
RayTraceHitResult RayTraceScene::trace_ray(LPoint3 const &origin, LVector3 const &direction, float distance, BitMask32 const &mask);

453 17 set_build_quality 0 4 774 32 RayTraceScene::set_build_quality 0 1 83 0
51
void RayTraceScene::set_build_quality(int quality);

454 6 update 0 4 774 21 RayTraceScene::update 0 1 84 0
33
void RayTraceScene::update(void);

455 12 get_geometry 0 4 774 27 RayTraceScene::get_geometry 0 1 85 0
75
inline RayTraceGeometry *RayTraceScene::get_geometry(unsigned int geom_id);

456 14 get_class_type 0 4 777 32 RayTraceGeometry::get_class_type 0 1 86 0
57
static TypeHandle RayTraceGeometry::get_class_type(void);

457 8 set_mask 0 4 777 26 RayTraceGeometry::set_mask 0 2 87 88 0
114
inline void RayTraceGeometry::set_mask(BitMask32 const &mask);
void RayTraceGeometry::set_mask(unsigned int mask);

458 8 get_mask 0 4 777 26 RayTraceGeometry::get_mask 0 1 89 0
56
inline BitMask32 RayTraceGeometry::get_mask(void) const;

459 11 get_geom_id 0 4 777 29 RayTraceGeometry::get_geom_id 0 1 90 0
62
inline unsigned int RayTraceGeometry::get_geom_id(void) const;

460 17 set_build_quality 0 4 777 35 RayTraceGeometry::set_build_quality 0 1 91 0
54
void RayTraceGeometry::set_build_quality(int quality);

461 5 build 0 6 777 23 RayTraceGeometry::build 0 1 92 0
47
virtual void RayTraceGeometry::build(void) = 0;

462 14 get_class_type 0 4 779 36 RayTraceTriangleMesh::get_class_type 0 1 94 0
61
static TypeHandle RayTraceTriangleMesh::get_class_type(void);

463 20 RayTraceTriangleMesh 0 4 779 42 RayTraceTriangleMesh::RayTraceTriangleMesh 0 1 93 0
73
RayTraceTriangleMesh::RayTraceTriangleMesh(std::string const &name = "");

464 12 add_triangle 0 4 779 34 RayTraceTriangleMesh::add_triangle 0 1 95 0
97
void RayTraceTriangleMesh::add_triangle(LPoint3 const &p1, LPoint3 const &p2, LPoint3 const &p3);

465 23 add_triangles_from_geom 0 4 779 45 RayTraceTriangleMesh::add_triangles_from_geom 0 1 96 0
105
void RayTraceTriangleMesh::add_triangles_from_geom(Geom const *geom, TransformState const *ts = nullptr);

466 21 ~RayTraceTriangleMesh 0 4 779 43 RayTraceTriangleMesh::~RayTraceTriangleMesh 0 0 0
50
RayTraceTriangleMesh::~RayTraceTriangleMesh(void);

467 4 make 0 4 780 19 BSPFaceAttrib::make 0 1 97 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

468 12 make_default 0 4 780 27 BSPFaceAttrib::make_default 0 1 98 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

469 15 make_ignore_pvs 0 4 780 30 BSPFaceAttrib::make_ignore_pvs 0 1 99 0
75
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_ignore_pvs(void);

470 12 get_material 0 4 780 27 BSPFaceAttrib::get_material 0 1 100 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

471 13 get_face_type 0 4 780 28 BSPFaceAttrib::get_face_type 0 1 101 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

472 14 get_ignore_pvs 0 4 780 29 BSPFaceAttrib::get_ignore_pvs 0 1 102 0
54
inline bool BSPFaceAttrib::get_ignore_pvs(void) const;

473 14 get_class_slot 0 4 780 29 BSPFaceAttrib::get_class_slot 0 1 103 0
47
static int BSPFaceAttrib::get_class_slot(void);

474 14 get_class_type 0 4 780 29 BSPFaceAttrib::get_class_type 0 1 104 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

475 14 ~BSPFaceAttrib 0 4 780 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

476 14 remove_physics 0 4 782 25 BSPLoader::remove_physics 0 1 105 0
53
void BSPLoader::remove_physics(NodePath const &root);

477 17 set_physics_world 0 4 782 28 BSPLoader::set_physics_world 0 1 106 0
54
void BSPLoader::set_physics_world(BulletWorld *world);

478 17 get_physics_world 0 4 782 28 BSPLoader::get_physics_world 0 1 107 0
61
inline BulletWorld *BSPLoader::get_physics_world(void) const;

479 24 has_brush_collision_node 0 4 782 35 BSPLoader::has_brush_collision_node 0 1 108 0
83
inline bool BSPLoader::has_brush_collision_node(BulletRigidBodyNode *rbnode) const;

480 28 has_brush_collision_triangle 0 4 782 39 BSPLoader::has_brush_collision_triangle 0 1 109 0
99
inline bool BSPLoader::has_brush_collision_triangle(BulletRigidBodyNode *rbnode, int triangle_idx);

481 27 get_brush_triangle_material 0 4 782 38 BSPLoader::get_brush_triangle_material 0 1 110 0
105
inline std::string BSPLoader::get_brush_triangle_material(BulletRigidBodyNode *rbnode, int triangle_idx);

482 24 get_brush_triangle_model 0 4 782 35 BSPLoader::get_brush_triangle_model 0 1 111 0
94
inline int BSPLoader::get_brush_triangle_model(BulletRigidBodyNode *rbnode, int triangle_idx);

483 29 get_brush_triangle_model_fast 0 4 782 40 BSPLoader::get_brush_triangle_model_fast 0 1 112 0
92
int BSPLoader::get_brush_triangle_model_fast(BulletRigidBodyNode *rbnode, int triangle_idx);

484 16 get_model_origin 0 4 782 27 BSPLoader::get_model_origin 0 1 113 0
57
inline LPoint3 BSPLoader::get_model_origin(int modelnum);

485 4 read 0 6 782 15 BSPLoader::read 0 1 114 0
79
virtual bool BSPLoader::read(Filename const &file, bool is_transition = false);

486 16 do_optimizations 0 4 782 27 BSPLoader::do_optimizations 0 1 115 0
39
void BSPLoader::do_optimizations(void);

487 9 set_gamma 0 4 782 20 BSPLoader::set_gamma 0 1 116 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

488 9 get_gamma 0 4 782 20 BSPLoader::get_gamma 0 1 117 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

489 7 set_win 0 4 782 18 BSPLoader::set_win 0 1 118 0
45
void BSPLoader::set_win(GraphicsWindow *win);

490 10 set_camera 0 4 782 21 BSPLoader::set_camera 0 1 119 0
51
void BSPLoader::set_camera(NodePath const &camera);

491 10 set_render 0 4 782 21 BSPLoader::set_render 0 1 120 0
51
void BSPLoader::set_render(NodePath const &render);

492 20 set_shader_generator 0 4 782 31 BSPLoader::set_shader_generator 0 1 121 0
64
void BSPLoader::set_shader_generator(BSPShaderGenerator *shgen);

493 19 set_want_visibility 0 4 782 30 BSPLoader::set_want_visibility 0 1 122 0
47
void BSPLoader::set_want_visibility(bool flag);

494 18 set_want_lightmaps 0 4 782 29 BSPLoader::set_want_lightmaps 0 1 123 0
46
void BSPLoader::set_want_lightmaps(bool flag);

495 16 set_physics_type 0 4 782 27 BSPLoader::set_physics_type 0 1 124 0
43
void BSPLoader::set_physics_type(int type);

496 19 set_visualize_leafs 0 4 782 30 BSPLoader::set_visualize_leafs 0 1 125 0
47
void BSPLoader::set_visualize_leafs(bool flag);

497 18 set_materials_file 0 4 782 29 BSPLoader::set_materials_file 0 1 126 0
57
void BSPLoader::set_materials_file(Filename const &file);

498 13 set_wireframe 0 4 782 24 BSPLoader::set_wireframe 0 1 127 0
41
void BSPLoader::set_wireframe(bool flag);

499 13 get_wireframe 0 4 782 24 BSPLoader::get_wireframe 0 1 128 0
49
inline bool BSPLoader::get_wireframe(void) const;

500 10 get_camera 0 4 782 21 BSPLoader::get_camera 0 1 129 0
50
inline NodePath BSPLoader::get_camera(void) const;

501 11 trace_decal 0 4 782 22 BSPLoader::trace_decal 0 1 130 0
195
inline void BSPLoader::trace_decal(std::string const &decal_material, LPoint2 const &decal_scale, float rotate, LPoint3 const &start, LPoint3 const &end, LColorf const &decal_color = LColorf(1));

502 27 get_closest_cubemap_texture 0 4 782 38 BSPLoader::get_closest_cubemap_texture 0 1 131 0
68
Texture *BSPLoader::get_closest_cubemap_texture(LPoint3 const &pos);

503 14 build_cubemaps 0 4 782 25 BSPLoader::build_cubemaps 0 1 132 0
37
void BSPLoader::build_cubemaps(void);

504 16 set_want_shadows 0 4 782 27 BSPLoader::set_want_shadows 0 1 133 0
44
void BSPLoader::set_want_shadows(bool flag);

505 14 set_shadow_dir 0 4 782 25 BSPLoader::set_shadow_dir 0 1 134 0
52
void BSPLoader::set_shadow_dir(LVector3 const &dir);

506 16 extract_modelnum 0 4 782 27 BSPLoader::extract_modelnum 0 1 135 0
44
int BSPLoader::extract_modelnum(int entnum);

507 16 get_model_bounds 0 4 782 27 BSPLoader::get_model_bounds 0 1 136 0
77
void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

508 6 set_ai 0 4 782 17 BSPLoader::set_ai 0 1 137 0
32
void BSPLoader::set_ai(bool ai);

509 5 is_ai 0 4 782 16 BSPLoader::is_ai 0 1 138 0
41
inline bool BSPLoader::is_ai(void) const;

510 10 trace_line 0 4 782 21 BSPLoader::trace_line 0 1 139 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

511 9 clip_line 0 4 782 20 BSPLoader::clip_line 0 1 140 0
71
LPoint3 BSPLoader::clip_line(LPoint3 const &start, LPoint3 const &end);

512 9 get_model 0 4 782 20 BSPLoader::get_model 0 1 141 0
50
NodePath BSPLoader::get_model(int modelnum) const;

513 9 find_leaf 0 4 782 20 BSPLoader::find_leaf 0 2 142 143 0
116
inline int BSPLoader::find_leaf(NodePath const &np);
int BSPLoader::find_leaf(LPoint3 const &pos, int headnode = 0);

514 9 find_node 0 4 782 20 BSPLoader::find_node 0 1 144 0
45
int BSPLoader::find_node(LPoint3 const &pos);

515 18 is_cluster_visible 0 4 782 29 BSPLoader::is_cluster_visible 0 1 145 0
72
bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

516 15 pvs_bounds_test 0 4 782 26 BSPLoader::pvs_bounds_test 0 1 146 0
109
bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds, unsigned int required_leaf_flags = 0);

517 15 make_net_bounds 0 4 782 26 BSPLoader::make_net_bounds 0 1 147 0
147
ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

518 16 has_active_level 0 4 782 27 BSPLoader::has_active_level 0 1 148 0
52
inline bool BSPLoader::has_active_level(void) const;

519 14 has_visibility 0 4 782 25 BSPLoader::has_visibility 0 1 149 0
50
inline bool BSPLoader::has_visibility(void) const;

520 7 cleanup 0 4 782 18 BSPLoader::cleanup 0 1 150 0
52
void BSPLoader::cleanup(bool is_transition = false);

521 10 get_result 0 4 782 21 BSPLoader::get_result 0 1 151 0
50
inline NodePath BSPLoader::get_result(void) const;

522 16 set_current_leaf 0 4 782 27 BSPLoader::set_current_leaf 0 1 152 0
50
inline void BSPLoader::set_current_leaf(int leaf);

523 16 get_current_leaf 0 4 782 27 BSPLoader::get_current_leaf 0 1 153 0
51
inline int BSPLoader::get_current_leaf(void) const;

524 16 get_num_visleafs 0 4 782 27 BSPLoader::get_num_visleafs 0 1 154 0
51
inline int BSPLoader::get_num_visleafs(void) const;

525 15 get_leaf_center 0 4 782 26 BSPLoader::get_leaf_center 0 1 155 0
58
inline LPoint3 BSPLoader::get_leaf_center(int leaf) const;

526 15 get_lightcoords 0 4 782 26 BSPLoader::get_lightcoords 0 1 156 0
73
LTexCoord BSPLoader::get_lightcoords(int facenum, LVector3 const &point);

527 14 set_global_ptr 0 4 782 25 BSPLoader::set_global_ptr 0 1 157 0
54
static void BSPLoader::set_global_ptr(BSPLoader *ptr);

528 14 get_global_ptr 0 4 782 25 BSPLoader::get_global_ptr 0 1 158 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

529 10 ~BSPLoader 0 4 782 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

530 18 ShaderPermutations 0 4 784 38 ShaderPermutations::ShaderPermutations 0 1 159 0
52
inline ShaderPermutations::ShaderPermutations(void);

531 15 add_permutation 0 4 784 35 ShaderPermutations::add_permutation 0 1 160 0
104
inline void ShaderPermutations::add_permutation(std::string const &key, std::string const &value = "1");

532 8 complete 0 4 784 28 ShaderPermutations::complete 0 1 161 0
47
inline void ShaderPermutations::complete(void);

533 9 add_input 0 4 784 29 ShaderPermutations::add_input 0 1 162 0
66
inline void ShaderPermutations::add_input(ShaderInput const &inp);

534 8 add_flag 0 4 784 28 ShaderPermutations::add_flag 0 1 163 0
51
inline void ShaderPermutations::add_flag(int flag);

535 8 get_hash 0 4 784 28 ShaderPermutations::get_hash 0 1 164 0
60
inline std::size_t ShaderPermutations::get_hash(void) const;

536 19 ~ShaderPermutations 0 4 784 39 ShaderPermutations::~ShaderPermutations 0 0 0
46
ShaderPermutations::~ShaderPermutations(void);

537 24 upcast_to_ReferenceCount 0 12 785 36 ShaderSpec::upcast_to_ReferenceCount 0 1 167 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

538 22 downcast_to_ShaderSpec 0 12 775 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

539 17 upcast_to_Namable 0 12 785 29 ShaderSpec::upcast_to_Namable 0 1 168 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

540 22 downcast_to_ShaderSpec 0 12 786 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

541 17 read_shader_files 0 4 785 29 ShaderSpec::read_shader_files 0 1 165 0
117
void ShaderSpec::read_shader_files(Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file);

542 14 get_class_type 0 4 785 26 ShaderSpec::get_class_type 0 1 166 0
51
static TypeHandle ShaderSpec::get_class_type(void);

543 11 ~ShaderSpec 0 4 785 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

544 22 get_reflection_texture 0 4 787 41 PlanarReflections::get_reflection_texture 0 1 170 0
63
Texture *PlanarReflections::get_reflection_texture(void) const;

545 17 PlanarReflections 0 4 787 36 PlanarReflections::PlanarReflections 0 1 169 0
81
inline PlanarReflections::PlanarReflections(PlanarReflections const &) = default;

546 18 ~PlanarReflections 0 4 787 37 PlanarReflections::~PlanarReflections 0 0 0
44
PlanarReflections::~PlanarReflections(void);

547 18 BSPShaderGenerator 0 4 791 38 BSPShaderGenerator::BSPShaderGenerator 0 2 171 172 0
224
BSPShaderGenerator::BSPShaderGenerator(GraphicsOutput *output, GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline BSPShaderGenerator::BSPShaderGenerator(BSPShaderGenerator const &) = default;

548 13 set_sun_light 0 4 791 33 BSPShaderGenerator::set_sun_light 0 1 173 0
59
void BSPShaderGenerator::set_sun_light(NodePath const &np);

549 10 add_shader 0 4 791 30 BSPShaderGenerator::add_shader 0 1 174 0
66
void BSPShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

550 14 get_sun_vector 0 4 791 34 BSPShaderGenerator::get_sun_vector 0 1 175 0
63
inline LVector3 BSPShaderGenerator::get_sun_vector(void) const;

551 19 has_shadow_sunlight 0 4 791 39 BSPShaderGenerator::has_shadow_sunlight 0 1 176 0
64
inline bool BSPShaderGenerator::has_shadow_sunlight(void) const;

552 22 get_pssm_array_texture 0 4 791 42 BSPShaderGenerator::get_pssm_array_texture 0 1 177 0
71
inline Texture *BSPShaderGenerator::get_pssm_array_texture(void) const;

553 12 get_pssm_rig 0 4 791 32 BSPShaderGenerator::get_pssm_rig 0 1 178 0
67
inline PSSMCameraRig *BSPShaderGenerator::get_pssm_rig(void) const;

554 10 get_camera 0 4 791 30 BSPShaderGenerator::get_camera 0 1 179 0
59
inline NodePath BSPShaderGenerator::get_camera(void) const;

555 10 get_render 0 4 791 30 BSPShaderGenerator::get_render 0 1 180 0
59
inline NodePath BSPShaderGenerator::get_render(void) const;

556 18 set_shader_quality 0 4 791 38 BSPShaderGenerator::set_shader_quality 0 1 181 0
57
void BSPShaderGenerator::set_shader_quality(int quality);

557 18 get_shader_quality 0 4 791 38 BSPShaderGenerator::get_shader_quality 0 1 182 0
62
inline int BSPShaderGenerator::get_shader_quality(void) const;

558 7 set_fog 0 4 791 27 BSPShaderGenerator::set_fog 0 1 183 0
50
inline void BSPShaderGenerator::set_fog(Fog *fog);

559 9 clear_fog 0 4 791 29 BSPShaderGenerator::clear_fog 0 1 184 0
48
inline void BSPShaderGenerator::clear_fog(void);

560 7 get_fog 0 4 791 27 BSPShaderGenerator::get_fog 0 1 185 0
52
inline Fog *BSPShaderGenerator::get_fog(void) const;

561 12 get_fog_data 0 4 791 32 BSPShaderGenerator::get_fog_data 0 1 186 0
67
inline PTA_LVecBase4f BSPShaderGenerator::get_fog_data(void) const;

562 22 set_exposure_adustment 0 4 791 42 BSPShaderGenerator::set_exposure_adustment 0 1 187 0
71
inline void BSPShaderGenerator::set_exposure_adustment(float exposure);

563 23 get_exposure_adjustment 0 4 791 43 BSPShaderGenerator::get_exposure_adjustment 0 1 188 0
73
inline PTA_float BSPShaderGenerator::get_exposure_adjustment(void) const;

564 7 get_gsg 0 4 791 27 BSPShaderGenerator::get_gsg 0 1 189 0
70
inline GraphicsStateGuardian *BSPShaderGenerator::get_gsg(void) const;

565 10 get_output 0 4 791 30 BSPShaderGenerator::get_output 0 1 190 0
66
inline GraphicsOutput *BSPShaderGenerator::get_output(void) const;

566 22 get_planar_reflections 0 4 791 42 BSPShaderGenerator::get_planar_reflections 0 1 191 0
81
inline PlanarReflections *BSPShaderGenerator::get_planar_reflections(void) const;

567 20 set_identity_cubemap 0 4 791 40 BSPShaderGenerator::set_identity_cubemap 0 1 192 0
67
static void BSPShaderGenerator::set_identity_cubemap(Texture *tex);

568 20 get_identity_cubemap 0 4 791 40 BSPShaderGenerator::get_identity_cubemap 0 1 193 0
63
static Texture *BSPShaderGenerator::get_identity_cubemap(void);

569 11 make_shader 0 4 791 31 BSPShaderGenerator::make_shader 0 1 194 0
121
static ConstPointerTo< Shader > BSPShaderGenerator::make_shader(ShaderSpec const *spec, ShaderPermutations const *perms);

570 6 update 0 4 791 26 BSPShaderGenerator::update 0 1 195 0
38
void BSPShaderGenerator::update(void);

571 14 get_class_type 0 4 791 34 BSPShaderGenerator::get_class_type 0 1 196 0
59
static TypeHandle BSPShaderGenerator::get_class_type(void);

572 19 ~BSPShaderGenerator 0 4 791 39 BSPShaderGenerator::~BSPShaderGenerator 0 0 0
46
BSPShaderGenerator::~BSPShaderGenerator(void);

573 14 get_class_type 0 4 793 32 BSPCullTraverser::get_class_type 0 1 199 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

574 16 BSPCullTraverser 0 4 793 34 BSPCullTraverser::BSPCullTraverser 0 2 197 198 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

575 15 has_camera_bits 0 4 793 33 BSPCullTraverser::has_camera_bits 0 1 200 0
71
inline bool BSPCullTraverser::has_camera_bits(unsigned int bits) const;

576 14 needs_lighting 0 4 793 32 BSPCullTraverser::needs_lighting 0 1 201 0
57
inline bool BSPCullTraverser::needs_lighting(void) const;

577 13 needs_culling 0 4 793 31 BSPCullTraverser::needs_culling 0 1 202 0
56
inline bool BSPCullTraverser::needs_culling(void) const;

578 23 get_required_leaf_flags 0 4 793 41 BSPCullTraverser::get_required_leaf_flags 0 1 203 106
/**
	 * Returns the flags that must be set on a leaf for it to be
	 * rendered by the current camera.
	 */
74
inline unsigned int BSPCullTraverser::get_required_leaf_flags(void) const;

579 17 ~BSPCullTraverser 0 4 793 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

580 14 get_class_type 0 4 795 25 BSPRender::get_class_type 0 1 206 0
50
static TypeHandle BSPRender::get_class_type(void);

581 9 BSPRender 0 4 795 20 BSPRender::BSPRender 0 2 204 205 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

582 10 ~BSPRender 0 4 795 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

583 14 get_class_type 0 4 796 23 BSPRoot::get_class_type 0 1 209 0
48
static TypeHandle BSPRoot::get_class_type(void);

584 7 BSPRoot 0 4 796 16 BSPRoot::BSPRoot 0 2 207 208 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

585 8 ~BSPRoot 0 4 796 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

586 14 get_class_type 0 4 797 23 BSPProp::get_class_type 0 1 212 0
48
static TypeHandle BSPProp::get_class_type(void);

587 7 BSPProp 0 4 797 16 BSPProp::BSPProp 0 2 210 211 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

588 8 ~BSPProp 0 4 797 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

589 14 get_class_type 0 4 799 24 BSPModel::get_class_type 0 1 215 0
49
static TypeHandle BSPModel::get_class_type(void);

590 8 BSPModel 0 4 799 18 BSPModel::BSPModel 0 2 213 214 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

591 9 ~BSPModel 0 4 799 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

592 20 VertexLitGenericSpec 0 4 801 42 VertexLitGenericSpec::VertexLitGenericSpec 0 1 216 0
49
VertexLitGenericSpec::VertexLitGenericSpec(void);

593 21 ~VertexLitGenericSpec 0 4 801 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

594 22 LightmappedGenericSpec 0 4 802 46 LightmappedGenericSpec::LightmappedGenericSpec 0 1 217 0
53
LightmappedGenericSpec::LightmappedGenericSpec(void);

595 23 ~LightmappedGenericSpec 0 4 802 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

596 16 UnlitGenericSpec 0 4 803 34 UnlitGenericSpec::UnlitGenericSpec 0 1 218 0
41
UnlitGenericSpec::UnlitGenericSpec(void);

597 17 ~UnlitGenericSpec 0 4 803 35 UnlitGenericSpec::~UnlitGenericSpec 0 0 0
42
UnlitGenericSpec::~UnlitGenericSpec(void);

598 14 UnlitNoMatSpec 0 4 804 30 UnlitNoMatSpec::UnlitNoMatSpec 0 1 219 0
37
UnlitNoMatSpec::UnlitNoMatSpec(void);

599 15 ~UnlitNoMatSpec 0 4 804 31 UnlitNoMatSpec::~UnlitNoMatSpec 0 0 0
38
UnlitNoMatSpec::~UnlitNoMatSpec(void);

600 13 CSMRenderSpec 0 4 805 28 CSMRenderSpec::CSMRenderSpec 0 1 220 0
35
CSMRenderSpec::CSMRenderSpec(void);

601 14 ~CSMRenderSpec 0 4 805 29 CSMRenderSpec::~CSMRenderSpec 0 0 0
36
CSMRenderSpec::~CSMRenderSpec(void);

602 10 SkyBoxSpec 0 4 806 22 SkyBoxSpec::SkyBoxSpec 0 1 221 0
29
SkyBoxSpec::SkyBoxSpec(void);

603 11 ~SkyBoxSpec 0 4 806 23 SkyBoxSpec::~SkyBoxSpec 0 0 0
30
SkyBoxSpec::~SkyBoxSpec(void);

604 4 Make 0 4 807 24 AmbientBoostEffect::Make 0 1 222 0
69
static ConstPointerTo< RenderEffect > AmbientBoostEffect::Make(void);

605 14 get_class_type 0 4 807 34 AmbientBoostEffect::get_class_type 0 1 223 0
59
static TypeHandle AmbientBoostEffect::get_class_type(void);

606 19 ~AmbientBoostEffect 0 4 807 39 AmbientBoostEffect::~AmbientBoostEffect 0 0 0
46
AmbientBoostEffect::~AmbientBoostEffect(void);

607 14 Audio3DManager 0 4 809 30 Audio3DManager::Audio3DManager 0 2 224 225 0
204
Audio3DManager::Audio3DManager(AudioManager *mgr, NodePath const &listener_target = NodePath(), NodePath const &root = NodePath());
inline Audio3DManager::Audio3DManager(Audio3DManager const &) = default;

608 19 set_distance_factor 0 4 809 35 Audio3DManager::set_distance_factor 0 1 226 0
68
inline void Audio3DManager::set_distance_factor(PN_stdfloat factor);

609 19 get_distance_factor 0 4 809 35 Audio3DManager::get_distance_factor 0 1 227 0
67
inline PN_stdfloat Audio3DManager::get_distance_factor(void) const;

610 18 set_doppler_factor 0 4 809 34 Audio3DManager::set_doppler_factor 0 1 228 0
67
inline void Audio3DManager::set_doppler_factor(PN_stdfloat factor);

611 18 get_doppler_factor 0 4 809 34 Audio3DManager::get_doppler_factor 0 1 229 0
66
inline PN_stdfloat Audio3DManager::get_doppler_factor(void) const;

612 19 set_drop_off_factor 0 4 809 35 Audio3DManager::set_drop_off_factor 0 1 230 0
68
inline void Audio3DManager::set_drop_off_factor(PN_stdfloat factor);

613 19 get_drop_off_factor 0 4 809 35 Audio3DManager::get_drop_off_factor 0 1 231 0
67
inline PN_stdfloat Audio3DManager::get_drop_off_factor(void) const;

614 22 set_sound_min_distance 0 4 809 38 Audio3DManager::set_sound_min_distance 0 1 232 0
88
inline void Audio3DManager::set_sound_min_distance(AudioSound *sound, PN_stdfloat dist);

615 22 get_sound_min_distance 0 4 809 38 Audio3DManager::get_sound_min_distance 0 1 233 0
83
inline PN_stdfloat Audio3DManager::get_sound_min_distance(AudioSound *sound) const;

616 22 set_sound_max_distance 0 4 809 38 Audio3DManager::set_sound_max_distance 0 1 234 0
88
inline void Audio3DManager::set_sound_max_distance(AudioSound *sound, PN_stdfloat dist);

617 22 get_sound_max_distance 0 4 809 38 Audio3DManager::get_sound_max_distance 0 1 235 0
83
inline PN_stdfloat Audio3DManager::get_sound_max_distance(AudioSound *sound) const;

618 15 attach_listener 0 4 809 31 Audio3DManager::attach_listener 0 1 236 0
70
inline void Audio3DManager::attach_listener(NodePath const &listener);

619 15 detach_listener 0 4 809 31 Audio3DManager::detach_listener 0 1 237 0
50
inline void Audio3DManager::detach_listener(void);

620 8 load_sfx 0 4 809 24 Audio3DManager::load_sfx 0 1 238 0
81
inline PointerTo< AudioSound > Audio3DManager::load_sfx(std::string const &path);

621 22 attach_sound_to_object 0 4 809 38 Audio3DManager::attach_sound_to_object 0 1 239 0
87
void Audio3DManager::attach_sound_to_object(AudioSound *sound, NodePath const &object);

622 12 detach_sound 0 4 809 28 Audio3DManager::detach_sound 0 1 240 0
53
void Audio3DManager::detach_sound(AudioSound *sound);

623 18 print_audio_digest 0 4 809 34 Audio3DManager::print_audio_digest 0 1 241 0
46
void Audio3DManager::print_audio_digest(void);

624 6 update 0 4 809 22 Audio3DManager::update 0 1 242 0
34
void Audio3DManager::update(void);

625 15 ~Audio3DManager 0 4 809 31 Audio3DManager::~Audio3DManager 0 0 0
38
Audio3DManager::~Audio3DManager(void);

626 19 set_pupil_direction 0 4 810 27 CIOLib::set_pupil_direction 0 1 245 0
91
static void CIOLib::set_pupil_direction(float x, float y, LVector3 &left, LVector3 &right);

627 14 look_pupils_at 0 4 810 22 CIOLib::look_pupils_at 0 1 246 0
106
static LVector2 CIOLib::look_pupils_at(NodePath const &node, LVector3 const &point, NodePath const &eyes);

628 6 CIOLib 0 4 810 14 CIOLib::CIOLib 0 2 243 244 0
87
inline CIOLib::CIOLib(void) = default;
inline CIOLib::CIOLib(CIOLib const &) = default;

629 7 ~CIOLib 0 4 810 15 CIOLib::~CIOLib 0 0 0
22
CIOLib::~CIOLib(void);

630 14 get_num_points 0 4 811 28 BoundingKDOP::get_num_points 0 1 247 0
60
inline std::size_t BoundingKDOP::get_num_points(void) const;

631 9 get_point 0 4 811 23 BoundingKDOP::get_point 0 1 248 0
52
inline LPoint3 BoundingKDOP::get_point(int n) const;

632 14 get_num_planes 0 4 811 28 BoundingKDOP::get_num_planes 0 1 249 0
60
inline std::size_t BoundingKDOP::get_num_planes(void) const;

633 9 get_plane 0 4 811 23 BoundingKDOP::get_plane 0 1 250 0
51
inline LPlane BoundingKDOP::get_plane(int n) const;

634 14 get_class_type 0 4 811 28 BoundingKDOP::get_class_type 0 1 251 0
53
static TypeHandle BoundingKDOP::get_class_type(void);

635 13 ~BoundingKDOP 0 4 811 27 BoundingKDOP::~BoundingKDOP 0 0 0
34
BoundingKDOP::~BoundingKDOP(void);

636 17 DecalModulateSpec 0 4 813 36 DecalModulateSpec::DecalModulateSpec 0 1 252 0
43
DecalModulateSpec::DecalModulateSpec(void);

637 18 ~DecalModulateSpec 0 4 813 37 DecalModulateSpec::~DecalModulateSpec 0 0 0
44
DecalModulateSpec::~DecalModulateSpec(void);

638 14 get_class_type 0 4 814 24 GlowNode::get_class_type 0 1 256 0
49
static TypeHandle GlowNode::get_class_type(void);

639 8 GlowNode 0 4 814 18 GlowNode::GlowNode 0 3 253 254 255 0
219
GlowNode::GlowNode(std::string const &name, float query_size = ::r_glow_querysize);
GlowNode::GlowNode(GeomNode const &copy, float query_size = ::r_glow_querysize);
inline GlowNode::GlowNode(GlowNode const &) = default;

640 9 ~GlowNode 0 4 814 19 GlowNode::~GlowNode 0 0 0
26
GlowNode::~GlowNode(void);

641 24 upcast_to_ReferenceCount 0 12 816 43 PostProcessEffect::upcast_to_ReferenceCount 0 1 266 47
upcast from PostProcessEffect to ReferenceCount
66
ReferenceCount *PostProcessEffect::upcast_to_ReferenceCount(void);

642 29 downcast_to_PostProcessEffect 0 12 775 45 ReferenceCount::downcast_to_PostProcessEffect 0 0 49
downcast from ReferenceCount to PostProcessEffect
71
PostProcessEffect *ReferenceCount::downcast_to_PostProcessEffect(void);

643 17 upcast_to_Namable 0 12 816 36 PostProcessEffect::upcast_to_Namable 0 1 267 40
upcast from PostProcessEffect to Namable
52
Namable *PostProcessEffect::upcast_to_Namable(void);

644 29 downcast_to_PostProcessEffect 0 12 786 38 Namable::downcast_to_PostProcessEffect 0 0 42
downcast from Namable to PostProcessEffect
64
PostProcessEffect *Namable::downcast_to_PostProcessEffect(void);

645 14 get_class_type 0 4 816 33 PostProcessEffect::get_class_type 0 1 257 0
58
static TypeHandle PostProcessEffect::get_class_type(void);

646 17 get_final_texture 0 6 816 36 PostProcessEffect::get_final_texture 0 1 258 0
64
virtual Texture *PostProcessEffect::get_final_texture(void) = 0;

647 8 add_pass 0 4 816 27 PostProcessEffect::add_pass 0 1 259 0
56
void PostProcessEffect::add_pass(PostProcessPass *pass);

648 11 remove_pass 0 4 816 30 PostProcessEffect::remove_pass 0 1 260 0
59
void PostProcessEffect::remove_pass(PostProcessPass *pass);

649 8 get_pass 0 4 816 27 PostProcessEffect::get_pass 0 1 261 0
70
PostProcessPass *PostProcessEffect::get_pass(std::string const &name);

650 5 setup 0 6 816 24 PostProcessEffect::setup 0 1 262 0
44
virtual void PostProcessEffect::setup(void);

651 6 update 0 6 816 25 PostProcessEffect::update 0 1 263 0
45
virtual void PostProcessEffect::update(void);

652 12 window_event 0 4 816 31 PostProcessEffect::window_event 0 1 264 0
58
void PostProcessEffect::window_event(GraphicsOutput *win);

653 8 shutdown 0 6 816 27 PostProcessEffect::shutdown 0 1 265 0
47
virtual void PostProcessEffect::shutdown(void);

654 18 ~PostProcessEffect 0 4 816 37 PostProcessEffect::~PostProcessEffect 0 0 0
44
PostProcessEffect::~PostProcessEffect(void);

655 24 upcast_to_ReferenceCount 0 12 818 41 PostProcessPass::upcast_to_ReferenceCount 0 1 293 45
upcast from PostProcessPass to ReferenceCount
64
ReferenceCount *PostProcessPass::upcast_to_ReferenceCount(void);

656 27 downcast_to_PostProcessPass 0 12 775 43 ReferenceCount::downcast_to_PostProcessPass 0 0 47
downcast from ReferenceCount to PostProcessPass
67
PostProcessPass *ReferenceCount::downcast_to_PostProcessPass(void);

657 17 upcast_to_Namable 0 12 818 34 PostProcessPass::upcast_to_Namable 0 1 294 38
upcast from PostProcessPass to Namable
50
Namable *PostProcessPass::upcast_to_Namable(void);

658 27 downcast_to_PostProcessPass 0 12 786 36 Namable::downcast_to_PostProcessPass 0 0 40
downcast from Namable to PostProcessPass
60
PostProcessPass *Namable::downcast_to_PostProcessPass(void);

659 14 get_class_type 0 4 818 31 PostProcessPass::get_class_type 0 1 270 0
56
static TypeHandle PostProcessPass::get_class_type(void);

660 15 PostProcessPass 0 4 818 32 PostProcessPass::PostProcessPass 0 2 268 269 0
379
PostProcessPass::PostProcessPass(PostProcess *pp, std::string const &name = "pass", int texture_output_bits = 0, FrameBufferProperties const &fbprops = PostProcessPass::get_default_fbprops(), bool force_size = false, LVector2i const &forced_size = LVector2i::zero(), bool div_size = false, int div = 1);
inline PostProcessPass::PostProcessPass(PostProcessPass const &) = default;

661 8 get_quad 0 4 818 25 PostProcessPass::get_quad 0 1 271 0
54
inline NodePath PostProcessPass::get_quad(void) const;

662 26 get_back_buffer_dimensions 0 4 818 43 PostProcessPass::get_back_buffer_dimensions 0 1 272 0
66
LVector2i PostProcessPass::get_back_buffer_dimensions(void) const;

663 10 get_camera 0 4 818 27 PostProcessPass::get_camera 0 1 273 0
56
inline NodePath PostProcessPass::get_camera(void) const;

664 16 has_texture_bits 0 4 818 33 PostProcessPass::has_texture_bits 0 1 274 0
62
inline bool PostProcessPass::has_texture_bits(int bits) const;

665 12 set_div_size 0 4 818 29 PostProcessPass::set_div_size 0 1 275 0
66
inline void PostProcessPass::set_div_size(bool div_size, int div);

666 15 set_forced_size 0 4 818 32 PostProcessPass::set_forced_size 0 1 276 0
92
inline void PostProcessPass::set_forced_size(bool force_size, LVector2i const &forced_size);

667 26 set_framebuffer_properties 0 4 818 43 PostProcessPass::set_framebuffer_properties 0 1 277 0
94
inline void PostProcessPass::set_framebuffer_properties(FrameBufferProperties const &fbprops);

668 23 set_output_texture_bits 0 4 818 40 PostProcessPass::set_output_texture_bits 0 1 278 0
63
inline void PostProcessPass::set_output_texture_bits(int bits);

669 18 get_corrected_size 0 4 818 35 PostProcessPass::get_corrected_size 0 1 279 0
69
LVector2i PostProcessPass::get_corrected_size(LVector2i const &size);

670 11 get_texture 0 4 818 28 PostProcessPass::get_texture 0 1 280 0
47
Texture *PostProcessPass::get_texture(int bit);

671 17 get_color_texture 0 4 818 34 PostProcessPass::get_color_texture 0 1 281 0
57
inline Texture *PostProcessPass::get_color_texture(void);

672 17 get_depth_texture 0 4 818 34 PostProcessPass::get_depth_texture 0 1 282 0
57
inline Texture *PostProcessPass::get_depth_texture(void);

673 12 setup_buffer 0 6 818 29 PostProcessPass::setup_buffer 0 1 283 0
49
virtual bool PostProcessPass::setup_buffer(void);

674 14 setup_textures 0 6 818 31 PostProcessPass::setup_textures 0 1 284 0
51
virtual void PostProcessPass::setup_textures(void);

675 10 setup_quad 0 6 818 27 PostProcessPass::setup_quad 0 1 285 0
47
virtual void PostProcessPass::setup_quad(void);

676 12 setup_camera 0 6 818 29 PostProcessPass::setup_camera 0 1 286 0
49
virtual void PostProcessPass::setup_camera(void);

677 12 setup_region 0 6 818 29 PostProcessPass::setup_region 0 1 287 0
49
virtual void PostProcessPass::setup_region(void);

678 5 setup 0 6 818 22 PostProcessPass::setup 0 1 288 0
42
virtual void PostProcessPass::setup(void);

679 6 update 0 6 818 23 PostProcessPass::update 0 1 289 0
43
virtual void PostProcessPass::update(void);

680 12 window_event 0 6 818 29 PostProcessPass::window_event 0 1 290 0
67
virtual void PostProcessPass::window_event(GraphicsOutput *output);

681 8 shutdown 0 6 818 25 PostProcessPass::shutdown 0 1 291 0
45
virtual void PostProcessPass::shutdown(void);

682 19 get_default_fbprops 0 4 818 36 PostProcessPass::get_default_fbprops 0 1 292 0
72
static FrameBufferProperties PostProcessPass::get_default_fbprops(void);

683 16 ~PostProcessPass 0 4 818 33 PostProcessPass::~PostProcessPass 0 0 0
40
PostProcessPass::~PostProcessPass(void);

684 20 PostProcessScenePass 0 4 819 42 PostProcessScenePass::PostProcessScenePass 0 2 295 296 0
220
PostProcessScenePass::PostProcessScenePass(PostProcess *pp, int output_texture_bits = ::bits_PASSTEXTURE_COLOR, int auxbits = 0);
inline PostProcessScenePass::PostProcessScenePass(PostProcessScenePass const &) = default;

685 18 setup_scene_camera 0 4 819 40 PostProcessScenePass::setup_scene_camera 0 1 297 0
53
void PostProcessScenePass::setup_scene_camera(int i);

686 16 set_camera_state 0 4 819 38 PostProcessScenePass::set_camera_state 0 1 298 0
70
void PostProcessScenePass::set_camera_state(RenderState const *state);

687 21 ~PostProcessScenePass 0 4 819 43 PostProcessScenePass::~PostProcessScenePass 0 0 0
50
PostProcessScenePass::~PostProcessScenePass(void);

688 11 PostProcess 0 4 820 24 PostProcess::PostProcess 0 2 299 300 0
95
PostProcess::PostProcess(void);
inline PostProcess::PostProcess(PostProcess const &) = default;

689 7 startup 0 4 820 20 PostProcess::startup 0 1 301 0
50
void PostProcess::startup(GraphicsOutput *output);

690 10 add_camera 0 4 820 23 PostProcess::add_camera 0 1 302 0
53
void PostProcess::add_camera(NodePath const &camera);

691 13 remove_camera 0 4 820 26 PostProcess::remove_camera 0 1 303 0
56
void PostProcess::remove_camera(NodePath const &camera);

692 10 add_effect 0 4 820 23 PostProcess::add_effect 0 1 304 0
63
inline void PostProcess::add_effect(PostProcessEffect *effect);

693 13 remove_effect 0 4 820 26 PostProcess::remove_effect 0 1 305 0
66
inline void PostProcess::remove_effect(PostProcessEffect *effect);

694 10 get_effect 0 4 820 23 PostProcess::get_effect 0 1 306 0
75
inline PostProcessEffect *PostProcess::get_effect(std::string const &name);

695 23 get_scene_color_texture 0 4 820 36 PostProcess::get_scene_color_texture 0 1 307 0
65
inline Texture *PostProcess::get_scene_color_texture(void) const;

696 23 get_scene_depth_texture 0 4 820 36 PostProcess::get_scene_depth_texture 0 1 308 0
65
inline Texture *PostProcess::get_scene_depth_texture(void) const;

697 14 get_scene_pass 0 4 820 27 PostProcess::get_scene_pass 0 1 309 0
69
inline PostProcessScenePass *PostProcess::get_scene_pass(void) const;

698 10 get_output 0 4 820 23 PostProcess::get_output 0 1 310 0
59
inline GraphicsOutput *PostProcess::get_output(void) const;

699 10 get_camera 0 4 820 23 PostProcess::get_camera 0 1 311 0
53
inline NodePath PostProcess::get_camera(int n) const;

700 9 next_sort 0 4 820 22 PostProcess::next_sort 0 1 312 0
40
inline int PostProcess::next_sort(void);

701 25 get_output_display_region 0 4 820 38 PostProcess::get_output_display_region 0 1 313 0
73
inline DisplayRegion *PostProcess::get_output_display_region(void) const;

702 13 is_fullscreen 0 4 820 26 PostProcess::is_fullscreen 0 1 314 0
51
inline bool PostProcess::is_fullscreen(void) const;

703 18 set_scene_aux_bits 0 4 820 31 PostProcess::set_scene_aux_bits 0 1 315 0
47
void PostProcess::set_scene_aux_bits(int bits);

704 18 set_stacked_clears 0 4 820 31 PostProcess::set_stacked_clears 0 1 316 0
68
void PostProcess::set_stacked_clears(int n, DrawableRegion *region);

705 17 set_window_clears 0 4 820 30 PostProcess::set_window_clears 0 1 317 0
60
void PostProcess::set_window_clears(DrawableRegion *region);

706 10 set_clears 0 4 820 23 PostProcess::set_clears 0 1 318 0
60
void PostProcess::set_clears(int n, DrawableRegion *region);

707 8 shutdown 0 4 820 21 PostProcess::shutdown 0 1 319 0
33
void PostProcess::shutdown(void);

708 6 update 0 4 820 19 PostProcess::update 0 1 320 0
31
void PostProcess::update(void);

709 12 window_event 0 4 820 25 PostProcess::window_event 0 1 321 0
37
void PostProcess::window_event(void);

710 12 ~PostProcess 0 4 820 25 PostProcess::~PostProcess 0 0 0
32
PostProcess::~PostProcess(void);

711 14 get_class_type 0 4 821 23 HDRPass::get_class_type 0 1 324 0
48
static TypeHandle HDRPass::get_class_type(void);

712 7 HDRPass 0 4 821 16 HDRPass::HDRPass 0 2 322 323 0
86
HDRPass::HDRPass(PostProcess *pp);
inline HDRPass::HDRPass(HDRPass const &) = default;

713 19 set_exposure_output 0 4 821 28 HDRPass::set_exposure_output 0 1 325 0
59
inline void HDRPass::set_exposure_output(PTA_float output);

714 12 get_exposure 0 4 821 21 HDRPass::get_exposure 0 1 326 56
/**
	 * Returns the calculated exposure adjustment.
	 */
47
inline float HDRPass::get_exposure(void) const;

715 8 ~HDRPass 0 4 821 17 HDRPass::~HDRPass 0 0 0
24
HDRPass::~HDRPass(void);

716 9 HDREffect 0 4 822 20 HDREffect::HDREffect 0 1 327 0
38
HDREffect::HDREffect(PostProcess *pp);

717 12 get_hdr_pass 0 4 822 23 HDREffect::get_hdr_pass 0 1 328 0
52
inline HDRPass *HDREffect::get_hdr_pass(void) const;

718 10 ~HDREffect 0 4 822 21 HDREffect::~HDREffect 0 0 0
28
HDREffect::~HDREffect(void);

719 14 get_class_type 0 4 823 27 BloomEffect::get_class_type 0 1 330 0
52
static TypeHandle BloomEffect::get_class_type(void);

720 11 BloomEffect 0 4 823 24 BloomEffect::BloomEffect 0 1 329 0
42
BloomEffect::BloomEffect(PostProcess *pp);

721 12 ~BloomEffect 0 4 823 25 BloomEffect::~BloomEffect 0 0 0
32
BloomEffect::~BloomEffect(void);

722 14 get_class_type 0 4 824 36 LightingOriginEffect::get_class_type 0 1 331 0
61
static TypeHandle LightingOriginEffect::get_class_type(void);

723 4 make 0 4 824 26 LightingOriginEffect::make 0 1 332 0
89
static ConstPointerTo< RenderEffect > LightingOriginEffect::make(LVector3 const &origin);

724 19 get_lighting_origin 0 4 824 41 LightingOriginEffect::get_lighting_origin 0 1 333 0
70
inline LVector3 LightingOriginEffect::get_lighting_origin(void) const;

725 21 ~LightingOriginEffect 0 4 824 43 LightingOriginEffect::~LightingOriginEffect 0 0 0
50
LightingOriginEffect::~LightingOriginEffect(void);

726 14 get_class_type 0 4 825 27 FXAA_Effect::get_class_type 0 1 335 0
52
static TypeHandle FXAA_Effect::get_class_type(void);

727 11 FXAA_Effect 0 4 825 24 FXAA_Effect::FXAA_Effect 0 1 334 0
42
FXAA_Effect::FXAA_Effect(PostProcess *pp);

728 12 ~FXAA_Effect 0 4 825 25 FXAA_Effect::~FXAA_Effect 0 0 0
32
FXAA_Effect::~FXAA_Effect(void);

729 14 get_class_slot 0 4 826 27 BloomAttrib::get_class_slot 0 1 336 0
45
static int BloomAttrib::get_class_slot(void);

730 14 get_class_type 0 4 826 27 BloomAttrib::get_class_type 0 1 337 0
52
static TypeHandle BloomAttrib::get_class_type(void);

731 4 make 0 4 826 17 BloomAttrib::make 0 1 338 0
83
static ConstPointerTo< RenderAttrib > BloomAttrib::make(bool bloom_enabled = true);

732 16 is_bloom_enabled 0 4 826 29 BloomAttrib::is_bloom_enabled 0 1 339 0
54
inline bool BloomAttrib::is_bloom_enabled(void) const;

733 12 ~BloomAttrib 0 4 826 25 BloomAttrib::~BloomAttrib 0 0 0
32
BloomAttrib::~BloomAttrib(void);

734 26 PhysicsCharacterController 0 4 828 54 PhysicsCharacterController::PhysicsCharacterController 0 2 340 341 0
425
PhysicsCharacterController::PhysicsCharacterController(BSPLoader *loader, BulletWorld *world, NodePath const &render, NodePath const &parent, float walk_height, float crouch_height, float step_height, float radius, float gravity, BitMask32 const &wall_mask, BitMask32 const &floor_mask, BitMask32 const &event_mask);
inline PhysicsCharacterController::PhysicsCharacterController(PhysicsCharacterController const &) = default;

735 13 set_max_slope 0 4 828 41 PhysicsCharacterController::set_max_slope 0 1 342 0
78
void PhysicsCharacterController::set_max_slope(float degs, bool affect_speed);

736 16 set_collide_mask 0 4 828 44 PhysicsCharacterController::set_collide_mask 0 1 343 0
73
void PhysicsCharacterController::set_collide_mask(BitMask32 const &mask);

737 24 set_event_enter_callback 0 4 828 52 PhysicsCharacterController::set_event_enter_callback 0 1 344 0
85
inline void PhysicsCharacterController::set_event_enter_callback(PyObject *callback);

738 23 set_event_exit_callback 0 4 828 51 PhysicsCharacterController::set_event_exit_callback 0 1 345 0
84
inline void PhysicsCharacterController::set_event_exit_callback(PyObject *callback);

739 23 set_active_jump_limiter 0 4 828 51 PhysicsCharacterController::set_active_jump_limiter 0 1 346 0
78
inline void PhysicsCharacterController::set_active_jump_limiter(bool limiter);

740 20 set_default_material 0 4 828 48 PhysicsCharacterController::set_default_material 0 1 347 0
85
inline void PhysicsCharacterController::set_default_material(std::string const &mat);

741 18 set_touching_water 0 4 828 46 PhysicsCharacterController::set_touching_water 0 1 348 0
70
inline void PhysicsCharacterController::set_touching_water(bool flag);

742 20 get_current_material 0 4 828 48 PhysicsCharacterController::get_current_material 0 1 349 0
80
inline std::string PhysicsCharacterController::get_current_material(void) const;

743 16 get_walk_capsule 0 4 828 44 PhysicsCharacterController::get_walk_capsule 0 1 350 0
73
inline NodePath PhysicsCharacterController::get_walk_capsule(void) const;

744 18 get_crouch_capsule 0 4 828 46 PhysicsCharacterController::get_crouch_capsule 0 1 351 0
75
inline NodePath PhysicsCharacterController::get_crouch_capsule(void) const;

745 16 get_event_sphere 0 4 828 44 PhysicsCharacterController::get_event_sphere 0 1 352 0
73
inline NodePath PhysicsCharacterController::get_event_sphere(void) const;

746 11 get_capsule 0 4 828 39 PhysicsCharacterController::get_capsule 0 1 353 0
68
inline NodePath PhysicsCharacterController::get_capsule(void) const;

747 19 get_movement_parent 0 4 828 47 PhysicsCharacterController::get_movement_parent 0 1 354 0
76
inline NodePath PhysicsCharacterController::get_movement_parent(void) const;

748 11 set_gravity 0 4 828 39 PhysicsCharacterController::set_gravity 0 1 355 0
64
inline void PhysicsCharacterController::set_gravity(float grav);

749 18 set_movement_state 0 4 828 46 PhysicsCharacterController::set_movement_state 0 1 356 0
70
inline void PhysicsCharacterController::set_movement_state(int state);

750 18 get_movement_state 0 4 828 46 PhysicsCharacterController::get_movement_state 0 1 357 0
70
inline int PhysicsCharacterController::get_movement_state(void) const;

751 21 set_stand_up_callback 0 4 828 49 PhysicsCharacterController::set_stand_up_callback 0 1 358 0
82
inline void PhysicsCharacterController::set_stand_up_callback(PyObject *callback);

752 17 set_fall_callback 0 4 828 45 PhysicsCharacterController::set_fall_callback 0 1 359 0
78
inline void PhysicsCharacterController::set_fall_callback(PyObject *callback);

753 12 start_crouch 0 4 828 40 PhysicsCharacterController::start_crouch 0 1 360 0
52
void PhysicsCharacterController::start_crouch(void);

754 11 stop_crouch 0 4 828 39 PhysicsCharacterController::stop_crouch 0 1 361 0
51
void PhysicsCharacterController::stop_crouch(void);

755 12 is_on_ground 0 4 828 40 PhysicsCharacterController::is_on_ground 0 1 362 0
52
bool PhysicsCharacterController::is_on_ground(void);

756 10 start_jump 0 4 828 38 PhysicsCharacterController::start_jump 0 1 363 0
68
void PhysicsCharacterController::start_jump(float max_height = 3.0);

757 20 set_angular_movement 0 4 828 48 PhysicsCharacterController::set_angular_movement 0 1 364 0
67
void PhysicsCharacterController::set_angular_movement(float omega);

758 19 set_linear_movement 0 4 828 47 PhysicsCharacterController::set_linear_movement 0 1 365 0
79
void PhysicsCharacterController::set_linear_movement(LVector3 const &movement);

759 15 place_on_ground 0 4 828 43 PhysicsCharacterController::place_on_ground 0 1 366 0
55
void PhysicsCharacterController::place_on_ground(void);

760 6 update 0 4 828 34 PhysicsCharacterController::update 0 1 367 0
57
void PhysicsCharacterController::update(float frametime);

761 15 remove_capsules 0 4 828 43 PhysicsCharacterController::remove_capsules 0 1 368 0
55
void PhysicsCharacterController::remove_capsules(void);

762 27 ~PhysicsCharacterController 0 4 828 55 PhysicsCharacterController::~PhysicsCharacterController 0 0 0
62
PhysicsCharacterController::~PhysicsCharacterController(void);

368
1 0 0 7 12 829 380 0 0 0 
2 0 0 7 12 829 380 0 0 1 6 param0 0 830  
3 0 0 7 2 834 0 0 0 1 4 name 1 833  
4 0 0 7 2 834 0 0 0 2 4 name 1 833  7 uv_name 1 833  
5 0 0 7 3 834 0 0 0 0 
6 0 0 7 4 834 0 0 0 0 
7 0 0 7 5 834 0 0 0 0 
8 0 0 7 6 834 0 0 0 0 
9 0 0 7 7 834 0 0 0 0 
10 0 0 7 8 834 0 0 0 0 
11 0 0 7 9 834 0 0 0 0 
12 0 0 7 10 834 0 0 0 0 
13 0 0 7 11 834 0 0 0 0 
14 0 0 7 16 837 403 0 0 1 4 copy 1 835  
15 0 0 7 16 837 403 0 0 1 4 name 1 833  
16 0 0 7 17 837 403 0 0 2 4 this 3 837  4 copy 1 835  
17 0 0 4 18 838 0 0 0 3 4 this 3 837  3 key 1 833  5 value 1 833  
18 0 0 6 19 833 0 0 0 2 4 this 3 835  3 key 1 833  
19 0 0 6 20 839 0 0 0 1 4 this 3 835  
20 0 0 6 21 833 0 0 0 2 4 this 3 835  1 i 1 839  
21 0 0 6 22 833 0 0 0 2 4 this 3 835  1 i 1 839  
22 0 0 6 23 768 0 0 0 2 4 this 3 835  3 key 1 833  
23 0 0 6 24 841 0 0 0 2 4 this 3 835  3 key 1 833  
24 0 0 4 25 838 0 0 0 2 4 this 3 837  11 shader_name 1 833  
25 0 0 6 26 833 0 0 0 1 4 this 3 835  
26 0 0 7 27 843 0 0 0 1 4 this 3 835  
27 0 0 6 28 844 0 0 0 2 4 this 3 835  3 key 1 833  
28 0 0 6 29 844 0 0 0 1 4 this 3 835  
29 0 0 6 30 844 0 0 0 1 4 this 3 835  
30 0 0 6 31 833 0 0 0 1 4 this 3 835  
31 0 0 6 32 833 0 0 0 1 4 this 3 835  
32 0 0 6 33 844 0 0 0 1 4 this 3 835  
33 0 0 6 34 844 0 0 0 1 4 this 3 835  
34 0 0 6 35 844 0 0 0 1 4 this 3 835  
35 0 0 7 36 835 0 0 0 1 4 file 1 845  
36 0 0 7 37 848 0 0 0 0 
37 0 0 7 41 850 0 0 0 1 3 mat 1 835  
38 0 0 7 42 850 0 0 0 1 3 mat 1 835  
39 0 0 7 43 850 0 0 0 0 
40 0 0 6 44 833 0 0 0 1 4 this 3 851  
41 0 0 6 45 844 0 0 0 1 4 this 3 851  
42 0 0 7 46 835 0 0 0 1 4 this 3 851  
43 0 0 6 47 768 0 0 0 0 
44 0 0 7 50 848 0 0 0 0 
45 0 0 7 56 855 417 0 0 1 6 param0 0 853  
46 0 0 6 53 768 0 0 0 1 4 this 3 853  
47 0 0 6 54 768 0 0 0 1 4 this 3 853  
48 0 0 6 55 768 0 0 0 1 4 this 3 853  
49 0 0 7 64 858 424 0 0 1 6 param0 0 856  
50 0 0 6 59 768 0 0 0 1 4 this 3 856  
51 0 0 6 60 768 0 0 0 1 4 this 3 856  
52 0 0 6 61 768 0 0 0 1 4 this 3 856  
53 0 0 6 62 768 0 0 0 1 4 this 3 856  
54 0 0 6 63 844 0 0 0 1 4 this 3 856  
55 0 0 6 67 768 0 0 0 1 4 this 3 859  
56 0 0 4 68 838 0 0 35 // number of textures to consider.. 2 4 this 3 859  6 tcount 1 768  
57 0 0 4 69 838 0 0 21 // add textures 0 - n 3 4 this 3 859  3 wid 1 768  3 hit 1 768  
58 0 0 6 70 844 0 0 0 7 4 this 3 859  3 wid 1 768  3 hit 1 768  15 forcePowerOfTwo 1 844  14 onePixelBorder 1 844  7 max_wid 1 768  7 max_hit 1 768  
59 0 0 4 71 838 0 0 0 3 4 this 3 859  3 wid 1 768  3 hit 1 768  
60 0 0 7 72 855 417 0 74 // pack the textures, the return code is the amount of wasted/unused area. 3 4 this 3 859  15 forcePowerOfTwo 1 844  14 onePixelBorder 1 844  
61 0 0 7 73 858 424 0 58 // returns true if the texture has been rotated 90 degrees 2 4 this 3 859  5 index 1 768  
62 0 0 6 74 859 0 0 0 0 
63 0 0 4 75 838 0 0 0 1 2 tp 1 859  
64 0 0 7 80 860 438 0 0 0 
65 0 0 7 80 860 438 0 0 1 6 param0 0 861  
66 0 0 4 78 838 0 0 0 0 
67 0 0 4 79 838 0 0 0 0 
68 0 0 7 83 863 446 0 0 0 
69 0 0 7 83 863 446 0 0 1 6 param0 0 864  
70 0 0 6 84 844 0 0 0 1 4 this 3 864  
71 0 0 7 85 868 0 0 0 1 4 this 3 864  
72 0 0 7 86 871 0 0 0 1 4 this 3 864  
73 0 0 6 87 872 0 0 0 1 4 this 3 864  
74 0 0 6 88 872 0 0 0 1 4 this 3 864  
75 0 0 6 89 841 0 0 0 1 4 this 3 864  
76 0 0 7 93 873 0 0 0 0 
77 0 0 7 93 873 0 0 0 1 6 param0 0 874  
78 0 0 4 94 838 0 0 0 2 4 this 3 873  4 geom 1 876  
79 0 0 4 95 838 0 0 0 2 4 this 3 873  4 geom 1 876  
80 0 0 4 96 838 0 0 0 1 4 this 3 873  
81 0 0 7 98 863 446 0 0 4 4 this 3 873  5 start 1 877  3 end 1 877  4 mask 1 881  
82 0 0 7 99 863 446 0 0 5 4 this 3 873  6 origin 1 877  9 direction 1 885  8 distance 1 841  4 mask 1 881  
83 0 0 4 100 838 0 0 0 2 4 this 3 873  7 quality 1 768  
84 0 0 4 101 838 0 0 0 1 4 this 3 873  
85 0 0 7 102 876 0 0 0 2 4 this 3 873  7 geom_id 1 872  
86 0 0 7 105 848 0 0 0 0 
87 0 0 4 106 838 0 0 0 2 4 this 3 876  4 mask 1 881  
88 0 0 4 106 838 0 0 0 2 4 this 3 876  4 mask 1 872  
89 0 0 7 107 889 0 0 0 1 4 this 3 887  
90 0 0 6 108 872 0 0 0 1 4 this 3 887  
91 0 0 4 109 838 0 0 0 2 4 this 3 876  7 quality 1 768  
92 0 0 4 110 838 0 0 0 1 4 this 3 876  
93 0 0 7 113 890 466 0 0 1 4 name 1 833  
94 0 0 7 112 848 0 0 0 0 
95 0 0 4 114 838 0 0 0 4 4 this 3 890  2 p1 1 877  2 p2 1 877  2 p3 1 877  
96 0 0 4 115 838 0 0 0 3 4 this 3 890  4 geom 1 891  2 ts 1 894  
97 0 0 7 119 850 0 0 0 2 13 face_material 1 833  9 face_type 1 768  
98 0 0 7 120 850 0 0 0 0 
99 0 0 7 121 850 0 0 0 0 
100 0 0 6 122 833 0 0 0 1 4 this 3 897  
101 0 0 6 123 768 0 0 0 1 4 this 3 897  
102 0 0 6 124 844 0 0 0 1 4 this 3 897  
103 0 0 6 125 768 0 0 0 0 
104 0 0 7 127 848 0 0 0 0 
105 0 0 4 130 838 0 0 0 2 4 this 3 899  4 root 1 900  
106 0 0 4 131 838 0 0 0 2 4 this 3 899  5 world 1 903  
107 0 0 7 132 903 0 0 0 1 4 this 3 905  
108 0 0 6 133 844 0 0 0 2 4 this 3 905  6 rbnode 1 907  
109 0 0 6 134 844 0 0 0 3 4 this 3 899  6 rbnode 1 907  12 triangle_idx 1 768  
110 0 0 6 135 833 0 0 0 3 4 this 3 899  6 rbnode 1 907  12 triangle_idx 1 768  
111 0 0 6 136 768 0 0 0 3 4 this 3 899  6 rbnode 1 907  12 triangle_idx 1 768  
112 0 0 6 137 768 0 0 0 3 4 this 3 899  6 rbnode 1 907  12 triangle_idx 1 768  
113 0 0 7 138 909 0 0 0 2 4 this 3 899  8 modelnum 1 768  
114 0 0 6 139 844 0 0 0 3 4 this 3 899  4 file 1 845  13 is_transition 1 844  
115 0 0 4 140 838 0 0 0 1 4 this 3 899  
116 0 0 4 141 838 0 0 0 3 4 this 3 899  5 gamma 1 910  10 overbright 1 768  
117 0 0 6 142 910 0 0 0 1 4 this 3 905  
118 0 0 4 143 838 0 0 0 2 4 this 3 899  3 win 1 911  
119 0 0 4 144 838 0 0 0 2 4 this 3 899  6 camera 1 900  
120 0 0 4 145 838 0 0 0 2 4 this 3 899  6 render 1 900  
121 0 0 4 146 838 0 0 0 2 4 this 3 899  5 shgen 1 913  
122 0 0 4 147 838 0 0 0 2 4 this 3 899  4 flag 1 844  
123 0 0 4 148 838 0 0 0 2 4 this 3 899  4 flag 1 844  
124 0 0 4 149 838 0 0 0 2 4 this 3 899  4 type 1 768  
125 0 0 4 150 838 0 0 0 2 4 this 3 899  4 flag 1 844  
126 0 0 4 151 838 0 0 0 2 4 this 3 899  4 file 1 845  
127 0 0 4 152 838 0 0 0 2 4 this 3 899  4 flag 1 844  
128 0 0 6 153 844 0 0 0 1 4 this 3 905  
129 0 0 7 154 914 0 0 0 1 4 this 3 905  
130 0 0 4 155 838 0 0 0 7 4 this 3 899  14 decal_material 1 833  11 decal_scale 1 915  6 rotate 1 841  5 start 1 877  3 end 1 877  11 decal_color 1 919  
131 0 0 7 156 924 0 0 0 2 4 this 3 899  3 pos 1 877  
132 0 0 4 157 838 0 0 0 1 4 this 3 899  
133 0 0 4 158 838 0 0 0 2 4 this 3 899  4 flag 1 844  
134 0 0 4 159 838 0 0 0 2 4 this 3 899  3 dir 1 885  
135 0 0 6 160 768 0 0 0 2 4 this 3 899  6 entnum 1 768  
136 0 0 4 161 838 0 0 0 4 4 this 3 899  8 modelnum 1 768  4 mins 1 909  4 maxs 1 909  
137 0 0 4 162 838 0 0 0 2 4 this 3 899  2 ai 1 844  
138 0 0 6 163 844 0 0 0 1 4 this 3 905  
139 0 0 6 164 844 0 0 0 3 4 this 3 899  5 start 1 877  3 end 1 877  
140 0 0 7 165 909 0 0 0 3 4 this 3 899  5 start 1 877  3 end 1 877  
141 0 0 7 166 914 0 0 0 2 4 this 3 905  8 modelnum 1 768  
142 0 0 6 167 768 0 0 0 3 4 this 3 899  3 pos 1 877  8 headnode 1 768  
143 0 0 6 167 768 0 0 0 2 4 this 3 899  2 np 1 900  
144 0 0 6 168 768 0 0 0 2 4 this 3 899  3 pos 1 877  
145 0 0 6 169 844 0 0 0 3 4 this 3 905  12 curr_cluster 1 768  7 cluster 1 768  
146 0 0 6 170 844 0 0 0 3 4 this 3 899  6 bounds 1 925  19 required_leaf_flags 1 872  
147 0 0 7 171 925 0 0 0 3 4 this 3 899  13 net_transform 1 894  8 original 1 925  
148 0 0 6 172 844 0 0 0 1 4 this 3 905  
149 0 0 6 173 844 0 0 0 1 4 this 3 905  
150 0 0 4 174 838 0 0 0 2 4 this 3 899  13 is_transition 1 844  
151 0 0 7 175 914 0 0 0 1 4 this 3 905  
152 0 0 4 176 838 0 0 0 2 4 this 3 899  4 leaf 1 768  
153 0 0 6 177 768 0 0 0 1 4 this 3 905  
154 0 0 6 178 768 0 0 0 1 4 this 3 905  
155 0 0 7 179 909 0 0 0 2 4 this 3 905  4 leaf 1 768  
156 0 0 7 180 930 0 0 0 3 4 this 3 899  7 facenum 1 768  5 point 1 885  
157 0 0 4 181 838 0 0 0 1 3 ptr 1 899  
158 0 0 6 182 899 0 0 0 0 
159 0 0 7 186 931 536 0 0 0 
160 0 0 4 187 838 0 0 0 3 4 this 3 931  3 key 1 833  5 value 1 833  
161 0 0 4 188 838 0 0 0 1 4 this 3 931  
162 0 0 4 189 838 0 0 0 2 4 this 3 931  3 inp 1 932  
163 0 0 4 190 838 0 0 0 2 4 this 3 931  4 flag 1 768  
164 0 0 6 191 839 0 0 0 1 4 this 3 935  
165 0 0 4 199 838 0 0 0 4 4 this 3 937  9 vert_file 1 845  10 pixel_file 1 845  9 geom_file 1 845  
166 0 0 7 200 848 0 0 0 0 
167 0 0 7 194 938 0 0 0 1 4 this 3 937  
168 0 0 6 197 939 0 0 0 1 4 this 3 937  
169 0 0 7 204 942 546 0 0 1 6 param0 0 940  
170 0 0 7 203 924 0 0 0 1 4 this 3 940  
171 0 0 7 211 913 572 0 0 1 6 param0 0 943  
172 0 0 7 211 913 572 0 0 4 6 output 1 945  3 gsg 1 947  6 camera 1 900  6 render 1 900  
173 0 0 4 212 838 0 0 0 2 4 this 3 913  2 np 1 900  
174 0 0 4 213 838 0 0 0 2 4 this 3 913  4 spec 1 937  
175 0 0 7 214 868 0 0 0 1 4 this 3 943  
176 0 0 6 215 844 0 0 0 1 4 this 3 943  
177 0 0 7 216 924 0 0 0 1 4 this 3 943  
178 0 0 6 217 949 0 0 0 1 4 this 3 943  
179 0 0 7 218 914 0 0 0 1 4 this 3 943  
180 0 0 7 219 914 0 0 0 1 4 this 3 943  
181 0 0 4 220 838 0 0 0 2 4 this 3 913  7 quality 1 768  
182 0 0 6 221 768 0 0 0 1 4 this 3 943  
183 0 0 4 222 838 0 0 0 2 4 this 3 913  3 fog 1 951  
184 0 0 4 223 838 0 0 0 1 4 this 3 913  
185 0 0 7 224 951 0 0 0 1 4 this 3 943  
186 0 0 7 225 955 0 0 0 1 4 this 3 943  
187 0 0 4 226 838 0 0 0 2 4 this 3 913  8 exposure 1 841  
188 0 0 7 227 958 0 0 0 1 4 this 3 943  
189 0 0 7 228 947 0 0 0 1 4 this 3 943  
190 0 0 7 229 945 0 0 0 1 4 this 3 943  
191 0 0 7 230 942 546 0 0 1 4 this 3 943  
192 0 0 4 231 838 0 0 0 1 3 tex 1 924  
193 0 0 7 232 924 0 0 0 0 
194 0 0 7 233 963 0 0 0 2 4 spec 1 961  5 perms 1 935  
195 0 0 4 234 838 0 0 0 1 4 this 3 913  
196 0 0 7 235 848 0 0 0 0 
197 0 0 7 240 966 579 0 0 1 6 param0 0 964  
198 0 0 7 240 966 579 0 0 2 4 trav 1 967  6 loader 1 899  
199 0 0 7 239 848 0 0 0 0 
200 0 0 6 241 844 0 0 0 2 4 this 3 964  4 bits 1 872  
201 0 0 6 242 844 0 0 0 1 4 this 3 964  
202 0 0 6 243 844 0 0 0 1 4 this 3 964  
203 0 0 6 244 872 0 0 106 /**
	 * Returns the flags that must be set on a leaf for it to be
	 * rendered by the current camera.
	 */ 1 4 this 3 964  
204 0 0 7 248 970 582 0 0 1 6 param0 0 968  
205 0 0 7 248 970 582 0 0 2 4 name 1 833  6 loader 1 899  
206 0 0 7 247 848 0 0 0 0 
207 0 0 7 252 973 585 0 0 1 6 param0 0 971  
208 0 0 7 252 973 585 0 0 1 4 name 1 833  
209 0 0 7 251 848 0 0 0 0 
210 0 0 7 257 976 588 0 0 1 6 param0 0 974  
211 0 0 7 257 976 588 0 0 1 4 name 1 833  
212 0 0 7 256 848 0 0 0 0 
213 0 0 7 262 979 591 0 0 1 6 param0 0 977  
214 0 0 7 262 979 591 0 0 1 4 name 1 833  
215 0 0 7 261 848 0 0 0 0 
216 0 0 7 265 980 593 0 0 0 
217 0 0 7 268 981 595 0 0 0 
218 0 0 7 271 982 597 0 0 0 
219 0 0 7 274 983 599 0 0 0 
220 0 0 7 277 984 601 0 0 0 
221 0 0 7 280 985 603 0 0 0 
222 0 0 7 284 987 0 0 0 0 
223 0 0 7 285 848 0 0 0 0 
224 0 0 7 288 990 625 0 0 1 6 param0 0 988  
225 0 0 7 288 990 625 0 0 3 3 mgr 1 991  15 listener_target 1 900  4 root 1 900  
226 0 0 4 289 838 0 0 0 2 4 this 3 990  6 factor 1 910  
227 0 0 6 290 910 0 0 0 1 4 this 3 988  
228 0 0 4 291 838 0 0 0 2 4 this 3 990  6 factor 1 910  
229 0 0 6 292 910 0 0 0 1 4 this 3 988  
230 0 0 4 293 838 0 0 0 2 4 this 3 990  6 factor 1 910  
231 0 0 6 294 910 0 0 0 1 4 this 3 988  
232 0 0 4 295 838 0 0 0 3 4 this 3 990  5 sound 1 993  4 dist 1 910  
233 0 0 6 296 910 0 0 0 2 4 this 3 988  5 sound 1 993  
234 0 0 4 297 838 0 0 0 3 4 this 3 990  5 sound 1 993  4 dist 1 910  
235 0 0 6 298 910 0 0 0 2 4 this 3 988  5 sound 1 993  
236 0 0 4 299 838 0 0 0 2 4 this 3 990  8 listener 1 900  
237 0 0 4 300 838 0 0 0 1 4 this 3 990  
238 0 0 7 301 993 0 0 0 2 4 this 3 990  4 path 1 833  
239 0 0 4 302 838 0 0 0 3 4 this 3 990  5 sound 1 993  6 object 1 900  
240 0 0 4 303 838 0 0 0 2 4 this 3 990  5 sound 1 993  
241 0 0 4 304 838 0 0 0 1 4 this 3 990  
242 0 0 4 305 838 0 0 0 1 4 this 3 990  
243 0 0 7 310 995 629 0 0 0 
244 0 0 7 310 995 629 0 0 1 6 param0 0 996  
245 0 0 4 308 838 0 0 0 4 1 x 1 841  1 y 1 841  4 left 1 868  5 right 1 868  
246 0 0 7 309 871 0 0 0 3 4 node 1 900  5 point 1 885  4 eyes 1 900  
247 0 0 6 314 839 0 0 0 1 4 this 3 998  
248 0 0 7 315 909 0 0 0 2 4 this 3 998  1 n 1 768  
249 0 0 6 316 839 0 0 0 1 4 this 3 998  
250 0 0 7 317 1002 0 0 0 2 4 this 3 998  1 n 1 768  
251 0 0 7 318 848 0 0 0 0 
252 0 0 7 321 1003 637 0 0 0 
253 0 0 7 326 1006 640 0 0 2 4 copy 1 1004  10 query_size 1 841  
254 0 0 7 326 1006 640 0 0 1 6 param0 0 1007  
255 0 0 7 326 1006 640 0 0 2 4 name 1 833  10 query_size 1 841  
256 0 0 7 325 848 0 0 0 0 
257 0 0 7 333 848 0 0 0 0 
258 0 0 7 334 924 0 0 0 1 4 this 3 1009  
259 0 0 4 335 838 0 0 0 2 4 this 3 1009  4 pass 1 1010  
260 0 0 4 336 838 0 0 0 2 4 this 3 1009  4 pass 1 1010  
261 0 0 7 337 1010 683 0 0 2 4 this 3 1009  4 name 1 833  
262 0 0 4 338 838 0 0 0 1 4 this 3 1009  
263 0 0 4 339 838 0 0 0 1 4 this 3 1009  
264 0 0 4 340 838 0 0 0 2 4 this 3 1009  3 win 1 945  
265 0 0 4 341 838 0 0 0 1 4 this 3 1009  
266 0 0 7 329 938 0 0 0 1 4 this 3 1009  
267 0 0 6 331 939 0 0 0 1 4 this 3 1009  
268 0 0 7 350 1010 683 0 0 8 2 pp 1 1011  4 name 1 833  19 texture_output_bits 1 768  7 fbprops 1 1012  10 force_size 1 844  11 forced_size 1 1015  8 div_size 1 844  3 div 1 768  
269 0 0 7 350 1010 683 0 0 1 6 param0 0 1018  
270 0 0 7 349 848 0 0 0 0 
271 0 0 7 351 914 0 0 0 1 4 this 3 1018  
272 0 0 7 352 1020 0 0 0 1 4 this 3 1018  
273 0 0 7 353 914 0 0 0 1 4 this 3 1018  
274 0 0 6 354 844 0 0 0 2 4 this 3 1018  4 bits 1 768  
275 0 0 4 355 838 0 0 0 3 4 this 3 1010  8 div_size 1 844  3 div 1 768  
276 0 0 4 356 838 0 0 0 3 4 this 3 1010  10 force_size 1 844  11 forced_size 1 1015  
277 0 0 4 357 838 0 0 0 2 4 this 3 1010  7 fbprops 1 1012  
278 0 0 4 358 838 0 0 0 2 4 this 3 1010  4 bits 1 768  
279 0 0 7 359 1020 0 0 0 2 4 this 3 1010  4 size 1 1015  
280 0 0 7 360 924 0 0 0 2 4 this 3 1010  3 bit 1 768  
281 0 0 7 361 924 0 0 0 1 4 this 3 1010  
282 0 0 7 362 924 0 0 0 1 4 this 3 1010  
283 0 0 6 363 844 0 0 0 1 4 this 3 1010  
284 0 0 4 364 838 0 0 0 1 4 this 3 1010  
285 0 0 4 365 838 0 0 0 1 4 this 3 1010  
286 0 0 4 366 838 0 0 0 1 4 this 3 1010  
287 0 0 4 367 838 0 0 0 1 4 this 3 1010  
288 0 0 4 368 838 0 0 0 1 4 this 3 1010  
289 0 0 4 369 838 0 0 0 1 4 this 3 1010  
290 0 0 4 370 838 0 0 0 2 4 this 3 1010  6 output 1 945  
291 0 0 4 371 838 0 0 0 1 4 this 3 1010  
292 0 0 7 372 1021 0 0 0 0 
293 0 0 7 345 938 0 0 0 1 4 this 3 1010  
294 0 0 6 347 939 0 0 0 1 4 this 3 1010  
295 0 0 7 375 1022 687 0 0 3 2 pp 1 1011  19 output_texture_bits 1 768  7 auxbits 1 768  
296 0 0 7 375 1022 687 0 0 1 6 param0 0 1023  
297 0 0 4 376 838 0 0 0 2 4 this 3 1022  1 i 1 768  
298 0 0 4 377 838 0 0 0 2 4 this 3 1022  5 state 1 1025  
299 0 0 7 380 1011 710 0 0 0 
300 0 0 7 380 1011 710 0 0 1 6 param0 0 1028  
301 0 0 4 381 838 0 0 0 2 4 this 3 1011  6 output 1 945  
302 0 0 4 382 838 0 0 0 2 4 this 3 1011  6 camera 1 900  
303 0 0 4 383 838 0 0 0 2 4 this 3 1011  6 camera 1 900  
304 0 0 4 384 838 0 0 0 2 4 this 3 1011  6 effect 1 1009  
305 0 0 4 385 838 0 0 0 2 4 this 3 1011  6 effect 1 1009  
306 0 0 7 386 1009 654 0 0 2 4 this 3 1011  4 name 1 833  
307 0 0 7 387 924 0 0 0 1 4 this 3 1028  
308 0 0 7 388 924 0 0 0 1 4 this 3 1028  
309 0 0 7 389 1022 687 0 0 1 4 this 3 1028  
310 0 0 7 390 945 0 0 0 1 4 this 3 1028  
311 0 0 7 391 914 0 0 0 2 4 this 3 1028  1 n 1 768  
312 0 0 6 392 768 0 0 0 1 4 this 3 1011  
313 0 0 7 393 1031 0 0 0 1 4 this 3 1028  
314 0 0 6 394 844 0 0 0 1 4 this 3 1028  
315 0 0 4 395 838 0 0 0 2 4 this 3 1011  4 bits 1 768  
316 0 0 4 396 838 0 0 0 3 4 this 3 1011  1 n 1 768  6 region 1 1032  
317 0 0 4 397 838 0 0 0 2 4 this 3 1011  6 region 1 1032  
318 0 0 4 398 838 0 0 0 3 4 this 3 1011  1 n 1 768  6 region 1 1032  
319 0 0 4 399 838 0 0 0 1 4 this 3 1011  
320 0 0 4 400 838 0 0 0 1 4 this 3 1011  
321 0 0 4 401 838 0 0 0 1 4 this 3 1011  
322 0 0 7 405 1036 715 0 0 1 6 param0 0 1034  
323 0 0 7 405 1036 715 0 0 1 2 pp 1 1011  
324 0 0 7 404 848 0 0 0 0 
325 0 0 4 406 838 0 0 0 2 4 this 3 1036  6 output 1 958  
326 0 0 6 407 841 0 0 56 /**
	 * Returns the calculated exposure adjustment.
	 */ 1 4 this 3 1034  
327 0 0 7 410 1037 718 0 0 1 2 pp 1 1011  
328 0 0 7 411 1036 715 0 0 1 4 this 3 1038  
329 0 0 7 415 1040 721 0 0 1 2 pp 1 1011  
330 0 0 7 414 848 0 0 0 0 
331 0 0 7 418 848 0 0 0 0 
332 0 0 7 419 987 0 0 0 1 6 origin 1 885  
333 0 0 7 420 868 0 0 0 1 4 this 3 1041  
334 0 0 7 424 1043 728 0 0 1 2 pp 1 1011  
335 0 0 7 423 848 0 0 0 0 
336 0 0 6 427 768 0 0 0 0 
337 0 0 7 429 848 0 0 0 0 
338 0 0 7 430 850 0 0 0 1 13 bloom_enabled 1 844  
339 0 0 6 431 844 0 0 0 1 4 this 3 1044  
340 0 0 7 435 1046 762 0 0 12 6 loader 1 899  5 world 1 903  6 render 1 900  6 parent 1 900  11 walk_height 1 841  13 crouch_height 1 841  11 step_height 1 841  6 radius 1 841  7 gravity 1 841  9 wall_mask 1 881  10 floor_mask 1 881  10 event_mask 1 881  
341 0 0 7 435 1046 762 0 0 1 6 param0 0 1047  
342 0 0 4 436 838 0 0 0 3 4 this 3 1046  4 degs 1 841  12 affect_speed 1 844  
343 0 0 4 437 838 0 0 0 2 4 this 3 1046  4 mask 1 881  
344 0 0 4 438 838 0 0 0 2 4 this 3 1046  8 callback 1 1049  
345 0 0 4 439 838 0 0 0 2 4 this 3 1046  8 callback 1 1049  
346 0 0 4 440 838 0 0 0 2 4 this 3 1046  7 limiter 1 844  
347 0 0 4 441 838 0 0 0 2 4 this 3 1046  3 mat 1 833  
348 0 0 4 442 838 0 0 0 2 4 this 3 1046  4 flag 1 844  
349 0 0 6 443 833 0 0 0 1 4 this 3 1047  
350 0 0 7 444 914 0 0 0 1 4 this 3 1047  
351 0 0 7 445 914 0 0 0 1 4 this 3 1047  
352 0 0 7 446 914 0 0 0 1 4 this 3 1047  
353 0 0 7 447 914 0 0 0 1 4 this 3 1047  
354 0 0 7 448 914 0 0 0 1 4 this 3 1047  
355 0 0 4 449 838 0 0 0 2 4 this 3 1046  4 grav 1 841  
356 0 0 4 450 838 0 0 0 2 4 this 3 1046  5 state 1 768  
357 0 0 6 451 768 0 0 0 1 4 this 3 1047  
358 0 0 4 452 838 0 0 0 2 4 this 3 1046  8 callback 1 1049  
359 0 0 4 453 838 0 0 0 2 4 this 3 1046  8 callback 1 1049  
360 0 0 4 454 838 0 0 0 1 4 this 3 1046  
361 0 0 4 455 838 0 0 0 1 4 this 3 1046  
362 0 0 6 456 844 0 0 0 1 4 this 3 1046  
363 0 0 4 457 838 0 0 0 2 4 this 3 1046  10 max_height 1 841  
364 0 0 4 458 838 0 0 0 2 4 this 3 1046  5 omega 1 841  
365 0 0 4 459 838 0 0 0 2 4 this 3 1046  8 movement 1 885  
366 0 0 4 460 838 0 0 0 1 4 this 3 1046  
367 0 0 4 461 838 0 0 0 2 4 this 3 1046  9 frametime 1 841  
368 0 0 4 462 838 0 0 0 1 4 this 3 1046  
289
763 13 TextureStages 0 141313 13 TextureStages 13 TextureStages 0 0 0 1 379 380 0 10 369 370 371 372 373 374 375 376 377 378 0 0 0 0 0 752
/**
 * This simple interface maintains a single TextureStage object for each unique name.
 * It avoids the creation of duplicate TextureStages with the same name, which
 * reduces texture swapping and draw call overhead.
 *
 * If using our shader system, you should always use this interface to get TextureStages.
 * You are not required to change any properties on the returned TextureStage, as the shader
 * specification will know what to do with the TextureStage from the name.
 * 
 * For example, you do not need to call TextureStage::set_mode() or NodePath::set_tex_gen().
 * If you apply a texture to a node with the get_normalmap() stage, the shader specification
 * will know that the texture you supplied is to be treated as a normal map.
 */

764 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 381 403 0 21 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 0 0 1 0 765 0 0 0 0 0

765 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

766 17 BSPMaterialAttrib 0 141313 17 BSPMaterialAttrib 17 BSPMaterialAttrib 0 0 0 0 412 1 1052 8 404 405 406 407 408 409 410 411 0 0 1 0 767 0 0 0 0 0

767 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

768 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

769 10 PackResult 0 141313 10 PackResult 10 PackResult 0 0 0 1 416 417 0 3 413 414 415 0 0 0 0 0 0

770 15 TextureLocation 0 141313 15 TextureLocation 15 TextureLocation 0 0 0 1 423 424 0 5 418 419 420 421 422 0 0 0 0 0 0

771 13 TexturePacker 0 141313 13 TexturePacker 13 TexturePacker 0 0 0 0 434 0 9 425 426 427 428 429 430 431 432 433 0 0 0 0 0 0

772 8 RayTrace 0 141313 8 RayTrace 8 RayTrace 0 0 0 1 437 438 0 2 435 436 0 0 0 0 0 0

773 17 RayTraceHitResult 0 141313 17 RayTraceHitResult 17 RayTraceHitResult 0 0 0 1 439 446 0 6 440 441 442 443 444 445 0 0 0 0 0 0

774 13 RayTraceScene 0 75777 13 RayTraceScene 13 RayTraceScene 0 0 0 1 447 0 0 8 448 449 450 451 452 453 454 455 0 0 1 0 775 0 0 0 1 776 0

775 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

776 0 0 794624 15 RayTraceScene:: 0 774 0 0 0 0 0 0 0 0 0 3 17 BUILD_QUALITY_LOW 32 RayTraceScene::BUILD_QUALITY_LOW 0
0 20 BUILD_QUALITY_MEDIUM 35 RayTraceScene::BUILD_QUALITY_MEDIUM 0
1 18 BUILD_QUALITY_HIGH 33 RayTraceScene::BUILD_QUALITY_HIGH 0
2 0 0

777 16 RayTraceGeometry 0 75777 16 RayTraceGeometry 16 RayTraceGeometry 0 0 0 0 0 0 6 456 457 458 459 460 461 0 0 1 0 778 0 0 0 0 0

778 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

779 20 RayTraceTriangleMesh 0 141313 20 RayTraceTriangleMesh 20 RayTraceTriangleMesh 0 0 0 1 463 466 0 3 462 464 465 0 0 1 0 777 0 0 0 0 0

780 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 475 1 1053 8 467 468 469 470 471 472 473 474 0 0 1 0 767 0 0 0 1 781 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

781 0 0 794624 15 BSPFaceAttrib:: 0 780 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

782 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 0 529 0 53 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 0 0 0 0 1 783 58
/**
 * Loads and handles the operations of PBSP files.
 */

783 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 782 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

784 18 ShaderPermutations 0 141313 18 ShaderPermutations 18 ShaderPermutations 0 0 0 1 530 536 0 5 531 532 533 534 535 0 0 1 0 775 0 0 0 0 97
/**
 * Represents a list of #defines and variable inputs to a shader that is being generated.
 */

785 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 0 543 0 2 541 542 0 0 2 3 775 537 538 3 786 539 540 0 0 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

786 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

787 17 PlanarReflections 0 141313 17 PlanarReflections 17 PlanarReflections 0 0 0 1 545 546 0 1 544 0 0 1 0 775 0 0 0 0 0

788 13 ShaderQuality 0 532481 13 ShaderQuality 13 ShaderQuality 0 0 0 0 0 0 0 0 0 0 3 17 SHADERQUALITY_LOW 17 SHADERQUALITY_LOW 0
0 20 SHADERQUALITY_MEDIUM 20 SHADERQUALITY_MEDIUM 0
1 18 SHADERQUALITY_HIGH 18 SHADERQUALITY_HIGH 0
2 0 0

789 10 CameraBits 0 532481 10 CameraBits 10 CameraBits 0 0 0 0 0 0 0 0 0 0 6 11 CAMERA_MAIN 11 CAMERA_MAIN 0
1 13 CAMERA_SHADOW 13 CAMERA_SHADOW 0
2 17 CAMERA_REFLECTION 17 CAMERA_REFLECTION 0
4 17 CAMERA_REFRACTION 17 CAMERA_REFRACTION 0
8 16 CAMERA_VIEWMODEL 16 CAMERA_VIEWMODEL 0
16 14 CAMERA_COMPUTE 14 CAMERA_COMPUTE 0
32 0 0

790 7 AuxBits 0 532481 7 AuxBits 7 AuxBits 0 0 0 0 0 0 0 0 0 0 2 14 AUXBITS_NORMAL 14 AUXBITS_NORMAL 0
1 12 AUXBITS_ARME 12 AUXBITS_ARME 0
2 0 0

791 18 BSPShaderGenerator 0 141313 18 BSPShaderGenerator 18 BSPShaderGenerator 0 0 0 1 547 572 0 24 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 0 0 1 0 792 0 0 0 0 0

792 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

793 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 574 579 0 5 573 575 576 577 578 0 0 1 0 794 0 0 0 0 0

794 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

795 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 581 582 0 1 580 0 0 1 0 778 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

796 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 584 585 0 1 583 0 0 1 0 778 0 0 0 0 0

797 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 587 588 0 1 586 0 0 1 0 798 0 0 0 0 0

798 9 ModelRoot 0 2048 9 ModelRoot 9 ModelRoot 0 0 0 0 0 0 0 0 0 0 0 0 314
/**
 * A node of this type is created automatically at the root of each model file
 * that is loaded.  It may eventually contain some information about the
 * contents of the model; at the moment, it contains no special information,
 * but can be used as a flag to indicate the presence of a loaded model file.
 */

799 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 590 591 0 1 589 0 0 1 0 800 0 0 0 0 0

800 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

801 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 592 593 0 0 0 0 1 0 785 0 0 0 0 0

802 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 594 595 0 0 0 0 1 0 785 0 0 0 0 0

803 16 UnlitGenericSpec 0 141313 16 UnlitGenericSpec 16 UnlitGenericSpec 0 0 0 1 596 597 0 0 0 0 1 0 785 0 0 0 0 160
/**
 * Shader that only supports a basetexture, no fancy lighting effects or anything.
 * Could be used for UI elements, emissive materials, particles, etc.
 */

804 14 UnlitNoMatSpec 0 141313 14 UnlitNoMatSpec 14 UnlitNoMatSpec 0 0 0 1 598 599 0 0 0 0 1 0 785 0 0 0 0 0

805 13 CSMRenderSpec 0 141313 13 CSMRenderSpec 13 CSMRenderSpec 0 0 0 1 600 601 0 0 0 0 1 0 785 0 0 0 0 0

806 10 SkyBoxSpec 0 141313 10 SkyBoxSpec 10 SkyBoxSpec 0 0 0 1 602 603 0 0 0 0 1 0 785 0 0 0 0 0

807 18 AmbientBoostEffect 0 141313 18 AmbientBoostEffect 18 AmbientBoostEffect 0 0 0 0 606 0 2 604 605 0 0 1 0 808 0 0 0 0 0

808 12 RenderEffect 0 2048 12 RenderEffect 12 RenderEffect 0 0 0 0 0 0 0 0 0 0 0 0 901
/**
 * This is the base class for a number of special render effects that may be
 * set on scene graph nodes to change the way they render.  This includes
 * BillboardEffect, DecalEffect, etc.
 *
 * RenderEffect represents render properties that must be applied as soon as
 * they are encountered in the scene graph, rather than propagating down to
 * the leaves.  This is different from RenderAttrib, which represents
 * properties like color and texture that don't do anything until they
 * propagate down to a GeomNode.
 *
 * You should not attempt to create or modify a RenderEffect directly;
 * instead, use the make() method of the appropriate kind of effect you want.
 * This will allocate and return a new RenderEffect of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderEffect
 * if you wish to change its properties; instead, create a new one.
 */

809 14 Audio3DManager 0 141313 14 Audio3DManager 14 Audio3DManager 0 0 0 1 607 625 0 17 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 0 0 1 0 775 0 0 0 0 0

810 6 CIOLib 0 141313 6 CIOLib 6 CIOLib 0 0 0 1 628 629 0 2 626 627 0 0 0 0 0 0

811 12 BoundingKDOP 0 141313 12 BoundingKDOP 12 BoundingKDOP 0 0 0 0 635 0 5 630 631 632 633 634 0 0 1 0 812 0 0 0 0 243
/**
 * This defines a bounding convex volume.  It may represent any enclosing convex volume,
 * including simple boxes.  However, if all you want is an axis-aligned
 * bounding box, you may be better off with the simpler BoundingBox class.
 */

812 20 FiniteBoundingVolume 0 2048 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 168
/**
 * A special kind of GeometricBoundingVolume that is known to be finite.  It
 * is possible to query this kind of volume for its minimum and maximum
 * extents.
 */

813 17 DecalModulateSpec 0 141313 17 DecalModulateSpec 17 DecalModulateSpec 0 0 0 1 636 637 0 0 0 0 1 0 803 0 0 0 0 90
/**
 * This is just an alias of UnlitGeneric that enables color blending on the decal.
 */

814 8 GlowNode 0 141313 8 GlowNode 8 GlowNode 0 0 0 1 639 640 0 1 638 0 0 1 0 815 0 0 0 0 207
/**
 * This is a specialization on GeomNode that uses a pixel occlusion query
 * to determine if the Geoms on the node should be rendered.
 *
 * This is useful for things like light glows or lens flares.
 */

815 8 GeomNode 0 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 0 0 0 0 0 208
/**
 * A node that holds Geom objects, renderable pieces of geometry.  This is the
 * primary kind of leaf node in the scene graph; almost all visible objects
 * will be contained in a GeomNode somewhere.
 */

816 17 PostProcessEffect 0 141313 17 PostProcessEffect 17 PostProcessEffect 0 0 0 0 654 0 9 645 646 647 648 649 650 651 652 653 0 0 2 3 775 641 642 3 786 643 644 0 0 0

817 15 PassTextureBits 0 532481 15 PassTextureBits 15 PassTextureBits 0 0 0 0 0 0 0 0 0 0 6 22 bits_PASSTEXTURE_COLOR 22 bits_PASSTEXTURE_COLOR 0
1 22 bits_PASSTEXTURE_DEPTH 22 bits_PASSTEXTURE_DEPTH 0
2 21 bits_PASSTEXTURE_AUX0 21 bits_PASSTEXTURE_AUX0 0
4 21 bits_PASSTEXTURE_AUX1 21 bits_PASSTEXTURE_AUX1 0
8 21 bits_PASSTEXTURE_AUX2 21 bits_PASSTEXTURE_AUX2 0
16 21 bits_PASSTEXTURE_AUX3 21 bits_PASSTEXTURE_AUX3 0
32 0 0

818 15 PostProcessPass 0 141313 15 PostProcessPass 15 PostProcessPass 0 0 0 1 660 683 0 23 659 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 0 0 2 3 775 655 656 3 786 657 658 0 0 0

819 20 PostProcessScenePass 0 141313 20 PostProcessScenePass 20 PostProcessScenePass 0 0 0 1 684 687 0 2 685 686 0 0 1 0 818 0 0 0 0 0

820 11 PostProcess 0 141313 11 PostProcess 11 PostProcess 0 0 0 1 688 710 0 21 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 0 0 1 0 775 0 0 0 0 0

821 7 HDRPass 0 141313 7 HDRPass 7 HDRPass 0 0 0 1 712 715 0 3 711 713 714 0 0 1 0 818 0 0 0 0 0

822 9 HDREffect 0 141313 9 HDREffect 9 HDREffect 0 0 0 1 716 718 0 1 717 0 0 1 0 816 0 0 0 0 0

823 11 BloomEffect 0 141313 11 BloomEffect 11 BloomEffect 0 0 0 1 720 721 0 1 719 0 0 1 0 816 0 0 0 0 0

824 20 LightingOriginEffect 0 141313 20 LightingOriginEffect 20 LightingOriginEffect 0 0 0 0 725 0 3 722 723 724 0 0 1 0 808 0 0 0 0 0

825 11 FXAA_Effect 0 141313 11 FXAA_Effect 11 FXAA_Effect 0 0 0 1 727 728 0 1 726 0 0 1 0 816 0 0 0 0 0

826 11 BloomAttrib 0 141313 11 BloomAttrib 11 BloomAttrib 0 0 0 0 733 1 1054 4 729 730 731 732 0 0 1 0 767 0 0 0 0 0

827 13 MovementState 0 532481 13 MovementState 13 MovementState 0 0 0 0 0 0 0 0 0 0 4 20 MOVEMENTSTATE_GROUND 20 MOVEMENTSTATE_GROUND 0
0 21 MOVEMENTSTATE_JUMPING 21 MOVEMENTSTATE_JUMPING 0
1 21 MOVEMENTSTATE_FALLING 21 MOVEMENTSTATE_FALLING 0
2 22 MOVEMENTSTATE_SWIMMING 22 MOVEMENTSTATE_SWIMMING 0
3 0 0

828 26 PhysicsCharacterController 0 141313 26 PhysicsCharacterController 26 PhysicsCharacterController 0 0 0 1 734 762 0 27 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 0 0 1 0 775 0 0 0 0 0

829 15 TextureStages * 0 8576 15 TextureStages * 15 TextureStages * 0 0 763 0 0 0 0 0 0 0 0 0 0

830 21 TextureStages const * 0 8576 21 TextureStages const * 21 TextureStages const * 0 0 831 0 0 0 0 0 0 0 0 0 0

831 19 TextureStages const 0 8832 19 TextureStages const 19 TextureStages const 0 0 763 0 0 0 0 0 0 0 0 0 0

832 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 336
/**
 * Defines the properties of a named stage of the multitexture pipeline.  The
 * TextureAttrib will associated a number of these stages with Texture
 * objects, and the GSG will render geometry by sorting all of the currently
 * active TextureStages in order and then issuing the appropriate rendering
 * calls to activate them.
 */

833 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

834 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 832 0 0 0 0 0 0 0 0 0 0

835 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 836 0 0 0 0 0 0 0 0 0 0

836 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 764 0 0 0 0 0 0 0 0 0 0

837 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 764 0 0 0 0 0 0 0 0 0 0

838 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

839 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 840 0 0 0 0 0 0 0 0 0 0

840 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

841 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

842 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

843 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 842 0 0 0 0 0 0 0 0 0 0

844 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

845 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 846 0 0 0 0 0 0 0 0 0 0

846 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 842 0 0 0 0 0 0 0 0 0 0

847 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

848 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 847 0 0 0 0 0 0 0 0 0 0

849 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 767 0 0 0 0 0 0 0 0 0 0

850 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 849 0 0 0 0 0 0 0 0 0 0

851 25 BSPMaterialAttrib const * 0 8576 25 BSPMaterialAttrib const * 25 BSPMaterialAttrib const * 0 0 852 0 0 0 0 0 0 0 0 0 0

852 23 BSPMaterialAttrib const 0 8832 23 BSPMaterialAttrib const 23 BSPMaterialAttrib const 0 0 766 0 0 0 0 0 0 0 0 0 0

853 18 PackResult const * 0 8576 18 PackResult const * 18 PackResult const * 0 0 854 0 0 0 0 0 0 0 0 0 0

854 16 PackResult const 0 8832 16 PackResult const 16 PackResult const 0 0 769 0 0 0 0 0 0 0 0 0 0

855 12 PackResult * 0 8576 12 PackResult * 12 PackResult * 0 0 769 0 0 0 0 0 0 0 0 0 0

856 23 TextureLocation const * 0 8576 23 TextureLocation const * 23 TextureLocation const * 0 0 857 0 0 0 0 0 0 0 0 0 0

857 21 TextureLocation const 0 8832 21 TextureLocation const 21 TextureLocation const 0 0 770 0 0 0 0 0 0 0 0 0 0

858 17 TextureLocation * 0 8576 17 TextureLocation * 17 TextureLocation * 0 0 770 0 0 0 0 0 0 0 0 0 0

859 15 TexturePacker * 0 8576 15 TexturePacker * 15 TexturePacker * 0 0 771 0 0 0 0 0 0 0 0 0 0

860 10 RayTrace * 0 8576 10 RayTrace * 10 RayTrace * 0 0 772 0 0 0 0 0 0 0 0 0 0

861 16 RayTrace const * 0 8576 16 RayTrace const * 16 RayTrace const * 0 0 862 0 0 0 0 0 0 0 0 0 0

862 14 RayTrace const 0 8832 14 RayTrace const 14 RayTrace const 0 0 772 0 0 0 0 0 0 0 0 0 0

863 19 RayTraceHitResult * 0 8576 19 RayTraceHitResult * 19 RayTraceHitResult * 0 0 773 0 0 0 0 0 0 0 0 0 0

864 25 RayTraceHitResult const * 0 8576 25 RayTraceHitResult const * 25 RayTraceHitResult const * 0 0 865 0 0 0 0 0 0 0 0 0 0

865 23 RayTraceHitResult const 0 8832 23 RayTraceHitResult const 23 RayTraceHitResult const 0 0 773 0 0 0 0 0 0 0 0 0 0

866 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 867 0 0 0 0 0 0 0 0 0 0

867 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

868 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 866 0 0 0 0 0 0 0 0 0 0

869 8 LVector2 0 2105344 8 LVector2 8 LVector2 0 0 870 0 0 0 0 0 0 0 0 0 0

870 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

871 10 LVector2 * 0 8576 10 LVector2 * 10 LVector2 * 0 0 869 0 0 0 0 0 0 0 0 0 0

872 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

873 15 RayTraceScene * 0 8576 15 RayTraceScene * 15 RayTraceScene * 0 0 774 0 0 0 0 0 0 0 0 0 0

874 21 RayTraceScene const * 0 8576 21 RayTraceScene const * 21 RayTraceScene const * 0 0 875 0 0 0 0 0 0 0 0 0 0

875 19 RayTraceScene const 0 8832 19 RayTraceScene const 19 RayTraceScene const 0 0 774 0 0 0 0 0 0 0 0 0 0

876 18 RayTraceGeometry * 0 8576 18 RayTraceGeometry * 18 RayTraceGeometry * 0 0 777 0 0 0 0 0 0 0 0 0 0

877 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 878 0 0 0 0 0 0 0 0 0 0

878 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 879 0 0 0 0 0 0 0 0 0 0

879 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 880 0 0 0 0 0 0 0 0 0 0

880 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

881 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 882 0 0 0 0 0 0 0 0 0 0

882 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 883 0 0 0 0 0 0 0 0 0 0

883 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 884 0 0 0 0 0 0 0 0 0 0

884 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

885 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 886 0 0 0 0 0 0 0 0 0 0

886 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 866 0 0 0 0 0 0 0 0 0 0

887 24 RayTraceGeometry const * 0 8576 24 RayTraceGeometry const * 24 RayTraceGeometry const * 0 0 888 0 0 0 0 0 0 0 0 0 0

888 22 RayTraceGeometry const 0 8832 22 RayTraceGeometry const 22 RayTraceGeometry const 0 0 777 0 0 0 0 0 0 0 0 0 0

889 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 883 0 0 0 0 0 0 0 0 0 0

890 22 RayTraceTriangleMesh * 0 8576 22 RayTraceTriangleMesh * 22 RayTraceTriangleMesh * 0 0 779 0 0 0 0 0 0 0 0 0 0

891 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 892 0 0 0 0 0 0 0 0 0 0

892 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 893 0 0 0 0 0 0 0 0 0 0

893 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

894 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 895 0 0 0 0 0 0 0 0 0 0

895 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 896 0 0 0 0 0 0 0 0 0 0

896 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

897 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 898 0 0 0 0 0 0 0 0 0 0

898 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 780 0 0 0 0 0 0 0 0 0 0

899 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 782 0 0 0 0 0 0 0 0 0 0

900 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 901 0 0 0 0 0 0 0 0 0 0

901 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 902 0 0 0 0 0 0 0 0 0 0

902 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

903 13 BulletWorld * 0 8576 13 BulletWorld * 13 BulletWorld * 0 0 904 0 0 0 0 0 0 0 0 0 0

904 11 BulletWorld 0 2048 11 BulletWorld 11 BulletWorld 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

905 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 906 0 0 0 0 0 0 0 0 0 0

906 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 782 0 0 0 0 0 0 0 0 0 0

907 21 BulletRigidBodyNode * 0 8576 21 BulletRigidBodyNode * 21 BulletRigidBodyNode * 0 0 908 0 0 0 0 0 0 0 0 0 0

908 19 BulletRigidBodyNode 0 2048 19 BulletRigidBodyNode 19 BulletRigidBodyNode 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

909 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 879 0 0 0 0 0 0 0 0 0 0

910 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 841 0 0 0 0 0 0 0 0 0 0

911 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 912 0 0 0 0 0 0 0 0 0 0

912 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

913 20 BSPShaderGenerator * 0 8576 20 BSPShaderGenerator * 20 BSPShaderGenerator * 0 0 791 0 0 0 0 0 0 0 0 0 0

914 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 902 0 0 0 0 0 0 0 0 0 0

915 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 916 0 0 0 0 0 0 0 0 0 0

916 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 917 0 0 0 0 0 0 0 0 0 0

917 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 918 0 0 0 0 0 0 0 0 0 0

918 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

919 15 LColorf const * 0 8576 15 LColorf const * 15 LColorf const * 0 0 920 0 0 0 0 0 0 0 0 0 0

920 13 LColorf const 0 8832 13 LColorf const 13 LColorf const 0 0 921 0 0 0 0 0 0 0 0 0 0

921 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 922 0 0 0 0 0 0 0 0 0 0

922 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

923 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

924 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 923 0 0 0 0 0 0 0 0 0 0

925 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 926 0 0 0 0 0 0 0 0 0 0

926 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 927 0 0 0 0 0 0 0 0 0 0

927 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

928 9 LTexCoord 0 2105344 9 LTexCoord 9 LTexCoord 0 0 929 0 0 0 0 0 0 0 0 0 0

929 10 LTexCoordf 0 2105344 10 LTexCoordf 10 LTexCoordf 0 0 918 0 0 0 0 0 0 0 0 0 0

930 11 LTexCoord * 0 8576 11 LTexCoord * 11 LTexCoord * 0 0 928 0 0 0 0 0 0 0 0 0 0

931 20 ShaderPermutations * 0 8576 20 ShaderPermutations * 20 ShaderPermutations * 0 0 784 0 0 0 0 0 0 0 0 0 0

932 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 933 0 0 0 0 0 0 0 0 0 0

933 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 934 0 0 0 0 0 0 0 0 0 0

934 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

935 26 ShaderPermutations const * 0 8576 26 ShaderPermutations const * 26 ShaderPermutations const * 0 0 936 0 0 0 0 0 0 0 0 0 0

936 24 ShaderPermutations const 0 8832 24 ShaderPermutations const 24 ShaderPermutations const 0 0 784 0 0 0 0 0 0 0 0 0 0

937 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 785 0 0 0 0 0 0 0 0 0 0

938 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 775 0 0 0 0 0 0 0 0 0 0

939 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 786 0 0 0 0 0 0 0 0 0 0

940 25 PlanarReflections const * 0 8576 25 PlanarReflections const * 25 PlanarReflections const * 0 0 941 0 0 0 0 0 0 0 0 0 0

941 23 PlanarReflections const 0 8832 23 PlanarReflections const 23 PlanarReflections const 0 0 787 0 0 0 0 0 0 0 0 0 0

942 19 PlanarReflections * 0 8576 19 PlanarReflections * 19 PlanarReflections * 0 0 787 0 0 0 0 0 0 0 0 0 0

943 26 BSPShaderGenerator const * 0 8576 26 BSPShaderGenerator const * 26 BSPShaderGenerator const * 0 0 944 0 0 0 0 0 0 0 0 0 0

944 24 BSPShaderGenerator const 0 8832 24 BSPShaderGenerator const 24 BSPShaderGenerator const 0 0 791 0 0 0 0 0 0 0 0 0 0

945 16 GraphicsOutput * 0 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 946 0 0 0 0 0 0 0 0 0 0

946 14 GraphicsOutput 0 2048 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 0 0 0 0 0 0 0 0 727
/**
 * This is a base class for the various different classes that represent the
 * result of a frame of rendering.  The most common kind of GraphicsOutput is
 * a GraphicsWindow, which is a real-time window on the desktop, but another
 * example is GraphicsBuffer, which is an offscreen buffer.
 *
 * The actual rendering, and anything associated with the graphics context
 * itself, is managed by the associated GraphicsStateGuardian (which might
 * output to multiple GraphicsOutput objects).
 *
 * GraphicsOutputs are not actually writable to bam files, of course, but they
 * may be passed as event parameters, so they inherit from
 * TypedWritableReferenceCount instead of TypedReferenceCount for that
 * convenience.
 */

947 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 948 0 0 0 0 0 0 0 0 0 0

948 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

949 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 950 0 0 0 0 0 0 0 0 0 0

950 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

951 5 Fog * 0 8576 5 Fog * 5 Fog * 0 0 952 0 0 0 0 0 0 0 0 0 0

952 3 Fog 0 2048 3 Fog 3 Fog 0 0 0 0 0 0 0 0 0 0 0 0 782
/**
 * Specifies how atmospheric fog effects are applied to geometry.  The Fog
 * object is now a PandaNode, which means it can be used similarly to a Light
 * to define effects relative to a particular coordinate system within the
 * scene graph.
 *
 * In exponential mode, the fog effects are always camera-relative, and it
 * does not matter where the Fog node is parented.  However, in linear mode,
 * the onset and opaque distances are defined as offsets along the local
 * forward axis (e.g.  the Y axis).  This allows the fog effect to be
 * localized to a particular region in space, rather than always camera-
 * relative.  If the fog object is not parented to any node, it is used to
 * generate traditonal camera-relative fog, as if it were parented to the
 * camera.
 */

953 14 PTA_LVecBase4f 0 2105344 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 954 0 0 0 0 0 0 0 0 0 0

954 37 PointerToArray< UnalignedLVecBase4f > 0 2048 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 0 0 0 0 0 0 0 0 0 0

955 16 PTA_LVecBase4f * 0 8576 16 PTA_LVecBase4f * 16 PTA_LVecBase4f * 0 0 953 0 0 0 0 0 0 0 0 0 0

956 9 PTA_float 0 2105344 9 PTA_float 9 PTA_float 0 0 957 0 0 0 0 0 0 0 0 0 0

957 23 PointerToArray< float > 0 2048 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

958 11 PTA_float * 0 8576 11 PTA_float * 11 PTA_float * 0 0 956 0 0 0 0 0 0 0 0 0 0

959 12 Shader const 0 8832 12 Shader const 12 Shader const 0 0 960 0 0 0 0 0 0 0 0 0 0

960 6 Shader 0 2048 6 Shader 6 Shader 0 0 0 0 0 0 0 0 0 0 0 0 8
/**

 */

961 18 ShaderSpec const * 0 8576 18 ShaderSpec const * 18 ShaderSpec const * 0 0 962 0 0 0 0 0 0 0 0 0 0

962 16 ShaderSpec const 0 8832 16 ShaderSpec const 16 ShaderSpec const 0 0 785 0 0 0 0 0 0 0 0 0 0

963 14 Shader const * 0 8576 14 Shader const * 14 Shader const * 0 0 959 0 0 0 0 0 0 0 0 0 0

964 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 965 0 0 0 0 0 0 0 0 0 0

965 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 793 0 0 0 0 0 0 0 0 0 0

966 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 793 0 0 0 0 0 0 0 0 0 0

967 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 794 0 0 0 0 0 0 0 0 0 0

968 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 969 0 0 0 0 0 0 0 0 0 0

969 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 795 0 0 0 0 0 0 0 0 0 0

970 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 795 0 0 0 0 0 0 0 0 0 0

971 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 972 0 0 0 0 0 0 0 0 0 0

972 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 796 0 0 0 0 0 0 0 0 0 0

973 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 796 0 0 0 0 0 0 0 0 0 0

974 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 975 0 0 0 0 0 0 0 0 0 0

975 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 797 0 0 0 0 0 0 0 0 0 0

976 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 797 0 0 0 0 0 0 0 0 0 0

977 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 978 0 0 0 0 0 0 0 0 0 0

978 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 799 0 0 0 0 0 0 0 0 0 0

979 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 799 0 0 0 0 0 0 0 0 0 0

980 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 801 0 0 0 0 0 0 0 0 0 0

981 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 802 0 0 0 0 0 0 0 0 0 0

982 18 UnlitGenericSpec * 0 8576 18 UnlitGenericSpec * 18 UnlitGenericSpec * 0 0 803 0 0 0 0 0 0 0 0 0 0

983 16 UnlitNoMatSpec * 0 8576 16 UnlitNoMatSpec * 16 UnlitNoMatSpec * 0 0 804 0 0 0 0 0 0 0 0 0 0

984 15 CSMRenderSpec * 0 8576 15 CSMRenderSpec * 15 CSMRenderSpec * 0 0 805 0 0 0 0 0 0 0 0 0 0

985 12 SkyBoxSpec * 0 8576 12 SkyBoxSpec * 12 SkyBoxSpec * 0 0 806 0 0 0 0 0 0 0 0 0 0

986 18 RenderEffect const 0 8832 18 RenderEffect const 18 RenderEffect const 0 0 808 0 0 0 0 0 0 0 0 0 0

987 20 RenderEffect const * 0 8576 20 RenderEffect const * 20 RenderEffect const * 0 0 986 0 0 0 0 0 0 0 0 0 0

988 22 Audio3DManager const * 0 8576 22 Audio3DManager const * 22 Audio3DManager const * 0 0 989 0 0 0 0 0 0 0 0 0 0

989 20 Audio3DManager const 0 8832 20 Audio3DManager const 20 Audio3DManager const 0 0 809 0 0 0 0 0 0 0 0 0 0

990 16 Audio3DManager * 0 8576 16 Audio3DManager * 16 Audio3DManager * 0 0 809 0 0 0 0 0 0 0 0 0 0

991 14 AudioManager * 0 8576 14 AudioManager * 14 AudioManager * 0 0 992 0 0 0 0 0 0 0 0 0 0

992 12 AudioManager 0 2048 12 AudioManager 12 AudioManager 0 0 0 0 0 0 0 0 0 0 0 0 0

993 12 AudioSound * 0 8576 12 AudioSound * 12 AudioSound * 0 0 994 0 0 0 0 0 0 0 0 0 0

994 10 AudioSound 0 2048 10 AudioSound 10 AudioSound 0 0 0 0 0 0 0 0 0 0 0 0 0

995 8 CIOLib * 0 8576 8 CIOLib * 8 CIOLib * 0 0 810 0 0 0 0 0 0 0 0 0 0

996 14 CIOLib const * 0 8576 14 CIOLib const * 14 CIOLib const * 0 0 997 0 0 0 0 0 0 0 0 0 0

997 12 CIOLib const 0 8832 12 CIOLib const 12 CIOLib const 0 0 810 0 0 0 0 0 0 0 0 0 0

998 20 BoundingKDOP const * 0 8576 20 BoundingKDOP const * 20 BoundingKDOP const * 0 0 999 0 0 0 0 0 0 0 0 0 0

999 18 BoundingKDOP const 0 8832 18 BoundingKDOP const 18 BoundingKDOP const 0 0 811 0 0 0 0 0 0 0 0 0 0

1000 6 LPlane 0 2105344 6 LPlane 6 LPlane 0 0 1001 0 0 0 0 0 0 0 0 0 0

1001 7 LPlanef 0 2048 7 LPlanef 7 LPlanef 0 0 0 0 0 0 0 0 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

1002 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 1000 0 0 0 0 0 0 0 0 0 0

1003 19 DecalModulateSpec * 0 8576 19 DecalModulateSpec * 19 DecalModulateSpec * 0 0 813 0 0 0 0 0 0 0 0 0 0

1004 16 GeomNode const * 0 8576 16 GeomNode const * 16 GeomNode const * 0 0 1005 0 0 0 0 0 0 0 0 0 0

1005 14 GeomNode const 0 8832 14 GeomNode const 14 GeomNode const 0 0 815 0 0 0 0 0 0 0 0 0 0

1006 10 GlowNode * 0 8576 10 GlowNode * 10 GlowNode * 0 0 814 0 0 0 0 0 0 0 0 0 0

1007 16 GlowNode const * 0 8576 16 GlowNode const * 16 GlowNode const * 0 0 1008 0 0 0 0 0 0 0 0 0 0

1008 14 GlowNode const 0 8832 14 GlowNode const 14 GlowNode const 0 0 814 0 0 0 0 0 0 0 0 0 0

1009 19 PostProcessEffect * 0 8576 19 PostProcessEffect * 19 PostProcessEffect * 0 0 816 0 0 0 0 0 0 0 0 0 0

1010 17 PostProcessPass * 0 8576 17 PostProcessPass * 17 PostProcessPass * 0 0 818 0 0 0 0 0 0 0 0 0 0

1011 13 PostProcess * 0 8576 13 PostProcess * 13 PostProcess * 0 0 820 0 0 0 0 0 0 0 0 0 0

1012 29 FrameBufferProperties const * 0 8576 29 FrameBufferProperties const * 29 FrameBufferProperties const * 0 0 1013 0 0 0 0 0 0 0 0 0 0

1013 27 FrameBufferProperties const 0 8832 27 FrameBufferProperties const 27 FrameBufferProperties const 0 0 1014 0 0 0 0 0 0 0 0 0 0

1014 21 FrameBufferProperties 0 2048 21 FrameBufferProperties 21 FrameBufferProperties 0 0 0 0 0 0 0 0 0 0 0 0 132
/**
 * A container for the various kinds of properties we might ask to have on a
 * graphics frameBuffer before we create a GSG.
 */

1015 17 LVector2i const * 0 8576 17 LVector2i const * 17 LVector2i const * 0 0 1016 0 0 0 0 0 0 0 0 0 0

1016 15 LVector2i const 0 8832 15 LVector2i const 15 LVector2i const 0 0 1017 0 0 0 0 0 0 0 0 0 0

1017 9 LVector2i 0 2048 9 LVector2i 9 LVector2i 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

1018 23 PostProcessPass const * 0 8576 23 PostProcessPass const * 23 PostProcessPass const * 0 0 1019 0 0 0 0 0 0 0 0 0 0

1019 21 PostProcessPass const 0 8832 21 PostProcessPass const 21 PostProcessPass const 0 0 818 0 0 0 0 0 0 0 0 0 0

1020 11 LVector2i * 0 8576 11 LVector2i * 11 LVector2i * 0 0 1017 0 0 0 0 0 0 0 0 0 0

1021 23 FrameBufferProperties * 0 8576 23 FrameBufferProperties * 23 FrameBufferProperties * 0 0 1014 0 0 0 0 0 0 0 0 0 0

1022 22 PostProcessScenePass * 0 8576 22 PostProcessScenePass * 22 PostProcessScenePass * 0 0 819 0 0 0 0 0 0 0 0 0 0

1023 28 PostProcessScenePass const * 0 8576 28 PostProcessScenePass const * 28 PostProcessScenePass const * 0 0 1024 0 0 0 0 0 0 0 0 0 0

1024 26 PostProcessScenePass const 0 8832 26 PostProcessScenePass const 26 PostProcessScenePass const 0 0 819 0 0 0 0 0 0 0 0 0 0

1025 19 RenderState const * 0 8576 19 RenderState const * 19 RenderState const * 0 0 1026 0 0 0 0 0 0 0 0 0 0

1026 17 RenderState const 0 8832 17 RenderState const 17 RenderState const 0 0 1027 0 0 0 0 0 0 0 0 0 0

1027 11 RenderState 0 2048 11 RenderState 11 RenderState 0 0 0 0 0 0 0 0 0 0 0 0 340
/**
 * This represents a unique collection of RenderAttrib objects that correspond
 * to a particular renderable state.
 *
 * You should not attempt to create or modify a RenderState object directly.
 * Instead, call one of the make() functions to create one for you.  And
 * instead of modifying a RenderState object, create a new one.
 */

1028 19 PostProcess const * 0 8576 19 PostProcess const * 19 PostProcess const * 0 0 1029 0 0 0 0 0 0 0 0 0 0

1029 17 PostProcess const 0 8832 17 PostProcess const 17 PostProcess const 0 0 820 0 0 0 0 0 0 0 0 0 0

1030 13 DisplayRegion 0 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 399
/**
 * A rectangular subregion within a window for rendering into.  Typically,
 * there is one DisplayRegion that covers the whole window, but you may also
 * create smaller DisplayRegions for having different regions within the
 * window that represent different scenes.  You may also stack up
 * DisplayRegions like panes of glass, usually for layering 2-d interfaces on
 * top of a 3-d scene.
 */

1031 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 1030 0 0 0 0 0 0 0 0 0 0

1032 16 DrawableRegion * 0 8576 16 DrawableRegion * 16 DrawableRegion * 0 0 1033 0 0 0 0 0 0 0 0 0 0

1033 14 DrawableRegion 0 2048 14 DrawableRegion 14 DrawableRegion 0 0 0 0 0 0 0 0 0 0 0 0 389
/**
 * This is a base class for GraphicsWindow (actually, GraphicsOutput) and
 * DisplayRegion, both of which are conceptually rectangular regions into
 * which drawing commands may be issued.  Sometimes you want to deal with a
 * single display region, and sometimes you want to deal with the whole window
 * at once, particularly for issuing clear commands and capturing screenshots.
 */

1034 15 HDRPass const * 0 8576 15 HDRPass const * 15 HDRPass const * 0 0 1035 0 0 0 0 0 0 0 0 0 0

1035 13 HDRPass const 0 8832 13 HDRPass const 13 HDRPass const 0 0 821 0 0 0 0 0 0 0 0 0 0

1036 9 HDRPass * 0 8576 9 HDRPass * 9 HDRPass * 0 0 821 0 0 0 0 0 0 0 0 0 0

1037 11 HDREffect * 0 8576 11 HDREffect * 11 HDREffect * 0 0 822 0 0 0 0 0 0 0 0 0 0

1038 17 HDREffect const * 0 8576 17 HDREffect const * 17 HDREffect const * 0 0 1039 0 0 0 0 0 0 0 0 0 0

1039 15 HDREffect const 0 8832 15 HDREffect const 15 HDREffect const 0 0 822 0 0 0 0 0 0 0 0 0 0

1040 13 BloomEffect * 0 8576 13 BloomEffect * 13 BloomEffect * 0 0 823 0 0 0 0 0 0 0 0 0 0

1041 28 LightingOriginEffect const * 0 8576 28 LightingOriginEffect const * 28 LightingOriginEffect const * 0 0 1042 0 0 0 0 0 0 0 0 0 0

1042 26 LightingOriginEffect const 0 8832 26 LightingOriginEffect const 26 LightingOriginEffect const 0 0 824 0 0 0 0 0 0 0 0 0 0

1043 13 FXAA_Effect * 0 8576 13 FXAA_Effect * 13 FXAA_Effect * 0 0 825 0 0 0 0 0 0 0 0 0 0

1044 19 BloomAttrib const * 0 8576 19 BloomAttrib const * 19 BloomAttrib const * 0 0 1045 0 0 0 0 0 0 0 0 0 0

1045 17 BloomAttrib const 0 8832 17 BloomAttrib const 17 BloomAttrib const 0 0 826 0 0 0 0 0 0 0 0 0 0

1046 28 PhysicsCharacterController * 0 8576 28 PhysicsCharacterController * 28 PhysicsCharacterController * 0 0 828 0 0 0 0 0 0 0 0 0 0

1047 34 PhysicsCharacterController const * 0 8576 34 PhysicsCharacterController const * 34 PhysicsCharacterController const * 0 0 1048 0 0 0 0 0 0 0 0 0 0

1048 32 PhysicsCharacterController const 0 8832 32 PhysicsCharacterController const 32 PhysicsCharacterController const 0 0 828 0 0 0 0 0 0 0 0 0 0

1049 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1050 0 0 0 0 0 0 0 0 0 0

1050 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1051 0 0 0 0 0 0 0 0 0 0

1051 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

0
3
1052 10 class_slot 0 2 768 410 0 0 0 0 0 0 0 29 BSPMaterialAttrib::class_slot 0

1053 10 class_slot 0 2 768 473 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

1054 10 class_slot 0 2 768 729 0 0 0 0 0 0 0 23 BloomAttrib::class_slot 0

0
