1585707388
3 3
3 bsp 4 t5GT 3 bsp 
414
389 3 get 0 4 803 18 TextureStages::get 0 2 3 4 0
159
static TextureStage *TextureStages::get(std::string const &name);
static TextureStage *TextureStages::get(std::string const &name, std::string const &uv_name);

390 15 get_basetexture 0 4 803 30 TextureStages::get_basetexture 0 1 5 0
58
static TextureStage *TextureStages::get_basetexture(void);

391 12 get_lightmap 0 4 803 27 TextureStages::get_lightmap 0 1 6 0
55
static TextureStage *TextureStages::get_lightmap(void);

392 19 get_bumped_lightmap 0 4 803 34 TextureStages::get_bumped_lightmap 0 1 7 0
62
static TextureStage *TextureStages::get_bumped_lightmap(void);

393 13 get_spheremap 0 4 803 28 TextureStages::get_spheremap 0 1 8 0
56
static TextureStage *TextureStages::get_spheremap(void);

394 11 get_cubemap 0 4 803 26 TextureStages::get_cubemap 0 1 9 0
54
static TextureStage *TextureStages::get_cubemap(void);

395 13 get_normalmap 0 4 803 28 TextureStages::get_normalmap 0 1 10 0
56
static TextureStage *TextureStages::get_normalmap(void);

396 13 get_heightmap 0 4 803 28 TextureStages::get_heightmap 0 1 11 0
56
static TextureStage *TextureStages::get_heightmap(void);

397 12 get_glossmap 0 4 803 27 TextureStages::get_glossmap 0 1 12 0
55
static TextureStage *TextureStages::get_glossmap(void);

398 11 get_glowmap 0 4 803 26 TextureStages::get_glowmap 0 1 13 0
54
static TextureStage *TextureStages::get_glowmap(void);

399 13 TextureStages 0 4 803 28 TextureStages::TextureStages 0 2 1 2 0
122
inline TextureStages::TextureStages(void) = default;
inline TextureStages::TextureStages(TextureStages const &) = default;

400 14 ~TextureStages 0 4 803 29 TextureStages::~TextureStages 0 0 0
36
TextureStages::~TextureStages(void);

401 11 BSPMaterial 0 4 804 24 BSPMaterial::BSPMaterial 0 2 14 15 0
139
inline explicit BSPMaterial::BSPMaterial(std::string const &name = "UnlitNoMat");
inline BSPMaterial::BSPMaterial(BSPMaterial const &copy);

402 10 operator = 0 4 804 23 BSPMaterial::operator = 0 1 16 0
61
inline void BSPMaterial::operator =(BSPMaterial const &copy);

403 12 set_keyvalue 0 4 804 25 BSPMaterial::set_keyvalue 0 1 17 0
88
inline void BSPMaterial::set_keyvalue(std::string const &key, std::string const &value);

404 12 get_keyvalue 0 4 804 25 BSPMaterial::get_keyvalue 0 1 18 0
75
inline std::string BSPMaterial::get_keyvalue(std::string const &key) const;

405 17 get_num_keyvalues 0 4 804 30 BSPMaterial::get_num_keyvalues 0 1 19 0
62
inline std::size_t BSPMaterial::get_num_keyvalues(void) const;

406 7 get_key 0 4 804 20 BSPMaterial::get_key 0 1 20 0
68
inline std::string const &BSPMaterial::get_key(std::size_t i) const;

407 9 get_value 0 4 804 22 BSPMaterial::get_value 0 1 21 0
70
inline std::string const &BSPMaterial::get_value(std::size_t i) const;

408 16 get_keyvalue_int 0 4 804 29 BSPMaterial::get_keyvalue_int 0 1 22 0
71
inline int BSPMaterial::get_keyvalue_int(std::string const &key) const;

409 18 get_keyvalue_float 0 4 804 31 BSPMaterial::get_keyvalue_float 0 1 23 0
75
inline float BSPMaterial::get_keyvalue_float(std::string const &key) const;

410 10 set_shader 0 4 804 23 BSPMaterial::set_shader 0 1 24 0
68
inline void BSPMaterial::set_shader(std::string const &shader_name);

411 10 get_shader 0 4 804 23 BSPMaterial::get_shader 0 1 25 0
55
inline std::string BSPMaterial::get_shader(void) const;

412 8 get_file 0 4 804 21 BSPMaterial::get_file 0 1 26 0
50
inline Filename BSPMaterial::get_file(void) const;

413 12 has_keyvalue 0 4 804 25 BSPMaterial::has_keyvalue 0 1 27 0
68
inline bool BSPMaterial::has_keyvalue(std::string const &key) const;

414 15 has_env_cubemap 0 4 804 28 BSPMaterial::has_env_cubemap 0 1 28 0
53
inline bool BSPMaterial::has_env_cubemap(void) const;

415 16 has_transparency 0 4 804 29 BSPMaterial::has_transparency 0 1 29 0
54
inline bool BSPMaterial::has_transparency(void) const;

416 16 get_surface_prop 0 4 804 29 BSPMaterial::get_surface_prop 0 1 30 0
61
inline std::string BSPMaterial::get_surface_prop(void) const;

417 12 get_contents 0 4 804 25 BSPMaterial::get_contents 0 1 31 0
57
inline std::string BSPMaterial::get_contents(void) const;

418 14 is_lightmapped 0 4 804 27 BSPMaterial::is_lightmapped 0 1 32 0
52
inline bool BSPMaterial::is_lightmapped(void) const;

419 9 is_skybox 0 4 804 22 BSPMaterial::is_skybox 0 1 33 0
47
inline bool BSPMaterial::is_skybox(void) const;

420 11 has_bumpmap 0 4 804 24 BSPMaterial::has_bumpmap 0 1 34 0
49
inline bool BSPMaterial::has_bumpmap(void) const;

421 13 get_from_file 0 4 804 26 BSPMaterial::get_from_file 0 1 35 0
75
static BSPMaterial const *BSPMaterial::get_from_file(Filename const &file);

422 14 get_class_type 0 4 804 27 BSPMaterial::get_class_type 0 1 36 0
52
static TypeHandle BSPMaterial::get_class_type(void);

423 12 ~BSPMaterial 0 4 804 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

424 4 make 0 4 806 23 BSPMaterialAttrib::make 0 1 37 0
86
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make(BSPMaterial const *mat);

425 20 make_override_shader 0 4 806 39 BSPMaterialAttrib::make_override_shader 0 1 38 0
102
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_override_shader(BSPMaterial const *mat);

426 12 make_default 0 4 806 31 BSPMaterialAttrib::make_default 0 1 39 0
76
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_default(void);

427 19 get_override_shader 0 4 806 38 BSPMaterialAttrib::get_override_shader 0 1 40 0
70
inline std::string BSPMaterialAttrib::get_override_shader(void) const;

428 19 has_override_shader 0 4 806 38 BSPMaterialAttrib::has_override_shader 0 1 41 0
63
inline bool BSPMaterialAttrib::has_override_shader(void) const;

429 12 get_material 0 4 806 31 BSPMaterialAttrib::get_material 0 1 42 0
70
inline BSPMaterial const *BSPMaterialAttrib::get_material(void) const;

430 14 get_class_slot 0 4 806 33 BSPMaterialAttrib::get_class_slot 0 1 43 0
51
static int BSPMaterialAttrib::get_class_slot(void);

431 14 get_class_type 0 4 806 33 BSPMaterialAttrib::get_class_type 0 1 44 0
58
static TypeHandle BSPMaterialAttrib::get_class_type(void);

432 18 ~BSPMaterialAttrib 0 4 806 37 BSPMaterialAttrib::~BSPMaterialAttrib 0 0 0
44
BSPMaterialAttrib::~BSPMaterialAttrib(void);

433 9 get_width 0 4 809 21 PackResult::get_width 0 1 46 0
45
inline int PackResult::get_width(void) const;

434 10 get_height 0 4 809 22 PackResult::get_height 0 1 47 0
46
inline int PackResult::get_height(void) const;

435 15 get_unused_area 0 4 809 27 PackResult::get_unused_area 0 1 48 0
51
inline int PackResult::get_unused_area(void) const;

436 10 PackResult 0 4 809 22 PackResult::PackResult 0 1 45 0
60
inline PackResult::PackResult(PackResult const &) = default;

437 11 ~PackResult 0 4 809 23 PackResult::~PackResult 0 0 0
30
PackResult::~PackResult(void);

438 5 get_x 0 4 810 22 TextureLocation::get_x 0 1 50 0
46
inline int TextureLocation::get_x(void) const;

439 5 get_y 0 4 810 22 TextureLocation::get_y 0 1 51 0
46
inline int TextureLocation::get_y(void) const;

440 9 get_width 0 4 810 26 TextureLocation::get_width 0 1 52 0
50
inline int TextureLocation::get_width(void) const;

441 10 get_height 0 4 810 27 TextureLocation::get_height 0 1 53 0
51
inline int TextureLocation::get_height(void) const;

442 11 get_rotated 0 4 810 28 TextureLocation::get_rotated 0 1 54 0
53
inline bool TextureLocation::get_rotated(void) const;

443 15 TextureLocation 0 4 810 32 TextureLocation::TextureLocation 0 1 49 0
75
inline TextureLocation::TextureLocation(TextureLocation const &) = default;

444 16 ~TextureLocation 0 4 810 33 TextureLocation::~TextureLocation 0 0 0
40
TextureLocation::~TextureLocation(void);

445 15 getTextureCount 0 6 811 30 TexturePacker::getTextureCount 0 1 55 0
53
virtual int TexturePacker::getTextureCount(void) = 0;

446 15 setTextureCount 0 6 811 30 TexturePacker::setTextureCount 0 1 56 35
// number of textures to consider..
60
virtual void TexturePacker::setTextureCount(int tcount) = 0;

447 10 addTexture 0 6 811 25 TexturePacker::addTexture 0 1 57 21
// add textures 0 - n
61
virtual void TexturePacker::addTexture(int wid, int hit) = 0;

448 15 wouldTextureFit 0 6 811 30 TexturePacker::wouldTextureFit 0 1 58 0
135
virtual bool TexturePacker::wouldTextureFit(int wid, int hit, bool forcePowerOfTwo, bool onePixelBorder, int max_wid, int max_hit) = 0;

449 13 addNewTexture 0 6 811 28 TexturePacker::addNewTexture 0 1 59 0
64
virtual void TexturePacker::addNewTexture(int wid, int hit) = 0;

450 12 packTextures 0 6 811 27 TexturePacker::packTextures 0 1 60 74
// pack the textures, the return code is the amount of wasted/unused area.
94
virtual PackResult TexturePacker::packTextures(bool forcePowerOfTwo, bool onePixelBorder) = 0;

451 18 getTextureLocation 0 6 811 33 TexturePacker::getTextureLocation 0 1 61 58
// returns true if the texture has been rotated 90 degrees
73
virtual TextureLocation TexturePacker::getTextureLocation(int index) = 0;

452 19 createTexturePacker 0 4 811 34 TexturePacker::createTexturePacker 0 1 62 0
63
static TexturePacker *TexturePacker::createTexturePacker(void);

453 20 releaseTexturePacker 0 4 811 35 TexturePacker::releaseTexturePacker 0 1 63 0
67
static void TexturePacker::releaseTexturePacker(TexturePacker *tp);

454 14 ~TexturePacker 0 4 811 29 TexturePacker::~TexturePacker 0 0 0
36
TexturePacker::~TexturePacker(void);

455 10 initialize 0 4 812 20 RayTrace::initialize 0 1 66 0
39
static void RayTrace::initialize(void);

456 8 destruct 0 4 812 18 RayTrace::destruct 0 1 67 0
37
static void RayTrace::destruct(void);

457 8 RayTrace 0 4 812 18 RayTrace::RayTrace 0 2 64 65 0
97
inline RayTrace::RayTrace(void) = default;
inline RayTrace::RayTrace(RayTrace const &) = default;

458 9 ~RayTrace 0 4 812 19 RayTrace::~RayTrace 0 0 0
26
RayTrace::~RayTrace(void);

459 17 RayTraceHitResult 0 4 813 36 RayTraceHitResult::RayTraceHitResult 0 2 68 69 0
132
inline RayTraceHitResult::RayTraceHitResult(void);
inline RayTraceHitResult::RayTraceHitResult(RayTraceHitResult const &) = default;

460 7 has_hit 0 4 813 26 RayTraceHitResult::has_hit 0 1 70 0
51
inline bool RayTraceHitResult::has_hit(void) const;

461 14 get_hit_normal 0 4 813 33 RayTraceHitResult::get_hit_normal 0 1 71 0
62
inline LVector3 RayTraceHitResult::get_hit_normal(void) const;

462 6 get_uv 0 4 813 25 RayTraceHitResult::get_uv 0 1 72 0
54
inline LVector2 RayTraceHitResult::get_uv(void) const;

463 11 get_prim_id 0 4 813 30 RayTraceHitResult::get_prim_id 0 1 73 0
63
inline unsigned int RayTraceHitResult::get_prim_id(void) const;

464 11 get_geom_id 0 4 813 30 RayTraceHitResult::get_geom_id 0 1 74 0
63
inline unsigned int RayTraceHitResult::get_geom_id(void) const;

465 16 get_hit_fraction 0 4 813 35 RayTraceHitResult::get_hit_fraction 0 1 75 0
61
inline float RayTraceHitResult::get_hit_fraction(void) const;

466 18 ~RayTraceHitResult 0 4 813 37 RayTraceHitResult::~RayTraceHitResult 0 0 0
44
RayTraceHitResult::~RayTraceHitResult(void);

467 13 RayTraceScene 0 4 814 28 RayTraceScene::RayTraceScene 0 2 76 77 0
105
RayTraceScene::RayTraceScene(void);
inline RayTraceScene::RayTraceScene(RayTraceScene const &) = default;

468 12 add_geometry 0 4 814 27 RayTraceScene::add_geometry 0 1 78 0
57
void RayTraceScene::add_geometry(RayTraceGeometry *geom);

469 15 remove_geometry 0 4 814 30 RayTraceScene::remove_geometry 0 1 79 0
60
void RayTraceScene::remove_geometry(RayTraceGeometry *geom);

470 10 remove_all 0 4 814 25 RayTraceScene::remove_all 0 1 80 0
37
void RayTraceScene::remove_all(void);

471 10 trace_line 0 4 814 25 RayTraceScene::trace_line 0 1 81 0
116
inline RayTraceHitResult RayTraceScene::trace_line(LPoint3 const &start, LPoint3 const &end, BitMask32 const &mask);

472 9 trace_ray 0 4 814 24 RayTraceScene::trace_ray 0 1 82 0
132
RayTraceHitResult RayTraceScene::trace_ray(LPoint3 const &origin, LVector3 const &direction, float distance, BitMask32 const &mask);

473 17 set_build_quality 0 4 814 32 RayTraceScene::set_build_quality 0 1 83 0
51
void RayTraceScene::set_build_quality(int quality);

474 6 update 0 4 814 21 RayTraceScene::update 0 1 84 0
33
void RayTraceScene::update(void);

475 12 get_geometry 0 4 814 27 RayTraceScene::get_geometry 0 1 85 0
75
inline RayTraceGeometry *RayTraceScene::get_geometry(unsigned int geom_id);

476 14 get_class_type 0 4 817 32 RayTraceGeometry::get_class_type 0 1 86 0
57
static TypeHandle RayTraceGeometry::get_class_type(void);

477 8 set_mask 0 4 817 26 RayTraceGeometry::set_mask 0 2 87 88 0
114
inline void RayTraceGeometry::set_mask(BitMask32 const &mask);
void RayTraceGeometry::set_mask(unsigned int mask);

478 8 get_mask 0 4 817 26 RayTraceGeometry::get_mask 0 1 89 0
56
inline BitMask32 RayTraceGeometry::get_mask(void) const;

479 11 get_geom_id 0 4 817 29 RayTraceGeometry::get_geom_id 0 1 90 0
62
inline unsigned int RayTraceGeometry::get_geom_id(void) const;

480 17 set_build_quality 0 4 817 35 RayTraceGeometry::set_build_quality 0 1 91 0
54
void RayTraceGeometry::set_build_quality(int quality);

481 5 build 0 6 817 23 RayTraceGeometry::build 0 1 92 0
47
virtual void RayTraceGeometry::build(void) = 0;

482 14 get_class_type 0 4 819 36 RayTraceTriangleMesh::get_class_type 0 1 94 0
61
static TypeHandle RayTraceTriangleMesh::get_class_type(void);

483 20 RayTraceTriangleMesh 0 4 819 42 RayTraceTriangleMesh::RayTraceTriangleMesh 0 1 93 0
73
RayTraceTriangleMesh::RayTraceTriangleMesh(std::string const &name = "");

484 12 add_triangle 0 4 819 34 RayTraceTriangleMesh::add_triangle 0 1 95 0
97
void RayTraceTriangleMesh::add_triangle(LPoint3 const &p1, LPoint3 const &p2, LPoint3 const &p3);

485 23 add_triangles_from_geom 0 4 819 45 RayTraceTriangleMesh::add_triangles_from_geom 0 1 96 0
105
void RayTraceTriangleMesh::add_triangles_from_geom(Geom const *geom, TransformState const *ts = nullptr);

486 21 ~RayTraceTriangleMesh 0 4 819 43 RayTraceTriangleMesh::~RayTraceTriangleMesh 0 0 0
50
RayTraceTriangleMesh::~RayTraceTriangleMesh(void);

487 4 make 0 4 820 19 BSPFaceAttrib::make 0 1 97 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

488 12 make_default 0 4 820 27 BSPFaceAttrib::make_default 0 1 98 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

489 15 make_ignore_pvs 0 4 820 30 BSPFaceAttrib::make_ignore_pvs 0 1 99 0
75
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_ignore_pvs(void);

490 12 get_material 0 4 820 27 BSPFaceAttrib::get_material 0 1 100 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

491 13 get_face_type 0 4 820 28 BSPFaceAttrib::get_face_type 0 1 101 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

492 14 get_ignore_pvs 0 4 820 29 BSPFaceAttrib::get_ignore_pvs 0 1 102 0
54
inline bool BSPFaceAttrib::get_ignore_pvs(void) const;

493 14 get_class_slot 0 4 820 29 BSPFaceAttrib::get_class_slot 0 1 103 0
47
static int BSPFaceAttrib::get_class_slot(void);

494 14 get_class_type 0 4 820 29 BSPFaceAttrib::get_class_type 0 1 104 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

495 14 ~BSPFaceAttrib 0 4 820 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

496 14 remove_physics 0 4 822 25 BSPLoader::remove_physics 0 1 105 0
53
void BSPLoader::remove_physics(NodePath const &root);

497 17 set_physics_world 0 4 822 28 BSPLoader::set_physics_world 0 1 106 0
54
void BSPLoader::set_physics_world(BulletWorld *world);

498 17 get_physics_world 0 4 822 28 BSPLoader::get_physics_world 0 1 107 0
61
inline BulletWorld *BSPLoader::get_physics_world(void) const;

499 24 has_brush_collision_node 0 4 822 35 BSPLoader::has_brush_collision_node 0 1 108 0
83
inline bool BSPLoader::has_brush_collision_node(BulletRigidBodyNode *rbnode) const;

500 28 has_brush_collision_triangle 0 4 822 39 BSPLoader::has_brush_collision_triangle 0 1 109 0
99
inline bool BSPLoader::has_brush_collision_triangle(BulletRigidBodyNode *rbnode, int triangle_idx);

501 27 get_brush_triangle_material 0 4 822 38 BSPLoader::get_brush_triangle_material 0 1 110 0
105
inline std::string BSPLoader::get_brush_triangle_material(BulletRigidBodyNode *rbnode, int triangle_idx);

502 24 get_brush_triangle_model 0 4 822 35 BSPLoader::get_brush_triangle_model 0 1 111 0
94
inline int BSPLoader::get_brush_triangle_model(BulletRigidBodyNode *rbnode, int triangle_idx);

503 29 get_brush_triangle_model_fast 0 4 822 40 BSPLoader::get_brush_triangle_model_fast 0 1 112 0
92
int BSPLoader::get_brush_triangle_model_fast(BulletRigidBodyNode *rbnode, int triangle_idx);

504 16 get_model_origin 0 4 822 27 BSPLoader::get_model_origin 0 1 113 0
57
inline LPoint3 BSPLoader::get_model_origin(int modelnum);

505 4 read 0 6 822 15 BSPLoader::read 0 1 114 0
79
virtual bool BSPLoader::read(Filename const &file, bool is_transition = false);

506 16 do_optimizations 0 4 822 27 BSPLoader::do_optimizations 0 1 115 0
39
void BSPLoader::do_optimizations(void);

507 9 set_gamma 0 4 822 20 BSPLoader::set_gamma 0 1 116 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

508 9 get_gamma 0 4 822 20 BSPLoader::get_gamma 0 1 117 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

509 7 set_win 0 4 822 18 BSPLoader::set_win 0 1 118 0
45
void BSPLoader::set_win(GraphicsWindow *win);

510 10 set_camera 0 4 822 21 BSPLoader::set_camera 0 1 119 0
51
void BSPLoader::set_camera(NodePath const &camera);

511 10 set_render 0 4 822 21 BSPLoader::set_render 0 1 120 0
51
void BSPLoader::set_render(NodePath const &render);

512 20 set_shader_generator 0 4 822 31 BSPLoader::set_shader_generator 0 1 121 0
64
void BSPLoader::set_shader_generator(BSPShaderGenerator *shgen);

513 19 set_want_visibility 0 4 822 30 BSPLoader::set_want_visibility 0 1 122 0
47
void BSPLoader::set_want_visibility(bool flag);

514 18 set_want_lightmaps 0 4 822 29 BSPLoader::set_want_lightmaps 0 1 123 0
46
void BSPLoader::set_want_lightmaps(bool flag);

515 16 set_physics_type 0 4 822 27 BSPLoader::set_physics_type 0 1 124 0
43
void BSPLoader::set_physics_type(int type);

516 19 set_visualize_leafs 0 4 822 30 BSPLoader::set_visualize_leafs 0 1 125 0
47
void BSPLoader::set_visualize_leafs(bool flag);

517 18 set_materials_file 0 4 822 29 BSPLoader::set_materials_file 0 1 126 0
57
void BSPLoader::set_materials_file(Filename const &file);

518 13 set_wireframe 0 4 822 24 BSPLoader::set_wireframe 0 1 127 0
41
void BSPLoader::set_wireframe(bool flag);

519 13 get_wireframe 0 4 822 24 BSPLoader::get_wireframe 0 1 128 0
49
inline bool BSPLoader::get_wireframe(void) const;

520 10 get_camera 0 4 822 21 BSPLoader::get_camera 0 1 129 0
50
inline NodePath BSPLoader::get_camera(void) const;

521 11 trace_decal 0 4 822 22 BSPLoader::trace_decal 0 1 130 0
195
inline void BSPLoader::trace_decal(std::string const &decal_material, LPoint2 const &decal_scale, float rotate, LPoint3 const &start, LPoint3 const &end, LColorf const &decal_color = LColorf(1));

522 27 get_closest_cubemap_texture 0 4 822 38 BSPLoader::get_closest_cubemap_texture 0 1 131 0
68
Texture *BSPLoader::get_closest_cubemap_texture(LPoint3 const &pos);

523 14 build_cubemaps 0 4 822 25 BSPLoader::build_cubemaps 0 1 132 0
37
void BSPLoader::build_cubemaps(void);

524 16 set_want_shadows 0 4 822 27 BSPLoader::set_want_shadows 0 1 133 0
44
void BSPLoader::set_want_shadows(bool flag);

525 14 set_shadow_dir 0 4 822 25 BSPLoader::set_shadow_dir 0 1 134 0
52
void BSPLoader::set_shadow_dir(LVector3 const &dir);

526 16 extract_modelnum 0 4 822 27 BSPLoader::extract_modelnum 0 1 135 0
44
int BSPLoader::extract_modelnum(int entnum);

527 16 get_model_bounds 0 4 822 27 BSPLoader::get_model_bounds 0 1 136 0
77
void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

528 6 set_ai 0 4 822 17 BSPLoader::set_ai 0 1 137 0
32
void BSPLoader::set_ai(bool ai);

529 5 is_ai 0 4 822 16 BSPLoader::is_ai 0 1 138 0
41
inline bool BSPLoader::is_ai(void) const;

530 10 trace_line 0 4 822 21 BSPLoader::trace_line 0 1 139 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

531 9 clip_line 0 4 822 20 BSPLoader::clip_line 0 1 140 0
71
LPoint3 BSPLoader::clip_line(LPoint3 const &start, LPoint3 const &end);

532 9 get_model 0 4 822 20 BSPLoader::get_model 0 1 141 0
50
NodePath BSPLoader::get_model(int modelnum) const;

533 9 find_leaf 0 4 822 20 BSPLoader::find_leaf 0 2 142 143 0
116
inline int BSPLoader::find_leaf(NodePath const &np);
int BSPLoader::find_leaf(LPoint3 const &pos, int headnode = 0);

534 9 find_node 0 4 822 20 BSPLoader::find_node 0 1 144 0
45
int BSPLoader::find_node(LPoint3 const &pos);

535 18 is_cluster_visible 0 4 822 29 BSPLoader::is_cluster_visible 0 1 145 0
72
bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

536 15 pvs_bounds_test 0 4 822 26 BSPLoader::pvs_bounds_test 0 1 146 0
109
bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds, unsigned int required_leaf_flags = 0);

537 15 make_net_bounds 0 4 822 26 BSPLoader::make_net_bounds 0 1 147 0
147
ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

538 16 has_active_level 0 4 822 27 BSPLoader::has_active_level 0 1 148 0
52
inline bool BSPLoader::has_active_level(void) const;

539 14 has_visibility 0 4 822 25 BSPLoader::has_visibility 0 1 149 0
50
inline bool BSPLoader::has_visibility(void) const;

540 7 cleanup 0 4 822 18 BSPLoader::cleanup 0 1 150 0
52
void BSPLoader::cleanup(bool is_transition = false);

541 10 get_result 0 4 822 21 BSPLoader::get_result 0 1 151 0
50
inline NodePath BSPLoader::get_result(void) const;

542 16 set_current_leaf 0 4 822 27 BSPLoader::set_current_leaf 0 1 152 0
50
inline void BSPLoader::set_current_leaf(int leaf);

543 16 get_current_leaf 0 4 822 27 BSPLoader::get_current_leaf 0 1 153 0
51
inline int BSPLoader::get_current_leaf(void) const;

544 16 get_num_visleafs 0 4 822 27 BSPLoader::get_num_visleafs 0 1 154 0
51
inline int BSPLoader::get_num_visleafs(void) const;

545 15 get_leaf_center 0 4 822 26 BSPLoader::get_leaf_center 0 1 155 0
58
inline LPoint3 BSPLoader::get_leaf_center(int leaf) const;

546 15 get_lightcoords 0 4 822 26 BSPLoader::get_lightcoords 0 1 156 0
73
LTexCoord BSPLoader::get_lightcoords(int facenum, LVector3 const &point);

547 14 set_global_ptr 0 4 822 25 BSPLoader::set_global_ptr 0 1 157 0
54
static void BSPLoader::set_global_ptr(BSPLoader *ptr);

548 14 get_global_ptr 0 4 822 25 BSPLoader::get_global_ptr 0 1 158 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

549 10 ~BSPLoader 0 4 822 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

550 14 get_num_points 0 4 824 28 BoundingKDOP::get_num_points 0 1 159 0
60
inline std::size_t BoundingKDOP::get_num_points(void) const;

551 9 get_point 0 4 824 23 BoundingKDOP::get_point 0 1 160 0
52
inline LPoint3 BoundingKDOP::get_point(int n) const;

552 14 get_num_planes 0 4 824 28 BoundingKDOP::get_num_planes 0 1 161 0
60
inline std::size_t BoundingKDOP::get_num_planes(void) const;

553 9 get_plane 0 4 824 23 BoundingKDOP::get_plane 0 1 162 0
51
inline LPlane BoundingKDOP::get_plane(int n) const;

554 14 get_class_type 0 4 824 28 BoundingKDOP::get_class_type 0 1 163 0
53
static TypeHandle BoundingKDOP::get_class_type(void);

555 13 ~BoundingKDOP 0 4 824 27 BoundingKDOP::~BoundingKDOP 0 0 0
34
BoundingKDOP::~BoundingKDOP(void);

556 11 CBaseEntity 0 4 826 24 CBaseEntity::CBaseEntity 0 2 164 165 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

557 10 get_loader 0 4 826 23 CBaseEntity::get_loader 0 1 166 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

558 16 get_entity_value 0 4 826 29 CBaseEntity::get_entity_value 0 1 167 0
79
inline std::string CBaseEntity::get_entity_value(std::string const &key) const;

559 23 get_entity_value_vector 0 4 826 36 CBaseEntity::get_entity_value_vector 0 1 168 0
76
LVector3 CBaseEntity::get_entity_value_vector(std::string const &key) const;

560 22 get_entity_value_color 0 4 826 35 CBaseEntity::get_entity_value_color 0 1 169 0
92
LColor CBaseEntity::get_entity_value_color(std::string const &key, bool scale = true) const;

561 13 get_classname 0 4 826 26 CBaseEntity::get_classname 0 1 170 0
58
inline std::string CBaseEntity::get_classname(void) const;

562 14 get_targetname 0 4 826 27 CBaseEntity::get_targetname 0 1 171 0
59
inline std::string CBaseEntity::get_targetname(void) const;

563 14 get_bsp_entnum 0 4 826 27 CBaseEntity::get_bsp_entnum 0 1 172 0
51
inline int CBaseEntity::get_bsp_entnum(void) const;

564 12 ~CBaseEntity 0 4 826 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

565 12 CPointEntity 0 4 827 26 CPointEntity::CPointEntity 0 2 173 174 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

566 10 get_origin 0 4 827 24 CPointEntity::get_origin 0 1 175 0
45
LPoint3 CPointEntity::get_origin(void) const;

567 10 get_angles 0 4 827 24 CPointEntity::get_angles 0 1 176 0
46
LVector3 CPointEntity::get_angles(void) const;

568 13 ~CPointEntity 0 4 827 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

569 13 CBoundsEntity 0 4 828 28 CBoundsEntity::CBoundsEntity 0 2 177 178 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

570 10 get_bounds 0 4 828 25 CBoundsEntity::get_bounds 0 1 179 0
52
BoundingKDOP *CBoundsEntity::get_bounds(void) const;

571 9 is_inside 0 4 828 24 CBoundsEntity::is_inside 0 1 180 0
56
bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

572 13 fillin_bounds 0 4 828 28 CBoundsEntity::fillin_bounds 0 1 181 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

573 14 ~CBoundsEntity 0 4 828 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

574 12 CBrushEntity 0 4 829 26 CBrushEntity::CBrushEntity 0 2 182 183 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

575 12 get_model_np 0 4 829 26 CBrushEntity::get_model_np 0 1 184 0
48
NodePath CBrushEntity::get_model_np(void) const;

576 16 get_model_bounds 0 4 829 30 CBrushEntity::get_model_bounds 0 1 185 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

577 13 ~CBrushEntity 0 4 829 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

578 18 ShaderPermutations 0 4 830 38 ShaderPermutations::ShaderPermutations 0 1 186 0
52
inline ShaderPermutations::ShaderPermutations(void);

579 15 add_permutation 0 4 830 35 ShaderPermutations::add_permutation 0 1 187 0
104
inline void ShaderPermutations::add_permutation(std::string const &key, std::string const &value = "1");

580 8 complete 0 4 830 28 ShaderPermutations::complete 0 1 188 0
47
inline void ShaderPermutations::complete(void);

581 9 add_input 0 4 830 29 ShaderPermutations::add_input 0 1 189 0
66
inline void ShaderPermutations::add_input(ShaderInput const &inp);

582 8 add_flag 0 4 830 28 ShaderPermutations::add_flag 0 1 190 0
51
inline void ShaderPermutations::add_flag(int flag);

583 8 get_hash 0 4 830 28 ShaderPermutations::get_hash 0 1 191 0
60
inline std::size_t ShaderPermutations::get_hash(void) const;

584 19 ~ShaderPermutations 0 4 830 39 ShaderPermutations::~ShaderPermutations 0 0 0
46
ShaderPermutations::~ShaderPermutations(void);

585 24 upcast_to_ReferenceCount 0 12 831 36 ShaderSpec::upcast_to_ReferenceCount 0 1 194 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

586 22 downcast_to_ShaderSpec 0 12 815 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

587 17 upcast_to_Namable 0 12 831 29 ShaderSpec::upcast_to_Namable 0 1 195 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

588 22 downcast_to_ShaderSpec 0 12 832 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

589 17 read_shader_files 0 4 831 29 ShaderSpec::read_shader_files 0 1 192 0
117
void ShaderSpec::read_shader_files(Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file);

590 14 get_class_type 0 4 831 26 ShaderSpec::get_class_type 0 1 193 0
51
static TypeHandle ShaderSpec::get_class_type(void);

591 11 ~ShaderSpec 0 4 831 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

592 22 get_reflection_texture 0 4 833 41 PlanarReflections::get_reflection_texture 0 1 197 0
63
Texture *PlanarReflections::get_reflection_texture(void) const;

593 17 PlanarReflections 0 4 833 36 PlanarReflections::PlanarReflections 0 1 196 0
81
inline PlanarReflections::PlanarReflections(PlanarReflections const &) = default;

594 18 ~PlanarReflections 0 4 833 37 PlanarReflections::~PlanarReflections 0 0 0
44
PlanarReflections::~PlanarReflections(void);

595 18 BSPShaderGenerator 0 4 837 38 BSPShaderGenerator::BSPShaderGenerator 0 2 198 199 0
224
BSPShaderGenerator::BSPShaderGenerator(GraphicsOutput *output, GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline BSPShaderGenerator::BSPShaderGenerator(BSPShaderGenerator const &) = default;

596 13 set_sun_light 0 4 837 33 BSPShaderGenerator::set_sun_light 0 1 200 0
59
void BSPShaderGenerator::set_sun_light(NodePath const &np);

597 12 start_update 0 4 837 32 BSPShaderGenerator::start_update 0 1 201 0
44
void BSPShaderGenerator::start_update(void);

598 10 add_shader 0 4 837 30 BSPShaderGenerator::add_shader 0 1 202 0
66
void BSPShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

599 14 get_sun_vector 0 4 837 34 BSPShaderGenerator::get_sun_vector 0 1 203 0
63
inline LVector3 BSPShaderGenerator::get_sun_vector(void) const;

600 19 has_shadow_sunlight 0 4 837 39 BSPShaderGenerator::has_shadow_sunlight 0 1 204 0
64
inline bool BSPShaderGenerator::has_shadow_sunlight(void) const;

601 22 get_pssm_array_texture 0 4 837 42 BSPShaderGenerator::get_pssm_array_texture 0 1 205 0
71
inline Texture *BSPShaderGenerator::get_pssm_array_texture(void) const;

602 12 get_pssm_rig 0 4 837 32 BSPShaderGenerator::get_pssm_rig 0 1 206 0
67
inline PSSMCameraRig *BSPShaderGenerator::get_pssm_rig(void) const;

603 10 get_camera 0 4 837 30 BSPShaderGenerator::get_camera 0 1 207 0
59
inline NodePath BSPShaderGenerator::get_camera(void) const;

604 10 get_render 0 4 837 30 BSPShaderGenerator::get_render 0 1 208 0
59
inline NodePath BSPShaderGenerator::get_render(void) const;

605 18 set_shader_quality 0 4 837 38 BSPShaderGenerator::set_shader_quality 0 1 209 0
57
void BSPShaderGenerator::set_shader_quality(int quality);

606 18 get_shader_quality 0 4 837 38 BSPShaderGenerator::get_shader_quality 0 1 210 0
62
inline int BSPShaderGenerator::get_shader_quality(void) const;

607 7 set_fog 0 4 837 27 BSPShaderGenerator::set_fog 0 1 211 0
50
inline void BSPShaderGenerator::set_fog(Fog *fog);

608 9 clear_fog 0 4 837 29 BSPShaderGenerator::clear_fog 0 1 212 0
48
inline void BSPShaderGenerator::clear_fog(void);

609 7 get_fog 0 4 837 27 BSPShaderGenerator::get_fog 0 1 213 0
52
inline Fog *BSPShaderGenerator::get_fog(void) const;

610 12 get_fog_data 0 4 837 32 BSPShaderGenerator::get_fog_data 0 1 214 0
67
inline PTA_LVecBase4f BSPShaderGenerator::get_fog_data(void) const;

611 22 set_exposure_adustment 0 4 837 42 BSPShaderGenerator::set_exposure_adustment 0 1 215 0
71
inline void BSPShaderGenerator::set_exposure_adustment(float exposure);

612 23 get_exposure_adjustment 0 4 837 43 BSPShaderGenerator::get_exposure_adjustment 0 1 216 0
73
inline PTA_float BSPShaderGenerator::get_exposure_adjustment(void) const;

613 7 get_gsg 0 4 837 27 BSPShaderGenerator::get_gsg 0 1 217 0
70
inline GraphicsStateGuardian *BSPShaderGenerator::get_gsg(void) const;

614 10 get_output 0 4 837 30 BSPShaderGenerator::get_output 0 1 218 0
66
inline GraphicsOutput *BSPShaderGenerator::get_output(void) const;

615 22 get_planar_reflections 0 4 837 42 BSPShaderGenerator::get_planar_reflections 0 1 219 0
81
inline PlanarReflections *BSPShaderGenerator::get_planar_reflections(void) const;

616 20 set_identity_cubemap 0 4 837 40 BSPShaderGenerator::set_identity_cubemap 0 1 220 0
67
static void BSPShaderGenerator::set_identity_cubemap(Texture *tex);

617 20 get_identity_cubemap 0 4 837 40 BSPShaderGenerator::get_identity_cubemap 0 1 221 0
63
static Texture *BSPShaderGenerator::get_identity_cubemap(void);

618 11 make_shader 0 4 837 31 BSPShaderGenerator::make_shader 0 1 222 0
121
static ConstPointerTo< Shader > BSPShaderGenerator::make_shader(ShaderSpec const *spec, ShaderPermutations const *perms);

619 14 get_class_type 0 4 837 34 BSPShaderGenerator::get_class_type 0 1 223 0
59
static TypeHandle BSPShaderGenerator::get_class_type(void);

620 19 ~BSPShaderGenerator 0 4 837 39 BSPShaderGenerator::~BSPShaderGenerator 0 0 0
46
BSPShaderGenerator::~BSPShaderGenerator(void);

621 14 get_class_type 0 4 839 32 BSPCullTraverser::get_class_type 0 1 226 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

622 16 BSPCullTraverser 0 4 839 34 BSPCullTraverser::BSPCullTraverser 0 2 224 225 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

623 15 has_camera_bits 0 4 839 33 BSPCullTraverser::has_camera_bits 0 1 227 0
71
inline bool BSPCullTraverser::has_camera_bits(unsigned int bits) const;

624 14 needs_lighting 0 4 839 32 BSPCullTraverser::needs_lighting 0 1 228 0
57
inline bool BSPCullTraverser::needs_lighting(void) const;

625 13 needs_culling 0 4 839 31 BSPCullTraverser::needs_culling 0 1 229 0
56
inline bool BSPCullTraverser::needs_culling(void) const;

626 23 get_required_leaf_flags 0 4 839 41 BSPCullTraverser::get_required_leaf_flags 0 1 230 106
/**
	 * Returns the flags that must be set on a leaf for it to be
	 * rendered by the current camera.
	 */
74
inline unsigned int BSPCullTraverser::get_required_leaf_flags(void) const;

627 17 ~BSPCullTraverser 0 4 839 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

628 14 get_class_type 0 4 841 25 BSPRender::get_class_type 0 1 233 0
50
static TypeHandle BSPRender::get_class_type(void);

629 9 BSPRender 0 4 841 20 BSPRender::BSPRender 0 2 231 232 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

630 10 ~BSPRender 0 4 841 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

631 14 get_class_type 0 4 842 23 BSPRoot::get_class_type 0 1 236 0
48
static TypeHandle BSPRoot::get_class_type(void);

632 7 BSPRoot 0 4 842 16 BSPRoot::BSPRoot 0 2 234 235 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

633 8 ~BSPRoot 0 4 842 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

634 14 get_class_type 0 4 843 23 BSPProp::get_class_type 0 1 239 0
48
static TypeHandle BSPProp::get_class_type(void);

635 7 BSPProp 0 4 843 16 BSPProp::BSPProp 0 2 237 238 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

636 8 ~BSPProp 0 4 843 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

637 14 get_class_type 0 4 845 24 BSPModel::get_class_type 0 1 242 0
49
static TypeHandle BSPModel::get_class_type(void);

638 8 BSPModel 0 4 845 18 BSPModel::BSPModel 0 2 240 241 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

639 9 ~BSPModel 0 4 845 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

640 20 VertexLitGenericSpec 0 4 847 42 VertexLitGenericSpec::VertexLitGenericSpec 0 1 243 0
49
VertexLitGenericSpec::VertexLitGenericSpec(void);

641 21 ~VertexLitGenericSpec 0 4 847 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

642 22 LightmappedGenericSpec 0 4 848 46 LightmappedGenericSpec::LightmappedGenericSpec 0 1 244 0
53
LightmappedGenericSpec::LightmappedGenericSpec(void);

643 23 ~LightmappedGenericSpec 0 4 848 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

644 16 UnlitGenericSpec 0 4 849 34 UnlitGenericSpec::UnlitGenericSpec 0 1 245 0
41
UnlitGenericSpec::UnlitGenericSpec(void);

645 17 ~UnlitGenericSpec 0 4 849 35 UnlitGenericSpec::~UnlitGenericSpec 0 0 0
42
UnlitGenericSpec::~UnlitGenericSpec(void);

646 14 UnlitNoMatSpec 0 4 850 30 UnlitNoMatSpec::UnlitNoMatSpec 0 1 246 0
37
UnlitNoMatSpec::UnlitNoMatSpec(void);

647 15 ~UnlitNoMatSpec 0 4 850 31 UnlitNoMatSpec::~UnlitNoMatSpec 0 0 0
38
UnlitNoMatSpec::~UnlitNoMatSpec(void);

648 13 CSMRenderSpec 0 4 851 28 CSMRenderSpec::CSMRenderSpec 0 1 247 0
35
CSMRenderSpec::CSMRenderSpec(void);

649 14 ~CSMRenderSpec 0 4 851 29 CSMRenderSpec::~CSMRenderSpec 0 0 0
36
CSMRenderSpec::~CSMRenderSpec(void);

650 10 SkyBoxSpec 0 4 852 22 SkyBoxSpec::SkyBoxSpec 0 1 248 0
29
SkyBoxSpec::SkyBoxSpec(void);

651 11 ~SkyBoxSpec 0 4 852 23 SkyBoxSpec::~SkyBoxSpec 0 0 0
30
SkyBoxSpec::~SkyBoxSpec(void);

652 4 Make 0 4 853 24 AmbientBoostEffect::Make 0 1 249 0
69
static ConstPointerTo< RenderEffect > AmbientBoostEffect::Make(void);

653 14 get_class_type 0 4 853 34 AmbientBoostEffect::get_class_type 0 1 250 0
59
static TypeHandle AmbientBoostEffect::get_class_type(void);

654 19 ~AmbientBoostEffect 0 4 853 39 AmbientBoostEffect::~AmbientBoostEffect 0 0 0
46
AmbientBoostEffect::~AmbientBoostEffect(void);

655 14 Audio3DManager 0 4 855 30 Audio3DManager::Audio3DManager 0 2 251 252 0
228
Audio3DManager::Audio3DManager(AudioManager *mgr, NodePath const &listener_target = NodePath(), NodePath const &root = NodePath(), int task_priority = 51);
inline Audio3DManager::Audio3DManager(Audio3DManager const &) = default;

656 19 set_distance_factor 0 4 855 35 Audio3DManager::set_distance_factor 0 1 253 0
68
inline void Audio3DManager::set_distance_factor(PN_stdfloat factor);

657 19 get_distance_factor 0 4 855 35 Audio3DManager::get_distance_factor 0 1 254 0
67
inline PN_stdfloat Audio3DManager::get_distance_factor(void) const;

658 18 set_doppler_factor 0 4 855 34 Audio3DManager::set_doppler_factor 0 1 255 0
67
inline void Audio3DManager::set_doppler_factor(PN_stdfloat factor);

659 18 get_doppler_factor 0 4 855 34 Audio3DManager::get_doppler_factor 0 1 256 0
66
inline PN_stdfloat Audio3DManager::get_doppler_factor(void) const;

660 19 set_drop_off_factor 0 4 855 35 Audio3DManager::set_drop_off_factor 0 1 257 0
68
inline void Audio3DManager::set_drop_off_factor(PN_stdfloat factor);

661 19 get_drop_off_factor 0 4 855 35 Audio3DManager::get_drop_off_factor 0 1 258 0
67
inline PN_stdfloat Audio3DManager::get_drop_off_factor(void) const;

662 22 set_sound_min_distance 0 4 855 38 Audio3DManager::set_sound_min_distance 0 1 259 0
88
inline void Audio3DManager::set_sound_min_distance(AudioSound *sound, PN_stdfloat dist);

663 22 get_sound_min_distance 0 4 855 38 Audio3DManager::get_sound_min_distance 0 1 260 0
83
inline PN_stdfloat Audio3DManager::get_sound_min_distance(AudioSound *sound) const;

664 22 set_sound_max_distance 0 4 855 38 Audio3DManager::set_sound_max_distance 0 1 261 0
88
inline void Audio3DManager::set_sound_max_distance(AudioSound *sound, PN_stdfloat dist);

665 22 get_sound_max_distance 0 4 855 38 Audio3DManager::get_sound_max_distance 0 1 262 0
83
inline PN_stdfloat Audio3DManager::get_sound_max_distance(AudioSound *sound) const;

666 15 attach_listener 0 4 855 31 Audio3DManager::attach_listener 0 1 263 0
70
inline void Audio3DManager::attach_listener(NodePath const &listener);

667 15 detach_listener 0 4 855 31 Audio3DManager::detach_listener 0 1 264 0
50
inline void Audio3DManager::detach_listener(void);

668 8 load_sfx 0 4 855 24 Audio3DManager::load_sfx 0 1 265 0
81
inline PointerTo< AudioSound > Audio3DManager::load_sfx(std::string const &path);

669 22 attach_sound_to_object 0 4 855 38 Audio3DManager::attach_sound_to_object 0 1 266 0
87
void Audio3DManager::attach_sound_to_object(AudioSound *sound, NodePath const &object);

670 12 detach_sound 0 4 855 28 Audio3DManager::detach_sound 0 1 267 0
53
void Audio3DManager::detach_sound(AudioSound *sound);

671 18 print_audio_digest 0 4 855 34 Audio3DManager::print_audio_digest 0 1 268 0
46
void Audio3DManager::print_audio_digest(void);

672 6 update 0 4 855 22 Audio3DManager::update 0 1 269 0
34
void Audio3DManager::update(void);

673 15 ~Audio3DManager 0 4 855 31 Audio3DManager::~Audio3DManager 0 0 0
38
Audio3DManager::~Audio3DManager(void);

674 19 set_pupil_direction 0 4 856 27 CIOLib::set_pupil_direction 0 1 272 0
91
static void CIOLib::set_pupil_direction(float x, float y, LVector3 &left, LVector3 &right);

675 14 look_pupils_at 0 4 856 22 CIOLib::look_pupils_at 0 1 273 0
106
static LVector2 CIOLib::look_pupils_at(NodePath const &node, LVector3 const &point, NodePath const &eyes);

676 6 CIOLib 0 4 856 14 CIOLib::CIOLib 0 2 270 271 0
87
inline CIOLib::CIOLib(void) = default;
inline CIOLib::CIOLib(CIOLib const &) = default;

677 7 ~CIOLib 0 4 856 15 CIOLib::~CIOLib 0 0 0
22
CIOLib::~CIOLib(void);

678 17 DecalModulateSpec 0 4 857 36 DecalModulateSpec::DecalModulateSpec 0 1 274 0
43
DecalModulateSpec::DecalModulateSpec(void);

679 18 ~DecalModulateSpec 0 4 857 37 DecalModulateSpec::~DecalModulateSpec 0 0 0
44
DecalModulateSpec::~DecalModulateSpec(void);

680 14 get_class_type 0 4 858 24 GlowNode::get_class_type 0 1 278 0
49
static TypeHandle GlowNode::get_class_type(void);

681 8 GlowNode 0 4 858 18 GlowNode::GlowNode 0 3 275 276 277 0
219
GlowNode::GlowNode(std::string const &name, float query_size = ::r_glow_querysize);
GlowNode::GlowNode(GeomNode const &copy, float query_size = ::r_glow_querysize);
inline GlowNode::GlowNode(GlowNode const &) = default;

682 9 ~GlowNode 0 4 858 19 GlowNode::~GlowNode 0 0 0
26
GlowNode::~GlowNode(void);

683 24 upcast_to_ReferenceCount 0 12 860 43 PostProcessEffect::upcast_to_ReferenceCount 0 1 288 47
upcast from PostProcessEffect to ReferenceCount
66
ReferenceCount *PostProcessEffect::upcast_to_ReferenceCount(void);

684 29 downcast_to_PostProcessEffect 0 12 815 45 ReferenceCount::downcast_to_PostProcessEffect 0 0 49
downcast from ReferenceCount to PostProcessEffect
71
PostProcessEffect *ReferenceCount::downcast_to_PostProcessEffect(void);

685 17 upcast_to_Namable 0 12 860 36 PostProcessEffect::upcast_to_Namable 0 1 289 40
upcast from PostProcessEffect to Namable
52
Namable *PostProcessEffect::upcast_to_Namable(void);

686 29 downcast_to_PostProcessEffect 0 12 832 38 Namable::downcast_to_PostProcessEffect 0 0 42
downcast from Namable to PostProcessEffect
64
PostProcessEffect *Namable::downcast_to_PostProcessEffect(void);

687 14 get_class_type 0 4 860 33 PostProcessEffect::get_class_type 0 1 279 0
58
static TypeHandle PostProcessEffect::get_class_type(void);

688 17 get_final_texture 0 6 860 36 PostProcessEffect::get_final_texture 0 1 280 0
64
virtual Texture *PostProcessEffect::get_final_texture(void) = 0;

689 8 add_pass 0 4 860 27 PostProcessEffect::add_pass 0 1 281 0
56
void PostProcessEffect::add_pass(PostProcessPass *pass);

690 11 remove_pass 0 4 860 30 PostProcessEffect::remove_pass 0 1 282 0
59
void PostProcessEffect::remove_pass(PostProcessPass *pass);

691 8 get_pass 0 4 860 27 PostProcessEffect::get_pass 0 1 283 0
70
PostProcessPass *PostProcessEffect::get_pass(std::string const &name);

692 5 setup 0 6 860 24 PostProcessEffect::setup 0 1 284 0
44
virtual void PostProcessEffect::setup(void);

693 6 update 0 6 860 25 PostProcessEffect::update 0 1 285 0
45
virtual void PostProcessEffect::update(void);

694 12 window_event 0 4 860 31 PostProcessEffect::window_event 0 1 286 0
58
void PostProcessEffect::window_event(GraphicsOutput *win);

695 8 shutdown 0 6 860 27 PostProcessEffect::shutdown 0 1 287 0
47
virtual void PostProcessEffect::shutdown(void);

696 18 ~PostProcessEffect 0 4 860 37 PostProcessEffect::~PostProcessEffect 0 0 0
44
PostProcessEffect::~PostProcessEffect(void);

697 24 upcast_to_ReferenceCount 0 12 862 41 PostProcessPass::upcast_to_ReferenceCount 0 1 315 45
upcast from PostProcessPass to ReferenceCount
64
ReferenceCount *PostProcessPass::upcast_to_ReferenceCount(void);

698 27 downcast_to_PostProcessPass 0 12 815 43 ReferenceCount::downcast_to_PostProcessPass 0 0 47
downcast from ReferenceCount to PostProcessPass
67
PostProcessPass *ReferenceCount::downcast_to_PostProcessPass(void);

699 17 upcast_to_Namable 0 12 862 34 PostProcessPass::upcast_to_Namable 0 1 316 38
upcast from PostProcessPass to Namable
50
Namable *PostProcessPass::upcast_to_Namable(void);

700 27 downcast_to_PostProcessPass 0 12 832 36 Namable::downcast_to_PostProcessPass 0 0 40
downcast from Namable to PostProcessPass
60
PostProcessPass *Namable::downcast_to_PostProcessPass(void);

701 14 get_class_type 0 4 862 31 PostProcessPass::get_class_type 0 1 292 0
56
static TypeHandle PostProcessPass::get_class_type(void);

702 15 PostProcessPass 0 4 862 32 PostProcessPass::PostProcessPass 0 2 290 291 0
379
PostProcessPass::PostProcessPass(PostProcess *pp, std::string const &name = "pass", int texture_output_bits = 0, FrameBufferProperties const &fbprops = PostProcessPass::get_default_fbprops(), bool force_size = false, LVector2i const &forced_size = LVector2i::zero(), bool div_size = false, int div = 1);
inline PostProcessPass::PostProcessPass(PostProcessPass const &) = default;

703 8 get_quad 0 4 862 25 PostProcessPass::get_quad 0 1 293 0
54
inline NodePath PostProcessPass::get_quad(void) const;

704 26 get_back_buffer_dimensions 0 4 862 43 PostProcessPass::get_back_buffer_dimensions 0 1 294 0
66
LVector2i PostProcessPass::get_back_buffer_dimensions(void) const;

705 10 get_camera 0 4 862 27 PostProcessPass::get_camera 0 1 295 0
56
inline NodePath PostProcessPass::get_camera(void) const;

706 16 has_texture_bits 0 4 862 33 PostProcessPass::has_texture_bits 0 1 296 0
62
inline bool PostProcessPass::has_texture_bits(int bits) const;

707 12 set_div_size 0 4 862 29 PostProcessPass::set_div_size 0 1 297 0
66
inline void PostProcessPass::set_div_size(bool div_size, int div);

708 15 set_forced_size 0 4 862 32 PostProcessPass::set_forced_size 0 1 298 0
92
inline void PostProcessPass::set_forced_size(bool force_size, LVector2i const &forced_size);

709 26 set_framebuffer_properties 0 4 862 43 PostProcessPass::set_framebuffer_properties 0 1 299 0
94
inline void PostProcessPass::set_framebuffer_properties(FrameBufferProperties const &fbprops);

710 23 set_output_texture_bits 0 4 862 40 PostProcessPass::set_output_texture_bits 0 1 300 0
63
inline void PostProcessPass::set_output_texture_bits(int bits);

711 18 get_corrected_size 0 4 862 35 PostProcessPass::get_corrected_size 0 1 301 0
69
LVector2i PostProcessPass::get_corrected_size(LVector2i const &size);

712 11 get_texture 0 4 862 28 PostProcessPass::get_texture 0 1 302 0
47
Texture *PostProcessPass::get_texture(int bit);

713 17 get_color_texture 0 4 862 34 PostProcessPass::get_color_texture 0 1 303 0
57
inline Texture *PostProcessPass::get_color_texture(void);

714 17 get_depth_texture 0 4 862 34 PostProcessPass::get_depth_texture 0 1 304 0
57
inline Texture *PostProcessPass::get_depth_texture(void);

715 12 setup_buffer 0 6 862 29 PostProcessPass::setup_buffer 0 1 305 0
49
virtual bool PostProcessPass::setup_buffer(void);

716 14 setup_textures 0 6 862 31 PostProcessPass::setup_textures 0 1 306 0
51
virtual void PostProcessPass::setup_textures(void);

717 10 setup_quad 0 6 862 27 PostProcessPass::setup_quad 0 1 307 0
47
virtual void PostProcessPass::setup_quad(void);

718 12 setup_camera 0 6 862 29 PostProcessPass::setup_camera 0 1 308 0
49
virtual void PostProcessPass::setup_camera(void);

719 12 setup_region 0 6 862 29 PostProcessPass::setup_region 0 1 309 0
49
virtual void PostProcessPass::setup_region(void);

720 5 setup 0 6 862 22 PostProcessPass::setup 0 1 310 0
42
virtual void PostProcessPass::setup(void);

721 6 update 0 6 862 23 PostProcessPass::update 0 1 311 0
43
virtual void PostProcessPass::update(void);

722 12 window_event 0 6 862 29 PostProcessPass::window_event 0 1 312 0
67
virtual void PostProcessPass::window_event(GraphicsOutput *output);

723 8 shutdown 0 6 862 25 PostProcessPass::shutdown 0 1 313 0
45
virtual void PostProcessPass::shutdown(void);

724 19 get_default_fbprops 0 4 862 36 PostProcessPass::get_default_fbprops 0 1 314 0
72
static FrameBufferProperties PostProcessPass::get_default_fbprops(void);

725 16 ~PostProcessPass 0 4 862 33 PostProcessPass::~PostProcessPass 0 0 0
40
PostProcessPass::~PostProcessPass(void);

726 20 PostProcessScenePass 0 4 863 42 PostProcessScenePass::PostProcessScenePass 0 2 317 318 0
220
PostProcessScenePass::PostProcessScenePass(PostProcess *pp, int output_texture_bits = ::bits_PASSTEXTURE_COLOR, int auxbits = 0);
inline PostProcessScenePass::PostProcessScenePass(PostProcessScenePass const &) = default;

727 18 setup_scene_camera 0 4 863 40 PostProcessScenePass::setup_scene_camera 0 1 319 0
53
void PostProcessScenePass::setup_scene_camera(int i);

728 16 set_camera_state 0 4 863 38 PostProcessScenePass::set_camera_state 0 1 320 0
70
void PostProcessScenePass::set_camera_state(RenderState const *state);

729 21 ~PostProcessScenePass 0 4 863 43 PostProcessScenePass::~PostProcessScenePass 0 0 0
50
PostProcessScenePass::~PostProcessScenePass(void);

730 11 PostProcess 0 4 864 24 PostProcess::PostProcess 0 2 321 322 0
95
PostProcess::PostProcess(void);
inline PostProcess::PostProcess(PostProcess const &) = default;

731 7 startup 0 4 864 20 PostProcess::startup 0 1 323 0
50
void PostProcess::startup(GraphicsOutput *output);

732 10 add_camera 0 4 864 23 PostProcess::add_camera 0 1 324 0
53
void PostProcess::add_camera(NodePath const &camera);

733 13 remove_camera 0 4 864 26 PostProcess::remove_camera 0 1 325 0
56
void PostProcess::remove_camera(NodePath const &camera);

734 10 add_effect 0 4 864 23 PostProcess::add_effect 0 1 326 0
63
inline void PostProcess::add_effect(PostProcessEffect *effect);

735 13 remove_effect 0 4 864 26 PostProcess::remove_effect 0 1 327 0
66
inline void PostProcess::remove_effect(PostProcessEffect *effect);

736 10 get_effect 0 4 864 23 PostProcess::get_effect 0 1 328 0
75
inline PostProcessEffect *PostProcess::get_effect(std::string const &name);

737 23 get_scene_color_texture 0 4 864 36 PostProcess::get_scene_color_texture 0 1 329 0
65
inline Texture *PostProcess::get_scene_color_texture(void) const;

738 23 get_scene_depth_texture 0 4 864 36 PostProcess::get_scene_depth_texture 0 1 330 0
65
inline Texture *PostProcess::get_scene_depth_texture(void) const;

739 14 get_scene_pass 0 4 864 27 PostProcess::get_scene_pass 0 1 331 0
69
inline PostProcessScenePass *PostProcess::get_scene_pass(void) const;

740 10 get_output 0 4 864 23 PostProcess::get_output 0 1 332 0
59
inline GraphicsOutput *PostProcess::get_output(void) const;

741 10 get_camera 0 4 864 23 PostProcess::get_camera 0 1 333 0
53
inline NodePath PostProcess::get_camera(int n) const;

742 9 next_sort 0 4 864 22 PostProcess::next_sort 0 1 334 0
40
inline int PostProcess::next_sort(void);

743 25 get_output_display_region 0 4 864 38 PostProcess::get_output_display_region 0 1 335 0
73
inline DisplayRegion *PostProcess::get_output_display_region(void) const;

744 13 is_fullscreen 0 4 864 26 PostProcess::is_fullscreen 0 1 336 0
51
inline bool PostProcess::is_fullscreen(void) const;

745 18 set_scene_aux_bits 0 4 864 31 PostProcess::set_scene_aux_bits 0 1 337 0
47
void PostProcess::set_scene_aux_bits(int bits);

746 18 set_stacked_clears 0 4 864 31 PostProcess::set_stacked_clears 0 1 338 0
68
void PostProcess::set_stacked_clears(int n, DrawableRegion *region);

747 17 set_window_clears 0 4 864 30 PostProcess::set_window_clears 0 1 339 0
60
void PostProcess::set_window_clears(DrawableRegion *region);

748 10 set_clears 0 4 864 23 PostProcess::set_clears 0 1 340 0
60
void PostProcess::set_clears(int n, DrawableRegion *region);

749 8 shutdown 0 4 864 21 PostProcess::shutdown 0 1 341 0
33
void PostProcess::shutdown(void);

750 12 ~PostProcess 0 4 864 25 PostProcess::~PostProcess 0 0 0
32
PostProcess::~PostProcess(void);

751 14 get_class_type 0 4 865 23 HDRPass::get_class_type 0 1 344 0
48
static TypeHandle HDRPass::get_class_type(void);

752 7 HDRPass 0 4 865 16 HDRPass::HDRPass 0 2 342 343 0
86
HDRPass::HDRPass(PostProcess *pp);
inline HDRPass::HDRPass(HDRPass const &) = default;

753 19 set_exposure_output 0 4 865 28 HDRPass::set_exposure_output 0 1 345 0
59
inline void HDRPass::set_exposure_output(PTA_float output);

754 12 get_exposure 0 4 865 21 HDRPass::get_exposure 0 1 346 56
/**
	 * Returns the calculated exposure adjustment.
	 */
47
inline float HDRPass::get_exposure(void) const;

755 8 ~HDRPass 0 4 865 17 HDRPass::~HDRPass 0 0 0
24
HDRPass::~HDRPass(void);

756 9 HDREffect 0 4 866 20 HDREffect::HDREffect 0 1 347 0
38
HDREffect::HDREffect(PostProcess *pp);

757 12 get_hdr_pass 0 4 866 23 HDREffect::get_hdr_pass 0 1 348 0
52
inline HDRPass *HDREffect::get_hdr_pass(void) const;

758 10 ~HDREffect 0 4 866 21 HDREffect::~HDREffect 0 0 0
28
HDREffect::~HDREffect(void);

759 14 get_class_type 0 4 867 27 BloomEffect::get_class_type 0 1 350 0
52
static TypeHandle BloomEffect::get_class_type(void);

760 11 BloomEffect 0 4 867 24 BloomEffect::BloomEffect 0 1 349 0
42
BloomEffect::BloomEffect(PostProcess *pp);

761 12 ~BloomEffect 0 4 867 25 BloomEffect::~BloomEffect 0 0 0
32
BloomEffect::~BloomEffect(void);

762 14 get_class_type 0 4 868 36 LightingOriginEffect::get_class_type 0 1 351 0
61
static TypeHandle LightingOriginEffect::get_class_type(void);

763 4 make 0 4 868 26 LightingOriginEffect::make 0 1 352 0
89
static ConstPointerTo< RenderEffect > LightingOriginEffect::make(LVector3 const &origin);

764 19 get_lighting_origin 0 4 868 41 LightingOriginEffect::get_lighting_origin 0 1 353 0
70
inline LVector3 LightingOriginEffect::get_lighting_origin(void) const;

765 21 ~LightingOriginEffect 0 4 868 43 LightingOriginEffect::~LightingOriginEffect 0 0 0
50
LightingOriginEffect::~LightingOriginEffect(void);

766 14 get_class_type 0 4 869 27 FXAA_Effect::get_class_type 0 1 355 0
52
static TypeHandle FXAA_Effect::get_class_type(void);

767 11 FXAA_Effect 0 4 869 24 FXAA_Effect::FXAA_Effect 0 1 354 0
42
FXAA_Effect::FXAA_Effect(PostProcess *pp);

768 12 ~FXAA_Effect 0 4 869 25 FXAA_Effect::~FXAA_Effect 0 0 0
32
FXAA_Effect::~FXAA_Effect(void);

769 14 get_class_slot 0 4 870 27 BloomAttrib::get_class_slot 0 1 356 0
45
static int BloomAttrib::get_class_slot(void);

770 14 get_class_type 0 4 870 27 BloomAttrib::get_class_type 0 1 357 0
52
static TypeHandle BloomAttrib::get_class_type(void);

771 4 make 0 4 870 17 BloomAttrib::make 0 1 358 0
83
static ConstPointerTo< RenderAttrib > BloomAttrib::make(bool bloom_enabled = true);

772 16 is_bloom_enabled 0 4 870 29 BloomAttrib::is_bloom_enabled 0 1 359 0
54
inline bool BloomAttrib::is_bloom_enabled(void) const;

773 12 ~BloomAttrib 0 4 870 25 BloomAttrib::~BloomAttrib 0 0 0
32
BloomAttrib::~BloomAttrib(void);

774 26 PhysicsCharacterController 0 4 872 54 PhysicsCharacterController::PhysicsCharacterController 0 2 360 361 0
406
PhysicsCharacterController::PhysicsCharacterController(BulletWorld *world, NodePath const &render, NodePath const &parent, float walk_height, float crouch_height, float step_height, float radius, float gravity, BitMask32 const &wall_mask, BitMask32 const &floor_mask, BitMask32 const &event_mask);
inline PhysicsCharacterController::PhysicsCharacterController(PhysicsCharacterController const &) = default;

775 13 set_max_slope 0 4 872 41 PhysicsCharacterController::set_max_slope 0 1 362 0
78
void PhysicsCharacterController::set_max_slope(float degs, bool affect_speed);

776 16 set_collide_mask 0 4 872 44 PhysicsCharacterController::set_collide_mask 0 1 363 0
73
void PhysicsCharacterController::set_collide_mask(BitMask32 const &mask);

777 24 set_event_enter_callback 0 4 872 52 PhysicsCharacterController::set_event_enter_callback 0 1 364 0
85
inline void PhysicsCharacterController::set_event_enter_callback(PyObject *callback);

778 23 set_event_exit_callback 0 4 872 51 PhysicsCharacterController::set_event_exit_callback 0 1 365 0
84
inline void PhysicsCharacterController::set_event_exit_callback(PyObject *callback);

779 23 set_active_jump_limiter 0 4 872 51 PhysicsCharacterController::set_active_jump_limiter 0 1 366 0
78
inline void PhysicsCharacterController::set_active_jump_limiter(bool limiter);

780 20 set_default_material 0 4 872 48 PhysicsCharacterController::set_default_material 0 1 367 0
85
inline void PhysicsCharacterController::set_default_material(std::string const &mat);

781 18 set_touching_water 0 4 872 46 PhysicsCharacterController::set_touching_water 0 1 368 0
70
inline void PhysicsCharacterController::set_touching_water(bool flag);

782 20 get_current_material 0 4 872 48 PhysicsCharacterController::get_current_material 0 1 369 0
80
inline std::string PhysicsCharacterController::get_current_material(void) const;

783 16 get_walk_capsule 0 4 872 44 PhysicsCharacterController::get_walk_capsule 0 1 370 0
73
inline NodePath PhysicsCharacterController::get_walk_capsule(void) const;

784 18 get_crouch_capsule 0 4 872 46 PhysicsCharacterController::get_crouch_capsule 0 1 371 0
75
inline NodePath PhysicsCharacterController::get_crouch_capsule(void) const;

785 16 get_event_sphere 0 4 872 44 PhysicsCharacterController::get_event_sphere 0 1 372 0
73
inline NodePath PhysicsCharacterController::get_event_sphere(void) const;

786 11 get_capsule 0 4 872 39 PhysicsCharacterController::get_capsule 0 1 373 0
68
inline NodePath PhysicsCharacterController::get_capsule(void) const;

787 19 get_movement_parent 0 4 872 47 PhysicsCharacterController::get_movement_parent 0 1 374 0
76
inline NodePath PhysicsCharacterController::get_movement_parent(void) const;

788 11 set_gravity 0 4 872 39 PhysicsCharacterController::set_gravity 0 1 375 0
64
inline void PhysicsCharacterController::set_gravity(float grav);

789 18 set_movement_state 0 4 872 46 PhysicsCharacterController::set_movement_state 0 1 376 0
70
inline void PhysicsCharacterController::set_movement_state(int state);

790 18 get_movement_state 0 4 872 46 PhysicsCharacterController::get_movement_state 0 1 377 0
70
inline int PhysicsCharacterController::get_movement_state(void) const;

791 21 set_stand_up_callback 0 4 872 49 PhysicsCharacterController::set_stand_up_callback 0 1 378 0
82
inline void PhysicsCharacterController::set_stand_up_callback(PyObject *callback);

792 17 set_fall_callback 0 4 872 45 PhysicsCharacterController::set_fall_callback 0 1 379 0
78
inline void PhysicsCharacterController::set_fall_callback(PyObject *callback);

793 12 start_crouch 0 4 872 40 PhysicsCharacterController::start_crouch 0 1 380 0
52
void PhysicsCharacterController::start_crouch(void);

794 11 stop_crouch 0 4 872 39 PhysicsCharacterController::stop_crouch 0 1 381 0
51
void PhysicsCharacterController::stop_crouch(void);

795 12 is_on_ground 0 4 872 40 PhysicsCharacterController::is_on_ground 0 1 382 0
52
bool PhysicsCharacterController::is_on_ground(void);

796 10 start_jump 0 4 872 38 PhysicsCharacterController::start_jump 0 1 383 0
68
void PhysicsCharacterController::start_jump(float max_height = 3.0);

797 20 set_angular_movement 0 4 872 48 PhysicsCharacterController::set_angular_movement 0 1 384 0
67
void PhysicsCharacterController::set_angular_movement(float omega);

798 19 set_linear_movement 0 4 872 47 PhysicsCharacterController::set_linear_movement 0 1 385 0
79
void PhysicsCharacterController::set_linear_movement(LVector3 const &movement);

799 15 place_on_ground 0 4 872 43 PhysicsCharacterController::place_on_ground 0 1 386 0
55
void PhysicsCharacterController::place_on_ground(void);

800 6 update 0 4 872 34 PhysicsCharacterController::update 0 1 387 0
57
void PhysicsCharacterController::update(float frametime);

801 15 remove_capsules 0 4 872 43 PhysicsCharacterController::remove_capsules 0 1 388 0
55
void PhysicsCharacterController::remove_capsules(void);

802 27 ~PhysicsCharacterController 0 4 872 55 PhysicsCharacterController::~PhysicsCharacterController 0 0 0
62
PhysicsCharacterController::~PhysicsCharacterController(void);

388
1 0 0 7 12 873 400 0 0 0 
2 0 0 7 12 873 400 0 0 1 6 param0 0 874  
3 0 0 7 2 878 0 0 0 1 4 name 1 877  
4 0 0 7 2 878 0 0 0 2 4 name 1 877  7 uv_name 1 877  
5 0 0 7 3 878 0 0 0 0 
6 0 0 7 4 878 0 0 0 0 
7 0 0 7 5 878 0 0 0 0 
8 0 0 7 6 878 0 0 0 0 
9 0 0 7 7 878 0 0 0 0 
10 0 0 7 8 878 0 0 0 0 
11 0 0 7 9 878 0 0 0 0 
12 0 0 7 10 878 0 0 0 0 
13 0 0 7 11 878 0 0 0 0 
14 0 0 7 16 881 423 0 0 1 4 copy 1 879  
15 0 0 7 16 881 423 0 0 1 4 name 1 877  
16 0 0 7 17 881 423 0 0 2 4 this 3 881  4 copy 1 879  
17 0 0 4 18 882 0 0 0 3 4 this 3 881  3 key 1 877  5 value 1 877  
18 0 0 6 19 877 0 0 0 2 4 this 3 879  3 key 1 877  
19 0 0 6 20 883 0 0 0 1 4 this 3 879  
20 0 0 6 21 877 0 0 0 2 4 this 3 879  1 i 1 883  
21 0 0 6 22 877 0 0 0 2 4 this 3 879  1 i 1 883  
22 0 0 6 23 808 0 0 0 2 4 this 3 879  3 key 1 877  
23 0 0 6 24 885 0 0 0 2 4 this 3 879  3 key 1 877  
24 0 0 4 25 882 0 0 0 2 4 this 3 881  11 shader_name 1 877  
25 0 0 6 26 877 0 0 0 1 4 this 3 879  
26 0 0 7 27 887 0 0 0 1 4 this 3 879  
27 0 0 6 28 888 0 0 0 2 4 this 3 879  3 key 1 877  
28 0 0 6 29 888 0 0 0 1 4 this 3 879  
29 0 0 6 30 888 0 0 0 1 4 this 3 879  
30 0 0 6 31 877 0 0 0 1 4 this 3 879  
31 0 0 6 32 877 0 0 0 1 4 this 3 879  
32 0 0 6 33 888 0 0 0 1 4 this 3 879  
33 0 0 6 34 888 0 0 0 1 4 this 3 879  
34 0 0 6 35 888 0 0 0 1 4 this 3 879  
35 0 0 7 36 879 0 0 0 1 4 file 1 889  
36 0 0 7 37 892 0 0 0 0 
37 0 0 7 41 894 0 0 0 1 3 mat 1 879  
38 0 0 7 42 894 0 0 0 1 3 mat 1 879  
39 0 0 7 43 894 0 0 0 0 
40 0 0 6 44 877 0 0 0 1 4 this 3 895  
41 0 0 6 45 888 0 0 0 1 4 this 3 895  
42 0 0 7 46 879 0 0 0 1 4 this 3 895  
43 0 0 6 47 808 0 0 0 0 
44 0 0 7 50 892 0 0 0 0 
45 0 0 7 56 899 437 0 0 1 6 param0 0 897  
46 0 0 6 53 808 0 0 0 1 4 this 3 897  
47 0 0 6 54 808 0 0 0 1 4 this 3 897  
48 0 0 6 55 808 0 0 0 1 4 this 3 897  
49 0 0 7 64 902 444 0 0 1 6 param0 0 900  
50 0 0 6 59 808 0 0 0 1 4 this 3 900  
51 0 0 6 60 808 0 0 0 1 4 this 3 900  
52 0 0 6 61 808 0 0 0 1 4 this 3 900  
53 0 0 6 62 808 0 0 0 1 4 this 3 900  
54 0 0 6 63 888 0 0 0 1 4 this 3 900  
55 0 0 6 67 808 0 0 0 1 4 this 3 903  
56 0 0 4 68 882 0 0 35 // number of textures to consider.. 2 4 this 3 903  6 tcount 1 808  
57 0 0 4 69 882 0 0 21 // add textures 0 - n 3 4 this 3 903  3 wid 1 808  3 hit 1 808  
58 0 0 6 70 888 0 0 0 7 4 this 3 903  3 wid 1 808  3 hit 1 808  15 forcePowerOfTwo 1 888  14 onePixelBorder 1 888  7 max_wid 1 808  7 max_hit 1 808  
59 0 0 4 71 882 0 0 0 3 4 this 3 903  3 wid 1 808  3 hit 1 808  
60 0 0 7 72 899 437 0 74 // pack the textures, the return code is the amount of wasted/unused area. 3 4 this 3 903  15 forcePowerOfTwo 1 888  14 onePixelBorder 1 888  
61 0 0 7 73 902 444 0 58 // returns true if the texture has been rotated 90 degrees 2 4 this 3 903  5 index 1 808  
62 0 0 6 74 903 0 0 0 0 
63 0 0 4 75 882 0 0 0 1 2 tp 1 903  
64 0 0 7 80 904 458 0 0 0 
65 0 0 7 80 904 458 0 0 1 6 param0 0 905  
66 0 0 4 78 882 0 0 0 0 
67 0 0 4 79 882 0 0 0 0 
68 0 0 7 83 907 466 0 0 0 
69 0 0 7 83 907 466 0 0 1 6 param0 0 908  
70 0 0 6 84 888 0 0 0 1 4 this 3 908  
71 0 0 7 85 912 0 0 0 1 4 this 3 908  
72 0 0 7 86 915 0 0 0 1 4 this 3 908  
73 0 0 6 87 916 0 0 0 1 4 this 3 908  
74 0 0 6 88 916 0 0 0 1 4 this 3 908  
75 0 0 6 89 885 0 0 0 1 4 this 3 908  
76 0 0 7 93 917 0 0 0 0 
77 0 0 7 93 917 0 0 0 1 6 param0 0 918  
78 0 0 4 94 882 0 0 0 2 4 this 3 917  4 geom 1 920  
79 0 0 4 95 882 0 0 0 2 4 this 3 917  4 geom 1 920  
80 0 0 4 96 882 0 0 0 1 4 this 3 917  
81 0 0 7 98 907 466 0 0 4 4 this 3 917  5 start 1 921  3 end 1 921  4 mask 1 925  
82 0 0 7 99 907 466 0 0 5 4 this 3 917  6 origin 1 921  9 direction 1 929  8 distance 1 885  4 mask 1 925  
83 0 0 4 100 882 0 0 0 2 4 this 3 917  7 quality 1 808  
84 0 0 4 101 882 0 0 0 1 4 this 3 917  
85 0 0 7 102 920 0 0 0 2 4 this 3 917  7 geom_id 1 916  
86 0 0 7 105 892 0 0 0 0 
87 0 0 4 106 882 0 0 0 2 4 this 3 920  4 mask 1 925  
88 0 0 4 106 882 0 0 0 2 4 this 3 920  4 mask 1 916  
89 0 0 7 107 933 0 0 0 1 4 this 3 931  
90 0 0 6 108 916 0 0 0 1 4 this 3 931  
91 0 0 4 109 882 0 0 0 2 4 this 3 920  7 quality 1 808  
92 0 0 4 110 882 0 0 0 1 4 this 3 920  
93 0 0 7 113 934 486 0 0 1 4 name 1 877  
94 0 0 7 112 892 0 0 0 0 
95 0 0 4 114 882 0 0 0 4 4 this 3 934  2 p1 1 921  2 p2 1 921  2 p3 1 921  
96 0 0 4 115 882 0 0 0 3 4 this 3 934  4 geom 1 935  2 ts 1 938  
97 0 0 7 119 894 0 0 0 2 13 face_material 1 877  9 face_type 1 808  
98 0 0 7 120 894 0 0 0 0 
99 0 0 7 121 894 0 0 0 0 
100 0 0 6 122 877 0 0 0 1 4 this 3 941  
101 0 0 6 123 808 0 0 0 1 4 this 3 941  
102 0 0 6 124 888 0 0 0 1 4 this 3 941  
103 0 0 6 125 808 0 0 0 0 
104 0 0 7 127 892 0 0 0 0 
105 0 0 4 130 882 0 0 0 2 4 this 3 943  4 root 1 944  
106 0 0 4 131 882 0 0 0 2 4 this 3 943  5 world 1 947  
107 0 0 7 132 947 0 0 0 1 4 this 3 949  
108 0 0 6 133 888 0 0 0 2 4 this 3 949  6 rbnode 1 951  
109 0 0 6 134 888 0 0 0 3 4 this 3 943  6 rbnode 1 951  12 triangle_idx 1 808  
110 0 0 6 135 877 0 0 0 3 4 this 3 943  6 rbnode 1 951  12 triangle_idx 1 808  
111 0 0 6 136 808 0 0 0 3 4 this 3 943  6 rbnode 1 951  12 triangle_idx 1 808  
112 0 0 6 137 808 0 0 0 3 4 this 3 943  6 rbnode 1 951  12 triangle_idx 1 808  
113 0 0 7 138 953 0 0 0 2 4 this 3 943  8 modelnum 1 808  
114 0 0 6 139 888 0 0 0 3 4 this 3 943  4 file 1 889  13 is_transition 1 888  
115 0 0 4 140 882 0 0 0 1 4 this 3 943  
116 0 0 4 141 882 0 0 0 3 4 this 3 943  5 gamma 1 954  10 overbright 1 808  
117 0 0 6 142 954 0 0 0 1 4 this 3 949  
118 0 0 4 143 882 0 0 0 2 4 this 3 943  3 win 1 955  
119 0 0 4 144 882 0 0 0 2 4 this 3 943  6 camera 1 944  
120 0 0 4 145 882 0 0 0 2 4 this 3 943  6 render 1 944  
121 0 0 4 146 882 0 0 0 2 4 this 3 943  5 shgen 1 957  
122 0 0 4 147 882 0 0 0 2 4 this 3 943  4 flag 1 888  
123 0 0 4 148 882 0 0 0 2 4 this 3 943  4 flag 1 888  
124 0 0 4 149 882 0 0 0 2 4 this 3 943  4 type 1 808  
125 0 0 4 150 882 0 0 0 2 4 this 3 943  4 flag 1 888  
126 0 0 4 151 882 0 0 0 2 4 this 3 943  4 file 1 889  
127 0 0 4 152 882 0 0 0 2 4 this 3 943  4 flag 1 888  
128 0 0 6 153 888 0 0 0 1 4 this 3 949  
129 0 0 7 154 958 0 0 0 1 4 this 3 949  
130 0 0 4 155 882 0 0 0 7 4 this 3 943  14 decal_material 1 877  11 decal_scale 1 959  6 rotate 1 885  5 start 1 921  3 end 1 921  11 decal_color 1 963  
131 0 0 7 156 968 0 0 0 2 4 this 3 943  3 pos 1 921  
132 0 0 4 157 882 0 0 0 1 4 this 3 943  
133 0 0 4 158 882 0 0 0 2 4 this 3 943  4 flag 1 888  
134 0 0 4 159 882 0 0 0 2 4 this 3 943  3 dir 1 929  
135 0 0 6 160 808 0 0 0 2 4 this 3 943  6 entnum 1 808  
136 0 0 4 161 882 0 0 0 4 4 this 3 943  8 modelnum 1 808  4 mins 1 953  4 maxs 1 953  
137 0 0 4 162 882 0 0 0 2 4 this 3 943  2 ai 1 888  
138 0 0 6 163 888 0 0 0 1 4 this 3 949  
139 0 0 6 164 888 0 0 0 3 4 this 3 943  5 start 1 921  3 end 1 921  
140 0 0 7 165 953 0 0 0 3 4 this 3 943  5 start 1 921  3 end 1 921  
141 0 0 7 166 958 0 0 0 2 4 this 3 949  8 modelnum 1 808  
142 0 0 6 167 808 0 0 0 3 4 this 3 943  3 pos 1 921  8 headnode 1 808  
143 0 0 6 167 808 0 0 0 2 4 this 3 943  2 np 1 944  
144 0 0 6 168 808 0 0 0 2 4 this 3 943  3 pos 1 921  
145 0 0 6 169 888 0 0 0 3 4 this 3 949  12 curr_cluster 1 808  7 cluster 1 808  
146 0 0 6 170 888 0 0 0 3 4 this 3 943  6 bounds 1 969  19 required_leaf_flags 1 916  
147 0 0 7 171 969 0 0 0 3 4 this 3 943  13 net_transform 1 938  8 original 1 969  
148 0 0 6 172 888 0 0 0 1 4 this 3 949  
149 0 0 6 173 888 0 0 0 1 4 this 3 949  
150 0 0 4 174 882 0 0 0 2 4 this 3 943  13 is_transition 1 888  
151 0 0 7 175 958 0 0 0 1 4 this 3 949  
152 0 0 4 176 882 0 0 0 2 4 this 3 943  4 leaf 1 808  
153 0 0 6 177 808 0 0 0 1 4 this 3 949  
154 0 0 6 178 808 0 0 0 1 4 this 3 949  
155 0 0 7 179 953 0 0 0 2 4 this 3 949  4 leaf 1 808  
156 0 0 7 180 974 0 0 0 3 4 this 3 943  7 facenum 1 808  5 point 1 929  
157 0 0 4 181 882 0 0 0 1 3 ptr 1 943  
158 0 0 6 182 943 0 0 0 0 
159 0 0 6 187 883 0 0 0 1 4 this 3 975  
160 0 0 7 188 953 0 0 0 2 4 this 3 975  1 n 1 808  
161 0 0 6 189 883 0 0 0 1 4 this 3 975  
162 0 0 7 190 979 0 0 0 2 4 this 3 975  1 n 1 808  
163 0 0 7 191 892 0 0 0 0 
164 0 0 7 194 980 564 0 0 0 
165 0 0 7 194 980 564 0 0 1 6 param0 0 981  
166 0 0 6 195 943 0 0 0 1 4 this 3 981  
167 0 0 6 196 877 0 0 0 2 4 this 3 981  3 key 1 877  
168 0 0 7 197 912 0 0 0 2 4 this 3 981  3 key 1 877  
169 0 0 7 198 984 0 0 0 3 4 this 3 981  3 key 1 877  5 scale 1 888  
170 0 0 6 199 877 0 0 0 1 4 this 3 981  
171 0 0 6 200 877 0 0 0 1 4 this 3 981  
172 0 0 6 201 808 0 0 0 1 4 this 3 981  
173 0 0 7 204 985 568 0 0 0 
174 0 0 7 204 985 568 0 0 1 6 param0 0 986  
175 0 0 7 205 953 0 0 0 1 4 this 3 986  
176 0 0 7 206 912 0 0 0 1 4 this 3 986  
177 0 0 7 209 988 573 0 0 0 
178 0 0 7 209 988 573 0 0 1 6 param0 0 989  
179 0 0 7 210 991 555 0 0 1 4 this 3 989  
180 0 0 6 211 888 0 0 0 2 4 this 3 989  3 pos 1 921  
181 0 0 4 212 882 0 0 0 3 4 this 3 988  4 mins 1 953  4 maxs 1 953  
182 0 0 7 215 992 577 0 0 0 
183 0 0 7 215 992 577 0 0 1 6 param0 0 993  
184 0 0 7 216 958 0 0 0 1 4 this 3 993  
185 0 0 4 217 882 0 0 0 3 4 this 3 992  4 mins 1 953  4 maxs 1 953  
186 0 0 7 220 995 584 0 0 0 
187 0 0 4 221 882 0 0 0 3 4 this 3 995  3 key 1 877  5 value 1 877  
188 0 0 4 222 882 0 0 0 1 4 this 3 995  
189 0 0 4 223 882 0 0 0 2 4 this 3 995  3 inp 1 996  
190 0 0 4 224 882 0 0 0 2 4 this 3 995  4 flag 1 808  
191 0 0 6 225 883 0 0 0 1 4 this 3 999  
192 0 0 4 233 882 0 0 0 4 4 this 3 1001  9 vert_file 1 889  10 pixel_file 1 889  9 geom_file 1 889  
193 0 0 7 234 892 0 0 0 0 
194 0 0 7 228 1002 0 0 0 1 4 this 3 1001  
195 0 0 6 231 1003 0 0 0 1 4 this 3 1001  
196 0 0 7 238 1006 594 0 0 1 6 param0 0 1004  
197 0 0 7 237 968 0 0 0 1 4 this 3 1004  
198 0 0 7 245 957 620 0 0 1 6 param0 0 1007  
199 0 0 7 245 957 620 0 0 4 6 output 1 1009  3 gsg 1 1011  6 camera 1 944  6 render 1 944  
200 0 0 4 246 882 0 0 0 2 4 this 3 957  2 np 1 944  
201 0 0 4 247 882 0 0 0 1 4 this 3 957  
202 0 0 4 248 882 0 0 0 2 4 this 3 957  4 spec 1 1001  
203 0 0 7 249 912 0 0 0 1 4 this 3 1007  
204 0 0 6 250 888 0 0 0 1 4 this 3 1007  
205 0 0 7 251 968 0 0 0 1 4 this 3 1007  
206 0 0 6 252 1013 0 0 0 1 4 this 3 1007  
207 0 0 7 253 958 0 0 0 1 4 this 3 1007  
208 0 0 7 254 958 0 0 0 1 4 this 3 1007  
209 0 0 4 255 882 0 0 0 2 4 this 3 957  7 quality 1 808  
210 0 0 6 256 808 0 0 0 1 4 this 3 1007  
211 0 0 4 257 882 0 0 0 2 4 this 3 957  3 fog 1 1015  
212 0 0 4 258 882 0 0 0 1 4 this 3 957  
213 0 0 7 259 1015 0 0 0 1 4 this 3 1007  
214 0 0 7 260 1019 0 0 0 1 4 this 3 1007  
215 0 0 4 261 882 0 0 0 2 4 this 3 957  8 exposure 1 885  
216 0 0 7 262 1022 0 0 0 1 4 this 3 1007  
217 0 0 7 263 1011 0 0 0 1 4 this 3 1007  
218 0 0 7 264 1009 0 0 0 1 4 this 3 1007  
219 0 0 7 265 1006 594 0 0 1 4 this 3 1007  
220 0 0 4 266 882 0 0 0 1 3 tex 1 968  
221 0 0 7 267 968 0 0 0 0 
222 0 0 7 268 1027 0 0 0 2 4 spec 1 1025  5 perms 1 999  
223 0 0 7 269 892 0 0 0 0 
224 0 0 7 274 1030 627 0 0 1 6 param0 0 1028  
225 0 0 7 274 1030 627 0 0 2 4 trav 1 1031  6 loader 1 943  
226 0 0 7 273 892 0 0 0 0 
227 0 0 6 275 888 0 0 0 2 4 this 3 1028  4 bits 1 916  
228 0 0 6 276 888 0 0 0 1 4 this 3 1028  
229 0 0 6 277 888 0 0 0 1 4 this 3 1028  
230 0 0 6 278 916 0 0 106 /**
	 * Returns the flags that must be set on a leaf for it to be
	 * rendered by the current camera.
	 */ 1 4 this 3 1028  
231 0 0 7 282 1034 630 0 0 1 6 param0 0 1032  
232 0 0 7 282 1034 630 0 0 2 4 name 1 877  6 loader 1 943  
233 0 0 7 281 892 0 0 0 0 
234 0 0 7 286 1037 633 0 0 1 6 param0 0 1035  
235 0 0 7 286 1037 633 0 0 1 4 name 1 877  
236 0 0 7 285 892 0 0 0 0 
237 0 0 7 291 1040 636 0 0 1 6 param0 0 1038  
238 0 0 7 291 1040 636 0 0 1 4 name 1 877  
239 0 0 7 290 892 0 0 0 0 
240 0 0 7 296 1043 639 0 0 1 6 param0 0 1041  
241 0 0 7 296 1043 639 0 0 1 4 name 1 877  
242 0 0 7 295 892 0 0 0 0 
243 0 0 7 299 1044 641 0 0 0 
244 0 0 7 302 1045 643 0 0 0 
245 0 0 7 305 1046 645 0 0 0 
246 0 0 7 308 1047 647 0 0 0 
247 0 0 7 311 1048 649 0 0 0 
248 0 0 7 314 1049 651 0 0 0 
249 0 0 7 318 1051 0 0 0 0 
250 0 0 7 319 892 0 0 0 0 
251 0 0 7 322 1054 673 0 0 1 6 param0 0 1052  
252 0 0 7 322 1054 673 0 0 4 3 mgr 1 1055  15 listener_target 1 944  4 root 1 944  13 task_priority 1 808  
253 0 0 4 323 882 0 0 0 2 4 this 3 1054  6 factor 1 954  
254 0 0 6 324 954 0 0 0 1 4 this 3 1052  
255 0 0 4 325 882 0 0 0 2 4 this 3 1054  6 factor 1 954  
256 0 0 6 326 954 0 0 0 1 4 this 3 1052  
257 0 0 4 327 882 0 0 0 2 4 this 3 1054  6 factor 1 954  
258 0 0 6 328 954 0 0 0 1 4 this 3 1052  
259 0 0 4 329 882 0 0 0 3 4 this 3 1054  5 sound 1 1057  4 dist 1 954  
260 0 0 6 330 954 0 0 0 2 4 this 3 1052  5 sound 1 1057  
261 0 0 4 331 882 0 0 0 3 4 this 3 1054  5 sound 1 1057  4 dist 1 954  
262 0 0 6 332 954 0 0 0 2 4 this 3 1052  5 sound 1 1057  
263 0 0 4 333 882 0 0 0 2 4 this 3 1054  8 listener 1 944  
264 0 0 4 334 882 0 0 0 1 4 this 3 1054  
265 0 0 7 335 1057 0 0 0 2 4 this 3 1054  4 path 1 877  
266 0 0 4 336 882 0 0 0 3 4 this 3 1054  5 sound 1 1057  6 object 1 944  
267 0 0 4 337 882 0 0 0 2 4 this 3 1054  5 sound 1 1057  
268 0 0 4 338 882 0 0 0 1 4 this 3 1054  
269 0 0 4 339 882 0 0 0 1 4 this 3 1054  
270 0 0 7 344 1059 677 0 0 0 
271 0 0 7 344 1059 677 0 0 1 6 param0 0 1060  
272 0 0 4 342 882 0 0 0 4 1 x 1 885  1 y 1 885  4 left 1 912  5 right 1 912  
273 0 0 7 343 915 0 0 0 3 4 node 1 944  5 point 1 929  4 eyes 1 944  
274 0 0 7 347 1062 679 0 0 0 
275 0 0 7 352 1065 682 0 0 2 4 copy 1 1063  10 query_size 1 885  
276 0 0 7 352 1065 682 0 0 1 6 param0 0 1066  
277 0 0 7 352 1065 682 0 0 2 4 name 1 877  10 query_size 1 885  
278 0 0 7 351 892 0 0 0 0 
279 0 0 7 359 892 0 0 0 0 
280 0 0 7 360 968 0 0 0 1 4 this 3 1068  
281 0 0 4 361 882 0 0 0 2 4 this 3 1068  4 pass 1 1069  
282 0 0 4 362 882 0 0 0 2 4 this 3 1068  4 pass 1 1069  
283 0 0 7 363 1069 725 0 0 2 4 this 3 1068  4 name 1 877  
284 0 0 4 364 882 0 0 0 1 4 this 3 1068  
285 0 0 4 365 882 0 0 0 1 4 this 3 1068  
286 0 0 4 366 882 0 0 0 2 4 this 3 1068  3 win 1 1009  
287 0 0 4 367 882 0 0 0 1 4 this 3 1068  
288 0 0 7 355 1002 0 0 0 1 4 this 3 1068  
289 0 0 6 357 1003 0 0 0 1 4 this 3 1068  
290 0 0 7 376 1069 725 0 0 8 2 pp 1 1070  4 name 1 877  19 texture_output_bits 1 808  7 fbprops 1 1071  10 force_size 1 888  11 forced_size 1 1074  8 div_size 1 888  3 div 1 808  
291 0 0 7 376 1069 725 0 0 1 6 param0 0 1077  
292 0 0 7 375 892 0 0 0 0 
293 0 0 7 377 958 0 0 0 1 4 this 3 1077  
294 0 0 7 378 1079 0 0 0 1 4 this 3 1077  
295 0 0 7 379 958 0 0 0 1 4 this 3 1077  
296 0 0 6 380 888 0 0 0 2 4 this 3 1077  4 bits 1 808  
297 0 0 4 381 882 0 0 0 3 4 this 3 1069  8 div_size 1 888  3 div 1 808  
298 0 0 4 382 882 0 0 0 3 4 this 3 1069  10 force_size 1 888  11 forced_size 1 1074  
299 0 0 4 383 882 0 0 0 2 4 this 3 1069  7 fbprops 1 1071  
300 0 0 4 384 882 0 0 0 2 4 this 3 1069  4 bits 1 808  
301 0 0 7 385 1079 0 0 0 2 4 this 3 1069  4 size 1 1074  
302 0 0 7 386 968 0 0 0 2 4 this 3 1069  3 bit 1 808  
303 0 0 7 387 968 0 0 0 1 4 this 3 1069  
304 0 0 7 388 968 0 0 0 1 4 this 3 1069  
305 0 0 6 389 888 0 0 0 1 4 this 3 1069  
306 0 0 4 390 882 0 0 0 1 4 this 3 1069  
307 0 0 4 391 882 0 0 0 1 4 this 3 1069  
308 0 0 4 392 882 0 0 0 1 4 this 3 1069  
309 0 0 4 393 882 0 0 0 1 4 this 3 1069  
310 0 0 4 394 882 0 0 0 1 4 this 3 1069  
311 0 0 4 395 882 0 0 0 1 4 this 3 1069  
312 0 0 4 396 882 0 0 0 2 4 this 3 1069  6 output 1 1009  
313 0 0 4 397 882 0 0 0 1 4 this 3 1069  
314 0 0 7 398 1080 0 0 0 0 
315 0 0 7 371 1002 0 0 0 1 4 this 3 1069  
316 0 0 6 373 1003 0 0 0 1 4 this 3 1069  
317 0 0 7 401 1081 729 0 0 3 2 pp 1 1070  19 output_texture_bits 1 808  7 auxbits 1 808  
318 0 0 7 401 1081 729 0 0 1 6 param0 0 1082  
319 0 0 4 402 882 0 0 0 2 4 this 3 1081  1 i 1 808  
320 0 0 4 403 882 0 0 0 2 4 this 3 1081  5 state 1 1084  
321 0 0 7 406 1070 750 0 0 0 
322 0 0 7 406 1070 750 0 0 1 6 param0 0 1087  
323 0 0 4 407 882 0 0 0 2 4 this 3 1070  6 output 1 1009  
324 0 0 4 408 882 0 0 0 2 4 this 3 1070  6 camera 1 944  
325 0 0 4 409 882 0 0 0 2 4 this 3 1070  6 camera 1 944  
326 0 0 4 410 882 0 0 0 2 4 this 3 1070  6 effect 1 1068  
327 0 0 4 411 882 0 0 0 2 4 this 3 1070  6 effect 1 1068  
328 0 0 7 412 1068 696 0 0 2 4 this 3 1070  4 name 1 877  
329 0 0 7 413 968 0 0 0 1 4 this 3 1087  
330 0 0 7 414 968 0 0 0 1 4 this 3 1087  
331 0 0 7 415 1081 729 0 0 1 4 this 3 1087  
332 0 0 7 416 1009 0 0 0 1 4 this 3 1087  
333 0 0 7 417 958 0 0 0 2 4 this 3 1087  1 n 1 808  
334 0 0 6 418 808 0 0 0 1 4 this 3 1070  
335 0 0 7 419 1090 0 0 0 1 4 this 3 1087  
336 0 0 6 420 888 0 0 0 1 4 this 3 1087  
337 0 0 4 421 882 0 0 0 2 4 this 3 1070  4 bits 1 808  
338 0 0 4 422 882 0 0 0 3 4 this 3 1070  1 n 1 808  6 region 1 1091  
339 0 0 4 423 882 0 0 0 2 4 this 3 1070  6 region 1 1091  
340 0 0 4 424 882 0 0 0 3 4 this 3 1070  1 n 1 808  6 region 1 1091  
341 0 0 4 425 882 0 0 0 1 4 this 3 1070  
342 0 0 7 429 1095 755 0 0 1 6 param0 0 1093  
343 0 0 7 429 1095 755 0 0 1 2 pp 1 1070  
344 0 0 7 428 892 0 0 0 0 
345 0 0 4 430 882 0 0 0 2 4 this 3 1095  6 output 1 1022  
346 0 0 6 431 885 0 0 56 /**
	 * Returns the calculated exposure adjustment.
	 */ 1 4 this 3 1093  
347 0 0 7 434 1096 758 0 0 1 2 pp 1 1070  
348 0 0 7 435 1095 755 0 0 1 4 this 3 1097  
349 0 0 7 439 1099 761 0 0 1 2 pp 1 1070  
350 0 0 7 438 892 0 0 0 0 
351 0 0 7 442 892 0 0 0 0 
352 0 0 7 443 1051 0 0 0 1 6 origin 1 929  
353 0 0 7 444 912 0 0 0 1 4 this 3 1100  
354 0 0 7 448 1102 768 0 0 1 2 pp 1 1070  
355 0 0 7 447 892 0 0 0 0 
356 0 0 6 451 808 0 0 0 0 
357 0 0 7 453 892 0 0 0 0 
358 0 0 7 454 894 0 0 0 1 13 bloom_enabled 1 888  
359 0 0 6 455 888 0 0 0 1 4 this 3 1103  
360 0 0 7 459 1105 802 0 0 11 5 world 1 947  6 render 1 944  6 parent 1 944  11 walk_height 1 885  13 crouch_height 1 885  11 step_height 1 885  6 radius 1 885  7 gravity 1 885  9 wall_mask 1 925  10 floor_mask 1 925  10 event_mask 1 925  
361 0 0 7 459 1105 802 0 0 1 6 param0 0 1106  
362 0 0 4 460 882 0 0 0 3 4 this 3 1105  4 degs 1 885  12 affect_speed 1 888  
363 0 0 4 461 882 0 0 0 2 4 this 3 1105  4 mask 1 925  
364 0 0 4 462 882 0 0 0 2 4 this 3 1105  8 callback 1 1108  
365 0 0 4 463 882 0 0 0 2 4 this 3 1105  8 callback 1 1108  
366 0 0 4 464 882 0 0 0 2 4 this 3 1105  7 limiter 1 888  
367 0 0 4 465 882 0 0 0 2 4 this 3 1105  3 mat 1 877  
368 0 0 4 466 882 0 0 0 2 4 this 3 1105  4 flag 1 888  
369 0 0 6 467 877 0 0 0 1 4 this 3 1106  
370 0 0 7 468 958 0 0 0 1 4 this 3 1106  
371 0 0 7 469 958 0 0 0 1 4 this 3 1106  
372 0 0 7 470 958 0 0 0 1 4 this 3 1106  
373 0 0 7 471 958 0 0 0 1 4 this 3 1106  
374 0 0 7 472 958 0 0 0 1 4 this 3 1106  
375 0 0 4 473 882 0 0 0 2 4 this 3 1105  4 grav 1 885  
376 0 0 4 474 882 0 0 0 2 4 this 3 1105  5 state 1 808  
377 0 0 6 475 808 0 0 0 1 4 this 3 1106  
378 0 0 4 476 882 0 0 0 2 4 this 3 1105  8 callback 1 1108  
379 0 0 4 477 882 0 0 0 2 4 this 3 1105  8 callback 1 1108  
380 0 0 4 478 882 0 0 0 1 4 this 3 1105  
381 0 0 4 479 882 0 0 0 1 4 this 3 1105  
382 0 0 6 480 888 0 0 0 1 4 this 3 1105  
383 0 0 4 481 882 0 0 0 2 4 this 3 1105  10 max_height 1 885  
384 0 0 4 482 882 0 0 0 2 4 this 3 1105  5 omega 1 885  
385 0 0 4 483 882 0 0 0 2 4 this 3 1105  8 movement 1 929  
386 0 0 4 484 882 0 0 0 1 4 this 3 1105  
387 0 0 4 485 882 0 0 0 2 4 this 3 1105  9 frametime 1 885  
388 0 0 4 486 882 0 0 0 1 4 this 3 1105  
308
803 13 TextureStages 0 141313 13 TextureStages 13 TextureStages 0 0 0 1 399 400 0 10 389 390 391 392 393 394 395 396 397 398 0 0 0 0 0 752
/**
 * This simple interface maintains a single TextureStage object for each unique name.
 * It avoids the creation of duplicate TextureStages with the same name, which
 * reduces texture swapping and draw call overhead.
 *
 * If using our shader system, you should always use this interface to get TextureStages.
 * You are not required to change any properties on the returned TextureStage, as the shader
 * specification will know what to do with the TextureStage from the name.
 * 
 * For example, you do not need to call TextureStage::set_mode() or NodePath::set_tex_gen().
 * If you apply a texture to a node with the get_normalmap() stage, the shader specification
 * will know that the texture you supplied is to be treated as a normal map.
 */

804 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 401 423 0 21 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 0 0 1 0 805 0 0 0 0 0

805 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

806 17 BSPMaterialAttrib 0 141313 17 BSPMaterialAttrib 17 BSPMaterialAttrib 0 0 0 0 432 1 1111 8 424 425 426 427 428 429 430 431 0 0 1 0 807 0 0 0 0 0

807 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

808 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

809 10 PackResult 0 141313 10 PackResult 10 PackResult 0 0 0 1 436 437 0 3 433 434 435 0 0 0 0 0 0

810 15 TextureLocation 0 141313 15 TextureLocation 15 TextureLocation 0 0 0 1 443 444 0 5 438 439 440 441 442 0 0 0 0 0 0

811 13 TexturePacker 0 141313 13 TexturePacker 13 TexturePacker 0 0 0 0 454 0 9 445 446 447 448 449 450 451 452 453 0 0 0 0 0 0

812 8 RayTrace 0 141313 8 RayTrace 8 RayTrace 0 0 0 1 457 458 0 2 455 456 0 0 0 0 0 0

813 17 RayTraceHitResult 0 141313 17 RayTraceHitResult 17 RayTraceHitResult 0 0 0 1 459 466 0 6 460 461 462 463 464 465 0 0 0 0 0 0

814 13 RayTraceScene 0 75777 13 RayTraceScene 13 RayTraceScene 0 0 0 1 467 0 0 8 468 469 470 471 472 473 474 475 0 0 1 0 815 0 0 0 1 816 0

815 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

816 0 0 794624 15 RayTraceScene:: 0 814 0 0 0 0 0 0 0 0 0 3 17 BUILD_QUALITY_LOW 32 RayTraceScene::BUILD_QUALITY_LOW 0
0 20 BUILD_QUALITY_MEDIUM 35 RayTraceScene::BUILD_QUALITY_MEDIUM 0
1 18 BUILD_QUALITY_HIGH 33 RayTraceScene::BUILD_QUALITY_HIGH 0
2 0 0

817 16 RayTraceGeometry 0 75777 16 RayTraceGeometry 16 RayTraceGeometry 0 0 0 0 0 0 6 476 477 478 479 480 481 0 0 1 0 818 0 0 0 0 0

818 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

819 20 RayTraceTriangleMesh 0 141313 20 RayTraceTriangleMesh 20 RayTraceTriangleMesh 0 0 0 1 483 486 0 3 482 484 485 0 0 1 0 817 0 0 0 0 0

820 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 495 1 1112 8 487 488 489 490 491 492 493 494 0 0 1 0 807 0 0 0 1 821 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

821 0 0 794624 15 BSPFaceAttrib:: 0 820 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

822 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 0 549 0 53 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 0 0 0 0 1 823 58
/**
 * Loads and handles the operations of PBSP files.
 */

823 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 822 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

824 12 BoundingKDOP 0 141313 12 BoundingKDOP 12 BoundingKDOP 0 0 0 0 555 0 5 550 551 552 553 554 0 0 1 0 825 0 0 0 0 243
/**
 * This defines a bounding convex volume.  It may represent any enclosing convex volume,
 * including simple boxes.  However, if all you want is an axis-aligned
 * bounding box, you may be better off with the simpler BoundingBox class.
 */

825 20 FiniteBoundingVolume 0 2048 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 168
/**
 * A special kind of GeometricBoundingVolume that is known to be finite.  It
 * is possible to query this kind of volume for its minimum and maximum
 * extents.
 */

826 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 556 564 0 7 557 558 559 560 561 562 563 0 0 1 0 805 0 0 0 0 0

827 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 565 568 0 2 566 567 0 0 1 0 826 0 0 0 0 0

828 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 569 573 0 3 570 571 572 0 0 1 0 826 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

829 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 574 577 0 2 575 576 0 0 1 0 826 0 0 0 0 0

830 18 ShaderPermutations 0 141313 18 ShaderPermutations 18 ShaderPermutations 0 0 0 1 578 584 0 5 579 580 581 582 583 0 0 1 0 815 0 0 0 0 97
/**
 * Represents a list of #defines and variable inputs to a shader that is being generated.
 */

831 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 0 591 0 2 589 590 0 0 2 3 815 585 586 3 832 587 588 0 0 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

832 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

833 17 PlanarReflections 0 141313 17 PlanarReflections 17 PlanarReflections 0 0 0 1 593 594 0 1 592 0 0 1 0 815 0 0 0 0 0

834 13 ShaderQuality 0 532481 13 ShaderQuality 13 ShaderQuality 0 0 0 0 0 0 0 0 0 0 3 17 SHADERQUALITY_LOW 17 SHADERQUALITY_LOW 0
0 20 SHADERQUALITY_MEDIUM 20 SHADERQUALITY_MEDIUM 0
1 18 SHADERQUALITY_HIGH 18 SHADERQUALITY_HIGH 0
2 0 0

835 10 CameraBits 0 532481 10 CameraBits 10 CameraBits 0 0 0 0 0 0 0 0 0 0 6 11 CAMERA_MAIN 11 CAMERA_MAIN 0
1 13 CAMERA_SHADOW 13 CAMERA_SHADOW 0
2 17 CAMERA_REFLECTION 17 CAMERA_REFLECTION 0
4 17 CAMERA_REFRACTION 17 CAMERA_REFRACTION 0
8 16 CAMERA_VIEWMODEL 16 CAMERA_VIEWMODEL 0
16 14 CAMERA_COMPUTE 14 CAMERA_COMPUTE 0
32 0 0

836 7 AuxBits 0 532481 7 AuxBits 7 AuxBits 0 0 0 0 0 0 0 0 0 0 2 14 AUXBITS_NORMAL 14 AUXBITS_NORMAL 0
1 12 AUXBITS_ARME 12 AUXBITS_ARME 0
2 0 0

837 18 BSPShaderGenerator 0 141313 18 BSPShaderGenerator 18 BSPShaderGenerator 0 0 0 1 595 620 0 24 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 0 0 1 0 838 0 0 0 0 0

838 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

839 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 622 627 0 5 621 623 624 625 626 0 0 1 0 840 0 0 0 0 0

840 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

841 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 629 630 0 1 628 0 0 1 0 818 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

842 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 632 633 0 1 631 0 0 1 0 818 0 0 0 0 0

843 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 635 636 0 1 634 0 0 1 0 844 0 0 0 0 0

844 9 ModelRoot 0 2048 9 ModelRoot 9 ModelRoot 0 0 0 0 0 0 0 0 0 0 0 0 314
/**
 * A node of this type is created automatically at the root of each model file
 * that is loaded.  It may eventually contain some information about the
 * contents of the model; at the moment, it contains no special information,
 * but can be used as a flag to indicate the presence of a loaded model file.
 */

845 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 638 639 0 1 637 0 0 1 0 846 0 0 0 0 0

846 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

847 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 640 641 0 0 0 0 1 0 831 0 0 0 0 0

848 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 642 643 0 0 0 0 1 0 831 0 0 0 0 0

849 16 UnlitGenericSpec 0 141313 16 UnlitGenericSpec 16 UnlitGenericSpec 0 0 0 1 644 645 0 0 0 0 1 0 831 0 0 0 0 160
/**
 * Shader that only supports a basetexture, no fancy lighting effects or anything.
 * Could be used for UI elements, emissive materials, particles, etc.
 */

850 14 UnlitNoMatSpec 0 141313 14 UnlitNoMatSpec 14 UnlitNoMatSpec 0 0 0 1 646 647 0 0 0 0 1 0 831 0 0 0 0 0

851 13 CSMRenderSpec 0 141313 13 CSMRenderSpec 13 CSMRenderSpec 0 0 0 1 648 649 0 0 0 0 1 0 831 0 0 0 0 0

852 10 SkyBoxSpec 0 141313 10 SkyBoxSpec 10 SkyBoxSpec 0 0 0 1 650 651 0 0 0 0 1 0 831 0 0 0 0 0

853 18 AmbientBoostEffect 0 141313 18 AmbientBoostEffect 18 AmbientBoostEffect 0 0 0 0 654 0 2 652 653 0 0 1 0 854 0 0 0 0 0

854 12 RenderEffect 0 2048 12 RenderEffect 12 RenderEffect 0 0 0 0 0 0 0 0 0 0 0 0 901
/**
 * This is the base class for a number of special render effects that may be
 * set on scene graph nodes to change the way they render.  This includes
 * BillboardEffect, DecalEffect, etc.
 *
 * RenderEffect represents render properties that must be applied as soon as
 * they are encountered in the scene graph, rather than propagating down to
 * the leaves.  This is different from RenderAttrib, which represents
 * properties like color and texture that don't do anything until they
 * propagate down to a GeomNode.
 *
 * You should not attempt to create or modify a RenderEffect directly;
 * instead, use the make() method of the appropriate kind of effect you want.
 * This will allocate and return a new RenderEffect of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderEffect
 * if you wish to change its properties; instead, create a new one.
 */

855 14 Audio3DManager 0 141313 14 Audio3DManager 14 Audio3DManager 0 0 0 1 655 673 0 17 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 0 0 1 0 815 0 0 0 0 0

856 6 CIOLib 0 141313 6 CIOLib 6 CIOLib 0 0 0 1 676 677 0 2 674 675 0 0 0 0 0 0

857 17 DecalModulateSpec 0 141313 17 DecalModulateSpec 17 DecalModulateSpec 0 0 0 1 678 679 0 0 0 0 1 0 849 0 0 0 0 90
/**
 * This is just an alias of UnlitGeneric that enables color blending on the decal.
 */

858 8 GlowNode 0 141313 8 GlowNode 8 GlowNode 0 0 0 1 681 682 0 1 680 0 0 1 0 859 0 0 0 0 207
/**
 * This is a specialization on GeomNode that uses a pixel occlusion query
 * to determine if the Geoms on the node should be rendered.
 *
 * This is useful for things like light glows or lens flares.
 */

859 8 GeomNode 0 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 0 0 0 0 0 208
/**
 * A node that holds Geom objects, renderable pieces of geometry.  This is the
 * primary kind of leaf node in the scene graph; almost all visible objects
 * will be contained in a GeomNode somewhere.
 */

860 17 PostProcessEffect 0 141313 17 PostProcessEffect 17 PostProcessEffect 0 0 0 0 696 0 9 687 688 689 690 691 692 693 694 695 0 0 2 3 815 683 684 3 832 685 686 0 0 0

861 15 PassTextureBits 0 532481 15 PassTextureBits 15 PassTextureBits 0 0 0 0 0 0 0 0 0 0 6 22 bits_PASSTEXTURE_COLOR 22 bits_PASSTEXTURE_COLOR 0
1 22 bits_PASSTEXTURE_DEPTH 22 bits_PASSTEXTURE_DEPTH 0
2 21 bits_PASSTEXTURE_AUX0 21 bits_PASSTEXTURE_AUX0 0
4 21 bits_PASSTEXTURE_AUX1 21 bits_PASSTEXTURE_AUX1 0
8 21 bits_PASSTEXTURE_AUX2 21 bits_PASSTEXTURE_AUX2 0
16 21 bits_PASSTEXTURE_AUX3 21 bits_PASSTEXTURE_AUX3 0
32 0 0

862 15 PostProcessPass 0 141313 15 PostProcessPass 15 PostProcessPass 0 0 0 1 702 725 0 23 701 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 0 0 2 3 815 697 698 3 832 699 700 0 0 0

863 20 PostProcessScenePass 0 141313 20 PostProcessScenePass 20 PostProcessScenePass 0 0 0 1 726 729 0 2 727 728 0 0 1 0 862 0 0 0 0 0

864 11 PostProcess 0 141313 11 PostProcess 11 PostProcess 0 0 0 1 730 750 0 19 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 0 0 1 0 815 0 0 0 0 0

865 7 HDRPass 0 141313 7 HDRPass 7 HDRPass 0 0 0 1 752 755 0 3 751 753 754 0 0 1 0 862 0 0 0 0 0

866 9 HDREffect 0 141313 9 HDREffect 9 HDREffect 0 0 0 1 756 758 0 1 757 0 0 1 0 860 0 0 0 0 0

867 11 BloomEffect 0 141313 11 BloomEffect 11 BloomEffect 0 0 0 1 760 761 0 1 759 0 0 1 0 860 0 0 0 0 0

868 20 LightingOriginEffect 0 141313 20 LightingOriginEffect 20 LightingOriginEffect 0 0 0 0 765 0 3 762 763 764 0 0 1 0 854 0 0 0 0 0

869 11 FXAA_Effect 0 141313 11 FXAA_Effect 11 FXAA_Effect 0 0 0 1 767 768 0 1 766 0 0 1 0 860 0 0 0 0 0

870 11 BloomAttrib 0 141313 11 BloomAttrib 11 BloomAttrib 0 0 0 0 773 1 1113 4 769 770 771 772 0 0 1 0 807 0 0 0 0 0

871 13 MovementState 0 532481 13 MovementState 13 MovementState 0 0 0 0 0 0 0 0 0 0 4 20 MOVEMENTSTATE_GROUND 20 MOVEMENTSTATE_GROUND 0
0 21 MOVEMENTSTATE_JUMPING 21 MOVEMENTSTATE_JUMPING 0
1 21 MOVEMENTSTATE_FALLING 21 MOVEMENTSTATE_FALLING 0
2 22 MOVEMENTSTATE_SWIMMING 22 MOVEMENTSTATE_SWIMMING 0
3 0 0

872 26 PhysicsCharacterController 0 141313 26 PhysicsCharacterController 26 PhysicsCharacterController 0 0 0 1 774 802 0 27 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 0 0 1 0 815 0 0 0 0 0

873 15 TextureStages * 0 8576 15 TextureStages * 15 TextureStages * 0 0 803 0 0 0 0 0 0 0 0 0 0

874 21 TextureStages const * 0 8576 21 TextureStages const * 21 TextureStages const * 0 0 875 0 0 0 0 0 0 0 0 0 0

875 19 TextureStages const 0 8832 19 TextureStages const 19 TextureStages const 0 0 803 0 0 0 0 0 0 0 0 0 0

876 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 336
/**
 * Defines the properties of a named stage of the multitexture pipeline.  The
 * TextureAttrib will associated a number of these stages with Texture
 * objects, and the GSG will render geometry by sorting all of the currently
 * active TextureStages in order and then issuing the appropriate rendering
 * calls to activate them.
 */

877 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

878 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 876 0 0 0 0 0 0 0 0 0 0

879 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 880 0 0 0 0 0 0 0 0 0 0

880 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 804 0 0 0 0 0 0 0 0 0 0

881 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 804 0 0 0 0 0 0 0 0 0 0

882 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

883 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 884 0 0 0 0 0 0 0 0 0 0

884 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

885 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

886 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

887 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 886 0 0 0 0 0 0 0 0 0 0

888 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

889 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 890 0 0 0 0 0 0 0 0 0 0

890 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 886 0 0 0 0 0 0 0 0 0 0

891 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

892 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 891 0 0 0 0 0 0 0 0 0 0

893 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 807 0 0 0 0 0 0 0 0 0 0

894 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 893 0 0 0 0 0 0 0 0 0 0

895 25 BSPMaterialAttrib const * 0 8576 25 BSPMaterialAttrib const * 25 BSPMaterialAttrib const * 0 0 896 0 0 0 0 0 0 0 0 0 0

896 23 BSPMaterialAttrib const 0 8832 23 BSPMaterialAttrib const 23 BSPMaterialAttrib const 0 0 806 0 0 0 0 0 0 0 0 0 0

897 18 PackResult const * 0 8576 18 PackResult const * 18 PackResult const * 0 0 898 0 0 0 0 0 0 0 0 0 0

898 16 PackResult const 0 8832 16 PackResult const 16 PackResult const 0 0 809 0 0 0 0 0 0 0 0 0 0

899 12 PackResult * 0 8576 12 PackResult * 12 PackResult * 0 0 809 0 0 0 0 0 0 0 0 0 0

900 23 TextureLocation const * 0 8576 23 TextureLocation const * 23 TextureLocation const * 0 0 901 0 0 0 0 0 0 0 0 0 0

901 21 TextureLocation const 0 8832 21 TextureLocation const 21 TextureLocation const 0 0 810 0 0 0 0 0 0 0 0 0 0

902 17 TextureLocation * 0 8576 17 TextureLocation * 17 TextureLocation * 0 0 810 0 0 0 0 0 0 0 0 0 0

903 15 TexturePacker * 0 8576 15 TexturePacker * 15 TexturePacker * 0 0 811 0 0 0 0 0 0 0 0 0 0

904 10 RayTrace * 0 8576 10 RayTrace * 10 RayTrace * 0 0 812 0 0 0 0 0 0 0 0 0 0

905 16 RayTrace const * 0 8576 16 RayTrace const * 16 RayTrace const * 0 0 906 0 0 0 0 0 0 0 0 0 0

906 14 RayTrace const 0 8832 14 RayTrace const 14 RayTrace const 0 0 812 0 0 0 0 0 0 0 0 0 0

907 19 RayTraceHitResult * 0 8576 19 RayTraceHitResult * 19 RayTraceHitResult * 0 0 813 0 0 0 0 0 0 0 0 0 0

908 25 RayTraceHitResult const * 0 8576 25 RayTraceHitResult const * 25 RayTraceHitResult const * 0 0 909 0 0 0 0 0 0 0 0 0 0

909 23 RayTraceHitResult const 0 8832 23 RayTraceHitResult const 23 RayTraceHitResult const 0 0 813 0 0 0 0 0 0 0 0 0 0

910 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 911 0 0 0 0 0 0 0 0 0 0

911 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

912 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 910 0 0 0 0 0 0 0 0 0 0

913 8 LVector2 0 2105344 8 LVector2 8 LVector2 0 0 914 0 0 0 0 0 0 0 0 0 0

914 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

915 10 LVector2 * 0 8576 10 LVector2 * 10 LVector2 * 0 0 913 0 0 0 0 0 0 0 0 0 0

916 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

917 15 RayTraceScene * 0 8576 15 RayTraceScene * 15 RayTraceScene * 0 0 814 0 0 0 0 0 0 0 0 0 0

918 21 RayTraceScene const * 0 8576 21 RayTraceScene const * 21 RayTraceScene const * 0 0 919 0 0 0 0 0 0 0 0 0 0

919 19 RayTraceScene const 0 8832 19 RayTraceScene const 19 RayTraceScene const 0 0 814 0 0 0 0 0 0 0 0 0 0

920 18 RayTraceGeometry * 0 8576 18 RayTraceGeometry * 18 RayTraceGeometry * 0 0 817 0 0 0 0 0 0 0 0 0 0

921 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 922 0 0 0 0 0 0 0 0 0 0

922 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 923 0 0 0 0 0 0 0 0 0 0

923 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 924 0 0 0 0 0 0 0 0 0 0

924 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

925 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 926 0 0 0 0 0 0 0 0 0 0

926 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 927 0 0 0 0 0 0 0 0 0 0

927 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 928 0 0 0 0 0 0 0 0 0 0

928 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

929 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 930 0 0 0 0 0 0 0 0 0 0

930 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 910 0 0 0 0 0 0 0 0 0 0

931 24 RayTraceGeometry const * 0 8576 24 RayTraceGeometry const * 24 RayTraceGeometry const * 0 0 932 0 0 0 0 0 0 0 0 0 0

932 22 RayTraceGeometry const 0 8832 22 RayTraceGeometry const 22 RayTraceGeometry const 0 0 817 0 0 0 0 0 0 0 0 0 0

933 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 927 0 0 0 0 0 0 0 0 0 0

934 22 RayTraceTriangleMesh * 0 8576 22 RayTraceTriangleMesh * 22 RayTraceTriangleMesh * 0 0 819 0 0 0 0 0 0 0 0 0 0

935 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 936 0 0 0 0 0 0 0 0 0 0

936 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 937 0 0 0 0 0 0 0 0 0 0

937 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

938 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 939 0 0 0 0 0 0 0 0 0 0

939 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 940 0 0 0 0 0 0 0 0 0 0

940 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

941 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 942 0 0 0 0 0 0 0 0 0 0

942 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 820 0 0 0 0 0 0 0 0 0 0

943 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 822 0 0 0 0 0 0 0 0 0 0

944 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 945 0 0 0 0 0 0 0 0 0 0

945 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 946 0 0 0 0 0 0 0 0 0 0

946 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

947 13 BulletWorld * 0 8576 13 BulletWorld * 13 BulletWorld * 0 0 948 0 0 0 0 0 0 0 0 0 0

948 11 BulletWorld 0 2048 11 BulletWorld 11 BulletWorld 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

949 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 950 0 0 0 0 0 0 0 0 0 0

950 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 822 0 0 0 0 0 0 0 0 0 0

951 21 BulletRigidBodyNode * 0 8576 21 BulletRigidBodyNode * 21 BulletRigidBodyNode * 0 0 952 0 0 0 0 0 0 0 0 0 0

952 19 BulletRigidBodyNode 0 2048 19 BulletRigidBodyNode 19 BulletRigidBodyNode 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

953 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 923 0 0 0 0 0 0 0 0 0 0

954 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 885 0 0 0 0 0 0 0 0 0 0

955 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 956 0 0 0 0 0 0 0 0 0 0

956 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

957 20 BSPShaderGenerator * 0 8576 20 BSPShaderGenerator * 20 BSPShaderGenerator * 0 0 837 0 0 0 0 0 0 0 0 0 0

958 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 946 0 0 0 0 0 0 0 0 0 0

959 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 960 0 0 0 0 0 0 0 0 0 0

960 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 961 0 0 0 0 0 0 0 0 0 0

961 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 962 0 0 0 0 0 0 0 0 0 0

962 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

963 15 LColorf const * 0 8576 15 LColorf const * 15 LColorf const * 0 0 964 0 0 0 0 0 0 0 0 0 0

964 13 LColorf const 0 8832 13 LColorf const 13 LColorf const 0 0 965 0 0 0 0 0 0 0 0 0 0

965 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 966 0 0 0 0 0 0 0 0 0 0

966 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

967 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

968 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 967 0 0 0 0 0 0 0 0 0 0

969 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 970 0 0 0 0 0 0 0 0 0 0

970 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 971 0 0 0 0 0 0 0 0 0 0

971 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

972 9 LTexCoord 0 2105344 9 LTexCoord 9 LTexCoord 0 0 973 0 0 0 0 0 0 0 0 0 0

973 10 LTexCoordf 0 2105344 10 LTexCoordf 10 LTexCoordf 0 0 962 0 0 0 0 0 0 0 0 0 0

974 11 LTexCoord * 0 8576 11 LTexCoord * 11 LTexCoord * 0 0 972 0 0 0 0 0 0 0 0 0 0

975 20 BoundingKDOP const * 0 8576 20 BoundingKDOP const * 20 BoundingKDOP const * 0 0 976 0 0 0 0 0 0 0 0 0 0

976 18 BoundingKDOP const 0 8832 18 BoundingKDOP const 18 BoundingKDOP const 0 0 824 0 0 0 0 0 0 0 0 0 0

977 6 LPlane 0 2105344 6 LPlane 6 LPlane 0 0 978 0 0 0 0 0 0 0 0 0 0

978 7 LPlanef 0 2048 7 LPlanef 7 LPlanef 0 0 0 0 0 0 0 0 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

979 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 977 0 0 0 0 0 0 0 0 0 0

980 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 826 0 0 0 0 0 0 0 0 0 0

981 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 982 0 0 0 0 0 0 0 0 0 0

982 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 826 0 0 0 0 0 0 0 0 0 0

983 6 LColor 0 2105344 6 LColor 6 LColor 0 0 965 0 0 0 0 0 0 0 0 0 0

984 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 983 0 0 0 0 0 0 0 0 0 0

985 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 827 0 0 0 0 0 0 0 0 0 0

986 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 987 0 0 0 0 0 0 0 0 0 0

987 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 827 0 0 0 0 0 0 0 0 0 0

988 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 828 0 0 0 0 0 0 0 0 0 0

989 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 990 0 0 0 0 0 0 0 0 0 0

990 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 828 0 0 0 0 0 0 0 0 0 0

991 14 BoundingKDOP * 0 8576 14 BoundingKDOP * 14 BoundingKDOP * 0 0 824 0 0 0 0 0 0 0 0 0 0

992 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 829 0 0 0 0 0 0 0 0 0 0

993 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 994 0 0 0 0 0 0 0 0 0 0

994 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 829 0 0 0 0 0 0 0 0 0 0

995 20 ShaderPermutations * 0 8576 20 ShaderPermutations * 20 ShaderPermutations * 0 0 830 0 0 0 0 0 0 0 0 0 0

996 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 997 0 0 0 0 0 0 0 0 0 0

997 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 998 0 0 0 0 0 0 0 0 0 0

998 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

999 26 ShaderPermutations const * 0 8576 26 ShaderPermutations const * 26 ShaderPermutations const * 0 0 1000 0 0 0 0 0 0 0 0 0 0

1000 24 ShaderPermutations const 0 8832 24 ShaderPermutations const 24 ShaderPermutations const 0 0 830 0 0 0 0 0 0 0 0 0 0

1001 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 831 0 0 0 0 0 0 0 0 0 0

1002 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 815 0 0 0 0 0 0 0 0 0 0

1003 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 832 0 0 0 0 0 0 0 0 0 0

1004 25 PlanarReflections const * 0 8576 25 PlanarReflections const * 25 PlanarReflections const * 0 0 1005 0 0 0 0 0 0 0 0 0 0

1005 23 PlanarReflections const 0 8832 23 PlanarReflections const 23 PlanarReflections const 0 0 833 0 0 0 0 0 0 0 0 0 0

1006 19 PlanarReflections * 0 8576 19 PlanarReflections * 19 PlanarReflections * 0 0 833 0 0 0 0 0 0 0 0 0 0

1007 26 BSPShaderGenerator const * 0 8576 26 BSPShaderGenerator const * 26 BSPShaderGenerator const * 0 0 1008 0 0 0 0 0 0 0 0 0 0

1008 24 BSPShaderGenerator const 0 8832 24 BSPShaderGenerator const 24 BSPShaderGenerator const 0 0 837 0 0 0 0 0 0 0 0 0 0

1009 16 GraphicsOutput * 0 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 1010 0 0 0 0 0 0 0 0 0 0

1010 14 GraphicsOutput 0 2048 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 0 0 0 0 0 0 0 0 727
/**
 * This is a base class for the various different classes that represent the
 * result of a frame of rendering.  The most common kind of GraphicsOutput is
 * a GraphicsWindow, which is a real-time window on the desktop, but another
 * example is GraphicsBuffer, which is an offscreen buffer.
 *
 * The actual rendering, and anything associated with the graphics context
 * itself, is managed by the associated GraphicsStateGuardian (which might
 * output to multiple GraphicsOutput objects).
 *
 * GraphicsOutputs are not actually writable to bam files, of course, but they
 * may be passed as event parameters, so they inherit from
 * TypedWritableReferenceCount instead of TypedReferenceCount for that
 * convenience.
 */

1011 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 1012 0 0 0 0 0 0 0 0 0 0

1012 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

1013 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 1014 0 0 0 0 0 0 0 0 0 0

1014 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

1015 5 Fog * 0 8576 5 Fog * 5 Fog * 0 0 1016 0 0 0 0 0 0 0 0 0 0

1016 3 Fog 0 2048 3 Fog 3 Fog 0 0 0 0 0 0 0 0 0 0 0 0 782
/**
 * Specifies how atmospheric fog effects are applied to geometry.  The Fog
 * object is now a PandaNode, which means it can be used similarly to a Light
 * to define effects relative to a particular coordinate system within the
 * scene graph.
 *
 * In exponential mode, the fog effects are always camera-relative, and it
 * does not matter where the Fog node is parented.  However, in linear mode,
 * the onset and opaque distances are defined as offsets along the local
 * forward axis (e.g.  the Y axis).  This allows the fog effect to be
 * localized to a particular region in space, rather than always camera-
 * relative.  If the fog object is not parented to any node, it is used to
 * generate traditonal camera-relative fog, as if it were parented to the
 * camera.
 */

1017 14 PTA_LVecBase4f 0 2105344 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 1018 0 0 0 0 0 0 0 0 0 0

1018 37 PointerToArray< UnalignedLVecBase4f > 0 2048 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 0 0 0 0 0 0 0 0 0 0

1019 16 PTA_LVecBase4f * 0 8576 16 PTA_LVecBase4f * 16 PTA_LVecBase4f * 0 0 1017 0 0 0 0 0 0 0 0 0 0

1020 9 PTA_float 0 2105344 9 PTA_float 9 PTA_float 0 0 1021 0 0 0 0 0 0 0 0 0 0

1021 23 PointerToArray< float > 0 2048 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

1022 11 PTA_float * 0 8576 11 PTA_float * 11 PTA_float * 0 0 1020 0 0 0 0 0 0 0 0 0 0

1023 12 Shader const 0 8832 12 Shader const 12 Shader const 0 0 1024 0 0 0 0 0 0 0 0 0 0

1024 6 Shader 0 2048 6 Shader 6 Shader 0 0 0 0 0 0 0 0 0 0 0 0 8
/**

 */

1025 18 ShaderSpec const * 0 8576 18 ShaderSpec const * 18 ShaderSpec const * 0 0 1026 0 0 0 0 0 0 0 0 0 0

1026 16 ShaderSpec const 0 8832 16 ShaderSpec const 16 ShaderSpec const 0 0 831 0 0 0 0 0 0 0 0 0 0

1027 14 Shader const * 0 8576 14 Shader const * 14 Shader const * 0 0 1023 0 0 0 0 0 0 0 0 0 0

1028 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 1029 0 0 0 0 0 0 0 0 0 0

1029 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 839 0 0 0 0 0 0 0 0 0 0

1030 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 839 0 0 0 0 0 0 0 0 0 0

1031 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 840 0 0 0 0 0 0 0 0 0 0

1032 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 1033 0 0 0 0 0 0 0 0 0 0

1033 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 841 0 0 0 0 0 0 0 0 0 0

1034 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 841 0 0 0 0 0 0 0 0 0 0

1035 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 1036 0 0 0 0 0 0 0 0 0 0

1036 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 842 0 0 0 0 0 0 0 0 0 0

1037 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 842 0 0 0 0 0 0 0 0 0 0

1038 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 1039 0 0 0 0 0 0 0 0 0 0

1039 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 843 0 0 0 0 0 0 0 0 0 0

1040 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 843 0 0 0 0 0 0 0 0 0 0

1041 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 1042 0 0 0 0 0 0 0 0 0 0

1042 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 845 0 0 0 0 0 0 0 0 0 0

1043 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 845 0 0 0 0 0 0 0 0 0 0

1044 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 847 0 0 0 0 0 0 0 0 0 0

1045 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 848 0 0 0 0 0 0 0 0 0 0

1046 18 UnlitGenericSpec * 0 8576 18 UnlitGenericSpec * 18 UnlitGenericSpec * 0 0 849 0 0 0 0 0 0 0 0 0 0

1047 16 UnlitNoMatSpec * 0 8576 16 UnlitNoMatSpec * 16 UnlitNoMatSpec * 0 0 850 0 0 0 0 0 0 0 0 0 0

1048 15 CSMRenderSpec * 0 8576 15 CSMRenderSpec * 15 CSMRenderSpec * 0 0 851 0 0 0 0 0 0 0 0 0 0

1049 12 SkyBoxSpec * 0 8576 12 SkyBoxSpec * 12 SkyBoxSpec * 0 0 852 0 0 0 0 0 0 0 0 0 0

1050 18 RenderEffect const 0 8832 18 RenderEffect const 18 RenderEffect const 0 0 854 0 0 0 0 0 0 0 0 0 0

1051 20 RenderEffect const * 0 8576 20 RenderEffect const * 20 RenderEffect const * 0 0 1050 0 0 0 0 0 0 0 0 0 0

1052 22 Audio3DManager const * 0 8576 22 Audio3DManager const * 22 Audio3DManager const * 0 0 1053 0 0 0 0 0 0 0 0 0 0

1053 20 Audio3DManager const 0 8832 20 Audio3DManager const 20 Audio3DManager const 0 0 855 0 0 0 0 0 0 0 0 0 0

1054 16 Audio3DManager * 0 8576 16 Audio3DManager * 16 Audio3DManager * 0 0 855 0 0 0 0 0 0 0 0 0 0

1055 14 AudioManager * 0 8576 14 AudioManager * 14 AudioManager * 0 0 1056 0 0 0 0 0 0 0 0 0 0

1056 12 AudioManager 0 2048 12 AudioManager 12 AudioManager 0 0 0 0 0 0 0 0 0 0 0 0 0

1057 12 AudioSound * 0 8576 12 AudioSound * 12 AudioSound * 0 0 1058 0 0 0 0 0 0 0 0 0 0

1058 10 AudioSound 0 2048 10 AudioSound 10 AudioSound 0 0 0 0 0 0 0 0 0 0 0 0 0

1059 8 CIOLib * 0 8576 8 CIOLib * 8 CIOLib * 0 0 856 0 0 0 0 0 0 0 0 0 0

1060 14 CIOLib const * 0 8576 14 CIOLib const * 14 CIOLib const * 0 0 1061 0 0 0 0 0 0 0 0 0 0

1061 12 CIOLib const 0 8832 12 CIOLib const 12 CIOLib const 0 0 856 0 0 0 0 0 0 0 0 0 0

1062 19 DecalModulateSpec * 0 8576 19 DecalModulateSpec * 19 DecalModulateSpec * 0 0 857 0 0 0 0 0 0 0 0 0 0

1063 16 GeomNode const * 0 8576 16 GeomNode const * 16 GeomNode const * 0 0 1064 0 0 0 0 0 0 0 0 0 0

1064 14 GeomNode const 0 8832 14 GeomNode const 14 GeomNode const 0 0 859 0 0 0 0 0 0 0 0 0 0

1065 10 GlowNode * 0 8576 10 GlowNode * 10 GlowNode * 0 0 858 0 0 0 0 0 0 0 0 0 0

1066 16 GlowNode const * 0 8576 16 GlowNode const * 16 GlowNode const * 0 0 1067 0 0 0 0 0 0 0 0 0 0

1067 14 GlowNode const 0 8832 14 GlowNode const 14 GlowNode const 0 0 858 0 0 0 0 0 0 0 0 0 0

1068 19 PostProcessEffect * 0 8576 19 PostProcessEffect * 19 PostProcessEffect * 0 0 860 0 0 0 0 0 0 0 0 0 0

1069 17 PostProcessPass * 0 8576 17 PostProcessPass * 17 PostProcessPass * 0 0 862 0 0 0 0 0 0 0 0 0 0

1070 13 PostProcess * 0 8576 13 PostProcess * 13 PostProcess * 0 0 864 0 0 0 0 0 0 0 0 0 0

1071 29 FrameBufferProperties const * 0 8576 29 FrameBufferProperties const * 29 FrameBufferProperties const * 0 0 1072 0 0 0 0 0 0 0 0 0 0

1072 27 FrameBufferProperties const 0 8832 27 FrameBufferProperties const 27 FrameBufferProperties const 0 0 1073 0 0 0 0 0 0 0 0 0 0

1073 21 FrameBufferProperties 0 2048 21 FrameBufferProperties 21 FrameBufferProperties 0 0 0 0 0 0 0 0 0 0 0 0 132
/**
 * A container for the various kinds of properties we might ask to have on a
 * graphics frameBuffer before we create a GSG.
 */

1074 17 LVector2i const * 0 8576 17 LVector2i const * 17 LVector2i const * 0 0 1075 0 0 0 0 0 0 0 0 0 0

1075 15 LVector2i const 0 8832 15 LVector2i const 15 LVector2i const 0 0 1076 0 0 0 0 0 0 0 0 0 0

1076 9 LVector2i 0 2048 9 LVector2i 9 LVector2i 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

1077 23 PostProcessPass const * 0 8576 23 PostProcessPass const * 23 PostProcessPass const * 0 0 1078 0 0 0 0 0 0 0 0 0 0

1078 21 PostProcessPass const 0 8832 21 PostProcessPass const 21 PostProcessPass const 0 0 862 0 0 0 0 0 0 0 0 0 0

1079 11 LVector2i * 0 8576 11 LVector2i * 11 LVector2i * 0 0 1076 0 0 0 0 0 0 0 0 0 0

1080 23 FrameBufferProperties * 0 8576 23 FrameBufferProperties * 23 FrameBufferProperties * 0 0 1073 0 0 0 0 0 0 0 0 0 0

1081 22 PostProcessScenePass * 0 8576 22 PostProcessScenePass * 22 PostProcessScenePass * 0 0 863 0 0 0 0 0 0 0 0 0 0

1082 28 PostProcessScenePass const * 0 8576 28 PostProcessScenePass const * 28 PostProcessScenePass const * 0 0 1083 0 0 0 0 0 0 0 0 0 0

1083 26 PostProcessScenePass const 0 8832 26 PostProcessScenePass const 26 PostProcessScenePass const 0 0 863 0 0 0 0 0 0 0 0 0 0

1084 19 RenderState const * 0 8576 19 RenderState const * 19 RenderState const * 0 0 1085 0 0 0 0 0 0 0 0 0 0

1085 17 RenderState const 0 8832 17 RenderState const 17 RenderState const 0 0 1086 0 0 0 0 0 0 0 0 0 0

1086 11 RenderState 0 2048 11 RenderState 11 RenderState 0 0 0 0 0 0 0 0 0 0 0 0 340
/**
 * This represents a unique collection of RenderAttrib objects that correspond
 * to a particular renderable state.
 *
 * You should not attempt to create or modify a RenderState object directly.
 * Instead, call one of the make() functions to create one for you.  And
 * instead of modifying a RenderState object, create a new one.
 */

1087 19 PostProcess const * 0 8576 19 PostProcess const * 19 PostProcess const * 0 0 1088 0 0 0 0 0 0 0 0 0 0

1088 17 PostProcess const 0 8832 17 PostProcess const 17 PostProcess const 0 0 864 0 0 0 0 0 0 0 0 0 0

1089 13 DisplayRegion 0 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 399
/**
 * A rectangular subregion within a window for rendering into.  Typically,
 * there is one DisplayRegion that covers the whole window, but you may also
 * create smaller DisplayRegions for having different regions within the
 * window that represent different scenes.  You may also stack up
 * DisplayRegions like panes of glass, usually for layering 2-d interfaces on
 * top of a 3-d scene.
 */

1090 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 1089 0 0 0 0 0 0 0 0 0 0

1091 16 DrawableRegion * 0 8576 16 DrawableRegion * 16 DrawableRegion * 0 0 1092 0 0 0 0 0 0 0 0 0 0

1092 14 DrawableRegion 0 2048 14 DrawableRegion 14 DrawableRegion 0 0 0 0 0 0 0 0 0 0 0 0 389
/**
 * This is a base class for GraphicsWindow (actually, GraphicsOutput) and
 * DisplayRegion, both of which are conceptually rectangular regions into
 * which drawing commands may be issued.  Sometimes you want to deal with a
 * single display region, and sometimes you want to deal with the whole window
 * at once, particularly for issuing clear commands and capturing screenshots.
 */

1093 15 HDRPass const * 0 8576 15 HDRPass const * 15 HDRPass const * 0 0 1094 0 0 0 0 0 0 0 0 0 0

1094 13 HDRPass const 0 8832 13 HDRPass const 13 HDRPass const 0 0 865 0 0 0 0 0 0 0 0 0 0

1095 9 HDRPass * 0 8576 9 HDRPass * 9 HDRPass * 0 0 865 0 0 0 0 0 0 0 0 0 0

1096 11 HDREffect * 0 8576 11 HDREffect * 11 HDREffect * 0 0 866 0 0 0 0 0 0 0 0 0 0

1097 17 HDREffect const * 0 8576 17 HDREffect const * 17 HDREffect const * 0 0 1098 0 0 0 0 0 0 0 0 0 0

1098 15 HDREffect const 0 8832 15 HDREffect const 15 HDREffect const 0 0 866 0 0 0 0 0 0 0 0 0 0

1099 13 BloomEffect * 0 8576 13 BloomEffect * 13 BloomEffect * 0 0 867 0 0 0 0 0 0 0 0 0 0

1100 28 LightingOriginEffect const * 0 8576 28 LightingOriginEffect const * 28 LightingOriginEffect const * 0 0 1101 0 0 0 0 0 0 0 0 0 0

1101 26 LightingOriginEffect const 0 8832 26 LightingOriginEffect const 26 LightingOriginEffect const 0 0 868 0 0 0 0 0 0 0 0 0 0

1102 13 FXAA_Effect * 0 8576 13 FXAA_Effect * 13 FXAA_Effect * 0 0 869 0 0 0 0 0 0 0 0 0 0

1103 19 BloomAttrib const * 0 8576 19 BloomAttrib const * 19 BloomAttrib const * 0 0 1104 0 0 0 0 0 0 0 0 0 0

1104 17 BloomAttrib const 0 8832 17 BloomAttrib const 17 BloomAttrib const 0 0 870 0 0 0 0 0 0 0 0 0 0

1105 28 PhysicsCharacterController * 0 8576 28 PhysicsCharacterController * 28 PhysicsCharacterController * 0 0 872 0 0 0 0 0 0 0 0 0 0

1106 34 PhysicsCharacterController const * 0 8576 34 PhysicsCharacterController const * 34 PhysicsCharacterController const * 0 0 1107 0 0 0 0 0 0 0 0 0 0

1107 32 PhysicsCharacterController const 0 8832 32 PhysicsCharacterController const 32 PhysicsCharacterController const 0 0 872 0 0 0 0 0 0 0 0 0 0

1108 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1109 0 0 0 0 0 0 0 0 0 0

1109 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1110 0 0 0 0 0 0 0 0 0 0

1110 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

0
3
1111 10 class_slot 0 2 808 430 0 0 0 0 0 0 0 29 BSPMaterialAttrib::class_slot 0

1112 10 class_slot 0 2 808 493 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

1113 10 class_slot 0 2 808 769 0 0 0 0 0 0 0 23 BloomAttrib::class_slot 0

0
