1587681646
3 3
11 libpandabsp 4 7Oyg 11 libpandabsp 
578
540 3 get 0 4 1118 18 TextureStages::get 0 2 3 4 0
159
static TextureStage *TextureStages::get(std::string const &name);
static TextureStage *TextureStages::get(std::string const &name, std::string const &uv_name);

541 15 get_basetexture 0 4 1118 30 TextureStages::get_basetexture 0 1 5 0
58
static TextureStage *TextureStages::get_basetexture(void);

542 12 get_lightmap 0 4 1118 27 TextureStages::get_lightmap 0 1 6 0
55
static TextureStage *TextureStages::get_lightmap(void);

543 19 get_bumped_lightmap 0 4 1118 34 TextureStages::get_bumped_lightmap 0 1 7 0
62
static TextureStage *TextureStages::get_bumped_lightmap(void);

544 13 get_spheremap 0 4 1118 28 TextureStages::get_spheremap 0 1 8 0
56
static TextureStage *TextureStages::get_spheremap(void);

545 11 get_cubemap 0 4 1118 26 TextureStages::get_cubemap 0 1 9 0
54
static TextureStage *TextureStages::get_cubemap(void);

546 13 get_normalmap 0 4 1118 28 TextureStages::get_normalmap 0 1 10 0
56
static TextureStage *TextureStages::get_normalmap(void);

547 13 get_heightmap 0 4 1118 28 TextureStages::get_heightmap 0 1 11 0
56
static TextureStage *TextureStages::get_heightmap(void);

548 12 get_glossmap 0 4 1118 27 TextureStages::get_glossmap 0 1 12 0
55
static TextureStage *TextureStages::get_glossmap(void);

549 11 get_glowmap 0 4 1118 26 TextureStages::get_glowmap 0 1 13 0
54
static TextureStage *TextureStages::get_glowmap(void);

550 13 TextureStages 0 4 1118 28 TextureStages::TextureStages 0 2 1 2 0
122
inline TextureStages::TextureStages(void) = default;
inline TextureStages::TextureStages(TextureStages const &) = default;

551 14 ~TextureStages 0 4 1118 29 TextureStages::~TextureStages 0 0 0
36
TextureStages::~TextureStages(void);

552 11 BSPMaterial 0 4 1119 24 BSPMaterial::BSPMaterial 0 2 14 15 0
139
inline explicit BSPMaterial::BSPMaterial(std::string const &name = "UnlitNoMat");
inline BSPMaterial::BSPMaterial(BSPMaterial const &copy);

553 10 operator = 0 4 1119 23 BSPMaterial::operator = 0 1 16 0
61
inline void BSPMaterial::operator =(BSPMaterial const &copy);

554 12 set_keyvalue 0 4 1119 25 BSPMaterial::set_keyvalue 0 1 17 0
88
inline void BSPMaterial::set_keyvalue(std::string const &key, std::string const &value);

555 12 get_keyvalue 0 4 1119 25 BSPMaterial::get_keyvalue 0 1 18 0
75
inline std::string BSPMaterial::get_keyvalue(std::string const &key) const;

556 17 get_num_keyvalues 0 4 1119 30 BSPMaterial::get_num_keyvalues 0 1 19 0
62
inline std::size_t BSPMaterial::get_num_keyvalues(void) const;

557 7 get_key 0 4 1119 20 BSPMaterial::get_key 0 1 20 0
68
inline std::string const &BSPMaterial::get_key(std::size_t i) const;

558 9 get_value 0 4 1119 22 BSPMaterial::get_value 0 1 21 0
70
inline std::string const &BSPMaterial::get_value(std::size_t i) const;

559 16 get_keyvalue_int 0 4 1119 29 BSPMaterial::get_keyvalue_int 0 1 22 0
71
inline int BSPMaterial::get_keyvalue_int(std::string const &key) const;

560 18 get_keyvalue_float 0 4 1119 31 BSPMaterial::get_keyvalue_float 0 1 23 0
75
inline float BSPMaterial::get_keyvalue_float(std::string const &key) const;

561 10 set_shader 0 4 1119 23 BSPMaterial::set_shader 0 1 24 0
68
inline void BSPMaterial::set_shader(std::string const &shader_name);

562 10 get_shader 0 4 1119 23 BSPMaterial::get_shader 0 1 25 0
55
inline std::string BSPMaterial::get_shader(void) const;

563 8 get_file 0 4 1119 21 BSPMaterial::get_file 0 1 26 0
50
inline Filename BSPMaterial::get_file(void) const;

564 12 has_keyvalue 0 4 1119 25 BSPMaterial::has_keyvalue 0 1 27 0
68
inline bool BSPMaterial::has_keyvalue(std::string const &key) const;

565 15 has_env_cubemap 0 4 1119 28 BSPMaterial::has_env_cubemap 0 1 28 0
53
inline bool BSPMaterial::has_env_cubemap(void) const;

566 16 has_transparency 0 4 1119 29 BSPMaterial::has_transparency 0 1 29 0
54
inline bool BSPMaterial::has_transparency(void) const;

567 16 get_surface_prop 0 4 1119 29 BSPMaterial::get_surface_prop 0 1 30 0
61
inline std::string BSPMaterial::get_surface_prop(void) const;

568 12 get_contents 0 4 1119 25 BSPMaterial::get_contents 0 1 31 0
57
inline std::string BSPMaterial::get_contents(void) const;

569 14 is_lightmapped 0 4 1119 27 BSPMaterial::is_lightmapped 0 1 32 0
52
inline bool BSPMaterial::is_lightmapped(void) const;

570 9 is_skybox 0 4 1119 22 BSPMaterial::is_skybox 0 1 33 0
47
inline bool BSPMaterial::is_skybox(void) const;

571 11 has_bumpmap 0 4 1119 24 BSPMaterial::has_bumpmap 0 1 34 0
49
inline bool BSPMaterial::has_bumpmap(void) const;

572 13 get_from_file 0 4 1119 26 BSPMaterial::get_from_file 0 1 35 0
75
static BSPMaterial const *BSPMaterial::get_from_file(Filename const &file);

573 14 get_class_type 0 4 1119 27 BSPMaterial::get_class_type 0 1 36 0
52
static TypeHandle BSPMaterial::get_class_type(void);

574 12 ~BSPMaterial 0 4 1119 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

575 4 make 0 4 1121 23 BSPMaterialAttrib::make 0 1 37 0
86
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make(BSPMaterial const *mat);

576 20 make_override_shader 0 4 1121 39 BSPMaterialAttrib::make_override_shader 0 1 38 0
102
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_override_shader(BSPMaterial const *mat);

577 12 make_default 0 4 1121 31 BSPMaterialAttrib::make_default 0 1 39 0
76
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_default(void);

578 19 get_override_shader 0 4 1121 38 BSPMaterialAttrib::get_override_shader 0 1 40 0
70
inline std::string BSPMaterialAttrib::get_override_shader(void) const;

579 19 has_override_shader 0 4 1121 38 BSPMaterialAttrib::has_override_shader 0 1 41 0
63
inline bool BSPMaterialAttrib::has_override_shader(void) const;

580 12 get_material 0 4 1121 31 BSPMaterialAttrib::get_material 0 1 42 0
70
inline BSPMaterial const *BSPMaterialAttrib::get_material(void) const;

581 14 get_class_slot 0 4 1121 33 BSPMaterialAttrib::get_class_slot 0 1 43 0
51
static int BSPMaterialAttrib::get_class_slot(void);

582 14 get_class_type 0 4 1121 33 BSPMaterialAttrib::get_class_type 0 1 44 0
58
static TypeHandle BSPMaterialAttrib::get_class_type(void);

583 18 ~BSPMaterialAttrib 0 4 1121 37 BSPMaterialAttrib::~BSPMaterialAttrib 0 0 0
44
BSPMaterialAttrib::~BSPMaterialAttrib(void);

584 9 get_width 0 4 1124 21 PackResult::get_width 0 1 46 0
45
inline int PackResult::get_width(void) const;

585 10 get_height 0 4 1124 22 PackResult::get_height 0 1 47 0
46
inline int PackResult::get_height(void) const;

586 15 get_unused_area 0 4 1124 27 PackResult::get_unused_area 0 1 48 0
51
inline int PackResult::get_unused_area(void) const;

587 10 PackResult 0 4 1124 22 PackResult::PackResult 0 1 45 0
60
inline PackResult::PackResult(PackResult const &) = default;

588 11 ~PackResult 0 4 1124 23 PackResult::~PackResult 0 0 0
30
PackResult::~PackResult(void);

589 5 get_x 0 4 1125 22 TextureLocation::get_x 0 1 50 0
46
inline int TextureLocation::get_x(void) const;

590 5 get_y 0 4 1125 22 TextureLocation::get_y 0 1 51 0
46
inline int TextureLocation::get_y(void) const;

591 9 get_width 0 4 1125 26 TextureLocation::get_width 0 1 52 0
50
inline int TextureLocation::get_width(void) const;

592 10 get_height 0 4 1125 27 TextureLocation::get_height 0 1 53 0
51
inline int TextureLocation::get_height(void) const;

593 11 get_rotated 0 4 1125 28 TextureLocation::get_rotated 0 1 54 0
53
inline bool TextureLocation::get_rotated(void) const;

594 15 TextureLocation 0 4 1125 32 TextureLocation::TextureLocation 0 1 49 0
75
inline TextureLocation::TextureLocation(TextureLocation const &) = default;

595 16 ~TextureLocation 0 4 1125 33 TextureLocation::~TextureLocation 0 0 0
40
TextureLocation::~TextureLocation(void);

596 15 getTextureCount 0 6 1126 30 TexturePacker::getTextureCount 0 1 55 0
53
virtual int TexturePacker::getTextureCount(void) = 0;

597 15 setTextureCount 0 6 1126 30 TexturePacker::setTextureCount 0 1 56 35
// number of textures to consider..
60
virtual void TexturePacker::setTextureCount(int tcount) = 0;

598 10 addTexture 0 6 1126 25 TexturePacker::addTexture 0 1 57 21
// add textures 0 - n
61
virtual void TexturePacker::addTexture(int wid, int hit) = 0;

599 15 wouldTextureFit 0 6 1126 30 TexturePacker::wouldTextureFit 0 1 58 0
135
virtual bool TexturePacker::wouldTextureFit(int wid, int hit, bool forcePowerOfTwo, bool onePixelBorder, int max_wid, int max_hit) = 0;

600 13 addNewTexture 0 6 1126 28 TexturePacker::addNewTexture 0 1 59 0
64
virtual void TexturePacker::addNewTexture(int wid, int hit) = 0;

601 12 packTextures 0 6 1126 27 TexturePacker::packTextures 0 1 60 74
// pack the textures, the return code is the amount of wasted/unused area.
94
virtual PackResult TexturePacker::packTextures(bool forcePowerOfTwo, bool onePixelBorder) = 0;

602 18 getTextureLocation 0 6 1126 33 TexturePacker::getTextureLocation 0 1 61 58
// returns true if the texture has been rotated 90 degrees
73
virtual TextureLocation TexturePacker::getTextureLocation(int index) = 0;

603 19 createTexturePacker 0 4 1126 34 TexturePacker::createTexturePacker 0 1 62 0
63
static TexturePacker *TexturePacker::createTexturePacker(void);

604 20 releaseTexturePacker 0 4 1126 35 TexturePacker::releaseTexturePacker 0 1 63 0
67
static void TexturePacker::releaseTexturePacker(TexturePacker *tp);

605 14 ~TexturePacker 0 4 1126 29 TexturePacker::~TexturePacker 0 0 0
36
TexturePacker::~TexturePacker(void);

606 10 initialize 0 4 1127 20 RayTrace::initialize 0 1 66 0
39
static void RayTrace::initialize(void);

607 8 destruct 0 4 1127 18 RayTrace::destruct 0 1 67 0
37
static void RayTrace::destruct(void);

608 8 RayTrace 0 4 1127 18 RayTrace::RayTrace 0 2 64 65 0
97
inline RayTrace::RayTrace(void) = default;
inline RayTrace::RayTrace(RayTrace const &) = default;

609 9 ~RayTrace 0 4 1127 19 RayTrace::~RayTrace 0 0 0
26
RayTrace::~RayTrace(void);

610 17 RayTraceHitResult 0 4 1128 36 RayTraceHitResult::RayTraceHitResult 0 2 68 69 0
132
inline RayTraceHitResult::RayTraceHitResult(void);
inline RayTraceHitResult::RayTraceHitResult(RayTraceHitResult const &) = default;

611 7 has_hit 0 4 1128 26 RayTraceHitResult::has_hit 0 1 70 0
51
inline bool RayTraceHitResult::has_hit(void) const;

612 14 get_hit_normal 0 4 1128 33 RayTraceHitResult::get_hit_normal 0 1 71 0
62
inline LVector3 RayTraceHitResult::get_hit_normal(void) const;

613 6 get_uv 0 4 1128 25 RayTraceHitResult::get_uv 0 1 72 0
54
inline LVector2 RayTraceHitResult::get_uv(void) const;

614 11 get_prim_id 0 4 1128 30 RayTraceHitResult::get_prim_id 0 1 73 0
63
inline unsigned int RayTraceHitResult::get_prim_id(void) const;

615 11 get_geom_id 0 4 1128 30 RayTraceHitResult::get_geom_id 0 1 74 0
63
inline unsigned int RayTraceHitResult::get_geom_id(void) const;

616 16 get_hit_fraction 0 4 1128 35 RayTraceHitResult::get_hit_fraction 0 1 75 0
61
inline float RayTraceHitResult::get_hit_fraction(void) const;

617 18 ~RayTraceHitResult 0 4 1128 37 RayTraceHitResult::~RayTraceHitResult 0 0 0
44
RayTraceHitResult::~RayTraceHitResult(void);

618 13 RayTraceScene 0 4 1129 28 RayTraceScene::RayTraceScene 0 2 76 77 0
105
RayTraceScene::RayTraceScene(void);
inline RayTraceScene::RayTraceScene(RayTraceScene const &) = default;

619 12 add_geometry 0 4 1129 27 RayTraceScene::add_geometry 0 1 78 0
57
void RayTraceScene::add_geometry(RayTraceGeometry *geom);

620 15 remove_geometry 0 4 1129 30 RayTraceScene::remove_geometry 0 1 79 0
60
void RayTraceScene::remove_geometry(RayTraceGeometry *geom);

621 10 remove_all 0 4 1129 25 RayTraceScene::remove_all 0 1 80 0
37
void RayTraceScene::remove_all(void);

622 10 trace_line 0 4 1129 25 RayTraceScene::trace_line 0 1 81 0
116
inline RayTraceHitResult RayTraceScene::trace_line(LPoint3 const &start, LPoint3 const &end, BitMask32 const &mask);

623 9 trace_ray 0 4 1129 24 RayTraceScene::trace_ray 0 1 82 0
132
RayTraceHitResult RayTraceScene::trace_ray(LPoint3 const &origin, LVector3 const &direction, float distance, BitMask32 const &mask);

624 17 set_build_quality 0 4 1129 32 RayTraceScene::set_build_quality 0 1 83 0
51
void RayTraceScene::set_build_quality(int quality);

625 6 update 0 4 1129 21 RayTraceScene::update 0 1 84 0
33
void RayTraceScene::update(void);

626 12 get_geometry 0 4 1129 27 RayTraceScene::get_geometry 0 1 85 0
75
inline RayTraceGeometry *RayTraceScene::get_geometry(unsigned int geom_id);

627 14 get_class_type 0 4 1132 32 RayTraceGeometry::get_class_type 0 1 86 0
57
static TypeHandle RayTraceGeometry::get_class_type(void);

628 8 set_mask 0 4 1132 26 RayTraceGeometry::set_mask 0 2 87 88 0
114
inline void RayTraceGeometry::set_mask(BitMask32 const &mask);
void RayTraceGeometry::set_mask(unsigned int mask);

629 8 get_mask 0 4 1132 26 RayTraceGeometry::get_mask 0 1 89 0
56
inline BitMask32 RayTraceGeometry::get_mask(void) const;

630 11 get_geom_id 0 4 1132 29 RayTraceGeometry::get_geom_id 0 1 90 0
62
inline unsigned int RayTraceGeometry::get_geom_id(void) const;

631 17 set_build_quality 0 4 1132 35 RayTraceGeometry::set_build_quality 0 1 91 0
54
void RayTraceGeometry::set_build_quality(int quality);

632 5 build 0 6 1132 23 RayTraceGeometry::build 0 1 92 0
47
virtual void RayTraceGeometry::build(void) = 0;

633 14 get_class_type 0 4 1134 36 RayTraceTriangleMesh::get_class_type 0 1 94 0
61
static TypeHandle RayTraceTriangleMesh::get_class_type(void);

634 20 RayTraceTriangleMesh 0 4 1134 42 RayTraceTriangleMesh::RayTraceTriangleMesh 0 1 93 0
73
RayTraceTriangleMesh::RayTraceTriangleMesh(std::string const &name = "");

635 12 add_triangle 0 4 1134 34 RayTraceTriangleMesh::add_triangle 0 1 95 0
97
void RayTraceTriangleMesh::add_triangle(LPoint3 const &p1, LPoint3 const &p2, LPoint3 const &p3);

636 23 add_triangles_from_geom 0 4 1134 45 RayTraceTriangleMesh::add_triangles_from_geom 0 1 96 0
105
void RayTraceTriangleMesh::add_triangles_from_geom(Geom const *geom, TransformState const *ts = nullptr);

637 21 ~RayTraceTriangleMesh 0 4 1134 43 RayTraceTriangleMesh::~RayTraceTriangleMesh 0 0 0
50
RayTraceTriangleMesh::~RayTraceTriangleMesh(void);

638 4 make 0 4 1135 19 BSPFaceAttrib::make 0 1 97 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

639 12 make_default 0 4 1135 27 BSPFaceAttrib::make_default 0 1 98 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

640 15 make_ignore_pvs 0 4 1135 30 BSPFaceAttrib::make_ignore_pvs 0 1 99 0
75
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_ignore_pvs(void);

641 12 get_material 0 4 1135 27 BSPFaceAttrib::get_material 0 1 100 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

642 13 get_face_type 0 4 1135 28 BSPFaceAttrib::get_face_type 0 1 101 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

643 14 get_ignore_pvs 0 4 1135 29 BSPFaceAttrib::get_ignore_pvs 0 1 102 0
54
inline bool BSPFaceAttrib::get_ignore_pvs(void) const;

644 14 get_class_slot 0 4 1135 29 BSPFaceAttrib::get_class_slot 0 1 103 0
47
static int BSPFaceAttrib::get_class_slot(void);

645 14 get_class_type 0 4 1135 29 BSPFaceAttrib::get_class_type 0 1 104 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

646 14 ~BSPFaceAttrib 0 4 1135 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

647 14 remove_physics 0 4 1137 25 BSPLoader::remove_physics 0 1 105 0
53
void BSPLoader::remove_physics(NodePath const &root);

648 17 set_physics_world 0 4 1137 28 BSPLoader::set_physics_world 0 1 106 0
54
void BSPLoader::set_physics_world(BulletWorld *world);

649 17 get_physics_world 0 4 1137 28 BSPLoader::get_physics_world 0 1 107 0
61
inline BulletWorld *BSPLoader::get_physics_world(void) const;

650 24 has_brush_collision_node 0 4 1137 35 BSPLoader::has_brush_collision_node 0 1 108 0
83
inline bool BSPLoader::has_brush_collision_node(BulletRigidBodyNode *rbnode) const;

651 28 has_brush_collision_triangle 0 4 1137 39 BSPLoader::has_brush_collision_triangle 0 1 109 0
99
inline bool BSPLoader::has_brush_collision_triangle(BulletRigidBodyNode *rbnode, int triangle_idx);

652 27 get_brush_triangle_material 0 4 1137 38 BSPLoader::get_brush_triangle_material 0 1 110 0
105
inline std::string BSPLoader::get_brush_triangle_material(BulletRigidBodyNode *rbnode, int triangle_idx);

653 24 get_brush_triangle_model 0 4 1137 35 BSPLoader::get_brush_triangle_model 0 1 111 0
94
inline int BSPLoader::get_brush_triangle_model(BulletRigidBodyNode *rbnode, int triangle_idx);

654 29 get_brush_triangle_model_fast 0 4 1137 40 BSPLoader::get_brush_triangle_model_fast 0 1 112 0
92
int BSPLoader::get_brush_triangle_model_fast(BulletRigidBodyNode *rbnode, int triangle_idx);

655 16 get_model_origin 0 4 1137 27 BSPLoader::get_model_origin 0 1 113 0
57
inline LPoint3 BSPLoader::get_model_origin(int modelnum);

656 4 read 0 6 1137 15 BSPLoader::read 0 1 114 0
79
virtual bool BSPLoader::read(Filename const &file, bool is_transition = false);

657 16 do_optimizations 0 4 1137 27 BSPLoader::do_optimizations 0 1 115 0
39
void BSPLoader::do_optimizations(void);

658 9 set_gamma 0 4 1137 20 BSPLoader::set_gamma 0 1 116 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

659 9 get_gamma 0 4 1137 20 BSPLoader::get_gamma 0 1 117 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

660 7 set_win 0 4 1137 18 BSPLoader::set_win 0 1 118 0
45
void BSPLoader::set_win(GraphicsWindow *win);

661 10 set_camera 0 4 1137 21 BSPLoader::set_camera 0 1 119 0
51
void BSPLoader::set_camera(NodePath const &camera);

662 10 set_render 0 4 1137 21 BSPLoader::set_render 0 1 120 0
51
void BSPLoader::set_render(NodePath const &render);

663 20 set_shader_generator 0 4 1137 31 BSPLoader::set_shader_generator 0 1 121 0
64
void BSPLoader::set_shader_generator(BSPShaderGenerator *shgen);

664 19 set_want_visibility 0 4 1137 30 BSPLoader::set_want_visibility 0 1 122 0
47
void BSPLoader::set_want_visibility(bool flag);

665 18 set_want_lightmaps 0 4 1137 29 BSPLoader::set_want_lightmaps 0 1 123 0
46
void BSPLoader::set_want_lightmaps(bool flag);

666 16 set_physics_type 0 4 1137 27 BSPLoader::set_physics_type 0 1 124 0
43
void BSPLoader::set_physics_type(int type);

667 19 set_visualize_leafs 0 4 1137 30 BSPLoader::set_visualize_leafs 0 1 125 0
47
void BSPLoader::set_visualize_leafs(bool flag);

668 18 set_materials_file 0 4 1137 29 BSPLoader::set_materials_file 0 1 126 0
57
void BSPLoader::set_materials_file(Filename const &file);

669 13 set_wireframe 0 4 1137 24 BSPLoader::set_wireframe 0 1 127 0
41
void BSPLoader::set_wireframe(bool flag);

670 13 get_wireframe 0 4 1137 24 BSPLoader::get_wireframe 0 1 128 0
49
inline bool BSPLoader::get_wireframe(void) const;

671 10 get_camera 0 4 1137 21 BSPLoader::get_camera 0 1 129 0
50
inline NodePath BSPLoader::get_camera(void) const;

672 11 trace_decal 0 4 1137 22 BSPLoader::trace_decal 0 1 130 0
195
inline void BSPLoader::trace_decal(std::string const &decal_material, LPoint2 const &decal_scale, float rotate, LPoint3 const &start, LPoint3 const &end, LColorf const &decal_color = LColorf(1));

673 27 get_closest_cubemap_texture 0 4 1137 38 BSPLoader::get_closest_cubemap_texture 0 1 131 0
68
Texture *BSPLoader::get_closest_cubemap_texture(LPoint3 const &pos);

674 14 build_cubemaps 0 4 1137 25 BSPLoader::build_cubemaps 0 1 132 0
37
void BSPLoader::build_cubemaps(void);

675 16 set_want_shadows 0 4 1137 27 BSPLoader::set_want_shadows 0 1 133 0
44
void BSPLoader::set_want_shadows(bool flag);

676 14 set_shadow_dir 0 4 1137 25 BSPLoader::set_shadow_dir 0 1 134 0
52
void BSPLoader::set_shadow_dir(LVector3 const &dir);

677 16 extract_modelnum 0 4 1137 27 BSPLoader::extract_modelnum 0 1 135 0
44
int BSPLoader::extract_modelnum(int entnum);

678 16 get_model_bounds 0 4 1137 27 BSPLoader::get_model_bounds 0 1 136 0
77
void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

679 6 set_ai 0 4 1137 17 BSPLoader::set_ai 0 1 137 0
32
void BSPLoader::set_ai(bool ai);

680 5 is_ai 0 4 1137 16 BSPLoader::is_ai 0 1 138 0
41
inline bool BSPLoader::is_ai(void) const;

681 10 trace_line 0 4 1137 21 BSPLoader::trace_line 0 1 139 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

682 9 clip_line 0 4 1137 20 BSPLoader::clip_line 0 1 140 0
71
LPoint3 BSPLoader::clip_line(LPoint3 const &start, LPoint3 const &end);

683 9 get_model 0 4 1137 20 BSPLoader::get_model 0 1 141 0
50
NodePath BSPLoader::get_model(int modelnum) const;

684 9 find_leaf 0 4 1137 20 BSPLoader::find_leaf 0 2 142 143 0
116
inline int BSPLoader::find_leaf(NodePath const &np);
int BSPLoader::find_leaf(LPoint3 const &pos, int headnode = 0);

685 9 find_node 0 4 1137 20 BSPLoader::find_node 0 1 144 0
45
int BSPLoader::find_node(LPoint3 const &pos);

686 18 is_cluster_visible 0 4 1137 29 BSPLoader::is_cluster_visible 0 1 145 0
72
bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

687 15 pvs_bounds_test 0 4 1137 26 BSPLoader::pvs_bounds_test 0 1 146 0
109
bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds, unsigned int required_leaf_flags = 0);

688 15 make_net_bounds 0 4 1137 26 BSPLoader::make_net_bounds 0 1 147 0
147
ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

689 16 has_active_level 0 4 1137 27 BSPLoader::has_active_level 0 1 148 0
52
inline bool BSPLoader::has_active_level(void) const;

690 14 has_visibility 0 4 1137 25 BSPLoader::has_visibility 0 1 149 0
50
inline bool BSPLoader::has_visibility(void) const;

691 7 cleanup 0 4 1137 18 BSPLoader::cleanup 0 1 150 0
52
void BSPLoader::cleanup(bool is_transition = false);

692 10 get_result 0 4 1137 21 BSPLoader::get_result 0 1 151 0
50
inline NodePath BSPLoader::get_result(void) const;

693 16 set_current_leaf 0 4 1137 27 BSPLoader::set_current_leaf 0 1 152 0
50
inline void BSPLoader::set_current_leaf(int leaf);

694 16 get_current_leaf 0 4 1137 27 BSPLoader::get_current_leaf 0 1 153 0
51
inline int BSPLoader::get_current_leaf(void) const;

695 16 get_num_visleafs 0 4 1137 27 BSPLoader::get_num_visleafs 0 1 154 0
51
inline int BSPLoader::get_num_visleafs(void) const;

696 15 get_leaf_center 0 4 1137 26 BSPLoader::get_leaf_center 0 1 155 0
58
inline LPoint3 BSPLoader::get_leaf_center(int leaf) const;

697 15 get_lightcoords 0 4 1137 26 BSPLoader::get_lightcoords 0 1 156 0
73
LTexCoord BSPLoader::get_lightcoords(int facenum, LVector3 const &point);

698 14 set_global_ptr 0 4 1137 25 BSPLoader::set_global_ptr 0 1 157 0
54
static void BSPLoader::set_global_ptr(BSPLoader *ptr);

699 14 get_global_ptr 0 4 1137 25 BSPLoader::get_global_ptr 0 1 158 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

700 10 ~BSPLoader 0 4 1137 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

701 14 get_num_points 0 4 1139 28 BoundingKDOP::get_num_points 0 1 159 0
60
inline std::size_t BoundingKDOP::get_num_points(void) const;

702 9 get_point 0 4 1139 23 BoundingKDOP::get_point 0 1 160 0
52
inline LPoint3 BoundingKDOP::get_point(int n) const;

703 14 get_num_planes 0 4 1139 28 BoundingKDOP::get_num_planes 0 1 161 0
60
inline std::size_t BoundingKDOP::get_num_planes(void) const;

704 9 get_plane 0 4 1139 23 BoundingKDOP::get_plane 0 1 162 0
51
inline LPlane BoundingKDOP::get_plane(int n) const;

705 14 get_class_type 0 4 1139 28 BoundingKDOP::get_class_type 0 1 163 0
53
static TypeHandle BoundingKDOP::get_class_type(void);

706 13 ~BoundingKDOP 0 4 1139 27 BoundingKDOP::~BoundingKDOP 0 0 0
34
BoundingKDOP::~BoundingKDOP(void);

707 14 get_class_type 0 4 1141 27 CBaseEntity::get_class_type 0 1 166 0
52
static TypeHandle CBaseEntity::get_class_type(void);

708 11 CBaseEntity 0 4 1141 24 CBaseEntity::CBaseEntity 0 2 164 165 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

709 10 get_loader 0 4 1141 23 CBaseEntity::get_loader 0 1 167 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

710 16 get_entity_value 0 4 1141 29 CBaseEntity::get_entity_value 0 1 168 0
79
inline std::string CBaseEntity::get_entity_value(std::string const &key) const;

711 23 get_entity_value_vector 0 4 1141 36 CBaseEntity::get_entity_value_vector 0 1 169 0
76
LVector3 CBaseEntity::get_entity_value_vector(std::string const &key) const;

712 22 get_entity_value_color 0 4 1141 35 CBaseEntity::get_entity_value_color 0 1 170 0
92
LColor CBaseEntity::get_entity_value_color(std::string const &key, bool scale = true) const;

713 13 get_classname 0 4 1141 26 CBaseEntity::get_classname 0 1 171 0
58
inline std::string CBaseEntity::get_classname(void) const;

714 14 get_targetname 0 4 1141 27 CBaseEntity::get_targetname 0 1 172 0
59
inline std::string CBaseEntity::get_targetname(void) const;

715 14 get_bsp_entnum 0 4 1141 27 CBaseEntity::get_bsp_entnum 0 1 173 0
51
inline int CBaseEntity::get_bsp_entnum(void) const;

716 12 ~CBaseEntity 0 4 1141 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

717 14 get_class_type 0 4 1142 28 CPointEntity::get_class_type 0 1 176 0
53
static TypeHandle CPointEntity::get_class_type(void);

718 12 CPointEntity 0 4 1142 26 CPointEntity::CPointEntity 0 2 174 175 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

719 10 get_origin 0 4 1142 24 CPointEntity::get_origin 0 1 177 0
45
LPoint3 CPointEntity::get_origin(void) const;

720 10 get_angles 0 4 1142 24 CPointEntity::get_angles 0 1 178 0
46
LVector3 CPointEntity::get_angles(void) const;

721 13 ~CPointEntity 0 4 1142 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

722 14 get_class_type 0 4 1143 29 CBoundsEntity::get_class_type 0 1 181 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

723 13 CBoundsEntity 0 4 1143 28 CBoundsEntity::CBoundsEntity 0 2 179 180 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

724 10 get_bounds 0 4 1143 25 CBoundsEntity::get_bounds 0 1 182 0
52
BoundingKDOP *CBoundsEntity::get_bounds(void) const;

725 9 is_inside 0 4 1143 24 CBoundsEntity::is_inside 0 1 183 0
56
bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

726 13 fillin_bounds 0 4 1143 28 CBoundsEntity::fillin_bounds 0 1 184 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

727 14 ~CBoundsEntity 0 4 1143 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

728 14 get_class_type 0 4 1144 28 CBrushEntity::get_class_type 0 1 187 0
53
static TypeHandle CBrushEntity::get_class_type(void);

729 12 CBrushEntity 0 4 1144 26 CBrushEntity::CBrushEntity 0 2 185 186 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

730 12 get_model_np 0 4 1144 26 CBrushEntity::get_model_np 0 1 188 0
48
NodePath CBrushEntity::get_model_np(void) const;

731 16 get_model_bounds 0 4 1144 30 CBrushEntity::get_model_bounds 0 1 189 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

732 13 ~CBrushEntity 0 4 1144 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

733 18 ShaderPermutations 0 4 1145 38 ShaderPermutations::ShaderPermutations 0 1 190 0
52
inline ShaderPermutations::ShaderPermutations(void);

734 15 add_permutation 0 4 1145 35 ShaderPermutations::add_permutation 0 1 191 0
104
inline void ShaderPermutations::add_permutation(std::string const &key, std::string const &value = "1");

735 8 complete 0 4 1145 28 ShaderPermutations::complete 0 1 192 0
47
inline void ShaderPermutations::complete(void);

736 9 add_input 0 4 1145 29 ShaderPermutations::add_input 0 1 193 0
66
inline void ShaderPermutations::add_input(ShaderInput const &inp);

737 8 add_flag 0 4 1145 28 ShaderPermutations::add_flag 0 1 194 0
51
inline void ShaderPermutations::add_flag(int flag);

738 8 get_hash 0 4 1145 28 ShaderPermutations::get_hash 0 1 195 0
60
inline std::size_t ShaderPermutations::get_hash(void) const;

739 19 ~ShaderPermutations 0 4 1145 39 ShaderPermutations::~ShaderPermutations 0 0 0
46
ShaderPermutations::~ShaderPermutations(void);

740 24 upcast_to_ReferenceCount 0 12 1146 36 ShaderSpec::upcast_to_ReferenceCount 0 1 198 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

741 22 downcast_to_ShaderSpec 0 12 1130 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

742 17 upcast_to_Namable 0 12 1146 29 ShaderSpec::upcast_to_Namable 0 1 199 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

743 22 downcast_to_ShaderSpec 0 12 1147 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

744 17 read_shader_files 0 4 1146 29 ShaderSpec::read_shader_files 0 1 196 0
117
void ShaderSpec::read_shader_files(Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file);

745 14 get_class_type 0 4 1146 26 ShaderSpec::get_class_type 0 1 197 0
51
static TypeHandle ShaderSpec::get_class_type(void);

746 11 ~ShaderSpec 0 4 1146 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

747 22 get_reflection_texture 0 4 1148 41 PlanarReflections::get_reflection_texture 0 1 201 0
63
Texture *PlanarReflections::get_reflection_texture(void) const;

748 17 PlanarReflections 0 4 1148 36 PlanarReflections::PlanarReflections 0 1 200 0
81
inline PlanarReflections::PlanarReflections(PlanarReflections const &) = default;

749 18 ~PlanarReflections 0 4 1148 37 PlanarReflections::~PlanarReflections 0 0 0
44
PlanarReflections::~PlanarReflections(void);

750 18 BSPShaderGenerator 0 4 1152 38 BSPShaderGenerator::BSPShaderGenerator 0 2 202 203 0
224
BSPShaderGenerator::BSPShaderGenerator(GraphicsOutput *output, GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline BSPShaderGenerator::BSPShaderGenerator(BSPShaderGenerator const &) = default;

751 13 set_sun_light 0 4 1152 33 BSPShaderGenerator::set_sun_light 0 1 204 0
59
void BSPShaderGenerator::set_sun_light(NodePath const &np);

752 10 add_shader 0 4 1152 30 BSPShaderGenerator::add_shader 0 1 205 0
66
void BSPShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

753 14 get_sun_vector 0 4 1152 34 BSPShaderGenerator::get_sun_vector 0 1 206 0
63
inline LVector3 BSPShaderGenerator::get_sun_vector(void) const;

754 19 has_shadow_sunlight 0 4 1152 39 BSPShaderGenerator::has_shadow_sunlight 0 1 207 0
64
inline bool BSPShaderGenerator::has_shadow_sunlight(void) const;

755 22 get_pssm_array_texture 0 4 1152 42 BSPShaderGenerator::get_pssm_array_texture 0 1 208 0
71
inline Texture *BSPShaderGenerator::get_pssm_array_texture(void) const;

756 12 get_pssm_rig 0 4 1152 32 BSPShaderGenerator::get_pssm_rig 0 1 209 0
67
inline PSSMCameraRig *BSPShaderGenerator::get_pssm_rig(void) const;

757 10 get_camera 0 4 1152 30 BSPShaderGenerator::get_camera 0 1 210 0
59
inline NodePath BSPShaderGenerator::get_camera(void) const;

758 10 get_render 0 4 1152 30 BSPShaderGenerator::get_render 0 1 211 0
59
inline NodePath BSPShaderGenerator::get_render(void) const;

759 18 set_shader_quality 0 4 1152 38 BSPShaderGenerator::set_shader_quality 0 1 212 0
57
void BSPShaderGenerator::set_shader_quality(int quality);

760 18 get_shader_quality 0 4 1152 38 BSPShaderGenerator::get_shader_quality 0 1 213 0
62
inline int BSPShaderGenerator::get_shader_quality(void) const;

761 7 set_fog 0 4 1152 27 BSPShaderGenerator::set_fog 0 1 214 0
50
inline void BSPShaderGenerator::set_fog(Fog *fog);

762 9 clear_fog 0 4 1152 29 BSPShaderGenerator::clear_fog 0 1 215 0
48
inline void BSPShaderGenerator::clear_fog(void);

763 7 get_fog 0 4 1152 27 BSPShaderGenerator::get_fog 0 1 216 0
52
inline Fog *BSPShaderGenerator::get_fog(void) const;

764 12 get_fog_data 0 4 1152 32 BSPShaderGenerator::get_fog_data 0 1 217 0
67
inline PTA_LVecBase4f BSPShaderGenerator::get_fog_data(void) const;

765 22 set_exposure_adustment 0 4 1152 42 BSPShaderGenerator::set_exposure_adustment 0 1 218 0
71
inline void BSPShaderGenerator::set_exposure_adustment(float exposure);

766 23 get_exposure_adjustment 0 4 1152 43 BSPShaderGenerator::get_exposure_adjustment 0 1 219 0
73
inline PTA_float BSPShaderGenerator::get_exposure_adjustment(void) const;

767 7 get_gsg 0 4 1152 27 BSPShaderGenerator::get_gsg 0 1 220 0
70
inline GraphicsStateGuardian *BSPShaderGenerator::get_gsg(void) const;

768 10 get_output 0 4 1152 30 BSPShaderGenerator::get_output 0 1 221 0
66
inline GraphicsOutput *BSPShaderGenerator::get_output(void) const;

769 22 get_planar_reflections 0 4 1152 42 BSPShaderGenerator::get_planar_reflections 0 1 222 0
81
inline PlanarReflections *BSPShaderGenerator::get_planar_reflections(void) const;

770 20 set_identity_cubemap 0 4 1152 40 BSPShaderGenerator::set_identity_cubemap 0 1 223 0
67
static void BSPShaderGenerator::set_identity_cubemap(Texture *tex);

771 20 get_identity_cubemap 0 4 1152 40 BSPShaderGenerator::get_identity_cubemap 0 1 224 0
63
static Texture *BSPShaderGenerator::get_identity_cubemap(void);

772 11 make_shader 0 4 1152 31 BSPShaderGenerator::make_shader 0 1 225 0
121
static ConstPointerTo< Shader > BSPShaderGenerator::make_shader(ShaderSpec const *spec, ShaderPermutations const *perms);

773 6 update 0 4 1152 26 BSPShaderGenerator::update 0 1 226 0
38
void BSPShaderGenerator::update(void);

774 14 get_class_type 0 4 1152 34 BSPShaderGenerator::get_class_type 0 1 227 0
59
static TypeHandle BSPShaderGenerator::get_class_type(void);

775 19 ~BSPShaderGenerator 0 4 1152 39 BSPShaderGenerator::~BSPShaderGenerator 0 0 0
46
BSPShaderGenerator::~BSPShaderGenerator(void);

776 14 get_class_type 0 4 1154 32 BSPCullTraverser::get_class_type 0 1 230 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

777 16 BSPCullTraverser 0 4 1154 34 BSPCullTraverser::BSPCullTraverser 0 2 228 229 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

778 15 has_camera_bits 0 4 1154 33 BSPCullTraverser::has_camera_bits 0 1 231 0
71
inline bool BSPCullTraverser::has_camera_bits(unsigned int bits) const;

779 14 needs_lighting 0 4 1154 32 BSPCullTraverser::needs_lighting 0 1 232 0
57
inline bool BSPCullTraverser::needs_lighting(void) const;

780 13 needs_culling 0 4 1154 31 BSPCullTraverser::needs_culling 0 1 233 0
56
inline bool BSPCullTraverser::needs_culling(void) const;

781 23 get_required_leaf_flags 0 4 1154 41 BSPCullTraverser::get_required_leaf_flags 0 1 234 106
/**
	 * Returns the flags that must be set on a leaf for it to be
	 * rendered by the current camera.
	 */
74
inline unsigned int BSPCullTraverser::get_required_leaf_flags(void) const;

782 17 ~BSPCullTraverser 0 4 1154 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

783 14 get_class_type 0 4 1156 25 BSPRender::get_class_type 0 1 237 0
50
static TypeHandle BSPRender::get_class_type(void);

784 9 BSPRender 0 4 1156 20 BSPRender::BSPRender 0 2 235 236 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

785 10 ~BSPRender 0 4 1156 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

786 14 get_class_type 0 4 1157 23 BSPRoot::get_class_type 0 1 240 0
48
static TypeHandle BSPRoot::get_class_type(void);

787 7 BSPRoot 0 4 1157 16 BSPRoot::BSPRoot 0 2 238 239 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

788 8 ~BSPRoot 0 4 1157 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

789 14 get_class_type 0 4 1158 23 BSPProp::get_class_type 0 1 243 0
48
static TypeHandle BSPProp::get_class_type(void);

790 7 BSPProp 0 4 1158 16 BSPProp::BSPProp 0 2 241 242 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

791 8 ~BSPProp 0 4 1158 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

792 14 get_class_type 0 4 1160 24 BSPModel::get_class_type 0 1 246 0
49
static TypeHandle BSPModel::get_class_type(void);

793 8 BSPModel 0 4 1160 18 BSPModel::BSPModel 0 2 244 245 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

794 9 ~BSPModel 0 4 1160 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

795 20 VertexLitGenericSpec 0 4 1162 42 VertexLitGenericSpec::VertexLitGenericSpec 0 1 247 0
49
VertexLitGenericSpec::VertexLitGenericSpec(void);

796 21 ~VertexLitGenericSpec 0 4 1162 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

797 22 LightmappedGenericSpec 0 4 1163 46 LightmappedGenericSpec::LightmappedGenericSpec 0 1 248 0
53
LightmappedGenericSpec::LightmappedGenericSpec(void);

798 23 ~LightmappedGenericSpec 0 4 1163 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

799 16 UnlitGenericSpec 0 4 1164 34 UnlitGenericSpec::UnlitGenericSpec 0 1 249 0
41
UnlitGenericSpec::UnlitGenericSpec(void);

800 17 ~UnlitGenericSpec 0 4 1164 35 UnlitGenericSpec::~UnlitGenericSpec 0 0 0
42
UnlitGenericSpec::~UnlitGenericSpec(void);

801 14 UnlitNoMatSpec 0 4 1165 30 UnlitNoMatSpec::UnlitNoMatSpec 0 1 250 0
37
UnlitNoMatSpec::UnlitNoMatSpec(void);

802 15 ~UnlitNoMatSpec 0 4 1165 31 UnlitNoMatSpec::~UnlitNoMatSpec 0 0 0
38
UnlitNoMatSpec::~UnlitNoMatSpec(void);

803 13 CSMRenderSpec 0 4 1166 28 CSMRenderSpec::CSMRenderSpec 0 1 251 0
35
CSMRenderSpec::CSMRenderSpec(void);

804 14 ~CSMRenderSpec 0 4 1166 29 CSMRenderSpec::~CSMRenderSpec 0 0 0
36
CSMRenderSpec::~CSMRenderSpec(void);

805 10 SkyBoxSpec 0 4 1167 22 SkyBoxSpec::SkyBoxSpec 0 1 252 0
29
SkyBoxSpec::SkyBoxSpec(void);

806 11 ~SkyBoxSpec 0 4 1167 23 SkyBoxSpec::~SkyBoxSpec 0 0 0
30
SkyBoxSpec::~SkyBoxSpec(void);

807 4 make 0 4 1168 24 AmbientBoostEffect::make 0 1 253 0
69
static ConstPointerTo< RenderEffect > AmbientBoostEffect::make(void);

808 14 get_class_type 0 4 1168 34 AmbientBoostEffect::get_class_type 0 1 254 0
59
static TypeHandle AmbientBoostEffect::get_class_type(void);

809 19 ~AmbientBoostEffect 0 4 1168 39 AmbientBoostEffect::~AmbientBoostEffect 0 0 0
46
AmbientBoostEffect::~AmbientBoostEffect(void);

810 14 Audio3DManager 0 4 1170 30 Audio3DManager::Audio3DManager 0 2 255 256 0
204
Audio3DManager::Audio3DManager(AudioManager *mgr, NodePath const &listener_target = NodePath(), NodePath const &root = NodePath());
inline Audio3DManager::Audio3DManager(Audio3DManager const &) = default;

811 19 set_distance_factor 0 4 1170 35 Audio3DManager::set_distance_factor 0 1 257 0
68
inline void Audio3DManager::set_distance_factor(PN_stdfloat factor);

812 19 get_distance_factor 0 4 1170 35 Audio3DManager::get_distance_factor 0 1 258 0
67
inline PN_stdfloat Audio3DManager::get_distance_factor(void) const;

813 18 set_doppler_factor 0 4 1170 34 Audio3DManager::set_doppler_factor 0 1 259 0
67
inline void Audio3DManager::set_doppler_factor(PN_stdfloat factor);

814 18 get_doppler_factor 0 4 1170 34 Audio3DManager::get_doppler_factor 0 1 260 0
66
inline PN_stdfloat Audio3DManager::get_doppler_factor(void) const;

815 19 set_drop_off_factor 0 4 1170 35 Audio3DManager::set_drop_off_factor 0 1 261 0
68
inline void Audio3DManager::set_drop_off_factor(PN_stdfloat factor);

816 19 get_drop_off_factor 0 4 1170 35 Audio3DManager::get_drop_off_factor 0 1 262 0
67
inline PN_stdfloat Audio3DManager::get_drop_off_factor(void) const;

817 22 set_sound_min_distance 0 4 1170 38 Audio3DManager::set_sound_min_distance 0 1 263 0
88
inline void Audio3DManager::set_sound_min_distance(AudioSound *sound, PN_stdfloat dist);

818 22 get_sound_min_distance 0 4 1170 38 Audio3DManager::get_sound_min_distance 0 1 264 0
83
inline PN_stdfloat Audio3DManager::get_sound_min_distance(AudioSound *sound) const;

819 22 set_sound_max_distance 0 4 1170 38 Audio3DManager::set_sound_max_distance 0 1 265 0
88
inline void Audio3DManager::set_sound_max_distance(AudioSound *sound, PN_stdfloat dist);

820 22 get_sound_max_distance 0 4 1170 38 Audio3DManager::get_sound_max_distance 0 1 266 0
83
inline PN_stdfloat Audio3DManager::get_sound_max_distance(AudioSound *sound) const;

821 15 attach_listener 0 4 1170 31 Audio3DManager::attach_listener 0 1 267 0
70
inline void Audio3DManager::attach_listener(NodePath const &listener);

822 15 detach_listener 0 4 1170 31 Audio3DManager::detach_listener 0 1 268 0
50
inline void Audio3DManager::detach_listener(void);

823 8 load_sfx 0 4 1170 24 Audio3DManager::load_sfx 0 1 269 0
81
inline PointerTo< AudioSound > Audio3DManager::load_sfx(std::string const &path);

824 22 attach_sound_to_object 0 4 1170 38 Audio3DManager::attach_sound_to_object 0 1 270 0
87
void Audio3DManager::attach_sound_to_object(AudioSound *sound, NodePath const &object);

825 12 detach_sound 0 4 1170 28 Audio3DManager::detach_sound 0 1 271 0
53
void Audio3DManager::detach_sound(AudioSound *sound);

826 18 print_audio_digest 0 4 1170 34 Audio3DManager::print_audio_digest 0 1 272 0
46
void Audio3DManager::print_audio_digest(void);

827 6 update 0 4 1170 22 Audio3DManager::update 0 1 273 0
34
void Audio3DManager::update(void);

828 15 ~Audio3DManager 0 4 1170 31 Audio3DManager::~Audio3DManager 0 0 0
38
Audio3DManager::~Audio3DManager(void);

829 19 set_pupil_direction 0 4 1171 27 CIOLib::set_pupil_direction 0 1 276 0
91
static void CIOLib::set_pupil_direction(float x, float y, LVector3 &left, LVector3 &right);

830 14 look_pupils_at 0 4 1171 22 CIOLib::look_pupils_at 0 1 277 0
106
static LVector2 CIOLib::look_pupils_at(NodePath const &node, LVector3 const &point, NodePath const &eyes);

831 6 CIOLib 0 4 1171 14 CIOLib::CIOLib 0 2 274 275 0
87
inline CIOLib::CIOLib(void) = default;
inline CIOLib::CIOLib(CIOLib const &) = default;

832 7 ~CIOLib 0 4 1171 15 CIOLib::~CIOLib 0 0 0
22
CIOLib::~CIOLib(void);

833 17 DecalModulateSpec 0 4 1172 36 DecalModulateSpec::DecalModulateSpec 0 1 278 0
43
DecalModulateSpec::DecalModulateSpec(void);

834 18 ~DecalModulateSpec 0 4 1172 37 DecalModulateSpec::~DecalModulateSpec 0 0 0
44
DecalModulateSpec::~DecalModulateSpec(void);

835 14 get_class_type 0 4 1173 24 GlowNode::get_class_type 0 1 282 0
49
static TypeHandle GlowNode::get_class_type(void);

836 8 GlowNode 0 4 1173 18 GlowNode::GlowNode 0 3 279 280 281 0
219
GlowNode::GlowNode(std::string const &name, float query_size = ::r_glow_querysize);
GlowNode::GlowNode(GeomNode const &copy, float query_size = ::r_glow_querysize);
inline GlowNode::GlowNode(GlowNode const &) = default;

837 9 ~GlowNode 0 4 1173 19 GlowNode::~GlowNode 0 0 0
26
GlowNode::~GlowNode(void);

838 24 upcast_to_ReferenceCount 0 12 1175 43 PostProcessEffect::upcast_to_ReferenceCount 0 1 292 47
upcast from PostProcessEffect to ReferenceCount
66
ReferenceCount *PostProcessEffect::upcast_to_ReferenceCount(void);

839 29 downcast_to_PostProcessEffect 0 12 1130 45 ReferenceCount::downcast_to_PostProcessEffect 0 0 49
downcast from ReferenceCount to PostProcessEffect
71
PostProcessEffect *ReferenceCount::downcast_to_PostProcessEffect(void);

840 17 upcast_to_Namable 0 12 1175 36 PostProcessEffect::upcast_to_Namable 0 1 293 40
upcast from PostProcessEffect to Namable
52
Namable *PostProcessEffect::upcast_to_Namable(void);

841 29 downcast_to_PostProcessEffect 0 12 1147 38 Namable::downcast_to_PostProcessEffect 0 0 42
downcast from Namable to PostProcessEffect
64
PostProcessEffect *Namable::downcast_to_PostProcessEffect(void);

842 14 get_class_type 0 4 1175 33 PostProcessEffect::get_class_type 0 1 283 0
58
static TypeHandle PostProcessEffect::get_class_type(void);

843 17 get_final_texture 0 6 1175 36 PostProcessEffect::get_final_texture 0 1 284 0
64
virtual Texture *PostProcessEffect::get_final_texture(void) = 0;

844 8 add_pass 0 4 1175 27 PostProcessEffect::add_pass 0 1 285 0
56
void PostProcessEffect::add_pass(PostProcessPass *pass);

845 11 remove_pass 0 4 1175 30 PostProcessEffect::remove_pass 0 1 286 0
59
void PostProcessEffect::remove_pass(PostProcessPass *pass);

846 8 get_pass 0 4 1175 27 PostProcessEffect::get_pass 0 1 287 0
70
PostProcessPass *PostProcessEffect::get_pass(std::string const &name);

847 5 setup 0 6 1175 24 PostProcessEffect::setup 0 1 288 0
44
virtual void PostProcessEffect::setup(void);

848 6 update 0 6 1175 25 PostProcessEffect::update 0 1 289 0
45
virtual void PostProcessEffect::update(void);

849 12 window_event 0 4 1175 31 PostProcessEffect::window_event 0 1 290 0
58
void PostProcessEffect::window_event(GraphicsOutput *win);

850 8 shutdown 0 6 1175 27 PostProcessEffect::shutdown 0 1 291 0
47
virtual void PostProcessEffect::shutdown(void);

851 18 ~PostProcessEffect 0 4 1175 37 PostProcessEffect::~PostProcessEffect 0 0 0
44
PostProcessEffect::~PostProcessEffect(void);

852 24 upcast_to_ReferenceCount 0 12 1177 41 PostProcessPass::upcast_to_ReferenceCount 0 1 319 45
upcast from PostProcessPass to ReferenceCount
64
ReferenceCount *PostProcessPass::upcast_to_ReferenceCount(void);

853 27 downcast_to_PostProcessPass 0 12 1130 43 ReferenceCount::downcast_to_PostProcessPass 0 0 47
downcast from ReferenceCount to PostProcessPass
67
PostProcessPass *ReferenceCount::downcast_to_PostProcessPass(void);

854 17 upcast_to_Namable 0 12 1177 34 PostProcessPass::upcast_to_Namable 0 1 320 38
upcast from PostProcessPass to Namable
50
Namable *PostProcessPass::upcast_to_Namable(void);

855 27 downcast_to_PostProcessPass 0 12 1147 36 Namable::downcast_to_PostProcessPass 0 0 40
downcast from Namable to PostProcessPass
60
PostProcessPass *Namable::downcast_to_PostProcessPass(void);

856 14 get_class_type 0 4 1177 31 PostProcessPass::get_class_type 0 1 296 0
56
static TypeHandle PostProcessPass::get_class_type(void);

857 15 PostProcessPass 0 4 1177 32 PostProcessPass::PostProcessPass 0 2 294 295 0
379
PostProcessPass::PostProcessPass(PostProcess *pp, std::string const &name = "pass", int texture_output_bits = 0, FrameBufferProperties const &fbprops = PostProcessPass::get_default_fbprops(), bool force_size = false, LVector2i const &forced_size = LVector2i::zero(), bool div_size = false, int div = 1);
inline PostProcessPass::PostProcessPass(PostProcessPass const &) = default;

858 8 get_quad 0 4 1177 25 PostProcessPass::get_quad 0 1 297 0
54
inline NodePath PostProcessPass::get_quad(void) const;

859 26 get_back_buffer_dimensions 0 4 1177 43 PostProcessPass::get_back_buffer_dimensions 0 1 298 0
66
LVector2i PostProcessPass::get_back_buffer_dimensions(void) const;

860 10 get_camera 0 4 1177 27 PostProcessPass::get_camera 0 1 299 0
56
inline NodePath PostProcessPass::get_camera(void) const;

861 16 has_texture_bits 0 4 1177 33 PostProcessPass::has_texture_bits 0 1 300 0
62
inline bool PostProcessPass::has_texture_bits(int bits) const;

862 12 set_div_size 0 4 1177 29 PostProcessPass::set_div_size 0 1 301 0
66
inline void PostProcessPass::set_div_size(bool div_size, int div);

863 15 set_forced_size 0 4 1177 32 PostProcessPass::set_forced_size 0 1 302 0
92
inline void PostProcessPass::set_forced_size(bool force_size, LVector2i const &forced_size);

864 26 set_framebuffer_properties 0 4 1177 43 PostProcessPass::set_framebuffer_properties 0 1 303 0
94
inline void PostProcessPass::set_framebuffer_properties(FrameBufferProperties const &fbprops);

865 23 set_output_texture_bits 0 4 1177 40 PostProcessPass::set_output_texture_bits 0 1 304 0
63
inline void PostProcessPass::set_output_texture_bits(int bits);

866 18 get_corrected_size 0 4 1177 35 PostProcessPass::get_corrected_size 0 1 305 0
69
LVector2i PostProcessPass::get_corrected_size(LVector2i const &size);

867 11 get_texture 0 4 1177 28 PostProcessPass::get_texture 0 1 306 0
47
Texture *PostProcessPass::get_texture(int bit);

868 17 get_color_texture 0 4 1177 34 PostProcessPass::get_color_texture 0 1 307 0
57
inline Texture *PostProcessPass::get_color_texture(void);

869 17 get_depth_texture 0 4 1177 34 PostProcessPass::get_depth_texture 0 1 308 0
57
inline Texture *PostProcessPass::get_depth_texture(void);

870 12 setup_buffer 0 6 1177 29 PostProcessPass::setup_buffer 0 1 309 0
49
virtual bool PostProcessPass::setup_buffer(void);

871 14 setup_textures 0 6 1177 31 PostProcessPass::setup_textures 0 1 310 0
51
virtual void PostProcessPass::setup_textures(void);

872 10 setup_quad 0 6 1177 27 PostProcessPass::setup_quad 0 1 311 0
47
virtual void PostProcessPass::setup_quad(void);

873 12 setup_camera 0 6 1177 29 PostProcessPass::setup_camera 0 1 312 0
49
virtual void PostProcessPass::setup_camera(void);

874 12 setup_region 0 6 1177 29 PostProcessPass::setup_region 0 1 313 0
49
virtual void PostProcessPass::setup_region(void);

875 5 setup 0 6 1177 22 PostProcessPass::setup 0 1 314 0
42
virtual void PostProcessPass::setup(void);

876 6 update 0 6 1177 23 PostProcessPass::update 0 1 315 0
43
virtual void PostProcessPass::update(void);

877 12 window_event 0 6 1177 29 PostProcessPass::window_event 0 1 316 0
67
virtual void PostProcessPass::window_event(GraphicsOutput *output);

878 8 shutdown 0 6 1177 25 PostProcessPass::shutdown 0 1 317 0
45
virtual void PostProcessPass::shutdown(void);

879 19 get_default_fbprops 0 4 1177 36 PostProcessPass::get_default_fbprops 0 1 318 0
72
static FrameBufferProperties PostProcessPass::get_default_fbprops(void);

880 16 ~PostProcessPass 0 4 1177 33 PostProcessPass::~PostProcessPass 0 0 0
40
PostProcessPass::~PostProcessPass(void);

881 20 PostProcessScenePass 0 4 1178 42 PostProcessScenePass::PostProcessScenePass 0 2 321 322 0
220
PostProcessScenePass::PostProcessScenePass(PostProcess *pp, int output_texture_bits = ::bits_PASSTEXTURE_COLOR, int auxbits = 0);
inline PostProcessScenePass::PostProcessScenePass(PostProcessScenePass const &) = default;

882 18 setup_scene_camera 0 4 1178 40 PostProcessScenePass::setup_scene_camera 0 1 323 0
53
void PostProcessScenePass::setup_scene_camera(int i);

883 16 set_camera_state 0 4 1178 38 PostProcessScenePass::set_camera_state 0 1 324 0
70
void PostProcessScenePass::set_camera_state(RenderState const *state);

884 21 ~PostProcessScenePass 0 4 1178 43 PostProcessScenePass::~PostProcessScenePass 0 0 0
50
PostProcessScenePass::~PostProcessScenePass(void);

885 11 PostProcess 0 4 1179 24 PostProcess::PostProcess 0 2 325 326 0
95
PostProcess::PostProcess(void);
inline PostProcess::PostProcess(PostProcess const &) = default;

886 7 startup 0 4 1179 20 PostProcess::startup 0 1 327 0
50
void PostProcess::startup(GraphicsOutput *output);

887 10 add_camera 0 4 1179 23 PostProcess::add_camera 0 1 328 0
53
void PostProcess::add_camera(NodePath const &camera);

888 13 remove_camera 0 4 1179 26 PostProcess::remove_camera 0 1 329 0
56
void PostProcess::remove_camera(NodePath const &camera);

889 10 add_effect 0 4 1179 23 PostProcess::add_effect 0 1 330 0
63
inline void PostProcess::add_effect(PostProcessEffect *effect);

890 13 remove_effect 0 4 1179 26 PostProcess::remove_effect 0 1 331 0
66
inline void PostProcess::remove_effect(PostProcessEffect *effect);

891 10 get_effect 0 4 1179 23 PostProcess::get_effect 0 1 332 0
75
inline PostProcessEffect *PostProcess::get_effect(std::string const &name);

892 23 get_scene_color_texture 0 4 1179 36 PostProcess::get_scene_color_texture 0 1 333 0
65
inline Texture *PostProcess::get_scene_color_texture(void) const;

893 23 get_scene_depth_texture 0 4 1179 36 PostProcess::get_scene_depth_texture 0 1 334 0
65
inline Texture *PostProcess::get_scene_depth_texture(void) const;

894 14 get_scene_pass 0 4 1179 27 PostProcess::get_scene_pass 0 1 335 0
69
inline PostProcessScenePass *PostProcess::get_scene_pass(void) const;

895 10 get_output 0 4 1179 23 PostProcess::get_output 0 1 336 0
59
inline GraphicsOutput *PostProcess::get_output(void) const;

896 10 get_camera 0 4 1179 23 PostProcess::get_camera 0 1 337 0
53
inline NodePath PostProcess::get_camera(int n) const;

897 9 next_sort 0 4 1179 22 PostProcess::next_sort 0 1 338 0
40
inline int PostProcess::next_sort(void);

898 25 get_output_display_region 0 4 1179 38 PostProcess::get_output_display_region 0 1 339 0
73
inline DisplayRegion *PostProcess::get_output_display_region(void) const;

899 13 is_fullscreen 0 4 1179 26 PostProcess::is_fullscreen 0 1 340 0
51
inline bool PostProcess::is_fullscreen(void) const;

900 18 set_scene_aux_bits 0 4 1179 31 PostProcess::set_scene_aux_bits 0 1 341 0
47
void PostProcess::set_scene_aux_bits(int bits);

901 18 set_stacked_clears 0 4 1179 31 PostProcess::set_stacked_clears 0 1 342 0
68
void PostProcess::set_stacked_clears(int n, DrawableRegion *region);

902 17 set_window_clears 0 4 1179 30 PostProcess::set_window_clears 0 1 343 0
60
void PostProcess::set_window_clears(DrawableRegion *region);

903 10 set_clears 0 4 1179 23 PostProcess::set_clears 0 1 344 0
60
void PostProcess::set_clears(int n, DrawableRegion *region);

904 8 shutdown 0 4 1179 21 PostProcess::shutdown 0 1 345 0
33
void PostProcess::shutdown(void);

905 6 update 0 4 1179 19 PostProcess::update 0 1 346 0
31
void PostProcess::update(void);

906 12 window_event 0 4 1179 25 PostProcess::window_event 0 1 347 0
37
void PostProcess::window_event(void);

907 12 ~PostProcess 0 4 1179 25 PostProcess::~PostProcess 0 0 0
32
PostProcess::~PostProcess(void);

908 14 get_class_type 0 4 1180 23 HDRPass::get_class_type 0 1 350 0
48
static TypeHandle HDRPass::get_class_type(void);

909 7 HDRPass 0 4 1180 16 HDRPass::HDRPass 0 2 348 349 0
86
HDRPass::HDRPass(PostProcess *pp);
inline HDRPass::HDRPass(HDRPass const &) = default;

910 19 set_exposure_output 0 4 1180 28 HDRPass::set_exposure_output 0 1 351 0
59
inline void HDRPass::set_exposure_output(PTA_float output);

911 12 get_exposure 0 4 1180 21 HDRPass::get_exposure 0 1 352 56
/**
	 * Returns the calculated exposure adjustment.
	 */
47
inline float HDRPass::get_exposure(void) const;

912 8 ~HDRPass 0 4 1180 17 HDRPass::~HDRPass 0 0 0
24
HDRPass::~HDRPass(void);

913 9 HDREffect 0 4 1181 20 HDREffect::HDREffect 0 1 353 0
38
HDREffect::HDREffect(PostProcess *pp);

914 12 get_hdr_pass 0 4 1181 23 HDREffect::get_hdr_pass 0 1 354 0
52
inline HDRPass *HDREffect::get_hdr_pass(void) const;

915 10 ~HDREffect 0 4 1181 21 HDREffect::~HDREffect 0 0 0
28
HDREffect::~HDREffect(void);

916 14 get_class_type 0 4 1182 27 BloomEffect::get_class_type 0 1 356 0
52
static TypeHandle BloomEffect::get_class_type(void);

917 11 BloomEffect 0 4 1182 24 BloomEffect::BloomEffect 0 1 355 0
42
BloomEffect::BloomEffect(PostProcess *pp);

918 12 ~BloomEffect 0 4 1182 25 BloomEffect::~BloomEffect 0 0 0
32
BloomEffect::~BloomEffect(void);

919 14 get_class_type 0 4 1183 36 LightingOriginEffect::get_class_type 0 1 357 0
61
static TypeHandle LightingOriginEffect::get_class_type(void);

920 4 make 0 4 1183 26 LightingOriginEffect::make 0 1 358 0
89
static ConstPointerTo< RenderEffect > LightingOriginEffect::make(LVector3 const &origin);

921 19 get_lighting_origin 0 4 1183 41 LightingOriginEffect::get_lighting_origin 0 1 359 0
70
inline LVector3 LightingOriginEffect::get_lighting_origin(void) const;

922 21 ~LightingOriginEffect 0 4 1183 43 LightingOriginEffect::~LightingOriginEffect 0 0 0
50
LightingOriginEffect::~LightingOriginEffect(void);

923 14 get_class_type 0 4 1184 27 FXAA_Effect::get_class_type 0 1 361 0
52
static TypeHandle FXAA_Effect::get_class_type(void);

924 11 FXAA_Effect 0 4 1184 24 FXAA_Effect::FXAA_Effect 0 1 360 0
42
FXAA_Effect::FXAA_Effect(PostProcess *pp);

925 12 ~FXAA_Effect 0 4 1184 25 FXAA_Effect::~FXAA_Effect 0 0 0
32
FXAA_Effect::~FXAA_Effect(void);

926 14 get_class_slot 0 4 1185 27 BloomAttrib::get_class_slot 0 1 362 0
45
static int BloomAttrib::get_class_slot(void);

927 14 get_class_type 0 4 1185 27 BloomAttrib::get_class_type 0 1 363 0
52
static TypeHandle BloomAttrib::get_class_type(void);

928 4 make 0 4 1185 17 BloomAttrib::make 0 1 364 0
83
static ConstPointerTo< RenderAttrib > BloomAttrib::make(bool bloom_enabled = true);

929 16 is_bloom_enabled 0 4 1185 29 BloomAttrib::is_bloom_enabled 0 1 365 0
54
inline bool BloomAttrib::is_bloom_enabled(void) const;

930 12 ~BloomAttrib 0 4 1185 25 BloomAttrib::~BloomAttrib 0 0 0
32
BloomAttrib::~BloomAttrib(void);

931 26 PhysicsCharacterController 0 4 1187 54 PhysicsCharacterController::PhysicsCharacterController 0 2 366 367 0
425
PhysicsCharacterController::PhysicsCharacterController(BSPLoader *loader, BulletWorld *world, NodePath const &render, NodePath const &parent, float walk_height, float crouch_height, float step_height, float radius, float gravity, BitMask32 const &wall_mask, BitMask32 const &floor_mask, BitMask32 const &event_mask);
inline PhysicsCharacterController::PhysicsCharacterController(PhysicsCharacterController const &) = default;

932 13 set_max_slope 0 4 1187 41 PhysicsCharacterController::set_max_slope 0 1 368 0
78
void PhysicsCharacterController::set_max_slope(float degs, bool affect_speed);

933 16 set_collide_mask 0 4 1187 44 PhysicsCharacterController::set_collide_mask 0 1 369 0
73
void PhysicsCharacterController::set_collide_mask(BitMask32 const &mask);

934 24 set_event_enter_callback 0 4 1187 52 PhysicsCharacterController::set_event_enter_callback 0 1 370 0
85
inline void PhysicsCharacterController::set_event_enter_callback(PyObject *callback);

935 23 set_event_exit_callback 0 4 1187 51 PhysicsCharacterController::set_event_exit_callback 0 1 371 0
84
inline void PhysicsCharacterController::set_event_exit_callback(PyObject *callback);

936 23 set_active_jump_limiter 0 4 1187 51 PhysicsCharacterController::set_active_jump_limiter 0 1 372 0
78
inline void PhysicsCharacterController::set_active_jump_limiter(bool limiter);

937 20 set_default_material 0 4 1187 48 PhysicsCharacterController::set_default_material 0 1 373 0
85
inline void PhysicsCharacterController::set_default_material(std::string const &mat);

938 18 set_touching_water 0 4 1187 46 PhysicsCharacterController::set_touching_water 0 1 374 0
70
inline void PhysicsCharacterController::set_touching_water(bool flag);

939 20 get_current_material 0 4 1187 48 PhysicsCharacterController::get_current_material 0 1 375 0
80
inline std::string PhysicsCharacterController::get_current_material(void) const;

940 16 get_walk_capsule 0 4 1187 44 PhysicsCharacterController::get_walk_capsule 0 1 376 0
73
inline NodePath PhysicsCharacterController::get_walk_capsule(void) const;

941 18 get_crouch_capsule 0 4 1187 46 PhysicsCharacterController::get_crouch_capsule 0 1 377 0
75
inline NodePath PhysicsCharacterController::get_crouch_capsule(void) const;

942 16 get_event_sphere 0 4 1187 44 PhysicsCharacterController::get_event_sphere 0 1 378 0
73
inline NodePath PhysicsCharacterController::get_event_sphere(void) const;

943 11 get_capsule 0 4 1187 39 PhysicsCharacterController::get_capsule 0 1 379 0
68
inline NodePath PhysicsCharacterController::get_capsule(void) const;

944 19 get_movement_parent 0 4 1187 47 PhysicsCharacterController::get_movement_parent 0 1 380 0
76
inline NodePath PhysicsCharacterController::get_movement_parent(void) const;

945 11 set_gravity 0 4 1187 39 PhysicsCharacterController::set_gravity 0 1 381 0
64
inline void PhysicsCharacterController::set_gravity(float grav);

946 18 set_movement_state 0 4 1187 46 PhysicsCharacterController::set_movement_state 0 1 382 0
70
inline void PhysicsCharacterController::set_movement_state(int state);

947 18 get_movement_state 0 4 1187 46 PhysicsCharacterController::get_movement_state 0 1 383 0
70
inline int PhysicsCharacterController::get_movement_state(void) const;

948 21 set_stand_up_callback 0 4 1187 49 PhysicsCharacterController::set_stand_up_callback 0 1 384 0
82
inline void PhysicsCharacterController::set_stand_up_callback(PyObject *callback);

949 17 set_fall_callback 0 4 1187 45 PhysicsCharacterController::set_fall_callback 0 1 385 0
78
inline void PhysicsCharacterController::set_fall_callback(PyObject *callback);

950 12 start_crouch 0 4 1187 40 PhysicsCharacterController::start_crouch 0 1 386 0
52
void PhysicsCharacterController::start_crouch(void);

951 11 stop_crouch 0 4 1187 39 PhysicsCharacterController::stop_crouch 0 1 387 0
51
void PhysicsCharacterController::stop_crouch(void);

952 12 is_on_ground 0 4 1187 40 PhysicsCharacterController::is_on_ground 0 1 388 0
52
bool PhysicsCharacterController::is_on_ground(void);

953 10 start_jump 0 4 1187 38 PhysicsCharacterController::start_jump 0 1 389 0
68
void PhysicsCharacterController::start_jump(float max_height = 3.0);

954 20 set_angular_movement 0 4 1187 48 PhysicsCharacterController::set_angular_movement 0 1 390 0
67
void PhysicsCharacterController::set_angular_movement(float omega);

955 19 set_linear_movement 0 4 1187 47 PhysicsCharacterController::set_linear_movement 0 1 391 0
79
void PhysicsCharacterController::set_linear_movement(LVector3 const &movement);

956 15 place_on_ground 0 4 1187 43 PhysicsCharacterController::place_on_ground 0 1 392 0
55
void PhysicsCharacterController::place_on_ground(void);

957 6 update 0 4 1187 34 PhysicsCharacterController::update 0 1 393 0
57
void PhysicsCharacterController::update(float frametime);

958 15 remove_capsules 0 4 1187 43 PhysicsCharacterController::remove_capsules 0 1 394 0
55
void PhysicsCharacterController::remove_capsules(void);

959 27 ~PhysicsCharacterController 0 4 1187 55 PhysicsCharacterController::~PhysicsCharacterController 0 0 0
62
PhysicsCharacterController::~PhysicsCharacterController(void);

960 17 find_all_entities 0 4 1188 31 Py_BSPLoader::find_all_entities 0 1 395 0
72
PyObject *Py_BSPLoader::find_all_entities(std::string const &classname);

961 16 get_num_entities 0 4 1188 30 Py_BSPLoader::get_num_entities 0 1 396 2
//
47
int Py_BSPLoader::get_num_entities(void) const;

962 10 get_entity 0 4 1188 24 Py_BSPLoader::get_entity 0 1 397 2
//
48
PyObject *Py_BSPLoader::get_entity(int n) const;

963 12 get_c_entity 0 4 1188 26 Py_BSPLoader::get_c_entity 0 1 398 2
//
64
CBaseEntity *Py_BSPLoader::get_c_entity(int const entnum) const;

964 20 get_entity_keyvalues 0 4 1188 34 Py_BSPLoader::get_entity_keyvalues 0 1 399 2
//
74
void Py_BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

965 18 link_cent_to_pyent 0 4 1188 32 Py_BSPLoader::link_cent_to_pyent 0 1 400 2
//
66
void Py_BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

966 28 get_py_entity_by_target_name 0 4 1188 42 Py_BSPLoader::get_py_entity_by_target_name 0 1 401 2
//
90
PyObject *Py_BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

967 14 spawn_entities 0 4 1188 28 Py_BSPLoader::spawn_entities 0 1 402 0
40
void Py_BSPLoader::spawn_entities(void);

968 16 remove_py_entity 0 4 1188 30 Py_BSPLoader::remove_py_entity 0 1 403 0
51
void Py_BSPLoader::remove_py_entity(PyObject *ent);

969 13 ~Py_BSPLoader 0 4 1188 27 Py_BSPLoader::~Py_BSPLoader 0 0 0
34
Py_BSPLoader::~Py_BSPLoader(void);

970 15 Py_CL_BSPLoader 0 4 1189 32 Py_CL_BSPLoader::Py_CL_BSPLoader 0 1 404 0
39
Py_CL_BSPLoader::Py_CL_BSPLoader(void);

971 20 link_entity_to_class 0 4 1189 37 Py_CL_BSPLoader::link_entity_to_class 0 1 405 0
91
void Py_CL_BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

972 10 make_pyent 0 4 1189 27 Py_CL_BSPLoader::make_pyent 0 1 406 0
85
PyObject *Py_CL_BSPLoader::make_pyent(PyObject *pyent, std::string const &classname);

973 16 ~Py_CL_BSPLoader 0 4 1189 33 Py_CL_BSPLoader::~Py_CL_BSPLoader 0 0 0
40
Py_CL_BSPLoader::~Py_CL_BSPLoader(void);

974 15 Py_AI_BSPLoader 0 4 1190 32 Py_AI_BSPLoader::Py_AI_BSPLoader 0 1 407 0
39
Py_AI_BSPLoader::Py_AI_BSPLoader(void);

975 18 add_dynamic_entity 0 4 1190 35 Py_AI_BSPLoader::add_dynamic_entity 0 1 408 0
58
void Py_AI_BSPLoader::add_dynamic_entity(PyObject *pyent);

976 21 remove_dynamic_entity 0 4 1190 38 Py_AI_BSPLoader::remove_dynamic_entity 0 1 409 0
61
void Py_AI_BSPLoader::remove_dynamic_entity(PyObject *pyent);

977 21 mark_entity_preserved 0 4 1190 38 Py_AI_BSPLoader::mark_entity_preserved 0 1 410 0
74
void Py_AI_BSPLoader::mark_entity_preserved(int n, bool preserved = true);

978 28 set_server_entity_dispatcher 0 4 1190 45 Py_AI_BSPLoader::set_server_entity_dispatcher 0 1 411 0
73
void Py_AI_BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

979 27 link_server_entity_to_class 0 4 1190 44 Py_AI_BSPLoader::link_server_entity_to_class 0 1 412 0
95
void Py_AI_BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

980 23 set_transition_landmark 0 4 1190 40 Py_AI_BSPLoader::set_transition_landmark 0 1 413 0
126
inline void Py_AI_BSPLoader::set_transition_landmark(std::string const &name, LVector3 const &origin, LVector3 const &angles);

981 25 clear_transition_landmark 0 4 1190 42 Py_AI_BSPLoader::clear_transition_landmark 0 1 414 0
61
inline void Py_AI_BSPLoader::clear_transition_landmark(void);

982 16 ~Py_AI_BSPLoader 0 4 1190 33 Py_AI_BSPLoader::~Py_AI_BSPLoader 0 0 0
40
Py_AI_BSPLoader::~Py_AI_BSPLoader(void);

983 21 CInterpolationContext 0 4 1192 44 CInterpolationContext::CInterpolationContext 0 2 415 416 0
145
CInterpolationContext::CInterpolationContext(void);
inline CInterpolationContext::CInterpolationContext(CInterpolationContext const &) = default;

984 22 ~CInterpolationContext 0 4 1192 45 CInterpolationContext::~CInterpolationContext 0 0 0
52
CInterpolationContext::~CInterpolationContext(void);

985 19 EnableExtrapolation 0 4 1192 42 CInterpolationContext::EnableExtrapolation 0 1 417 0
67
static void CInterpolationContext::EnableExtrapolation(bool state);

986 15 IsThereAContext 0 4 1192 38 CInterpolationContext::IsThereAContext 0 1 418 0
57
static bool CInterpolationContext::IsThereAContext(void);

987 22 IsExtrapolationAllowed 0 4 1192 45 CInterpolationContext::IsExtrapolationAllowed 0 1 419 0
64
static bool CInterpolationContext::IsExtrapolationAllowed(void);

988 16 SetLastTimeStamp 0 4 1192 39 CInterpolationContext::SetLastTimeStamp 0 1 420 0
69
static void CInterpolationContext::SetLastTimeStamp(float timestamp);

989 16 GetLastTimeStamp 0 4 1192 39 CInterpolationContext::GetLastTimeStamp 0 1 421 0
59
static float CInterpolationContext::GetLastTimeStamp(void);

990 25 CInterpolatedVarArrayBase 0 4 1194 72 CInterpolatedVarArrayBase< LVector2f, false >::CInterpolatedVarArrayBase 0 1 423 0
115
CInterpolatedVarArrayBase< LVector2f, false >::CInterpolatedVarArrayBase(char const *pDebugName = "no debug name");

991 5 Setup 0 6 1194 52 CInterpolatedVarArrayBase< LVector2f, false >::Setup 0 1 424 0
95
virtual void CInterpolatedVarArrayBase< LVector2f, false >::Setup(LVector2f *pValue, int type);

992 22 SetInterpolationAmount 0 6 1194 69 CInterpolatedVarArrayBase< LVector2f, false >::SetInterpolationAmount 0 1 425 0
98
virtual void CInterpolatedVarArrayBase< LVector2f, false >::SetInterpolationAmount(float seconds);

993 22 NoteLastNetworkedValue 0 6 1194 69 CInterpolatedVarArrayBase< LVector2f, false >::NoteLastNetworkedValue 0 1 426 0
89
virtual void CInterpolatedVarArrayBase< LVector2f, false >::NoteLastNetworkedValue(void);

994 11 NoteChanged 0 6 1194 58 CInterpolatedVarArrayBase< LVector2f, false >::NoteChanged 0 2 427 428 92
// Just like the IInterpolatedVar functions, but you can specify an
// interpolation amount.
265
virtual bool CInterpolatedVarArrayBase< LVector2f, false >::NoteChanged(float changetime, bool bUpdateLastNetworkedValue);
bool CInterpolatedVarArrayBase< LVector2f, false >::NoteChanged(float changetime, float interpolation_amount, bool bUpdateLastNetworkedValue);

995 5 Reset 0 6 1194 52 CInterpolatedVarArrayBase< LVector2f, false >::Reset 0 1 429 0
72
virtual void CInterpolatedVarArrayBase< LVector2f, false >::Reset(void);

996 11 Interpolate 0 6 1194 58 CInterpolatedVarArrayBase< LVector2f, false >::Interpolate 0 2 430 431 0
201
virtual int CInterpolatedVarArrayBase< LVector2f, false >::Interpolate(float currentTime);
int CInterpolatedVarArrayBase< LVector2f, false >::Interpolate(float currentTime, float interpolation_amount);

997 7 GetType 0 6 1194 54 CInterpolatedVarArrayBase< LVector2f, false >::GetType 0 1 432 0
79
virtual int CInterpolatedVarArrayBase< LVector2f, false >::GetType(void) const;

998 22 RestoreToLastNetworked 0 6 1194 69 CInterpolatedVarArrayBase< LVector2f, false >::RestoreToLastNetworked 0 1 433 0
89
virtual void CInterpolatedVarArrayBase< LVector2f, false >::RestoreToLastNetworked(void);

999 4 Copy 0 6 1194 51 CInterpolatedVarArrayBase< LVector2f, false >::Copy 0 1 434 0
91
virtual void CInterpolatedVarArrayBase< LVector2f, false >::Copy(IInterpolatedVar *pInSrc);

1000 12 GetDebugName 0 6 1194 59 CInterpolatedVarArrayBase< LVector2f, false >::GetDebugName 0 1 435 0
86
virtual char const *CInterpolatedVarArrayBase< LVector2f, false >::GetDebugName(void);

1001 16 DebugInterpolate 0 4 1194 63 CInterpolatedVarArrayBase< LVector2f, false >::DebugInterpolate 0 1 436 0
105
void CInterpolatedVarArrayBase< LVector2f, false >::DebugInterpolate(LVector2f *pOut, float currentTime);

1002 13 GetDerivative 0 4 1194 60 CInterpolatedVarArrayBase< LVector2f, false >::GetDerivative 0 1 437 0
102
void CInterpolatedVarArrayBase< LVector2f, false >::GetDerivative(LVector2f *pOut, float currentTime);

1003 28 GetDerivative_SmoothVelocity 0 4 1194 75 CInterpolatedVarArrayBase< LVector2f, false >::GetDerivative_SmoothVelocity 0 1 438 0
117
void CInterpolatedVarArrayBase< LVector2f, false >::GetDerivative_SmoothVelocity(LVector2f *pOut, float currentTime);

1004 12 ClearHistory 0 4 1194 59 CInterpolatedVarArrayBase< LVector2f, false >::ClearHistory 0 1 439 0
71
void CInterpolatedVarArrayBase< LVector2f, false >::ClearHistory(void);

1005 9 AddToHead 0 4 1194 56 CInterpolatedVarArrayBase< LVector2f, false >::AddToHead 0 1 440 0
123
void CInterpolatedVarArrayBase< LVector2f, false >::AddToHead(float changeTime, LVector2f const *values, bool bFlushNewer);

1006 7 GetPrev 0 4 1194 54 CInterpolatedVarArrayBase< LVector2f, false >::GetPrev 0 1 441 0
99
LVector2f const &CInterpolatedVarArrayBase< LVector2f, false >::GetPrev(int iArrayIndex = 0) const;

1007 10 GetCurrent 0 4 1194 57 CInterpolatedVarArrayBase< LVector2f, false >::GetCurrent 0 1 442 0
102
LVector2f const &CInterpolatedVarArrayBase< LVector2f, false >::GetCurrent(int iArrayIndex = 0) const;

1008 11 GetInterval 0 4 1194 58 CInterpolatedVarArrayBase< LVector2f, false >::GetInterval 0 1 443 89
// Returns the time difference betweem the most recent sample and its previous
// sample.
77
float CInterpolatedVarArrayBase< LVector2f, false >::GetInterval(void) const;

1009 12 IsValidIndex 0 4 1194 59 CInterpolatedVarArrayBase< LVector2f, false >::IsValidIndex 0 1 444 0
72
bool CInterpolatedVarArrayBase< LVector2f, false >::IsValidIndex(int i);

1010 15 GetHistoryValue 0 4 1194 62 CInterpolatedVarArrayBase< LVector2f, false >::GetHistoryValue 0 0 0
125
LVector2f *CInterpolatedVarArrayBase< LVector2f, false >::GetHistoryValue(int index, float &changetime, int iArrayIndex = 0);

1011 7 GetHead 0 4 1194 54 CInterpolatedVarArrayBase< LVector2f, false >::GetHead 0 1 445 0
65
int CInterpolatedVarArrayBase< LVector2f, false >::GetHead(void);

1012 7 GetNext 0 4 1194 54 CInterpolatedVarArrayBase< LVector2f, false >::GetNext 0 1 446 0
66
int CInterpolatedVarArrayBase< LVector2f, false >::GetNext(int i);

1013 23 SetHistoryValuesForItem 0 4 1194 70 CInterpolatedVarArrayBase< LVector2f, false >::SetHistoryValuesForItem 0 1 447 0
104
void CInterpolatedVarArrayBase< LVector2f, false >::SetHistoryValuesForItem(int item, LVector2f &value);

1014 10 SetLooping 0 4 1194 57 CInterpolatedVarArrayBase< LVector2f, false >::SetLooping 0 1 448 0
98
void CInterpolatedVarArrayBase< LVector2f, false >::SetLooping(bool looping, int iArrayIndex = 0);

1015 11 SetMaxCount 0 4 1194 58 CInterpolatedVarArrayBase< LVector2f, false >::SetMaxCount 0 1 449 0
76
void CInterpolatedVarArrayBase< LVector2f, false >::SetMaxCount(int newmax);

1016 11 GetMaxCount 0 4 1194 58 CInterpolatedVarArrayBase< LVector2f, false >::GetMaxCount 0 1 450 0
75
int CInterpolatedVarArrayBase< LVector2f, false >::GetMaxCount(void) const;

1017 14 GetOldestEntry 0 4 1194 61 CInterpolatedVarArrayBase< LVector2f, false >::GetOldestEntry 0 1 451 36
// Get the time of the oldest entry.
74
float CInterpolatedVarArrayBase< LVector2f, false >::GetOldestEntry(void);

1018 12 SetDebugName 0 6 1194 59 CInterpolatedVarArrayBase< LVector2f, false >::SetDebugName 0 1 452 52
// set a debug name (if not provided by constructor)
92
virtual void CInterpolatedVarArrayBase< LVector2f, false >::SetDebugName(char const *pName);

1019 20 GetInterpolationInfo 0 4 1194 67 CInterpolatedVarArrayBase< LVector2f, false >::GetInterpolationInfo 0 0 0
132
bool CInterpolatedVarArrayBase< LVector2f, false >::GetInterpolationInfo(float currentTime, int *pNewer, int *pOlder, int *pOldest);

1020 16 CInterpolatedVar 0 4 1193 47 CInterpolatedVar< LVector2f >::CInterpolatedVar 0 1 422 0
76
CInterpolatedVar< LVector2f >::CInterpolatedVar(char const *pDebugName = 0);

1021 17 ~CInterpolatedVar 0 4 1193 48 CInterpolatedVar< LVector2f >::~CInterpolatedVar 0 0 0
55
CInterpolatedVar< LVector2f >::~CInterpolatedVar(void);

1022 25 CInterpolatedVarArrayBase 0 4 1198 72 CInterpolatedVarArrayBase< LVector3f, false >::CInterpolatedVarArrayBase 0 1 454 0
115
CInterpolatedVarArrayBase< LVector3f, false >::CInterpolatedVarArrayBase(char const *pDebugName = "no debug name");

1023 5 Setup 0 6 1198 52 CInterpolatedVarArrayBase< LVector3f, false >::Setup 0 1 455 0
95
virtual void CInterpolatedVarArrayBase< LVector3f, false >::Setup(LVector3f *pValue, int type);

1024 22 SetInterpolationAmount 0 6 1198 69 CInterpolatedVarArrayBase< LVector3f, false >::SetInterpolationAmount 0 1 456 0
98
virtual void CInterpolatedVarArrayBase< LVector3f, false >::SetInterpolationAmount(float seconds);

1025 22 NoteLastNetworkedValue 0 6 1198 69 CInterpolatedVarArrayBase< LVector3f, false >::NoteLastNetworkedValue 0 1 457 0
89
virtual void CInterpolatedVarArrayBase< LVector3f, false >::NoteLastNetworkedValue(void);

1026 11 NoteChanged 0 6 1198 58 CInterpolatedVarArrayBase< LVector3f, false >::NoteChanged 0 2 458 459 92
// Just like the IInterpolatedVar functions, but you can specify an
// interpolation amount.
265
virtual bool CInterpolatedVarArrayBase< LVector3f, false >::NoteChanged(float changetime, bool bUpdateLastNetworkedValue);
bool CInterpolatedVarArrayBase< LVector3f, false >::NoteChanged(float changetime, float interpolation_amount, bool bUpdateLastNetworkedValue);

1027 5 Reset 0 6 1198 52 CInterpolatedVarArrayBase< LVector3f, false >::Reset 0 1 460 0
72
virtual void CInterpolatedVarArrayBase< LVector3f, false >::Reset(void);

1028 11 Interpolate 0 6 1198 58 CInterpolatedVarArrayBase< LVector3f, false >::Interpolate 0 2 461 462 0
201
virtual int CInterpolatedVarArrayBase< LVector3f, false >::Interpolate(float currentTime);
int CInterpolatedVarArrayBase< LVector3f, false >::Interpolate(float currentTime, float interpolation_amount);

1029 7 GetType 0 6 1198 54 CInterpolatedVarArrayBase< LVector3f, false >::GetType 0 1 463 0
79
virtual int CInterpolatedVarArrayBase< LVector3f, false >::GetType(void) const;

1030 22 RestoreToLastNetworked 0 6 1198 69 CInterpolatedVarArrayBase< LVector3f, false >::RestoreToLastNetworked 0 1 464 0
89
virtual void CInterpolatedVarArrayBase< LVector3f, false >::RestoreToLastNetworked(void);

1031 4 Copy 0 6 1198 51 CInterpolatedVarArrayBase< LVector3f, false >::Copy 0 1 465 0
91
virtual void CInterpolatedVarArrayBase< LVector3f, false >::Copy(IInterpolatedVar *pInSrc);

1032 12 GetDebugName 0 6 1198 59 CInterpolatedVarArrayBase< LVector3f, false >::GetDebugName 0 1 466 0
86
virtual char const *CInterpolatedVarArrayBase< LVector3f, false >::GetDebugName(void);

1033 16 DebugInterpolate 0 4 1198 63 CInterpolatedVarArrayBase< LVector3f, false >::DebugInterpolate 0 1 467 0
105
void CInterpolatedVarArrayBase< LVector3f, false >::DebugInterpolate(LVector3f *pOut, float currentTime);

1034 13 GetDerivative 0 4 1198 60 CInterpolatedVarArrayBase< LVector3f, false >::GetDerivative 0 1 468 0
102
void CInterpolatedVarArrayBase< LVector3f, false >::GetDerivative(LVector3f *pOut, float currentTime);

1035 28 GetDerivative_SmoothVelocity 0 4 1198 75 CInterpolatedVarArrayBase< LVector3f, false >::GetDerivative_SmoothVelocity 0 1 469 0
117
void CInterpolatedVarArrayBase< LVector3f, false >::GetDerivative_SmoothVelocity(LVector3f *pOut, float currentTime);

1036 12 ClearHistory 0 4 1198 59 CInterpolatedVarArrayBase< LVector3f, false >::ClearHistory 0 1 470 0
71
void CInterpolatedVarArrayBase< LVector3f, false >::ClearHistory(void);

1037 9 AddToHead 0 4 1198 56 CInterpolatedVarArrayBase< LVector3f, false >::AddToHead 0 1 471 0
123
void CInterpolatedVarArrayBase< LVector3f, false >::AddToHead(float changeTime, LVector3f const *values, bool bFlushNewer);

1038 7 GetPrev 0 4 1198 54 CInterpolatedVarArrayBase< LVector3f, false >::GetPrev 0 1 472 0
99
LVector3f const &CInterpolatedVarArrayBase< LVector3f, false >::GetPrev(int iArrayIndex = 0) const;

1039 10 GetCurrent 0 4 1198 57 CInterpolatedVarArrayBase< LVector3f, false >::GetCurrent 0 1 473 0
102
LVector3f const &CInterpolatedVarArrayBase< LVector3f, false >::GetCurrent(int iArrayIndex = 0) const;

1040 11 GetInterval 0 4 1198 58 CInterpolatedVarArrayBase< LVector3f, false >::GetInterval 0 1 474 89
// Returns the time difference betweem the most recent sample and its previous
// sample.
77
float CInterpolatedVarArrayBase< LVector3f, false >::GetInterval(void) const;

1041 12 IsValidIndex 0 4 1198 59 CInterpolatedVarArrayBase< LVector3f, false >::IsValidIndex 0 1 475 0
72
bool CInterpolatedVarArrayBase< LVector3f, false >::IsValidIndex(int i);

1042 15 GetHistoryValue 0 4 1198 62 CInterpolatedVarArrayBase< LVector3f, false >::GetHistoryValue 0 0 0
125
LVector3f *CInterpolatedVarArrayBase< LVector3f, false >::GetHistoryValue(int index, float &changetime, int iArrayIndex = 0);

1043 7 GetHead 0 4 1198 54 CInterpolatedVarArrayBase< LVector3f, false >::GetHead 0 1 476 0
65
int CInterpolatedVarArrayBase< LVector3f, false >::GetHead(void);

1044 7 GetNext 0 4 1198 54 CInterpolatedVarArrayBase< LVector3f, false >::GetNext 0 1 477 0
66
int CInterpolatedVarArrayBase< LVector3f, false >::GetNext(int i);

1045 23 SetHistoryValuesForItem 0 4 1198 70 CInterpolatedVarArrayBase< LVector3f, false >::SetHistoryValuesForItem 0 1 478 0
104
void CInterpolatedVarArrayBase< LVector3f, false >::SetHistoryValuesForItem(int item, LVector3f &value);

1046 10 SetLooping 0 4 1198 57 CInterpolatedVarArrayBase< LVector3f, false >::SetLooping 0 1 479 0
98
void CInterpolatedVarArrayBase< LVector3f, false >::SetLooping(bool looping, int iArrayIndex = 0);

1047 11 SetMaxCount 0 4 1198 58 CInterpolatedVarArrayBase< LVector3f, false >::SetMaxCount 0 1 480 0
76
void CInterpolatedVarArrayBase< LVector3f, false >::SetMaxCount(int newmax);

1048 11 GetMaxCount 0 4 1198 58 CInterpolatedVarArrayBase< LVector3f, false >::GetMaxCount 0 1 481 0
75
int CInterpolatedVarArrayBase< LVector3f, false >::GetMaxCount(void) const;

1049 14 GetOldestEntry 0 4 1198 61 CInterpolatedVarArrayBase< LVector3f, false >::GetOldestEntry 0 1 482 36
// Get the time of the oldest entry.
74
float CInterpolatedVarArrayBase< LVector3f, false >::GetOldestEntry(void);

1050 12 SetDebugName 0 6 1198 59 CInterpolatedVarArrayBase< LVector3f, false >::SetDebugName 0 1 483 52
// set a debug name (if not provided by constructor)
92
virtual void CInterpolatedVarArrayBase< LVector3f, false >::SetDebugName(char const *pName);

1051 20 GetInterpolationInfo 0 4 1198 67 CInterpolatedVarArrayBase< LVector3f, false >::GetInterpolationInfo 0 0 0
132
bool CInterpolatedVarArrayBase< LVector3f, false >::GetInterpolationInfo(float currentTime, int *pNewer, int *pOlder, int *pOldest);

1052 16 CInterpolatedVar 0 4 1197 47 CInterpolatedVar< LVector3f >::CInterpolatedVar 0 1 453 0
76
CInterpolatedVar< LVector3f >::CInterpolatedVar(char const *pDebugName = 0);

1053 17 ~CInterpolatedVar 0 4 1197 48 CInterpolatedVar< LVector3f >::~CInterpolatedVar 0 0 0
55
CInterpolatedVar< LVector3f >::~CInterpolatedVar(void);

1054 25 CInterpolatedVarArrayBase 0 4 1201 72 CInterpolatedVarArrayBase< LVector4f, false >::CInterpolatedVarArrayBase 0 1 485 0
115
CInterpolatedVarArrayBase< LVector4f, false >::CInterpolatedVarArrayBase(char const *pDebugName = "no debug name");

1055 5 Setup 0 6 1201 52 CInterpolatedVarArrayBase< LVector4f, false >::Setup 0 1 486 0
95
virtual void CInterpolatedVarArrayBase< LVector4f, false >::Setup(LVector4f *pValue, int type);

1056 22 SetInterpolationAmount 0 6 1201 69 CInterpolatedVarArrayBase< LVector4f, false >::SetInterpolationAmount 0 1 487 0
98
virtual void CInterpolatedVarArrayBase< LVector4f, false >::SetInterpolationAmount(float seconds);

1057 22 NoteLastNetworkedValue 0 6 1201 69 CInterpolatedVarArrayBase< LVector4f, false >::NoteLastNetworkedValue 0 1 488 0
89
virtual void CInterpolatedVarArrayBase< LVector4f, false >::NoteLastNetworkedValue(void);

1058 11 NoteChanged 0 6 1201 58 CInterpolatedVarArrayBase< LVector4f, false >::NoteChanged 0 2 489 490 92
// Just like the IInterpolatedVar functions, but you can specify an
// interpolation amount.
265
virtual bool CInterpolatedVarArrayBase< LVector4f, false >::NoteChanged(float changetime, bool bUpdateLastNetworkedValue);
bool CInterpolatedVarArrayBase< LVector4f, false >::NoteChanged(float changetime, float interpolation_amount, bool bUpdateLastNetworkedValue);

1059 5 Reset 0 6 1201 52 CInterpolatedVarArrayBase< LVector4f, false >::Reset 0 1 491 0
72
virtual void CInterpolatedVarArrayBase< LVector4f, false >::Reset(void);

1060 11 Interpolate 0 6 1201 58 CInterpolatedVarArrayBase< LVector4f, false >::Interpolate 0 2 492 493 0
201
virtual int CInterpolatedVarArrayBase< LVector4f, false >::Interpolate(float currentTime);
int CInterpolatedVarArrayBase< LVector4f, false >::Interpolate(float currentTime, float interpolation_amount);

1061 7 GetType 0 6 1201 54 CInterpolatedVarArrayBase< LVector4f, false >::GetType 0 1 494 0
79
virtual int CInterpolatedVarArrayBase< LVector4f, false >::GetType(void) const;

1062 22 RestoreToLastNetworked 0 6 1201 69 CInterpolatedVarArrayBase< LVector4f, false >::RestoreToLastNetworked 0 1 495 0
89
virtual void CInterpolatedVarArrayBase< LVector4f, false >::RestoreToLastNetworked(void);

1063 4 Copy 0 6 1201 51 CInterpolatedVarArrayBase< LVector4f, false >::Copy 0 1 496 0
91
virtual void CInterpolatedVarArrayBase< LVector4f, false >::Copy(IInterpolatedVar *pInSrc);

1064 12 GetDebugName 0 6 1201 59 CInterpolatedVarArrayBase< LVector4f, false >::GetDebugName 0 1 497 0
86
virtual char const *CInterpolatedVarArrayBase< LVector4f, false >::GetDebugName(void);

1065 16 DebugInterpolate 0 4 1201 63 CInterpolatedVarArrayBase< LVector4f, false >::DebugInterpolate 0 1 498 0
105
void CInterpolatedVarArrayBase< LVector4f, false >::DebugInterpolate(LVector4f *pOut, float currentTime);

1066 13 GetDerivative 0 4 1201 60 CInterpolatedVarArrayBase< LVector4f, false >::GetDerivative 0 1 499 0
102
void CInterpolatedVarArrayBase< LVector4f, false >::GetDerivative(LVector4f *pOut, float currentTime);

1067 28 GetDerivative_SmoothVelocity 0 4 1201 75 CInterpolatedVarArrayBase< LVector4f, false >::GetDerivative_SmoothVelocity 0 1 500 0
117
void CInterpolatedVarArrayBase< LVector4f, false >::GetDerivative_SmoothVelocity(LVector4f *pOut, float currentTime);

1068 12 ClearHistory 0 4 1201 59 CInterpolatedVarArrayBase< LVector4f, false >::ClearHistory 0 1 501 0
71
void CInterpolatedVarArrayBase< LVector4f, false >::ClearHistory(void);

1069 9 AddToHead 0 4 1201 56 CInterpolatedVarArrayBase< LVector4f, false >::AddToHead 0 1 502 0
123
void CInterpolatedVarArrayBase< LVector4f, false >::AddToHead(float changeTime, LVector4f const *values, bool bFlushNewer);

1070 7 GetPrev 0 4 1201 54 CInterpolatedVarArrayBase< LVector4f, false >::GetPrev 0 1 503 0
99
LVector4f const &CInterpolatedVarArrayBase< LVector4f, false >::GetPrev(int iArrayIndex = 0) const;

1071 10 GetCurrent 0 4 1201 57 CInterpolatedVarArrayBase< LVector4f, false >::GetCurrent 0 1 504 0
102
LVector4f const &CInterpolatedVarArrayBase< LVector4f, false >::GetCurrent(int iArrayIndex = 0) const;

1072 11 GetInterval 0 4 1201 58 CInterpolatedVarArrayBase< LVector4f, false >::GetInterval 0 1 505 89
// Returns the time difference betweem the most recent sample and its previous
// sample.
77
float CInterpolatedVarArrayBase< LVector4f, false >::GetInterval(void) const;

1073 12 IsValidIndex 0 4 1201 59 CInterpolatedVarArrayBase< LVector4f, false >::IsValidIndex 0 1 506 0
72
bool CInterpolatedVarArrayBase< LVector4f, false >::IsValidIndex(int i);

1074 15 GetHistoryValue 0 4 1201 62 CInterpolatedVarArrayBase< LVector4f, false >::GetHistoryValue 0 0 0
125
LVector4f *CInterpolatedVarArrayBase< LVector4f, false >::GetHistoryValue(int index, float &changetime, int iArrayIndex = 0);

1075 7 GetHead 0 4 1201 54 CInterpolatedVarArrayBase< LVector4f, false >::GetHead 0 1 507 0
65
int CInterpolatedVarArrayBase< LVector4f, false >::GetHead(void);

1076 7 GetNext 0 4 1201 54 CInterpolatedVarArrayBase< LVector4f, false >::GetNext 0 1 508 0
66
int CInterpolatedVarArrayBase< LVector4f, false >::GetNext(int i);

1077 23 SetHistoryValuesForItem 0 4 1201 70 CInterpolatedVarArrayBase< LVector4f, false >::SetHistoryValuesForItem 0 1 509 0
104
void CInterpolatedVarArrayBase< LVector4f, false >::SetHistoryValuesForItem(int item, LVector4f &value);

1078 10 SetLooping 0 4 1201 57 CInterpolatedVarArrayBase< LVector4f, false >::SetLooping 0 1 510 0
98
void CInterpolatedVarArrayBase< LVector4f, false >::SetLooping(bool looping, int iArrayIndex = 0);

1079 11 SetMaxCount 0 4 1201 58 CInterpolatedVarArrayBase< LVector4f, false >::SetMaxCount 0 1 511 0
76
void CInterpolatedVarArrayBase< LVector4f, false >::SetMaxCount(int newmax);

1080 11 GetMaxCount 0 4 1201 58 CInterpolatedVarArrayBase< LVector4f, false >::GetMaxCount 0 1 512 0
75
int CInterpolatedVarArrayBase< LVector4f, false >::GetMaxCount(void) const;

1081 14 GetOldestEntry 0 4 1201 61 CInterpolatedVarArrayBase< LVector4f, false >::GetOldestEntry 0 1 513 36
// Get the time of the oldest entry.
74
float CInterpolatedVarArrayBase< LVector4f, false >::GetOldestEntry(void);

1082 12 SetDebugName 0 6 1201 59 CInterpolatedVarArrayBase< LVector4f, false >::SetDebugName 0 1 514 52
// set a debug name (if not provided by constructor)
92
virtual void CInterpolatedVarArrayBase< LVector4f, false >::SetDebugName(char const *pName);

1083 20 GetInterpolationInfo 0 4 1201 67 CInterpolatedVarArrayBase< LVector4f, false >::GetInterpolationInfo 0 0 0
132
bool CInterpolatedVarArrayBase< LVector4f, false >::GetInterpolationInfo(float currentTime, int *pNewer, int *pOlder, int *pOldest);

1084 16 CInterpolatedVar 0 4 1200 47 CInterpolatedVar< LVector4f >::CInterpolatedVar 0 1 484 0
76
CInterpolatedVar< LVector4f >::CInterpolatedVar(char const *pDebugName = 0);

1085 17 ~CInterpolatedVar 0 4 1200 48 CInterpolatedVar< LVector4f >::~CInterpolatedVar 0 0 0
55
CInterpolatedVar< LVector4f >::~CInterpolatedVar(void);

1086 25 CInterpolatedVarArrayBase 0 4 1204 68 CInterpolatedVarArrayBase< float, false >::CInterpolatedVarArrayBase 0 1 516 0
111
CInterpolatedVarArrayBase< float, false >::CInterpolatedVarArrayBase(char const *pDebugName = "no debug name");

1087 5 Setup 0 6 1204 48 CInterpolatedVarArrayBase< float, false >::Setup 0 0 0
87
virtual void CInterpolatedVarArrayBase< float, false >::Setup(float *pValue, int type);

1088 22 SetInterpolationAmount 0 6 1204 65 CInterpolatedVarArrayBase< float, false >::SetInterpolationAmount 0 1 517 0
94
virtual void CInterpolatedVarArrayBase< float, false >::SetInterpolationAmount(float seconds);

1089 22 NoteLastNetworkedValue 0 6 1204 65 CInterpolatedVarArrayBase< float, false >::NoteLastNetworkedValue 0 1 518 0
85
virtual void CInterpolatedVarArrayBase< float, false >::NoteLastNetworkedValue(void);

1090 11 NoteChanged 0 6 1204 54 CInterpolatedVarArrayBase< float, false >::NoteChanged 0 2 519 520 92
// Just like the IInterpolatedVar functions, but you can specify an
// interpolation amount.
257
virtual bool CInterpolatedVarArrayBase< float, false >::NoteChanged(float changetime, bool bUpdateLastNetworkedValue);
bool CInterpolatedVarArrayBase< float, false >::NoteChanged(float changetime, float interpolation_amount, bool bUpdateLastNetworkedValue);

1091 5 Reset 0 6 1204 48 CInterpolatedVarArrayBase< float, false >::Reset 0 1 521 0
68
virtual void CInterpolatedVarArrayBase< float, false >::Reset(void);

1092 11 Interpolate 0 6 1204 54 CInterpolatedVarArrayBase< float, false >::Interpolate 0 2 522 523 0
193
virtual int CInterpolatedVarArrayBase< float, false >::Interpolate(float currentTime);
int CInterpolatedVarArrayBase< float, false >::Interpolate(float currentTime, float interpolation_amount);

1093 7 GetType 0 6 1204 50 CInterpolatedVarArrayBase< float, false >::GetType 0 1 524 0
75
virtual int CInterpolatedVarArrayBase< float, false >::GetType(void) const;

1094 22 RestoreToLastNetworked 0 6 1204 65 CInterpolatedVarArrayBase< float, false >::RestoreToLastNetworked 0 1 525 0
85
virtual void CInterpolatedVarArrayBase< float, false >::RestoreToLastNetworked(void);

1095 4 Copy 0 6 1204 47 CInterpolatedVarArrayBase< float, false >::Copy 0 1 526 0
87
virtual void CInterpolatedVarArrayBase< float, false >::Copy(IInterpolatedVar *pInSrc);

1096 12 GetDebugName 0 6 1204 55 CInterpolatedVarArrayBase< float, false >::GetDebugName 0 1 527 0
82
virtual char const *CInterpolatedVarArrayBase< float, false >::GetDebugName(void);

1097 16 DebugInterpolate 0 4 1204 59 CInterpolatedVarArrayBase< float, false >::DebugInterpolate 0 0 0
97
void CInterpolatedVarArrayBase< float, false >::DebugInterpolate(float *pOut, float currentTime);

1098 13 GetDerivative 0 4 1204 56 CInterpolatedVarArrayBase< float, false >::GetDerivative 0 0 0
94
void CInterpolatedVarArrayBase< float, false >::GetDerivative(float *pOut, float currentTime);

1099 28 GetDerivative_SmoothVelocity 0 4 1204 71 CInterpolatedVarArrayBase< float, false >::GetDerivative_SmoothVelocity 0 0 0
109
void CInterpolatedVarArrayBase< float, false >::GetDerivative_SmoothVelocity(float *pOut, float currentTime);

1100 12 ClearHistory 0 4 1204 55 CInterpolatedVarArrayBase< float, false >::ClearHistory 0 1 528 0
67
void CInterpolatedVarArrayBase< float, false >::ClearHistory(void);

1101 9 AddToHead 0 4 1204 52 CInterpolatedVarArrayBase< float, false >::AddToHead 0 0 0
115
void CInterpolatedVarArrayBase< float, false >::AddToHead(float changeTime, float const *values, bool bFlushNewer);

1102 7 GetPrev 0 4 1204 50 CInterpolatedVarArrayBase< float, false >::GetPrev 0 1 529 0
91
float const &CInterpolatedVarArrayBase< float, false >::GetPrev(int iArrayIndex = 0) const;

1103 10 GetCurrent 0 4 1204 53 CInterpolatedVarArrayBase< float, false >::GetCurrent 0 1 530 0
94
float const &CInterpolatedVarArrayBase< float, false >::GetCurrent(int iArrayIndex = 0) const;

1104 11 GetInterval 0 4 1204 54 CInterpolatedVarArrayBase< float, false >::GetInterval 0 1 531 89
// Returns the time difference betweem the most recent sample and its previous
// sample.
73
float CInterpolatedVarArrayBase< float, false >::GetInterval(void) const;

1105 12 IsValidIndex 0 4 1204 55 CInterpolatedVarArrayBase< float, false >::IsValidIndex 0 1 532 0
68
bool CInterpolatedVarArrayBase< float, false >::IsValidIndex(int i);

1106 15 GetHistoryValue 0 4 1204 58 CInterpolatedVarArrayBase< float, false >::GetHistoryValue 0 0 0
117
float *CInterpolatedVarArrayBase< float, false >::GetHistoryValue(int index, float &changetime, int iArrayIndex = 0);

1107 7 GetHead 0 4 1204 50 CInterpolatedVarArrayBase< float, false >::GetHead 0 1 533 0
61
int CInterpolatedVarArrayBase< float, false >::GetHead(void);

1108 7 GetNext 0 4 1204 50 CInterpolatedVarArrayBase< float, false >::GetNext 0 1 534 0
62
int CInterpolatedVarArrayBase< float, false >::GetNext(int i);

1109 23 SetHistoryValuesForItem 0 4 1204 66 CInterpolatedVarArrayBase< float, false >::SetHistoryValuesForItem 0 0 0
96
void CInterpolatedVarArrayBase< float, false >::SetHistoryValuesForItem(int item, float &value);

1110 10 SetLooping 0 4 1204 53 CInterpolatedVarArrayBase< float, false >::SetLooping 0 1 535 0
94
void CInterpolatedVarArrayBase< float, false >::SetLooping(bool looping, int iArrayIndex = 0);

1111 11 SetMaxCount 0 4 1204 54 CInterpolatedVarArrayBase< float, false >::SetMaxCount 0 1 536 0
72
void CInterpolatedVarArrayBase< float, false >::SetMaxCount(int newmax);

1112 11 GetMaxCount 0 4 1204 54 CInterpolatedVarArrayBase< float, false >::GetMaxCount 0 1 537 0
71
int CInterpolatedVarArrayBase< float, false >::GetMaxCount(void) const;

1113 14 GetOldestEntry 0 4 1204 57 CInterpolatedVarArrayBase< float, false >::GetOldestEntry 0 1 538 36
// Get the time of the oldest entry.
70
float CInterpolatedVarArrayBase< float, false >::GetOldestEntry(void);

1114 12 SetDebugName 0 6 1204 55 CInterpolatedVarArrayBase< float, false >::SetDebugName 0 1 539 52
// set a debug name (if not provided by constructor)
88
virtual void CInterpolatedVarArrayBase< float, false >::SetDebugName(char const *pName);

1115 20 GetInterpolationInfo 0 4 1204 63 CInterpolatedVarArrayBase< float, false >::GetInterpolationInfo 0 0 0
128
bool CInterpolatedVarArrayBase< float, false >::GetInterpolationInfo(float currentTime, int *pNewer, int *pOlder, int *pOldest);

1116 16 CInterpolatedVar 0 4 1203 43 CInterpolatedVar< float >::CInterpolatedVar 0 1 515 0
72
CInterpolatedVar< float >::CInterpolatedVar(char const *pDebugName = 0);

1117 17 ~CInterpolatedVar 0 4 1203 44 CInterpolatedVar< float >::~CInterpolatedVar 0 0 0
51
CInterpolatedVar< float >::~CInterpolatedVar(void);

539
1 0 0 7 12 1206 551 0 0 0 
2 0 0 7 12 1206 551 0 0 1 6 param0 0 1207  
3 0 0 7 2 1211 0 0 0 1 4 name 1 1210  
4 0 0 7 2 1211 0 0 0 2 4 name 1 1210  7 uv_name 1 1210  
5 0 0 7 3 1211 0 0 0 0 
6 0 0 7 4 1211 0 0 0 0 
7 0 0 7 5 1211 0 0 0 0 
8 0 0 7 6 1211 0 0 0 0 
9 0 0 7 7 1211 0 0 0 0 
10 0 0 7 8 1211 0 0 0 0 
11 0 0 7 9 1211 0 0 0 0 
12 0 0 7 10 1211 0 0 0 0 
13 0 0 7 11 1211 0 0 0 0 
14 0 0 7 16 1214 574 0 0 1 4 copy 1 1212  
15 0 0 7 16 1214 574 0 0 1 4 name 1 1210  
16 0 0 7 17 1214 574 0 0 2 4 this 3 1214  4 copy 1 1212  
17 0 0 4 18 1215 0 0 0 3 4 this 3 1214  3 key 1 1210  5 value 1 1210  
18 0 0 6 19 1210 0 0 0 2 4 this 3 1212  3 key 1 1210  
19 0 0 6 20 1216 0 0 0 1 4 this 3 1212  
20 0 0 6 21 1210 0 0 0 2 4 this 3 1212  1 i 1 1216  
21 0 0 6 22 1210 0 0 0 2 4 this 3 1212  1 i 1 1216  
22 0 0 6 23 1123 0 0 0 2 4 this 3 1212  3 key 1 1210  
23 0 0 6 24 1218 0 0 0 2 4 this 3 1212  3 key 1 1210  
24 0 0 4 25 1215 0 0 0 2 4 this 3 1214  11 shader_name 1 1210  
25 0 0 6 26 1210 0 0 0 1 4 this 3 1212  
26 0 0 7 27 1220 0 0 0 1 4 this 3 1212  
27 0 0 6 28 1221 0 0 0 2 4 this 3 1212  3 key 1 1210  
28 0 0 6 29 1221 0 0 0 1 4 this 3 1212  
29 0 0 6 30 1221 0 0 0 1 4 this 3 1212  
30 0 0 6 31 1210 0 0 0 1 4 this 3 1212  
31 0 0 6 32 1210 0 0 0 1 4 this 3 1212  
32 0 0 6 33 1221 0 0 0 1 4 this 3 1212  
33 0 0 6 34 1221 0 0 0 1 4 this 3 1212  
34 0 0 6 35 1221 0 0 0 1 4 this 3 1212  
35 0 0 7 36 1212 0 0 0 1 4 file 1 1222  
36 0 0 7 37 1225 0 0 0 0 
37 0 0 7 41 1227 0 0 0 1 3 mat 1 1212  
38 0 0 7 42 1227 0 0 0 1 3 mat 1 1212  
39 0 0 7 43 1227 0 0 0 0 
40 0 0 6 44 1210 0 0 0 1 4 this 3 1228  
41 0 0 6 45 1221 0 0 0 1 4 this 3 1228  
42 0 0 7 46 1212 0 0 0 1 4 this 3 1228  
43 0 0 6 47 1123 0 0 0 0 
44 0 0 7 50 1225 0 0 0 0 
45 0 0 7 56 1232 588 0 0 1 6 param0 0 1230  
46 0 0 6 53 1123 0 0 0 1 4 this 3 1230  
47 0 0 6 54 1123 0 0 0 1 4 this 3 1230  
48 0 0 6 55 1123 0 0 0 1 4 this 3 1230  
49 0 0 7 64 1235 595 0 0 1 6 param0 0 1233  
50 0 0 6 59 1123 0 0 0 1 4 this 3 1233  
51 0 0 6 60 1123 0 0 0 1 4 this 3 1233  
52 0 0 6 61 1123 0 0 0 1 4 this 3 1233  
53 0 0 6 62 1123 0 0 0 1 4 this 3 1233  
54 0 0 6 63 1221 0 0 0 1 4 this 3 1233  
55 0 0 6 67 1123 0 0 0 1 4 this 3 1236  
56 0 0 4 68 1215 0 0 35 // number of textures to consider.. 2 4 this 3 1236  6 tcount 1 1123  
57 0 0 4 69 1215 0 0 21 // add textures 0 - n 3 4 this 3 1236  3 wid 1 1123  3 hit 1 1123  
58 0 0 6 70 1221 0 0 0 7 4 this 3 1236  3 wid 1 1123  3 hit 1 1123  15 forcePowerOfTwo 1 1221  14 onePixelBorder 1 1221  7 max_wid 1 1123  7 max_hit 1 1123  
59 0 0 4 71 1215 0 0 0 3 4 this 3 1236  3 wid 1 1123  3 hit 1 1123  
60 0 0 7 72 1232 588 0 74 // pack the textures, the return code is the amount of wasted/unused area. 3 4 this 3 1236  15 forcePowerOfTwo 1 1221  14 onePixelBorder 1 1221  
61 0 0 7 73 1235 595 0 58 // returns true if the texture has been rotated 90 degrees 2 4 this 3 1236  5 index 1 1123  
62 0 0 6 74 1236 0 0 0 0 
63 0 0 4 75 1215 0 0 0 1 2 tp 1 1236  
64 0 0 7 80 1237 609 0 0 0 
65 0 0 7 80 1237 609 0 0 1 6 param0 0 1238  
66 0 0 4 78 1215 0 0 0 0 
67 0 0 4 79 1215 0 0 0 0 
68 0 0 7 83 1240 617 0 0 0 
69 0 0 7 83 1240 617 0 0 1 6 param0 0 1241  
70 0 0 6 84 1221 0 0 0 1 4 this 3 1241  
71 0 0 7 85 1245 0 0 0 1 4 this 3 1241  
72 0 0 7 86 1248 0 0 0 1 4 this 3 1241  
73 0 0 6 87 1249 0 0 0 1 4 this 3 1241  
74 0 0 6 88 1249 0 0 0 1 4 this 3 1241  
75 0 0 6 89 1218 0 0 0 1 4 this 3 1241  
76 0 0 7 93 1250 0 0 0 0 
77 0 0 7 93 1250 0 0 0 1 6 param0 0 1251  
78 0 0 4 94 1215 0 0 0 2 4 this 3 1250  4 geom 1 1253  
79 0 0 4 95 1215 0 0 0 2 4 this 3 1250  4 geom 1 1253  
80 0 0 4 96 1215 0 0 0 1 4 this 3 1250  
81 0 0 7 98 1240 617 0 0 4 4 this 3 1250  5 start 1 1254  3 end 1 1254  4 mask 1 1258  
82 0 0 7 99 1240 617 0 0 5 4 this 3 1250  6 origin 1 1254  9 direction 1 1262  8 distance 1 1218  4 mask 1 1258  
83 0 0 4 100 1215 0 0 0 2 4 this 3 1250  7 quality 1 1123  
84 0 0 4 101 1215 0 0 0 1 4 this 3 1250  
85 0 0 7 102 1253 0 0 0 2 4 this 3 1250  7 geom_id 1 1249  
86 0 0 7 105 1225 0 0 0 0 
87 0 0 4 106 1215 0 0 0 2 4 this 3 1253  4 mask 1 1258  
88 0 0 4 106 1215 0 0 0 2 4 this 3 1253  4 mask 1 1249  
89 0 0 7 107 1266 0 0 0 1 4 this 3 1264  
90 0 0 6 108 1249 0 0 0 1 4 this 3 1264  
91 0 0 4 109 1215 0 0 0 2 4 this 3 1253  7 quality 1 1123  
92 0 0 4 110 1215 0 0 0 1 4 this 3 1253  
93 0 0 7 113 1267 637 0 0 1 4 name 1 1210  
94 0 0 7 112 1225 0 0 0 0 
95 0 0 4 114 1215 0 0 0 4 4 this 3 1267  2 p1 1 1254  2 p2 1 1254  2 p3 1 1254  
96 0 0 4 115 1215 0 0 0 3 4 this 3 1267  4 geom 1 1268  2 ts 1 1271  
97 0 0 7 119 1227 0 0 0 2 13 face_material 1 1210  9 face_type 1 1123  
98 0 0 7 120 1227 0 0 0 0 
99 0 0 7 121 1227 0 0 0 0 
100 0 0 6 122 1210 0 0 0 1 4 this 3 1274  
101 0 0 6 123 1123 0 0 0 1 4 this 3 1274  
102 0 0 6 124 1221 0 0 0 1 4 this 3 1274  
103 0 0 6 125 1123 0 0 0 0 
104 0 0 7 127 1225 0 0 0 0 
105 0 0 4 130 1215 0 0 0 2 4 this 3 1276  4 root 1 1277  
106 0 0 4 131 1215 0 0 0 2 4 this 3 1276  5 world 1 1280  
107 0 0 7 132 1280 0 0 0 1 4 this 3 1282  
108 0 0 6 133 1221 0 0 0 2 4 this 3 1282  6 rbnode 1 1284  
109 0 0 6 134 1221 0 0 0 3 4 this 3 1276  6 rbnode 1 1284  12 triangle_idx 1 1123  
110 0 0 6 135 1210 0 0 0 3 4 this 3 1276  6 rbnode 1 1284  12 triangle_idx 1 1123  
111 0 0 6 136 1123 0 0 0 3 4 this 3 1276  6 rbnode 1 1284  12 triangle_idx 1 1123  
112 0 0 6 137 1123 0 0 0 3 4 this 3 1276  6 rbnode 1 1284  12 triangle_idx 1 1123  
113 0 0 7 138 1286 0 0 0 2 4 this 3 1276  8 modelnum 1 1123  
114 0 0 6 139 1221 0 0 0 3 4 this 3 1276  4 file 1 1222  13 is_transition 1 1221  
115 0 0 4 140 1215 0 0 0 1 4 this 3 1276  
116 0 0 4 141 1215 0 0 0 3 4 this 3 1276  5 gamma 1 1287  10 overbright 1 1123  
117 0 0 6 142 1287 0 0 0 1 4 this 3 1282  
118 0 0 4 143 1215 0 0 0 2 4 this 3 1276  3 win 1 1288  
119 0 0 4 144 1215 0 0 0 2 4 this 3 1276  6 camera 1 1277  
120 0 0 4 145 1215 0 0 0 2 4 this 3 1276  6 render 1 1277  
121 0 0 4 146 1215 0 0 0 2 4 this 3 1276  5 shgen 1 1290  
122 0 0 4 147 1215 0 0 0 2 4 this 3 1276  4 flag 1 1221  
123 0 0 4 148 1215 0 0 0 2 4 this 3 1276  4 flag 1 1221  
124 0 0 4 149 1215 0 0 0 2 4 this 3 1276  4 type 1 1123  
125 0 0 4 150 1215 0 0 0 2 4 this 3 1276  4 flag 1 1221  
126 0 0 4 151 1215 0 0 0 2 4 this 3 1276  4 file 1 1222  
127 0 0 4 152 1215 0 0 0 2 4 this 3 1276  4 flag 1 1221  
128 0 0 6 153 1221 0 0 0 1 4 this 3 1282  
129 0 0 7 154 1291 0 0 0 1 4 this 3 1282  
130 0 0 4 155 1215 0 0 0 7 4 this 3 1276  14 decal_material 1 1210  11 decal_scale 1 1292  6 rotate 1 1218  5 start 1 1254  3 end 1 1254  11 decal_color 1 1296  
131 0 0 7 156 1301 0 0 0 2 4 this 3 1276  3 pos 1 1254  
132 0 0 4 157 1215 0 0 0 1 4 this 3 1276  
133 0 0 4 158 1215 0 0 0 2 4 this 3 1276  4 flag 1 1221  
134 0 0 4 159 1215 0 0 0 2 4 this 3 1276  3 dir 1 1262  
135 0 0 6 160 1123 0 0 0 2 4 this 3 1276  6 entnum 1 1123  
136 0 0 4 161 1215 0 0 0 4 4 this 3 1276  8 modelnum 1 1123  4 mins 1 1286  4 maxs 1 1286  
137 0 0 4 162 1215 0 0 0 2 4 this 3 1276  2 ai 1 1221  
138 0 0 6 163 1221 0 0 0 1 4 this 3 1282  
139 0 0 6 164 1221 0 0 0 3 4 this 3 1276  5 start 1 1254  3 end 1 1254  
140 0 0 7 165 1286 0 0 0 3 4 this 3 1276  5 start 1 1254  3 end 1 1254  
141 0 0 7 166 1291 0 0 0 2 4 this 3 1282  8 modelnum 1 1123  
142 0 0 6 167 1123 0 0 0 3 4 this 3 1276  3 pos 1 1254  8 headnode 1 1123  
143 0 0 6 167 1123 0 0 0 2 4 this 3 1276  2 np 1 1277  
144 0 0 6 168 1123 0 0 0 2 4 this 3 1276  3 pos 1 1254  
145 0 0 6 169 1221 0 0 0 3 4 this 3 1282  12 curr_cluster 1 1123  7 cluster 1 1123  
146 0 0 6 170 1221 0 0 0 3 4 this 3 1276  6 bounds 1 1302  19 required_leaf_flags 1 1249  
147 0 0 7 171 1302 0 0 0 3 4 this 3 1276  13 net_transform 1 1271  8 original 1 1302  
148 0 0 6 172 1221 0 0 0 1 4 this 3 1282  
149 0 0 6 173 1221 0 0 0 1 4 this 3 1282  
150 0 0 4 174 1215 0 0 0 2 4 this 3 1276  13 is_transition 1 1221  
151 0 0 7 175 1291 0 0 0 1 4 this 3 1282  
152 0 0 4 176 1215 0 0 0 2 4 this 3 1276  4 leaf 1 1123  
153 0 0 6 177 1123 0 0 0 1 4 this 3 1282  
154 0 0 6 178 1123 0 0 0 1 4 this 3 1282  
155 0 0 7 179 1286 0 0 0 2 4 this 3 1282  4 leaf 1 1123  
156 0 0 7 180 1307 0 0 0 3 4 this 3 1276  7 facenum 1 1123  5 point 1 1262  
157 0 0 4 181 1215 0 0 0 1 3 ptr 1 1276  
158 0 0 6 182 1276 0 0 0 0 
159 0 0 6 187 1216 0 0 0 1 4 this 3 1308  
160 0 0 7 188 1286 0 0 0 2 4 this 3 1308  1 n 1 1123  
161 0 0 6 189 1216 0 0 0 1 4 this 3 1308  
162 0 0 7 190 1312 0 0 0 2 4 this 3 1308  1 n 1 1123  
163 0 0 7 191 1225 0 0 0 0 
164 0 0 7 195 1313 716 0 0 0 
165 0 0 7 195 1313 716 0 0 1 6 param0 0 1314  
166 0 0 7 194 1225 0 0 0 0 
167 0 0 6 196 1276 0 0 0 1 4 this 3 1314  
168 0 0 6 197 1210 0 0 0 2 4 this 3 1314  3 key 1 1210  
169 0 0 7 198 1245 0 0 0 2 4 this 3 1314  3 key 1 1210  
170 0 0 7 199 1317 0 0 0 3 4 this 3 1314  3 key 1 1210  5 scale 1 1221  
171 0 0 6 200 1210 0 0 0 1 4 this 3 1314  
172 0 0 6 201 1210 0 0 0 1 4 this 3 1314  
173 0 0 6 202 1123 0 0 0 1 4 this 3 1314  
174 0 0 7 206 1318 721 0 0 0 
175 0 0 7 206 1318 721 0 0 1 6 param0 0 1319  
176 0 0 7 205 1225 0 0 0 0 
177 0 0 7 207 1286 0 0 0 1 4 this 3 1319  
178 0 0 7 208 1245 0 0 0 1 4 this 3 1319  
179 0 0 7 212 1321 727 0 0 0 
180 0 0 7 212 1321 727 0 0 1 6 param0 0 1322  
181 0 0 7 211 1225 0 0 0 0 
182 0 0 7 213 1324 706 0 0 1 4 this 3 1322  
183 0 0 6 214 1221 0 0 0 2 4 this 3 1322  3 pos 1 1254  
184 0 0 4 215 1215 0 0 0 3 4 this 3 1321  4 mins 1 1286  4 maxs 1 1286  
185 0 0 7 219 1325 732 0 0 0 
186 0 0 7 219 1325 732 0 0 1 6 param0 0 1326  
187 0 0 7 218 1225 0 0 0 0 
188 0 0 7 220 1291 0 0 0 1 4 this 3 1326  
189 0 0 4 221 1215 0 0 0 3 4 this 3 1325  4 mins 1 1286  4 maxs 1 1286  
190 0 0 7 224 1328 739 0 0 0 
191 0 0 4 225 1215 0 0 0 3 4 this 3 1328  3 key 1 1210  5 value 1 1210  
192 0 0 4 226 1215 0 0 0 1 4 this 3 1328  
193 0 0 4 227 1215 0 0 0 2 4 this 3 1328  3 inp 1 1329  
194 0 0 4 228 1215 0 0 0 2 4 this 3 1328  4 flag 1 1123  
195 0 0 6 229 1216 0 0 0 1 4 this 3 1332  
196 0 0 4 237 1215 0 0 0 4 4 this 3 1334  9 vert_file 1 1222  10 pixel_file 1 1222  9 geom_file 1 1222  
197 0 0 7 238 1225 0 0 0 0 
198 0 0 7 232 1335 0 0 0 1 4 this 3 1334  
199 0 0 6 235 1336 0 0 0 1 4 this 3 1334  
200 0 0 7 242 1339 749 0 0 1 6 param0 0 1337  
201 0 0 7 241 1301 0 0 0 1 4 this 3 1337  
202 0 0 7 249 1290 775 0 0 1 6 param0 0 1340  
203 0 0 7 249 1290 775 0 0 4 6 output 1 1342  3 gsg 1 1344  6 camera 1 1277  6 render 1 1277  
204 0 0 4 250 1215 0 0 0 2 4 this 3 1290  2 np 1 1277  
205 0 0 4 251 1215 0 0 0 2 4 this 3 1290  4 spec 1 1334  
206 0 0 7 252 1245 0 0 0 1 4 this 3 1340  
207 0 0 6 253 1221 0 0 0 1 4 this 3 1340  
208 0 0 7 254 1301 0 0 0 1 4 this 3 1340  
209 0 0 6 255 1346 0 0 0 1 4 this 3 1340  
210 0 0 7 256 1291 0 0 0 1 4 this 3 1340  
211 0 0 7 257 1291 0 0 0 1 4 this 3 1340  
212 0 0 4 258 1215 0 0 0 2 4 this 3 1290  7 quality 1 1123  
213 0 0 6 259 1123 0 0 0 1 4 this 3 1340  
214 0 0 4 260 1215 0 0 0 2 4 this 3 1290  3 fog 1 1348  
215 0 0 4 261 1215 0 0 0 1 4 this 3 1290  
216 0 0 7 262 1348 0 0 0 1 4 this 3 1340  
217 0 0 7 263 1352 0 0 0 1 4 this 3 1340  
218 0 0 4 264 1215 0 0 0 2 4 this 3 1290  8 exposure 1 1218  
219 0 0 7 265 1355 0 0 0 1 4 this 3 1340  
220 0 0 7 266 1344 0 0 0 1 4 this 3 1340  
221 0 0 7 267 1342 0 0 0 1 4 this 3 1340  
222 0 0 7 268 1339 749 0 0 1 4 this 3 1340  
223 0 0 4 269 1215 0 0 0 1 3 tex 1 1301  
224 0 0 7 270 1301 0 0 0 0 
225 0 0 7 271 1360 0 0 0 2 4 spec 1 1358  5 perms 1 1332  
226 0 0 4 272 1215 0 0 0 1 4 this 3 1290  
227 0 0 7 273 1225 0 0 0 0 
228 0 0 7 278 1363 782 0 0 1 6 param0 0 1361  
229 0 0 7 278 1363 782 0 0 2 4 trav 1 1364  6 loader 1 1276  
230 0 0 7 277 1225 0 0 0 0 
231 0 0 6 279 1221 0 0 0 2 4 this 3 1361  4 bits 1 1249  
232 0 0 6 280 1221 0 0 0 1 4 this 3 1361  
233 0 0 6 281 1221 0 0 0 1 4 this 3 1361  
234 0 0 6 282 1249 0 0 106 /**
	 * Returns the flags that must be set on a leaf for it to be
	 * rendered by the current camera.
	 */ 1 4 this 3 1361  
235 0 0 7 286 1367 785 0 0 1 6 param0 0 1365  
236 0 0 7 286 1367 785 0 0 2 4 name 1 1210  6 loader 1 1276  
237 0 0 7 285 1225 0 0 0 0 
238 0 0 7 290 1370 788 0 0 1 6 param0 0 1368  
239 0 0 7 290 1370 788 0 0 1 4 name 1 1210  
240 0 0 7 289 1225 0 0 0 0 
241 0 0 7 295 1373 791 0 0 1 6 param0 0 1371  
242 0 0 7 295 1373 791 0 0 1 4 name 1 1210  
243 0 0 7 294 1225 0 0 0 0 
244 0 0 7 300 1376 794 0 0 1 6 param0 0 1374  
245 0 0 7 300 1376 794 0 0 1 4 name 1 1210  
246 0 0 7 299 1225 0 0 0 0 
247 0 0 7 303 1377 796 0 0 0 
248 0 0 7 306 1378 798 0 0 0 
249 0 0 7 309 1379 800 0 0 0 
250 0 0 7 312 1380 802 0 0 0 
251 0 0 7 315 1381 804 0 0 0 
252 0 0 7 318 1382 806 0 0 0 
253 0 0 7 322 1384 0 0 0 0 
254 0 0 7 323 1225 0 0 0 0 
255 0 0 7 326 1387 828 0 0 1 6 param0 0 1385  
256 0 0 7 326 1387 828 0 0 3 3 mgr 1 1388  15 listener_target 1 1277  4 root 1 1277  
257 0 0 4 327 1215 0 0 0 2 4 this 3 1387  6 factor 1 1287  
258 0 0 6 328 1287 0 0 0 1 4 this 3 1385  
259 0 0 4 329 1215 0 0 0 2 4 this 3 1387  6 factor 1 1287  
260 0 0 6 330 1287 0 0 0 1 4 this 3 1385  
261 0 0 4 331 1215 0 0 0 2 4 this 3 1387  6 factor 1 1287  
262 0 0 6 332 1287 0 0 0 1 4 this 3 1385  
263 0 0 4 333 1215 0 0 0 3 4 this 3 1387  5 sound 1 1390  4 dist 1 1287  
264 0 0 6 334 1287 0 0 0 2 4 this 3 1385  5 sound 1 1390  
265 0 0 4 335 1215 0 0 0 3 4 this 3 1387  5 sound 1 1390  4 dist 1 1287  
266 0 0 6 336 1287 0 0 0 2 4 this 3 1385  5 sound 1 1390  
267 0 0 4 337 1215 0 0 0 2 4 this 3 1387  8 listener 1 1277  
268 0 0 4 338 1215 0 0 0 1 4 this 3 1387  
269 0 0 7 339 1390 0 0 0 2 4 this 3 1387  4 path 1 1210  
270 0 0 4 340 1215 0 0 0 3 4 this 3 1387  5 sound 1 1390  6 object 1 1277  
271 0 0 4 341 1215 0 0 0 2 4 this 3 1387  5 sound 1 1390  
272 0 0 4 342 1215 0 0 0 1 4 this 3 1387  
273 0 0 4 343 1215 0 0 0 1 4 this 3 1387  
274 0 0 7 348 1392 832 0 0 0 
275 0 0 7 348 1392 832 0 0 1 6 param0 0 1393  
276 0 0 4 346 1215 0 0 0 4 1 x 1 1218  1 y 1 1218  4 left 1 1245  5 right 1 1245  
277 0 0 7 347 1248 0 0 0 3 4 node 1 1277  5 point 1 1262  4 eyes 1 1277  
278 0 0 7 351 1395 834 0 0 0 
279 0 0 7 356 1398 837 0 0 2 4 copy 1 1396  10 query_size 1 1218  
280 0 0 7 356 1398 837 0 0 1 6 param0 0 1399  
281 0 0 7 356 1398 837 0 0 2 4 name 1 1210  10 query_size 1 1218  
282 0 0 7 355 1225 0 0 0 0 
283 0 0 7 363 1225 0 0 0 0 
284 0 0 7 364 1301 0 0 0 1 4 this 3 1401  
285 0 0 4 365 1215 0 0 0 2 4 this 3 1401  4 pass 1 1402  
286 0 0 4 366 1215 0 0 0 2 4 this 3 1401  4 pass 1 1402  
287 0 0 7 367 1402 880 0 0 2 4 this 3 1401  4 name 1 1210  
288 0 0 4 368 1215 0 0 0 1 4 this 3 1401  
289 0 0 4 369 1215 0 0 0 1 4 this 3 1401  
290 0 0 4 370 1215 0 0 0 2 4 this 3 1401  3 win 1 1342  
291 0 0 4 371 1215 0 0 0 1 4 this 3 1401  
292 0 0 7 359 1335 0 0 0 1 4 this 3 1401  
293 0 0 6 361 1336 0 0 0 1 4 this 3 1401  
294 0 0 7 380 1402 880 0 0 8 2 pp 1 1403  4 name 1 1210  19 texture_output_bits 1 1123  7 fbprops 1 1404  10 force_size 1 1221  11 forced_size 1 1407  8 div_size 1 1221  3 div 1 1123  
295 0 0 7 380 1402 880 0 0 1 6 param0 0 1410  
296 0 0 7 379 1225 0 0 0 0 
297 0 0 7 381 1291 0 0 0 1 4 this 3 1410  
298 0 0 7 382 1412 0 0 0 1 4 this 3 1410  
299 0 0 7 383 1291 0 0 0 1 4 this 3 1410  
300 0 0 6 384 1221 0 0 0 2 4 this 3 1410  4 bits 1 1123  
301 0 0 4 385 1215 0 0 0 3 4 this 3 1402  8 div_size 1 1221  3 div 1 1123  
302 0 0 4 386 1215 0 0 0 3 4 this 3 1402  10 force_size 1 1221  11 forced_size 1 1407  
303 0 0 4 387 1215 0 0 0 2 4 this 3 1402  7 fbprops 1 1404  
304 0 0 4 388 1215 0 0 0 2 4 this 3 1402  4 bits 1 1123  
305 0 0 7 389 1412 0 0 0 2 4 this 3 1402  4 size 1 1407  
306 0 0 7 390 1301 0 0 0 2 4 this 3 1402  3 bit 1 1123  
307 0 0 7 391 1301 0 0 0 1 4 this 3 1402  
308 0 0 7 392 1301 0 0 0 1 4 this 3 1402  
309 0 0 6 393 1221 0 0 0 1 4 this 3 1402  
310 0 0 4 394 1215 0 0 0 1 4 this 3 1402  
311 0 0 4 395 1215 0 0 0 1 4 this 3 1402  
312 0 0 4 396 1215 0 0 0 1 4 this 3 1402  
313 0 0 4 397 1215 0 0 0 1 4 this 3 1402  
314 0 0 4 398 1215 0 0 0 1 4 this 3 1402  
315 0 0 4 399 1215 0 0 0 1 4 this 3 1402  
316 0 0 4 400 1215 0 0 0 2 4 this 3 1402  6 output 1 1342  
317 0 0 4 401 1215 0 0 0 1 4 this 3 1402  
318 0 0 7 402 1413 0 0 0 0 
319 0 0 7 375 1335 0 0 0 1 4 this 3 1402  
320 0 0 6 377 1336 0 0 0 1 4 this 3 1402  
321 0 0 7 405 1414 884 0 0 3 2 pp 1 1403  19 output_texture_bits 1 1123  7 auxbits 1 1123  
322 0 0 7 405 1414 884 0 0 1 6 param0 0 1415  
323 0 0 4 406 1215 0 0 0 2 4 this 3 1414  1 i 1 1123  
324 0 0 4 407 1215 0 0 0 2 4 this 3 1414  5 state 1 1417  
325 0 0 7 410 1403 907 0 0 0 
326 0 0 7 410 1403 907 0 0 1 6 param0 0 1420  
327 0 0 4 411 1215 0 0 0 2 4 this 3 1403  6 output 1 1342  
328 0 0 4 412 1215 0 0 0 2 4 this 3 1403  6 camera 1 1277  
329 0 0 4 413 1215 0 0 0 2 4 this 3 1403  6 camera 1 1277  
330 0 0 4 414 1215 0 0 0 2 4 this 3 1403  6 effect 1 1401  
331 0 0 4 415 1215 0 0 0 2 4 this 3 1403  6 effect 1 1401  
332 0 0 7 416 1401 851 0 0 2 4 this 3 1403  4 name 1 1210  
333 0 0 7 417 1301 0 0 0 1 4 this 3 1420  
334 0 0 7 418 1301 0 0 0 1 4 this 3 1420  
335 0 0 7 419 1414 884 0 0 1 4 this 3 1420  
336 0 0 7 420 1342 0 0 0 1 4 this 3 1420  
337 0 0 7 421 1291 0 0 0 2 4 this 3 1420  1 n 1 1123  
338 0 0 6 422 1123 0 0 0 1 4 this 3 1403  
339 0 0 7 423 1423 0 0 0 1 4 this 3 1420  
340 0 0 6 424 1221 0 0 0 1 4 this 3 1420  
341 0 0 4 425 1215 0 0 0 2 4 this 3 1403  4 bits 1 1123  
342 0 0 4 426 1215 0 0 0 3 4 this 3 1403  1 n 1 1123  6 region 1 1424  
343 0 0 4 427 1215 0 0 0 2 4 this 3 1403  6 region 1 1424  
344 0 0 4 428 1215 0 0 0 3 4 this 3 1403  1 n 1 1123  6 region 1 1424  
345 0 0 4 429 1215 0 0 0 1 4 this 3 1403  
346 0 0 4 430 1215 0 0 0 1 4 this 3 1403  
347 0 0 4 431 1215 0 0 0 1 4 this 3 1403  
348 0 0 7 435 1428 912 0 0 1 6 param0 0 1426  
349 0 0 7 435 1428 912 0 0 1 2 pp 1 1403  
350 0 0 7 434 1225 0 0 0 0 
351 0 0 4 436 1215 0 0 0 2 4 this 3 1428  6 output 1 1355  
352 0 0 6 437 1218 0 0 56 /**
	 * Returns the calculated exposure adjustment.
	 */ 1 4 this 3 1426  
353 0 0 7 440 1429 915 0 0 1 2 pp 1 1403  
354 0 0 7 441 1428 912 0 0 1 4 this 3 1430  
355 0 0 7 445 1432 918 0 0 1 2 pp 1 1403  
356 0 0 7 444 1225 0 0 0 0 
357 0 0 7 448 1225 0 0 0 0 
358 0 0 7 449 1384 0 0 0 1 6 origin 1 1262  
359 0 0 7 450 1245 0 0 0 1 4 this 3 1433  
360 0 0 7 454 1435 925 0 0 1 2 pp 1 1403  
361 0 0 7 453 1225 0 0 0 0 
362 0 0 6 457 1123 0 0 0 0 
363 0 0 7 459 1225 0 0 0 0 
364 0 0 7 460 1227 0 0 0 1 13 bloom_enabled 1 1221  
365 0 0 6 461 1221 0 0 0 1 4 this 3 1436  
366 0 0 7 465 1438 959 0 0 12 6 loader 1 1276  5 world 1 1280  6 render 1 1277  6 parent 1 1277  11 walk_height 1 1218  13 crouch_height 1 1218  11 step_height 1 1218  6 radius 1 1218  7 gravity 1 1218  9 wall_mask 1 1258  10 floor_mask 1 1258  10 event_mask 1 1258  
367 0 0 7 465 1438 959 0 0 1 6 param0 0 1439  
368 0 0 4 466 1215 0 0 0 3 4 this 3 1438  4 degs 1 1218  12 affect_speed 1 1221  
369 0 0 4 467 1215 0 0 0 2 4 this 3 1438  4 mask 1 1258  
370 0 0 4 468 1215 0 0 0 2 4 this 3 1438  8 callback 1 1441  
371 0 0 4 469 1215 0 0 0 2 4 this 3 1438  8 callback 1 1441  
372 0 0 4 470 1215 0 0 0 2 4 this 3 1438  7 limiter 1 1221  
373 0 0 4 471 1215 0 0 0 2 4 this 3 1438  3 mat 1 1210  
374 0 0 4 472 1215 0 0 0 2 4 this 3 1438  4 flag 1 1221  
375 0 0 6 473 1210 0 0 0 1 4 this 3 1439  
376 0 0 7 474 1291 0 0 0 1 4 this 3 1439  
377 0 0 7 475 1291 0 0 0 1 4 this 3 1439  
378 0 0 7 476 1291 0 0 0 1 4 this 3 1439  
379 0 0 7 477 1291 0 0 0 1 4 this 3 1439  
380 0 0 7 478 1291 0 0 0 1 4 this 3 1439  
381 0 0 4 479 1215 0 0 0 2 4 this 3 1438  4 grav 1 1218  
382 0 0 4 480 1215 0 0 0 2 4 this 3 1438  5 state 1 1123  
383 0 0 6 481 1123 0 0 0 1 4 this 3 1439  
384 0 0 4 482 1215 0 0 0 2 4 this 3 1438  8 callback 1 1441  
385 0 0 4 483 1215 0 0 0 2 4 this 3 1438  8 callback 1 1441  
386 0 0 4 484 1215 0 0 0 1 4 this 3 1438  
387 0 0 4 485 1215 0 0 0 1 4 this 3 1438  
388 0 0 6 486 1221 0 0 0 1 4 this 3 1438  
389 0 0 4 487 1215 0 0 0 2 4 this 3 1438  10 max_height 1 1218  
390 0 0 4 488 1215 0 0 0 2 4 this 3 1438  5 omega 1 1218  
391 0 0 4 489 1215 0 0 0 2 4 this 3 1438  8 movement 1 1262  
392 0 0 4 490 1215 0 0 0 1 4 this 3 1438  
393 0 0 4 491 1215 0 0 0 2 4 this 3 1438  9 frametime 1 1218  
394 0 0 4 492 1215 0 0 0 1 4 this 3 1438  
395 0 0 6 495 1441 0 0 0 2 4 this 3 1444  9 classname 1 1210  
396 0 0 6 496 1123 0 0 2 // 1 4 this 3 1445  
397 0 0 6 497 1441 0 0 2 // 2 4 this 3 1445  1 n 1 1123  
398 0 0 7 498 1313 716 0 2 // 2 4 this 3 1445  6 entnum 1 1447  
399 0 0 4 499 1215 0 0 2 // 3 4 this 3 1444  4 list 1 1441  6 entnum 1 1447  
400 0 0 4 500 1215 0 0 2 // 3 4 this 3 1444  5 entum 1 1123  5 pyent 1 1441  
401 0 0 6 501 1441 0 0 2 // 2 4 this 3 1445  10 targetname 1 1210  
402 0 0 4 502 1215 0 0 0 1 4 this 3 1444  
403 0 0 4 503 1215 0 0 0 2 4 this 3 1444  3 ent 1 1441  
404 0 0 7 506 1448 973 0 0 0 
405 0 0 4 507 1215 0 0 0 3 4 this 3 1448  7 entname 1 1210  4 type 1 1449  
406 0 0 6 508 1441 0 0 0 3 4 this 3 1448  5 pyent 1 1441  9 classname 1 1210  
407 0 0 7 511 1452 982 0 0 0 
408 0 0 4 512 1215 0 0 0 2 4 this 3 1452  5 pyent 1 1441  
409 0 0 4 513 1215 0 0 0 2 4 this 3 1452  5 pyent 1 1441  
410 0 0 4 514 1215 0 0 0 3 4 this 3 1452  1 n 1 1123  9 preserved 1 1221  
411 0 0 4 515 1215 0 0 0 2 4 this 3 1452  10 dispatcher 1 1441  
412 0 0 4 516 1215 0 0 0 3 4 this 3 1452  4 name 1 1210  4 type 1 1449  
413 0 0 4 517 1215 0 0 0 4 4 this 3 1452  4 name 1 1210  6 origin 1 1262  6 angles 1 1262  
414 0 0 4 518 1215 0 0 0 1 4 this 3 1452  
415 0 0 7 522 1453 984 0 0 0 
416 0 0 7 522 1453 984 0 0 1 6 param0 0 1454  
417 0 0 4 524 1215 0 0 0 1 5 state 1 1221  
418 0 0 6 525 1221 0 0 0 0 
419 0 0 6 526 1221 0 0 0 0 
420 0 0 4 527 1215 0 0 0 1 9 timestamp 1 1218  
421 0 0 6 528 1218 0 0 0 0 
422 0 0 7 562 1456 1021 0 0 1 10 pDebugName 1 1210  
423 0 0 7 532 1457 0 0 0 1 10 pDebugName 1 1210  
424 0 0 4 533 1215 0 0 0 3 4 this 3 1457  6 pValue 1 1458  4 type 1 1123  
425 0 0 4 534 1215 0 0 0 2 4 this 3 1457  7 seconds 1 1218  
426 0 0 4 535 1215 0 0 0 1 4 this 3 1457  
427 0 0 6 536 1221 0 0 0 3 4 this 3 1457  10 changetime 1 1218  25 bUpdateLastNetworkedValue 1 1221  
428 0 0 6 536 1221 0 0 92 // Just like the IInterpolatedVar functions, but you can specify an
// interpolation amount. 4 4 this 3 1457  10 changetime 1 1218  20 interpolation_amount 1 1218  25 bUpdateLastNetworkedValue 1 1221  
429 0 0 4 537 1215 0 0 0 1 4 this 3 1457  
430 0 0 6 538 1123 0 0 0 2 4 this 3 1457  11 currentTime 1 1218  
431 0 0 6 538 1123 0 0 0 3 4 this 3 1457  11 currentTime 1 1218  20 interpolation_amount 1 1218  
432 0 0 6 539 1123 0 0 0 1 4 this 3 1459  
433 0 0 4 540 1215 0 0 0 1 4 this 3 1457  
434 0 0 4 541 1215 0 0 0 2 4 this 3 1457  6 pInSrc 1 1461  
435 0 0 6 542 1210 0 0 0 1 4 this 3 1457  
436 0 0 4 543 1215 0 0 0 3 4 this 3 1457  4 pOut 1 1458  11 currentTime 1 1218  
437 0 0 4 544 1215 0 0 0 3 4 this 3 1457  4 pOut 1 1458  11 currentTime 1 1218  
438 0 0 4 545 1215 0 0 0 3 4 this 3 1457  4 pOut 1 1458  11 currentTime 1 1218  
439 0 0 4 546 1215 0 0 0 1 4 this 3 1457  
440 0 0 4 547 1215 0 0 0 4 4 this 3 1457  10 changeTime 1 1218  6 values 1 1462  11 bFlushNewer 1 1221  
441 0 0 6 548 1462 0 0 0 2 4 this 3 1459  11 iArrayIndex 1 1123  
442 0 0 6 549 1462 0 0 0 2 4 this 3 1459  11 iArrayIndex 1 1123  
443 0 0 6 550 1218 0 0 89 // Returns the time difference betweem the most recent sample and its previous
// sample. 1 4 this 3 1459  
444 0 0 6 551 1221 0 0 0 2 4 this 3 1457  1 i 1 1123  
445 0 0 6 553 1123 0 0 0 1 4 this 3 1457  
446 0 0 6 554 1123 0 0 0 2 4 this 3 1457  1 i 1 1123  
447 0 0 4 555 1215 0 0 0 3 4 this 3 1457  4 item 1 1123  5 value 1 1458  
448 0 0 4 556 1215 0 0 0 3 4 this 3 1457  7 looping 1 1221  11 iArrayIndex 1 1123  
449 0 0 4 557 1215 0 0 0 2 4 this 3 1457  6 newmax 1 1123  
450 0 0 6 558 1123 0 0 0 1 4 this 3 1459  
451 0 0 6 559 1218 0 0 36 // Get the time of the oldest entry. 1 4 this 3 1457  
452 0 0 4 560 1215 0 0 52 // set a debug name (if not provided by constructor) 2 4 this 3 1457  5 pName 1 1210  
453 0 0 7 597 1464 1053 0 0 1 10 pDebugName 1 1210  
454 0 0 7 567 1465 0 0 0 1 10 pDebugName 1 1210  
455 0 0 4 568 1215 0 0 0 3 4 this 3 1465  6 pValue 1 1466  4 type 1 1123  
456 0 0 4 569 1215 0 0 0 2 4 this 3 1465  7 seconds 1 1218  
457 0 0 4 570 1215 0 0 0 1 4 this 3 1465  
458 0 0 6 571 1221 0 0 0 3 4 this 3 1465  10 changetime 1 1218  25 bUpdateLastNetworkedValue 1 1221  
459 0 0 6 571 1221 0 0 92 // Just like the IInterpolatedVar functions, but you can specify an
// interpolation amount. 4 4 this 3 1465  10 changetime 1 1218  20 interpolation_amount 1 1218  25 bUpdateLastNetworkedValue 1 1221  
460 0 0 4 572 1215 0 0 0 1 4 this 3 1465  
461 0 0 6 573 1123 0 0 0 2 4 this 3 1465  11 currentTime 1 1218  
462 0 0 6 573 1123 0 0 0 3 4 this 3 1465  11 currentTime 1 1218  20 interpolation_amount 1 1218  
463 0 0 6 574 1123 0 0 0 1 4 this 3 1467  
464 0 0 4 575 1215 0 0 0 1 4 this 3 1465  
465 0 0 4 576 1215 0 0 0 2 4 this 3 1465  6 pInSrc 1 1461  
466 0 0 6 577 1210 0 0 0 1 4 this 3 1465  
467 0 0 4 578 1215 0 0 0 3 4 this 3 1465  4 pOut 1 1466  11 currentTime 1 1218  
468 0 0 4 579 1215 0 0 0 3 4 this 3 1465  4 pOut 1 1466  11 currentTime 1 1218  
469 0 0 4 580 1215 0 0 0 3 4 this 3 1465  4 pOut 1 1466  11 currentTime 1 1218  
470 0 0 4 581 1215 0 0 0 1 4 this 3 1465  
471 0 0 4 582 1215 0 0 0 4 4 this 3 1465  10 changeTime 1 1218  6 values 1 1469  11 bFlushNewer 1 1221  
472 0 0 6 583 1469 0 0 0 2 4 this 3 1467  11 iArrayIndex 1 1123  
473 0 0 6 584 1469 0 0 0 2 4 this 3 1467  11 iArrayIndex 1 1123  
474 0 0 6 585 1218 0 0 89 // Returns the time difference betweem the most recent sample and its previous
// sample. 1 4 this 3 1467  
475 0 0 6 586 1221 0 0 0 2 4 this 3 1465  1 i 1 1123  
476 0 0 6 588 1123 0 0 0 1 4 this 3 1465  
477 0 0 6 589 1123 0 0 0 2 4 this 3 1465  1 i 1 1123  
478 0 0 4 590 1215 0 0 0 3 4 this 3 1465  4 item 1 1123  5 value 1 1466  
479 0 0 4 591 1215 0 0 0 3 4 this 3 1465  7 looping 1 1221  11 iArrayIndex 1 1123  
480 0 0 4 592 1215 0 0 0 2 4 this 3 1465  6 newmax 1 1123  
481 0 0 6 593 1123 0 0 0 1 4 this 3 1467  
482 0 0 6 594 1218 0 0 36 // Get the time of the oldest entry. 1 4 this 3 1465  
483 0 0 4 595 1215 0 0 52 // set a debug name (if not provided by constructor) 2 4 this 3 1465  5 pName 1 1210  
484 0 0 7 632 1471 1085 0 0 1 10 pDebugName 1 1210  
485 0 0 7 602 1472 0 0 0 1 10 pDebugName 1 1210  
486 0 0 4 603 1215 0 0 0 3 4 this 3 1472  6 pValue 1 1473  4 type 1 1123  
487 0 0 4 604 1215 0 0 0 2 4 this 3 1472  7 seconds 1 1218  
488 0 0 4 605 1215 0 0 0 1 4 this 3 1472  
489 0 0 6 606 1221 0 0 0 3 4 this 3 1472  10 changetime 1 1218  25 bUpdateLastNetworkedValue 1 1221  
490 0 0 6 606 1221 0 0 92 // Just like the IInterpolatedVar functions, but you can specify an
// interpolation amount. 4 4 this 3 1472  10 changetime 1 1218  20 interpolation_amount 1 1218  25 bUpdateLastNetworkedValue 1 1221  
491 0 0 4 607 1215 0 0 0 1 4 this 3 1472  
492 0 0 6 608 1123 0 0 0 2 4 this 3 1472  11 currentTime 1 1218  
493 0 0 6 608 1123 0 0 0 3 4 this 3 1472  11 currentTime 1 1218  20 interpolation_amount 1 1218  
494 0 0 6 609 1123 0 0 0 1 4 this 3 1475  
495 0 0 4 610 1215 0 0 0 1 4 this 3 1472  
496 0 0 4 611 1215 0 0 0 2 4 this 3 1472  6 pInSrc 1 1461  
497 0 0 6 612 1210 0 0 0 1 4 this 3 1472  
498 0 0 4 613 1215 0 0 0 3 4 this 3 1472  4 pOut 1 1473  11 currentTime 1 1218  
499 0 0 4 614 1215 0 0 0 3 4 this 3 1472  4 pOut 1 1473  11 currentTime 1 1218  
500 0 0 4 615 1215 0 0 0 3 4 this 3 1472  4 pOut 1 1473  11 currentTime 1 1218  
501 0 0 4 616 1215 0 0 0 1 4 this 3 1472  
502 0 0 4 617 1215 0 0 0 4 4 this 3 1472  10 changeTime 1 1218  6 values 1 1477  11 bFlushNewer 1 1221  
503 0 0 6 618 1477 0 0 0 2 4 this 3 1475  11 iArrayIndex 1 1123  
504 0 0 6 619 1477 0 0 0 2 4 this 3 1475  11 iArrayIndex 1 1123  
505 0 0 6 620 1218 0 0 89 // Returns the time difference betweem the most recent sample and its previous
// sample. 1 4 this 3 1475  
506 0 0 6 621 1221 0 0 0 2 4 this 3 1472  1 i 1 1123  
507 0 0 6 623 1123 0 0 0 1 4 this 3 1472  
508 0 0 6 624 1123 0 0 0 2 4 this 3 1472  1 i 1 1123  
509 0 0 4 625 1215 0 0 0 3 4 this 3 1472  4 item 1 1123  5 value 1 1473  
510 0 0 4 626 1215 0 0 0 3 4 this 3 1472  7 looping 1 1221  11 iArrayIndex 1 1123  
511 0 0 4 627 1215 0 0 0 2 4 this 3 1472  6 newmax 1 1123  
512 0 0 6 628 1123 0 0 0 1 4 this 3 1475  
513 0 0 6 629 1218 0 0 36 // Get the time of the oldest entry. 1 4 this 3 1472  
514 0 0 4 630 1215 0 0 52 // set a debug name (if not provided by constructor) 2 4 this 3 1472  5 pName 1 1210  
515 0 0 7 667 1479 1117 0 0 1 10 pDebugName 1 1210  
516 0 0 7 637 1480 0 0 0 1 10 pDebugName 1 1210  
517 0 0 4 639 1215 0 0 0 2 4 this 3 1480  7 seconds 1 1218  
518 0 0 4 640 1215 0 0 0 1 4 this 3 1480  
519 0 0 6 641 1221 0 0 0 3 4 this 3 1480  10 changetime 1 1218  25 bUpdateLastNetworkedValue 1 1221  
520 0 0 6 641 1221 0 0 92 // Just like the IInterpolatedVar functions, but you can specify an
// interpolation amount. 4 4 this 3 1480  10 changetime 1 1218  20 interpolation_amount 1 1218  25 bUpdateLastNetworkedValue 1 1221  
521 0 0 4 642 1215 0 0 0 1 4 this 3 1480  
522 0 0 6 643 1123 0 0 0 2 4 this 3 1480  11 currentTime 1 1218  
523 0 0 6 643 1123 0 0 0 3 4 this 3 1480  11 currentTime 1 1218  20 interpolation_amount 1 1218  
524 0 0 6 644 1123 0 0 0 1 4 this 3 1481  
525 0 0 4 645 1215 0 0 0 1 4 this 3 1480  
526 0 0 4 646 1215 0 0 0 2 4 this 3 1480  6 pInSrc 1 1461  
527 0 0 6 647 1210 0 0 0 1 4 this 3 1480  
528 0 0 4 651 1215 0 0 0 1 4 this 3 1480  
529 0 0 6 653 1218 0 0 0 2 4 this 3 1481  11 iArrayIndex 1 1123  
530 0 0 6 654 1218 0 0 0 2 4 this 3 1481  11 iArrayIndex 1 1123  
531 0 0 6 655 1218 0 0 89 // Returns the time difference betweem the most recent sample and its previous
// sample. 1 4 this 3 1481  
532 0 0 6 656 1221 0 0 0 2 4 this 3 1480  1 i 1 1123  
533 0 0 6 658 1123 0 0 0 1 4 this 3 1480  
534 0 0 6 659 1123 0 0 0 2 4 this 3 1480  1 i 1 1123  
535 0 0 4 661 1215 0 0 0 3 4 this 3 1480  7 looping 1 1221  11 iArrayIndex 1 1123  
536 0 0 4 662 1215 0 0 0 2 4 this 3 1480  6 newmax 1 1123  
537 0 0 6 663 1123 0 0 0 1 4 this 3 1481  
538 0 0 6 664 1218 0 0 36 // Get the time of the oldest entry. 1 4 this 3 1480  
539 0 0 4 665 1215 0 0 52 // set a debug name (if not provided by constructor) 2 4 this 3 1480  5 pName 1 1210  
365
1118 13 TextureStages 0 141313 13 TextureStages 13 TextureStages 0 0 0 1 550 551 0 10 540 541 542 543 544 545 546 547 548 549 0 0 0 0 0 752
/**
 * This simple interface maintains a single TextureStage object for each unique name.
 * It avoids the creation of duplicate TextureStages with the same name, which
 * reduces texture swapping and draw call overhead.
 *
 * If using our shader system, you should always use this interface to get TextureStages.
 * You are not required to change any properties on the returned TextureStage, as the shader
 * specification will know what to do with the TextureStage from the name.
 * 
 * For example, you do not need to call TextureStage::set_mode() or NodePath::set_tex_gen().
 * If you apply a texture to a node with the get_normalmap() stage, the shader specification
 * will know that the texture you supplied is to be treated as a normal map.
 */

1119 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 552 574 0 21 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 0 0 1 0 1120 0 0 0 0 0

1120 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1121 17 BSPMaterialAttrib 0 141313 17 BSPMaterialAttrib 17 BSPMaterialAttrib 0 0 0 0 583 1 1483 8 575 576 577 578 579 580 581 582 0 0 1 0 1122 0 0 0 0 0

1122 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

1123 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1124 10 PackResult 0 141313 10 PackResult 10 PackResult 0 0 0 1 587 588 0 3 584 585 586 0 0 0 0 0 0

1125 15 TextureLocation 0 141313 15 TextureLocation 15 TextureLocation 0 0 0 1 594 595 0 5 589 590 591 592 593 0 0 0 0 0 0

1126 13 TexturePacker 0 141313 13 TexturePacker 13 TexturePacker 0 0 0 0 605 0 9 596 597 598 599 600 601 602 603 604 0 0 0 0 0 0

1127 8 RayTrace 0 141313 8 RayTrace 8 RayTrace 0 0 0 1 608 609 0 2 606 607 0 0 0 0 0 0

1128 17 RayTraceHitResult 0 141313 17 RayTraceHitResult 17 RayTraceHitResult 0 0 0 1 610 617 0 6 611 612 613 614 615 616 0 0 0 0 0 0

1129 13 RayTraceScene 0 75777 13 RayTraceScene 13 RayTraceScene 0 0 0 1 618 0 0 8 619 620 621 622 623 624 625 626 0 0 1 0 1130 0 0 0 1 1131 0

1130 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

1131 0 0 794624 15 RayTraceScene:: 0 1129 0 0 0 0 0 0 0 0 0 3 17 BUILD_QUALITY_LOW 32 RayTraceScene::BUILD_QUALITY_LOW 0
0 20 BUILD_QUALITY_MEDIUM 35 RayTraceScene::BUILD_QUALITY_MEDIUM 0
1 18 BUILD_QUALITY_HIGH 33 RayTraceScene::BUILD_QUALITY_HIGH 0
2 0 0

1132 16 RayTraceGeometry 0 75777 16 RayTraceGeometry 16 RayTraceGeometry 0 0 0 0 0 0 6 627 628 629 630 631 632 0 0 1 0 1133 0 0 0 0 0

1133 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

1134 20 RayTraceTriangleMesh 0 141313 20 RayTraceTriangleMesh 20 RayTraceTriangleMesh 0 0 0 1 634 637 0 3 633 635 636 0 0 1 0 1132 0 0 0 0 0

1135 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 646 1 1484 8 638 639 640 641 642 643 644 645 0 0 1 0 1122 0 0 0 1 1136 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

1136 0 0 794624 15 BSPFaceAttrib:: 0 1135 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

1137 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 0 700 0 53 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 0 0 0 0 1 1138 58
/**
 * Loads and handles the operations of PBSP files.
 */

1138 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 1137 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

1139 12 BoundingKDOP 0 141313 12 BoundingKDOP 12 BoundingKDOP 0 0 0 0 706 0 5 701 702 703 704 705 0 0 1 0 1140 0 0 0 0 243
/**
 * This defines a bounding convex volume.  It may represent any enclosing convex volume,
 * including simple boxes.  However, if all you want is an axis-aligned
 * bounding box, you may be better off with the simpler BoundingBox class.
 */

1140 20 FiniteBoundingVolume 0 2048 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 168
/**
 * A special kind of GeometricBoundingVolume that is known to be finite.  It
 * is possible to query this kind of volume for its minimum and maximum
 * extents.
 */

1141 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 708 716 0 8 707 709 710 711 712 713 714 715 0 0 1 0 1120 0 0 0 0 0

1142 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 718 721 0 3 717 719 720 0 0 1 0 1141 0 0 0 0 0

1143 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 723 727 0 4 722 724 725 726 0 0 1 0 1141 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

1144 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 729 732 0 3 728 730 731 0 0 1 0 1141 0 0 0 0 0

1145 18 ShaderPermutations 0 141313 18 ShaderPermutations 18 ShaderPermutations 0 0 0 1 733 739 0 5 734 735 736 737 738 0 0 1 0 1130 0 0 0 0 97
/**
 * Represents a list of #defines and variable inputs to a shader that is being generated.
 */

1146 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 0 746 0 2 744 745 0 0 2 3 1130 740 741 3 1147 742 743 0 0 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

1147 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

1148 17 PlanarReflections 0 141313 17 PlanarReflections 17 PlanarReflections 0 0 0 1 748 749 0 1 747 0 0 1 0 1130 0 0 0 0 0

1149 13 ShaderQuality 0 532481 13 ShaderQuality 13 ShaderQuality 0 0 0 0 0 0 0 0 0 0 3 17 SHADERQUALITY_LOW 17 SHADERQUALITY_LOW 0
0 20 SHADERQUALITY_MEDIUM 20 SHADERQUALITY_MEDIUM 0
1 18 SHADERQUALITY_HIGH 18 SHADERQUALITY_HIGH 0
2 0 0

1150 10 CameraBits 0 532481 10 CameraBits 10 CameraBits 0 0 0 0 0 0 0 0 0 0 6 11 CAMERA_MAIN 11 CAMERA_MAIN 0
1 13 CAMERA_SHADOW 13 CAMERA_SHADOW 0
2 17 CAMERA_REFLECTION 17 CAMERA_REFLECTION 0
4 17 CAMERA_REFRACTION 17 CAMERA_REFRACTION 0
8 16 CAMERA_VIEWMODEL 16 CAMERA_VIEWMODEL 0
16 14 CAMERA_COMPUTE 14 CAMERA_COMPUTE 0
32 0 0

1151 7 AuxBits 0 532481 7 AuxBits 7 AuxBits 0 0 0 0 0 0 0 0 0 0 2 14 AUXBITS_NORMAL 14 AUXBITS_NORMAL 0
1 12 AUXBITS_ARME 12 AUXBITS_ARME 0
2 0 0

1152 18 BSPShaderGenerator 0 141313 18 BSPShaderGenerator 18 BSPShaderGenerator 0 0 0 1 750 775 0 24 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 0 0 1 0 1153 0 0 0 0 0

1153 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

1154 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 777 782 0 5 776 778 779 780 781 0 0 1 0 1155 0 0 0 0 0

1155 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

1156 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 784 785 0 1 783 0 0 1 0 1133 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

1157 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 787 788 0 1 786 0 0 1 0 1133 0 0 0 0 0

1158 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 790 791 0 1 789 0 0 1 0 1159 0 0 0 0 0

1159 9 ModelRoot 0 2048 9 ModelRoot 9 ModelRoot 0 0 0 0 0 0 0 0 0 0 0 0 314
/**
 * A node of this type is created automatically at the root of each model file
 * that is loaded.  It may eventually contain some information about the
 * contents of the model; at the moment, it contains no special information,
 * but can be used as a flag to indicate the presence of a loaded model file.
 */

1160 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 793 794 0 1 792 0 0 1 0 1161 0 0 0 0 0

1161 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

1162 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 795 796 0 0 0 0 1 0 1146 0 0 0 0 0

1163 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 797 798 0 0 0 0 1 0 1146 0 0 0 0 0

1164 16 UnlitGenericSpec 0 141313 16 UnlitGenericSpec 16 UnlitGenericSpec 0 0 0 1 799 800 0 0 0 0 1 0 1146 0 0 0 0 160
/**
 * Shader that only supports a basetexture, no fancy lighting effects or anything.
 * Could be used for UI elements, emissive materials, particles, etc.
 */

1165 14 UnlitNoMatSpec 0 141313 14 UnlitNoMatSpec 14 UnlitNoMatSpec 0 0 0 1 801 802 0 0 0 0 1 0 1146 0 0 0 0 0

1166 13 CSMRenderSpec 0 141313 13 CSMRenderSpec 13 CSMRenderSpec 0 0 0 1 803 804 0 0 0 0 1 0 1146 0 0 0 0 0

1167 10 SkyBoxSpec 0 141313 10 SkyBoxSpec 10 SkyBoxSpec 0 0 0 1 805 806 0 0 0 0 1 0 1146 0 0 0 0 0

1168 18 AmbientBoostEffect 0 141313 18 AmbientBoostEffect 18 AmbientBoostEffect 0 0 0 0 809 0 2 807 808 0 0 1 0 1169 0 0 0 0 0

1169 12 RenderEffect 0 2048 12 RenderEffect 12 RenderEffect 0 0 0 0 0 0 0 0 0 0 0 0 901
/**
 * This is the base class for a number of special render effects that may be
 * set on scene graph nodes to change the way they render.  This includes
 * BillboardEffect, DecalEffect, etc.
 *
 * RenderEffect represents render properties that must be applied as soon as
 * they are encountered in the scene graph, rather than propagating down to
 * the leaves.  This is different from RenderAttrib, which represents
 * properties like color and texture that don't do anything until they
 * propagate down to a GeomNode.
 *
 * You should not attempt to create or modify a RenderEffect directly;
 * instead, use the make() method of the appropriate kind of effect you want.
 * This will allocate and return a new RenderEffect of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderEffect
 * if you wish to change its properties; instead, create a new one.
 */

1170 14 Audio3DManager 0 141313 14 Audio3DManager 14 Audio3DManager 0 0 0 1 810 828 0 17 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 0 0 1 0 1130 0 0 0 0 0

1171 6 CIOLib 0 141313 6 CIOLib 6 CIOLib 0 0 0 1 831 832 0 2 829 830 0 0 0 0 0 0

1172 17 DecalModulateSpec 0 141313 17 DecalModulateSpec 17 DecalModulateSpec 0 0 0 1 833 834 0 0 0 0 1 0 1164 0 0 0 0 90
/**
 * This is just an alias of UnlitGeneric that enables color blending on the decal.
 */

1173 8 GlowNode 0 141313 8 GlowNode 8 GlowNode 0 0 0 1 836 837 0 1 835 0 0 1 0 1174 0 0 0 0 207
/**
 * This is a specialization on GeomNode that uses a pixel occlusion query
 * to determine if the Geoms on the node should be rendered.
 *
 * This is useful for things like light glows or lens flares.
 */

1174 8 GeomNode 0 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 0 0 0 0 0 208
/**
 * A node that holds Geom objects, renderable pieces of geometry.  This is the
 * primary kind of leaf node in the scene graph; almost all visible objects
 * will be contained in a GeomNode somewhere.
 */

1175 17 PostProcessEffect 0 141313 17 PostProcessEffect 17 PostProcessEffect 0 0 0 0 851 0 9 842 843 844 845 846 847 848 849 850 0 0 2 3 1130 838 839 3 1147 840 841 0 0 0

1176 15 PassTextureBits 0 532481 15 PassTextureBits 15 PassTextureBits 0 0 0 0 0 0 0 0 0 0 6 22 bits_PASSTEXTURE_COLOR 22 bits_PASSTEXTURE_COLOR 0
1 22 bits_PASSTEXTURE_DEPTH 22 bits_PASSTEXTURE_DEPTH 0
2 21 bits_PASSTEXTURE_AUX0 21 bits_PASSTEXTURE_AUX0 0
4 21 bits_PASSTEXTURE_AUX1 21 bits_PASSTEXTURE_AUX1 0
8 21 bits_PASSTEXTURE_AUX2 21 bits_PASSTEXTURE_AUX2 0
16 21 bits_PASSTEXTURE_AUX3 21 bits_PASSTEXTURE_AUX3 0
32 0 0

1177 15 PostProcessPass 0 141313 15 PostProcessPass 15 PostProcessPass 0 0 0 1 857 880 0 23 856 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 0 0 2 3 1130 852 853 3 1147 854 855 0 0 0

1178 20 PostProcessScenePass 0 141313 20 PostProcessScenePass 20 PostProcessScenePass 0 0 0 1 881 884 0 2 882 883 0 0 1 0 1177 0 0 0 0 0

1179 11 PostProcess 0 141313 11 PostProcess 11 PostProcess 0 0 0 1 885 907 0 21 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 0 0 1 0 1130 0 0 0 0 0

1180 7 HDRPass 0 141313 7 HDRPass 7 HDRPass 0 0 0 1 909 912 0 3 908 910 911 0 0 1 0 1177 0 0 0 0 0

1181 9 HDREffect 0 141313 9 HDREffect 9 HDREffect 0 0 0 1 913 915 0 1 914 0 0 1 0 1175 0 0 0 0 0

1182 11 BloomEffect 0 141313 11 BloomEffect 11 BloomEffect 0 0 0 1 917 918 0 1 916 0 0 1 0 1175 0 0 0 0 0

1183 20 LightingOriginEffect 0 141313 20 LightingOriginEffect 20 LightingOriginEffect 0 0 0 0 922 0 3 919 920 921 0 0 1 0 1169 0 0 0 0 0

1184 11 FXAA_Effect 0 141313 11 FXAA_Effect 11 FXAA_Effect 0 0 0 1 924 925 0 1 923 0 0 1 0 1175 0 0 0 0 0

1185 11 BloomAttrib 0 141313 11 BloomAttrib 11 BloomAttrib 0 0 0 0 930 1 1485 4 926 927 928 929 0 0 1 0 1122 0 0 0 0 0

1186 13 MovementState 0 532481 13 MovementState 13 MovementState 0 0 0 0 0 0 0 0 0 0 4 20 MOVEMENTSTATE_GROUND 20 MOVEMENTSTATE_GROUND 0
0 21 MOVEMENTSTATE_JUMPING 21 MOVEMENTSTATE_JUMPING 0
1 21 MOVEMENTSTATE_FALLING 21 MOVEMENTSTATE_FALLING 0
2 22 MOVEMENTSTATE_SWIMMING 22 MOVEMENTSTATE_SWIMMING 0
3 0 0

1187 26 PhysicsCharacterController 0 141313 26 PhysicsCharacterController 26 PhysicsCharacterController 0 0 0 1 931 959 0 27 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 0 0 1 0 1130 0 0 0 0 0

1188 12 Py_BSPLoader 0 141313 12 Py_BSPLoader 12 Py_BSPLoader 0 0 0 0 969 0 9 960 961 962 963 964 965 966 967 968 0 0 1 0 1137 0 0 0 0 0

1189 15 Py_CL_BSPLoader 0 141313 15 Py_CL_BSPLoader 15 Py_CL_BSPLoader 0 0 0 1 970 973 0 2 971 972 0 0 1 0 1188 0 0 0 0 0

1190 15 Py_AI_BSPLoader 0 141313 15 Py_AI_BSPLoader 15 Py_AI_BSPLoader 0 0 0 1 974 982 0 7 975 976 977 978 979 980 981 0 0 1 0 1188 0 0 0 0 0

1191 16 InterpLatchFlags 0 532481 16 InterpLatchFlags 16 InterpLatchFlags 0 0 0 0 0 0 0 0 0 0 6 19 LATCH_ANIMATION_VAR 19 LATCH_ANIMATION_VAR 0
1 20 LATCH_SIMULATION_VAR 20 LATCH_SIMULATION_VAR 0
2 18 EXCLUDE_AUTO_LATCH 18 EXCLUDE_AUTO_LATCH 0
4 24 EXCLUDE_AUTO_INTERPOLATE 24 EXCLUDE_AUTO_INTERPOLATE 0
8 23 INTERPOLATE_LINEAR_ONLY 23 INTERPOLATE_LINEAR_ONLY 33
// don't do hermite interpolation
16 38 INTERPOLATE_OMIT_UPDATE_LAST_NETWORKED 38 INTERPOLATE_OMIT_UPDATE_LAST_NETWORKED 0
32 0 0

1192 21 CInterpolationContext 0 26625 21 CInterpolationContext 21 CInterpolationContext 0 0 0 1 983 984 0 5 985 986 987 988 989 0 0 0 0 0 119
// Before calling Interpolate(), you can use this use this to setup the context
// if you want to enable extrapolation.

1193 29 CInterpolatedVar< LVector2f > 0 141313 29 CInterpolatedVar< LVector2f > 29 CInterpolatedVar< LVector2f > 0 0 0 1 1020 1021 0 0 0 0 1 0 1194 0 0 0 0 0

1194 45 CInterpolatedVarArrayBase< LVector2f, false > 0 75777 45 CInterpolatedVarArrayBase< LVector2f, false > 45 CInterpolatedVarArrayBase< LVector2f, false > 0 0 0 1 990 0 0 29 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 0 0 1 0 1195 0 0 0 0 0

1195 16 IInterpolatedVar 0 1050624 16 IInterpolatedVar 16 IInterpolatedVar 0 0 0 0 0 0 0 0 0 0 0 0 0

1196 17 CInterpolatedVec2 0 2105345 17 CInterpolatedVec2 17 CInterpolatedVec2 0 0 1193 0 0 0 0 0 0 0 0 0 0

1197 29 CInterpolatedVar< LVector3f > 0 141313 29 CInterpolatedVar< LVector3f > 29 CInterpolatedVar< LVector3f > 0 0 0 1 1052 1053 0 0 0 0 1 0 1198 0 0 0 0 0

1198 45 CInterpolatedVarArrayBase< LVector3f, false > 0 75777 45 CInterpolatedVarArrayBase< LVector3f, false > 45 CInterpolatedVarArrayBase< LVector3f, false > 0 0 0 1 1022 0 0 29 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 0 0 1 0 1195 0 0 0 0 0

1199 17 CInterpolatedVec3 0 2105345 17 CInterpolatedVec3 17 CInterpolatedVec3 0 0 1197 0 0 0 0 0 0 0 0 0 0

1200 29 CInterpolatedVar< LVector4f > 0 141313 29 CInterpolatedVar< LVector4f > 29 CInterpolatedVar< LVector4f > 0 0 0 1 1084 1085 0 0 0 0 1 0 1201 0 0 0 0 0

1201 45 CInterpolatedVarArrayBase< LVector4f, false > 0 75777 45 CInterpolatedVarArrayBase< LVector4f, false > 45 CInterpolatedVarArrayBase< LVector4f, false > 0 0 0 1 1054 0 0 29 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 0 0 1 0 1195 0 0 0 0 0

1202 17 CInterpolatedVec4 0 2105345 17 CInterpolatedVec4 17 CInterpolatedVec4 0 0 1200 0 0 0 0 0 0 0 0 0 0

1203 25 CInterpolatedVar< float > 0 141313 25 CInterpolatedVar< float > 25 CInterpolatedVar< float > 0 0 0 1 1116 1117 0 0 0 0 1 0 1204 0 0 0 0 0

1204 41 CInterpolatedVarArrayBase< float, false > 0 75777 41 CInterpolatedVarArrayBase< float, false > 41 CInterpolatedVarArrayBase< float, false > 0 0 0 1 1086 0 0 29 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 0 0 1 0 1195 0 0 0 0 0

1205 18 CInterpolatedFloat 0 2105345 18 CInterpolatedFloat 18 CInterpolatedFloat 0 0 1203 0 0 0 0 0 0 0 0 0 0

1206 15 TextureStages * 0 8576 15 TextureStages * 15 TextureStages * 0 0 1118 0 0 0 0 0 0 0 0 0 0

1207 21 TextureStages const * 0 8576 21 TextureStages const * 21 TextureStages const * 0 0 1208 0 0 0 0 0 0 0 0 0 0

1208 19 TextureStages const 0 8832 19 TextureStages const 19 TextureStages const 0 0 1118 0 0 0 0 0 0 0 0 0 0

1209 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 336
/**
 * Defines the properties of a named stage of the multitexture pipeline.  The
 * TextureAttrib will associated a number of these stages with Texture
 * objects, and the GSG will render geometry by sorting all of the currently
 * active TextureStages in order and then issuing the appropriate rendering
 * calls to activate them.
 */

1210 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1211 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 1209 0 0 0 0 0 0 0 0 0 0

1212 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 1213 0 0 0 0 0 0 0 0 0 0

1213 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 1119 0 0 0 0 0 0 0 0 0 0

1214 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 1119 0 0 0 0 0 0 0 0 0 0

1215 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1216 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1217 0 0 0 0 0 0 0 0 0 0

1217 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1218 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1219 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

1220 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 1219 0 0 0 0 0 0 0 0 0 0

1221 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1222 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 1223 0 0 0 0 0 0 0 0 0 0

1223 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 1219 0 0 0 0 0 0 0 0 0 0

1224 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1225 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1224 0 0 0 0 0 0 0 0 0 0

1226 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 1122 0 0 0 0 0 0 0 0 0 0

1227 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 1226 0 0 0 0 0 0 0 0 0 0

1228 25 BSPMaterialAttrib const * 0 8576 25 BSPMaterialAttrib const * 25 BSPMaterialAttrib const * 0 0 1229 0 0 0 0 0 0 0 0 0 0

1229 23 BSPMaterialAttrib const 0 8832 23 BSPMaterialAttrib const 23 BSPMaterialAttrib const 0 0 1121 0 0 0 0 0 0 0 0 0 0

1230 18 PackResult const * 0 8576 18 PackResult const * 18 PackResult const * 0 0 1231 0 0 0 0 0 0 0 0 0 0

1231 16 PackResult const 0 8832 16 PackResult const 16 PackResult const 0 0 1124 0 0 0 0 0 0 0 0 0 0

1232 12 PackResult * 0 8576 12 PackResult * 12 PackResult * 0 0 1124 0 0 0 0 0 0 0 0 0 0

1233 23 TextureLocation const * 0 8576 23 TextureLocation const * 23 TextureLocation const * 0 0 1234 0 0 0 0 0 0 0 0 0 0

1234 21 TextureLocation const 0 8832 21 TextureLocation const 21 TextureLocation const 0 0 1125 0 0 0 0 0 0 0 0 0 0

1235 17 TextureLocation * 0 8576 17 TextureLocation * 17 TextureLocation * 0 0 1125 0 0 0 0 0 0 0 0 0 0

1236 15 TexturePacker * 0 8576 15 TexturePacker * 15 TexturePacker * 0 0 1126 0 0 0 0 0 0 0 0 0 0

1237 10 RayTrace * 0 8576 10 RayTrace * 10 RayTrace * 0 0 1127 0 0 0 0 0 0 0 0 0 0

1238 16 RayTrace const * 0 8576 16 RayTrace const * 16 RayTrace const * 0 0 1239 0 0 0 0 0 0 0 0 0 0

1239 14 RayTrace const 0 8832 14 RayTrace const 14 RayTrace const 0 0 1127 0 0 0 0 0 0 0 0 0 0

1240 19 RayTraceHitResult * 0 8576 19 RayTraceHitResult * 19 RayTraceHitResult * 0 0 1128 0 0 0 0 0 0 0 0 0 0

1241 25 RayTraceHitResult const * 0 8576 25 RayTraceHitResult const * 25 RayTraceHitResult const * 0 0 1242 0 0 0 0 0 0 0 0 0 0

1242 23 RayTraceHitResult const 0 8832 23 RayTraceHitResult const 23 RayTraceHitResult const 0 0 1128 0 0 0 0 0 0 0 0 0 0

1243 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 1244 0 0 0 0 0 0 0 0 0 0

1244 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1245 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 1243 0 0 0 0 0 0 0 0 0 0

1246 8 LVector2 0 2105344 8 LVector2 8 LVector2 0 0 1247 0 0 0 0 0 0 0 0 0 0

1247 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

1248 10 LVector2 * 0 8576 10 LVector2 * 10 LVector2 * 0 0 1246 0 0 0 0 0 0 0 0 0 0

1249 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1250 15 RayTraceScene * 0 8576 15 RayTraceScene * 15 RayTraceScene * 0 0 1129 0 0 0 0 0 0 0 0 0 0

1251 21 RayTraceScene const * 0 8576 21 RayTraceScene const * 21 RayTraceScene const * 0 0 1252 0 0 0 0 0 0 0 0 0 0

1252 19 RayTraceScene const 0 8832 19 RayTraceScene const 19 RayTraceScene const 0 0 1129 0 0 0 0 0 0 0 0 0 0

1253 18 RayTraceGeometry * 0 8576 18 RayTraceGeometry * 18 RayTraceGeometry * 0 0 1132 0 0 0 0 0 0 0 0 0 0

1254 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 1255 0 0 0 0 0 0 0 0 0 0

1255 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 1256 0 0 0 0 0 0 0 0 0 0

1256 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 1257 0 0 0 0 0 0 0 0 0 0

1257 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1258 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 1259 0 0 0 0 0 0 0 0 0 0

1259 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 1260 0 0 0 0 0 0 0 0 0 0

1260 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 1261 0 0 0 0 0 0 0 0 0 0

1261 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

1262 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 1263 0 0 0 0 0 0 0 0 0 0

1263 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 1243 0 0 0 0 0 0 0 0 0 0

1264 24 RayTraceGeometry const * 0 8576 24 RayTraceGeometry const * 24 RayTraceGeometry const * 0 0 1265 0 0 0 0 0 0 0 0 0 0

1265 22 RayTraceGeometry const 0 8832 22 RayTraceGeometry const 22 RayTraceGeometry const 0 0 1132 0 0 0 0 0 0 0 0 0 0

1266 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 1260 0 0 0 0 0 0 0 0 0 0

1267 22 RayTraceTriangleMesh * 0 8576 22 RayTraceTriangleMesh * 22 RayTraceTriangleMesh * 0 0 1134 0 0 0 0 0 0 0 0 0 0

1268 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 1269 0 0 0 0 0 0 0 0 0 0

1269 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 1270 0 0 0 0 0 0 0 0 0 0

1270 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

1271 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 1272 0 0 0 0 0 0 0 0 0 0

1272 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 1273 0 0 0 0 0 0 0 0 0 0

1273 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

1274 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 1275 0 0 0 0 0 0 0 0 0 0

1275 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 1135 0 0 0 0 0 0 0 0 0 0

1276 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 1137 0 0 0 0 0 0 0 0 0 0

1277 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 1278 0 0 0 0 0 0 0 0 0 0

1278 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 1279 0 0 0 0 0 0 0 0 0 0

1279 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

1280 13 BulletWorld * 0 8576 13 BulletWorld * 13 BulletWorld * 0 0 1281 0 0 0 0 0 0 0 0 0 0

1281 11 BulletWorld 0 2048 11 BulletWorld 11 BulletWorld 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

1282 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 1283 0 0 0 0 0 0 0 0 0 0

1283 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 1137 0 0 0 0 0 0 0 0 0 0

1284 21 BulletRigidBodyNode * 0 8576 21 BulletRigidBodyNode * 21 BulletRigidBodyNode * 0 0 1285 0 0 0 0 0 0 0 0 0 0

1285 19 BulletRigidBodyNode 0 2048 19 BulletRigidBodyNode 19 BulletRigidBodyNode 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

1286 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 1256 0 0 0 0 0 0 0 0 0 0

1287 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1218 0 0 0 0 0 0 0 0 0 0

1288 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 1289 0 0 0 0 0 0 0 0 0 0

1289 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

1290 20 BSPShaderGenerator * 0 8576 20 BSPShaderGenerator * 20 BSPShaderGenerator * 0 0 1152 0 0 0 0 0 0 0 0 0 0

1291 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 1279 0 0 0 0 0 0 0 0 0 0

1292 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 1293 0 0 0 0 0 0 0 0 0 0

1293 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 1294 0 0 0 0 0 0 0 0 0 0

1294 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 1295 0 0 0 0 0 0 0 0 0 0

1295 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

1296 15 LColorf const * 0 8576 15 LColorf const * 15 LColorf const * 0 0 1297 0 0 0 0 0 0 0 0 0 0

1297 13 LColorf const 0 8832 13 LColorf const 13 LColorf const 0 0 1298 0 0 0 0 0 0 0 0 0 0

1298 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 1299 0 0 0 0 0 0 0 0 0 0

1299 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1300 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

1301 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 1300 0 0 0 0 0 0 0 0 0 0

1302 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 1303 0 0 0 0 0 0 0 0 0 0

1303 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 1304 0 0 0 0 0 0 0 0 0 0

1304 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

1305 9 LTexCoord 0 2105344 9 LTexCoord 9 LTexCoord 0 0 1306 0 0 0 0 0 0 0 0 0 0

1306 10 LTexCoordf 0 2105344 10 LTexCoordf 10 LTexCoordf 0 0 1295 0 0 0 0 0 0 0 0 0 0

1307 11 LTexCoord * 0 8576 11 LTexCoord * 11 LTexCoord * 0 0 1305 0 0 0 0 0 0 0 0 0 0

1308 20 BoundingKDOP const * 0 8576 20 BoundingKDOP const * 20 BoundingKDOP const * 0 0 1309 0 0 0 0 0 0 0 0 0 0

1309 18 BoundingKDOP const 0 8832 18 BoundingKDOP const 18 BoundingKDOP const 0 0 1139 0 0 0 0 0 0 0 0 0 0

1310 6 LPlane 0 2105344 6 LPlane 6 LPlane 0 0 1311 0 0 0 0 0 0 0 0 0 0

1311 7 LPlanef 0 2048 7 LPlanef 7 LPlanef 0 0 0 0 0 0 0 0 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

1312 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 1310 0 0 0 0 0 0 0 0 0 0

1313 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 1141 0 0 0 0 0 0 0 0 0 0

1314 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 1315 0 0 0 0 0 0 0 0 0 0

1315 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 1141 0 0 0 0 0 0 0 0 0 0

1316 6 LColor 0 2105344 6 LColor 6 LColor 0 0 1298 0 0 0 0 0 0 0 0 0 0

1317 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 1316 0 0 0 0 0 0 0 0 0 0

1318 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 1142 0 0 0 0 0 0 0 0 0 0

1319 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 1320 0 0 0 0 0 0 0 0 0 0

1320 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 1142 0 0 0 0 0 0 0 0 0 0

1321 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 1143 0 0 0 0 0 0 0 0 0 0

1322 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 1323 0 0 0 0 0 0 0 0 0 0

1323 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 1143 0 0 0 0 0 0 0 0 0 0

1324 14 BoundingKDOP * 0 8576 14 BoundingKDOP * 14 BoundingKDOP * 0 0 1139 0 0 0 0 0 0 0 0 0 0

1325 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 1144 0 0 0 0 0 0 0 0 0 0

1326 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 1327 0 0 0 0 0 0 0 0 0 0

1327 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 1144 0 0 0 0 0 0 0 0 0 0

1328 20 ShaderPermutations * 0 8576 20 ShaderPermutations * 20 ShaderPermutations * 0 0 1145 0 0 0 0 0 0 0 0 0 0

1329 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 1330 0 0 0 0 0 0 0 0 0 0

1330 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 1331 0 0 0 0 0 0 0 0 0 0

1331 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

1332 26 ShaderPermutations const * 0 8576 26 ShaderPermutations const * 26 ShaderPermutations const * 0 0 1333 0 0 0 0 0 0 0 0 0 0

1333 24 ShaderPermutations const 0 8832 24 ShaderPermutations const 24 ShaderPermutations const 0 0 1145 0 0 0 0 0 0 0 0 0 0

1334 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 1146 0 0 0 0 0 0 0 0 0 0

1335 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 1130 0 0 0 0 0 0 0 0 0 0

1336 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 1147 0 0 0 0 0 0 0 0 0 0

1337 25 PlanarReflections const * 0 8576 25 PlanarReflections const * 25 PlanarReflections const * 0 0 1338 0 0 0 0 0 0 0 0 0 0

1338 23 PlanarReflections const 0 8832 23 PlanarReflections const 23 PlanarReflections const 0 0 1148 0 0 0 0 0 0 0 0 0 0

1339 19 PlanarReflections * 0 8576 19 PlanarReflections * 19 PlanarReflections * 0 0 1148 0 0 0 0 0 0 0 0 0 0

1340 26 BSPShaderGenerator const * 0 8576 26 BSPShaderGenerator const * 26 BSPShaderGenerator const * 0 0 1341 0 0 0 0 0 0 0 0 0 0

1341 24 BSPShaderGenerator const 0 8832 24 BSPShaderGenerator const 24 BSPShaderGenerator const 0 0 1152 0 0 0 0 0 0 0 0 0 0

1342 16 GraphicsOutput * 0 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 1343 0 0 0 0 0 0 0 0 0 0

1343 14 GraphicsOutput 0 2048 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 0 0 0 0 0 0 0 0 727
/**
 * This is a base class for the various different classes that represent the
 * result of a frame of rendering.  The most common kind of GraphicsOutput is
 * a GraphicsWindow, which is a real-time window on the desktop, but another
 * example is GraphicsBuffer, which is an offscreen buffer.
 *
 * The actual rendering, and anything associated with the graphics context
 * itself, is managed by the associated GraphicsStateGuardian (which might
 * output to multiple GraphicsOutput objects).
 *
 * GraphicsOutputs are not actually writable to bam files, of course, but they
 * may be passed as event parameters, so they inherit from
 * TypedWritableReferenceCount instead of TypedReferenceCount for that
 * convenience.
 */

1344 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 1345 0 0 0 0 0 0 0 0 0 0

1345 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

1346 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 1347 0 0 0 0 0 0 0 0 0 0

1347 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

1348 5 Fog * 0 8576 5 Fog * 5 Fog * 0 0 1349 0 0 0 0 0 0 0 0 0 0

1349 3 Fog 0 2048 3 Fog 3 Fog 0 0 0 0 0 0 0 0 0 0 0 0 782
/**
 * Specifies how atmospheric fog effects are applied to geometry.  The Fog
 * object is now a PandaNode, which means it can be used similarly to a Light
 * to define effects relative to a particular coordinate system within the
 * scene graph.
 *
 * In exponential mode, the fog effects are always camera-relative, and it
 * does not matter where the Fog node is parented.  However, in linear mode,
 * the onset and opaque distances are defined as offsets along the local
 * forward axis (e.g.  the Y axis).  This allows the fog effect to be
 * localized to a particular region in space, rather than always camera-
 * relative.  If the fog object is not parented to any node, it is used to
 * generate traditonal camera-relative fog, as if it were parented to the
 * camera.
 */

1350 14 PTA_LVecBase4f 0 2105344 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 1351 0 0 0 0 0 0 0 0 0 0

1351 37 PointerToArray< UnalignedLVecBase4f > 0 2048 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 0 0 0 0 0 0 0 0 0 0

1352 16 PTA_LVecBase4f * 0 8576 16 PTA_LVecBase4f * 16 PTA_LVecBase4f * 0 0 1350 0 0 0 0 0 0 0 0 0 0

1353 9 PTA_float 0 2105344 9 PTA_float 9 PTA_float 0 0 1354 0 0 0 0 0 0 0 0 0 0

1354 23 PointerToArray< float > 0 2048 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

1355 11 PTA_float * 0 8576 11 PTA_float * 11 PTA_float * 0 0 1353 0 0 0 0 0 0 0 0 0 0

1356 12 Shader const 0 8832 12 Shader const 12 Shader const 0 0 1357 0 0 0 0 0 0 0 0 0 0

1357 6 Shader 0 2048 6 Shader 6 Shader 0 0 0 0 0 0 0 0 0 0 0 0 8
/**

 */

1358 18 ShaderSpec const * 0 8576 18 ShaderSpec const * 18 ShaderSpec const * 0 0 1359 0 0 0 0 0 0 0 0 0 0

1359 16 ShaderSpec const 0 8832 16 ShaderSpec const 16 ShaderSpec const 0 0 1146 0 0 0 0 0 0 0 0 0 0

1360 14 Shader const * 0 8576 14 Shader const * 14 Shader const * 0 0 1356 0 0 0 0 0 0 0 0 0 0

1361 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 1362 0 0 0 0 0 0 0 0 0 0

1362 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 1154 0 0 0 0 0 0 0 0 0 0

1363 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 1154 0 0 0 0 0 0 0 0 0 0

1364 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 1155 0 0 0 0 0 0 0 0 0 0

1365 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 1366 0 0 0 0 0 0 0 0 0 0

1366 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 1156 0 0 0 0 0 0 0 0 0 0

1367 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 1156 0 0 0 0 0 0 0 0 0 0

1368 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 1369 0 0 0 0 0 0 0 0 0 0

1369 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 1157 0 0 0 0 0 0 0 0 0 0

1370 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 1157 0 0 0 0 0 0 0 0 0 0

1371 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 1372 0 0 0 0 0 0 0 0 0 0

1372 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 1158 0 0 0 0 0 0 0 0 0 0

1373 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 1158 0 0 0 0 0 0 0 0 0 0

1374 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 1375 0 0 0 0 0 0 0 0 0 0

1375 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 1160 0 0 0 0 0 0 0 0 0 0

1376 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 1160 0 0 0 0 0 0 0 0 0 0

1377 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 1162 0 0 0 0 0 0 0 0 0 0

1378 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 1163 0 0 0 0 0 0 0 0 0 0

1379 18 UnlitGenericSpec * 0 8576 18 UnlitGenericSpec * 18 UnlitGenericSpec * 0 0 1164 0 0 0 0 0 0 0 0 0 0

1380 16 UnlitNoMatSpec * 0 8576 16 UnlitNoMatSpec * 16 UnlitNoMatSpec * 0 0 1165 0 0 0 0 0 0 0 0 0 0

1381 15 CSMRenderSpec * 0 8576 15 CSMRenderSpec * 15 CSMRenderSpec * 0 0 1166 0 0 0 0 0 0 0 0 0 0

1382 12 SkyBoxSpec * 0 8576 12 SkyBoxSpec * 12 SkyBoxSpec * 0 0 1167 0 0 0 0 0 0 0 0 0 0

1383 18 RenderEffect const 0 8832 18 RenderEffect const 18 RenderEffect const 0 0 1169 0 0 0 0 0 0 0 0 0 0

1384 20 RenderEffect const * 0 8576 20 RenderEffect const * 20 RenderEffect const * 0 0 1383 0 0 0 0 0 0 0 0 0 0

1385 22 Audio3DManager const * 0 8576 22 Audio3DManager const * 22 Audio3DManager const * 0 0 1386 0 0 0 0 0 0 0 0 0 0

1386 20 Audio3DManager const 0 8832 20 Audio3DManager const 20 Audio3DManager const 0 0 1170 0 0 0 0 0 0 0 0 0 0

1387 16 Audio3DManager * 0 8576 16 Audio3DManager * 16 Audio3DManager * 0 0 1170 0 0 0 0 0 0 0 0 0 0

1388 14 AudioManager * 0 8576 14 AudioManager * 14 AudioManager * 0 0 1389 0 0 0 0 0 0 0 0 0 0

1389 12 AudioManager 0 2048 12 AudioManager 12 AudioManager 0 0 0 0 0 0 0 0 0 0 0 0 0

1390 12 AudioSound * 0 8576 12 AudioSound * 12 AudioSound * 0 0 1391 0 0 0 0 0 0 0 0 0 0

1391 10 AudioSound 0 2048 10 AudioSound 10 AudioSound 0 0 0 0 0 0 0 0 0 0 0 0 0

1392 8 CIOLib * 0 8576 8 CIOLib * 8 CIOLib * 0 0 1171 0 0 0 0 0 0 0 0 0 0

1393 14 CIOLib const * 0 8576 14 CIOLib const * 14 CIOLib const * 0 0 1394 0 0 0 0 0 0 0 0 0 0

1394 12 CIOLib const 0 8832 12 CIOLib const 12 CIOLib const 0 0 1171 0 0 0 0 0 0 0 0 0 0

1395 19 DecalModulateSpec * 0 8576 19 DecalModulateSpec * 19 DecalModulateSpec * 0 0 1172 0 0 0 0 0 0 0 0 0 0

1396 16 GeomNode const * 0 8576 16 GeomNode const * 16 GeomNode const * 0 0 1397 0 0 0 0 0 0 0 0 0 0

1397 14 GeomNode const 0 8832 14 GeomNode const 14 GeomNode const 0 0 1174 0 0 0 0 0 0 0 0 0 0

1398 10 GlowNode * 0 8576 10 GlowNode * 10 GlowNode * 0 0 1173 0 0 0 0 0 0 0 0 0 0

1399 16 GlowNode const * 0 8576 16 GlowNode const * 16 GlowNode const * 0 0 1400 0 0 0 0 0 0 0 0 0 0

1400 14 GlowNode const 0 8832 14 GlowNode const 14 GlowNode const 0 0 1173 0 0 0 0 0 0 0 0 0 0

1401 19 PostProcessEffect * 0 8576 19 PostProcessEffect * 19 PostProcessEffect * 0 0 1175 0 0 0 0 0 0 0 0 0 0

1402 17 PostProcessPass * 0 8576 17 PostProcessPass * 17 PostProcessPass * 0 0 1177 0 0 0 0 0 0 0 0 0 0

1403 13 PostProcess * 0 8576 13 PostProcess * 13 PostProcess * 0 0 1179 0 0 0 0 0 0 0 0 0 0

1404 29 FrameBufferProperties const * 0 8576 29 FrameBufferProperties const * 29 FrameBufferProperties const * 0 0 1405 0 0 0 0 0 0 0 0 0 0

1405 27 FrameBufferProperties const 0 8832 27 FrameBufferProperties const 27 FrameBufferProperties const 0 0 1406 0 0 0 0 0 0 0 0 0 0

1406 21 FrameBufferProperties 0 2048 21 FrameBufferProperties 21 FrameBufferProperties 0 0 0 0 0 0 0 0 0 0 0 0 132
/**
 * A container for the various kinds of properties we might ask to have on a
 * graphics frameBuffer before we create a GSG.
 */

1407 17 LVector2i const * 0 8576 17 LVector2i const * 17 LVector2i const * 0 0 1408 0 0 0 0 0 0 0 0 0 0

1408 15 LVector2i const 0 8832 15 LVector2i const 15 LVector2i const 0 0 1409 0 0 0 0 0 0 0 0 0 0

1409 9 LVector2i 0 2048 9 LVector2i 9 LVector2i 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

1410 23 PostProcessPass const * 0 8576 23 PostProcessPass const * 23 PostProcessPass const * 0 0 1411 0 0 0 0 0 0 0 0 0 0

1411 21 PostProcessPass const 0 8832 21 PostProcessPass const 21 PostProcessPass const 0 0 1177 0 0 0 0 0 0 0 0 0 0

1412 11 LVector2i * 0 8576 11 LVector2i * 11 LVector2i * 0 0 1409 0 0 0 0 0 0 0 0 0 0

1413 23 FrameBufferProperties * 0 8576 23 FrameBufferProperties * 23 FrameBufferProperties * 0 0 1406 0 0 0 0 0 0 0 0 0 0

1414 22 PostProcessScenePass * 0 8576 22 PostProcessScenePass * 22 PostProcessScenePass * 0 0 1178 0 0 0 0 0 0 0 0 0 0

1415 28 PostProcessScenePass const * 0 8576 28 PostProcessScenePass const * 28 PostProcessScenePass const * 0 0 1416 0 0 0 0 0 0 0 0 0 0

1416 26 PostProcessScenePass const 0 8832 26 PostProcessScenePass const 26 PostProcessScenePass const 0 0 1178 0 0 0 0 0 0 0 0 0 0

1417 19 RenderState const * 0 8576 19 RenderState const * 19 RenderState const * 0 0 1418 0 0 0 0 0 0 0 0 0 0

1418 17 RenderState const 0 8832 17 RenderState const 17 RenderState const 0 0 1419 0 0 0 0 0 0 0 0 0 0

1419 11 RenderState 0 2048 11 RenderState 11 RenderState 0 0 0 0 0 0 0 0 0 0 0 0 340
/**
 * This represents a unique collection of RenderAttrib objects that correspond
 * to a particular renderable state.
 *
 * You should not attempt to create or modify a RenderState object directly.
 * Instead, call one of the make() functions to create one for you.  And
 * instead of modifying a RenderState object, create a new one.
 */

1420 19 PostProcess const * 0 8576 19 PostProcess const * 19 PostProcess const * 0 0 1421 0 0 0 0 0 0 0 0 0 0

1421 17 PostProcess const 0 8832 17 PostProcess const 17 PostProcess const 0 0 1179 0 0 0 0 0 0 0 0 0 0

1422 13 DisplayRegion 0 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 399
/**
 * A rectangular subregion within a window for rendering into.  Typically,
 * there is one DisplayRegion that covers the whole window, but you may also
 * create smaller DisplayRegions for having different regions within the
 * window that represent different scenes.  You may also stack up
 * DisplayRegions like panes of glass, usually for layering 2-d interfaces on
 * top of a 3-d scene.
 */

1423 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 1422 0 0 0 0 0 0 0 0 0 0

1424 16 DrawableRegion * 0 8576 16 DrawableRegion * 16 DrawableRegion * 0 0 1425 0 0 0 0 0 0 0 0 0 0

1425 14 DrawableRegion 0 2048 14 DrawableRegion 14 DrawableRegion 0 0 0 0 0 0 0 0 0 0 0 0 389
/**
 * This is a base class for GraphicsWindow (actually, GraphicsOutput) and
 * DisplayRegion, both of which are conceptually rectangular regions into
 * which drawing commands may be issued.  Sometimes you want to deal with a
 * single display region, and sometimes you want to deal with the whole window
 * at once, particularly for issuing clear commands and capturing screenshots.
 */

1426 15 HDRPass const * 0 8576 15 HDRPass const * 15 HDRPass const * 0 0 1427 0 0 0 0 0 0 0 0 0 0

1427 13 HDRPass const 0 8832 13 HDRPass const 13 HDRPass const 0 0 1180 0 0 0 0 0 0 0 0 0 0

1428 9 HDRPass * 0 8576 9 HDRPass * 9 HDRPass * 0 0 1180 0 0 0 0 0 0 0 0 0 0

1429 11 HDREffect * 0 8576 11 HDREffect * 11 HDREffect * 0 0 1181 0 0 0 0 0 0 0 0 0 0

1430 17 HDREffect const * 0 8576 17 HDREffect const * 17 HDREffect const * 0 0 1431 0 0 0 0 0 0 0 0 0 0

1431 15 HDREffect const 0 8832 15 HDREffect const 15 HDREffect const 0 0 1181 0 0 0 0 0 0 0 0 0 0

1432 13 BloomEffect * 0 8576 13 BloomEffect * 13 BloomEffect * 0 0 1182 0 0 0 0 0 0 0 0 0 0

1433 28 LightingOriginEffect const * 0 8576 28 LightingOriginEffect const * 28 LightingOriginEffect const * 0 0 1434 0 0 0 0 0 0 0 0 0 0

1434 26 LightingOriginEffect const 0 8832 26 LightingOriginEffect const 26 LightingOriginEffect const 0 0 1183 0 0 0 0 0 0 0 0 0 0

1435 13 FXAA_Effect * 0 8576 13 FXAA_Effect * 13 FXAA_Effect * 0 0 1184 0 0 0 0 0 0 0 0 0 0

1436 19 BloomAttrib const * 0 8576 19 BloomAttrib const * 19 BloomAttrib const * 0 0 1437 0 0 0 0 0 0 0 0 0 0

1437 17 BloomAttrib const 0 8832 17 BloomAttrib const 17 BloomAttrib const 0 0 1185 0 0 0 0 0 0 0 0 0 0

1438 28 PhysicsCharacterController * 0 8576 28 PhysicsCharacterController * 28 PhysicsCharacterController * 0 0 1187 0 0 0 0 0 0 0 0 0 0

1439 34 PhysicsCharacterController const * 0 8576 34 PhysicsCharacterController const * 34 PhysicsCharacterController const * 0 0 1440 0 0 0 0 0 0 0 0 0 0

1440 32 PhysicsCharacterController const 0 8832 32 PhysicsCharacterController const 32 PhysicsCharacterController const 0 0 1187 0 0 0 0 0 0 0 0 0 0

1441 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1442 0 0 0 0 0 0 0 0 0 0

1442 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1443 0 0 0 0 0 0 0 0 0 0

1443 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1444 14 Py_BSPLoader * 0 8576 14 Py_BSPLoader * 14 Py_BSPLoader * 0 0 1188 0 0 0 0 0 0 0 0 0 0

1445 20 Py_BSPLoader const * 0 8576 20 Py_BSPLoader const * 20 Py_BSPLoader const * 0 0 1446 0 0 0 0 0 0 0 0 0 0

1446 18 Py_BSPLoader const 0 8832 18 Py_BSPLoader const 18 Py_BSPLoader const 0 0 1188 0 0 0 0 0 0 0 0 0 0

1447 9 int const 0 8832 9 int const 9 int const 0 0 1123 0 0 0 0 0 0 0 0 0 0

1448 17 Py_CL_BSPLoader * 0 8576 17 Py_CL_BSPLoader * 17 Py_CL_BSPLoader * 0 0 1189 0 0 0 0 0 0 0 0 0 0

1449 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 1450 0 0 0 0 0 0 0 0 0 0

1450 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 1451 0 0 0 0 0 0 0 0 0 0

1451 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

1452 17 Py_AI_BSPLoader * 0 8576 17 Py_AI_BSPLoader * 17 Py_AI_BSPLoader * 0 0 1190 0 0 0 0 0 0 0 0 0 0

1453 23 CInterpolationContext * 0 8576 23 CInterpolationContext * 23 CInterpolationContext * 0 0 1192 0 0 0 0 0 0 0 0 0 0

1454 29 CInterpolationContext const * 0 8576 29 CInterpolationContext const * 29 CInterpolationContext const * 0 0 1455 0 0 0 0 0 0 0 0 0 0

1455 27 CInterpolationContext const 0 8832 27 CInterpolationContext const 27 CInterpolationContext const 0 0 1192 0 0 0 0 0 0 0 0 0 0

1456 31 CInterpolatedVar< LVector2f > * 0 8576 31 CInterpolatedVar< LVector2f > * 31 CInterpolatedVar< LVector2f > * 0 0 1193 0 0 0 0 0 0 0 0 0 0

1457 47 CInterpolatedVarArrayBase< LVector2f, false > * 0 8576 47 CInterpolatedVarArrayBase< LVector2f, false > * 47 CInterpolatedVarArrayBase< LVector2f, false > * 0 0 1194 0 0 0 0 0 0 0 0 0 0

1458 11 LVector2f * 0 8576 11 LVector2f * 11 LVector2f * 0 0 1247 0 0 0 0 0 0 0 0 0 0

1459 53 CInterpolatedVarArrayBase< LVector2f, false > const * 0 8576 53 CInterpolatedVarArrayBase< LVector2f, false > const * 53 CInterpolatedVarArrayBase< LVector2f, false > const * 0 0 1460 0 0 0 0 0 0 0 0 0 0

1460 51 CInterpolatedVarArrayBase< LVector2f, false > const 0 8832 51 CInterpolatedVarArrayBase< LVector2f, false > const 51 CInterpolatedVarArrayBase< LVector2f, false > const 0 0 1194 0 0 0 0 0 0 0 0 0 0

1461 18 IInterpolatedVar * 0 8576 18 IInterpolatedVar * 18 IInterpolatedVar * 0 0 1195 0 0 0 0 0 0 0 0 0 0

1462 17 LVector2f const * 0 8576 17 LVector2f const * 17 LVector2f const * 0 0 1463 0 0 0 0 0 0 0 0 0 0

1463 15 LVector2f const 0 8832 15 LVector2f const 15 LVector2f const 0 0 1247 0 0 0 0 0 0 0 0 0 0

1464 31 CInterpolatedVar< LVector3f > * 0 8576 31 CInterpolatedVar< LVector3f > * 31 CInterpolatedVar< LVector3f > * 0 0 1197 0 0 0 0 0 0 0 0 0 0

1465 47 CInterpolatedVarArrayBase< LVector3f, false > * 0 8576 47 CInterpolatedVarArrayBase< LVector3f, false > * 47 CInterpolatedVarArrayBase< LVector3f, false > * 0 0 1198 0 0 0 0 0 0 0 0 0 0

1466 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 1244 0 0 0 0 0 0 0 0 0 0

1467 53 CInterpolatedVarArrayBase< LVector3f, false > const * 0 8576 53 CInterpolatedVarArrayBase< LVector3f, false > const * 53 CInterpolatedVarArrayBase< LVector3f, false > const * 0 0 1468 0 0 0 0 0 0 0 0 0 0

1468 51 CInterpolatedVarArrayBase< LVector3f, false > const 0 8832 51 CInterpolatedVarArrayBase< LVector3f, false > const 51 CInterpolatedVarArrayBase< LVector3f, false > const 0 0 1198 0 0 0 0 0 0 0 0 0 0

1469 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 1470 0 0 0 0 0 0 0 0 0 0

1470 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 1244 0 0 0 0 0 0 0 0 0 0

1471 31 CInterpolatedVar< LVector4f > * 0 8576 31 CInterpolatedVar< LVector4f > * 31 CInterpolatedVar< LVector4f > * 0 0 1200 0 0 0 0 0 0 0 0 0 0

1472 47 CInterpolatedVarArrayBase< LVector4f, false > * 0 8576 47 CInterpolatedVarArrayBase< LVector4f, false > * 47 CInterpolatedVarArrayBase< LVector4f, false > * 0 0 1201 0 0 0 0 0 0 0 0 0 0

1473 11 LVector4f * 0 8576 11 LVector4f * 11 LVector4f * 0 0 1474 0 0 0 0 0 0 0 0 0 0

1474 9 LVector4f 0 2048 9 LVector4f 9 LVector4f 0 0 0 0 0 0 0 0 0 0 0 0 52
/**
 * This is a four-component vector distance.
 */

1475 53 CInterpolatedVarArrayBase< LVector4f, false > const * 0 8576 53 CInterpolatedVarArrayBase< LVector4f, false > const * 53 CInterpolatedVarArrayBase< LVector4f, false > const * 0 0 1476 0 0 0 0 0 0 0 0 0 0

1476 51 CInterpolatedVarArrayBase< LVector4f, false > const 0 8832 51 CInterpolatedVarArrayBase< LVector4f, false > const 51 CInterpolatedVarArrayBase< LVector4f, false > const 0 0 1201 0 0 0 0 0 0 0 0 0 0

1477 17 LVector4f const * 0 8576 17 LVector4f const * 17 LVector4f const * 0 0 1478 0 0 0 0 0 0 0 0 0 0

1478 15 LVector4f const 0 8832 15 LVector4f const 15 LVector4f const 0 0 1474 0 0 0 0 0 0 0 0 0 0

1479 27 CInterpolatedVar< float > * 0 8576 27 CInterpolatedVar< float > * 27 CInterpolatedVar< float > * 0 0 1203 0 0 0 0 0 0 0 0 0 0

1480 43 CInterpolatedVarArrayBase< float, false > * 0 8576 43 CInterpolatedVarArrayBase< float, false > * 43 CInterpolatedVarArrayBase< float, false > * 0 0 1204 0 0 0 0 0 0 0 0 0 0

1481 49 CInterpolatedVarArrayBase< float, false > const * 0 8576 49 CInterpolatedVarArrayBase< float, false > const * 49 CInterpolatedVarArrayBase< float, false > const * 0 0 1482 0 0 0 0 0 0 0 0 0 0

1482 47 CInterpolatedVarArrayBase< float, false > const 0 8832 47 CInterpolatedVarArrayBase< float, false > const 47 CInterpolatedVarArrayBase< float, false > const 0 0 1204 0 0 0 0 0 0 0 0 0 0

0
3
1483 10 class_slot 0 2 1123 581 0 0 0 0 0 0 0 29 BSPMaterialAttrib::class_slot 0

1484 10 class_slot 0 2 1123 644 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

1485 10 class_slot 0 2 1123 926 0 0 0 0 0 0 0 23 BloomAttrib::class_slot 0

0
