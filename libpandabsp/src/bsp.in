1562867165
3 3
3 bsp 4 t5GT 3 bsp 
264
252 3 get 0 4 516 18 TextureStages::get 0 2 3 4 0
159
static TextureStage *TextureStages::get(std::string const &name);
static TextureStage *TextureStages::get(std::string const &name, std::string const &uv_name);

253 15 get_basetexture 0 4 516 30 TextureStages::get_basetexture 0 1 5 0
58
static TextureStage *TextureStages::get_basetexture(void);

254 12 get_lightmap 0 4 516 27 TextureStages::get_lightmap 0 1 6 0
55
static TextureStage *TextureStages::get_lightmap(void);

255 19 get_bumped_lightmap 0 4 516 34 TextureStages::get_bumped_lightmap 0 1 7 0
62
static TextureStage *TextureStages::get_bumped_lightmap(void);

256 13 get_spheremap 0 4 516 28 TextureStages::get_spheremap 0 1 8 0
56
static TextureStage *TextureStages::get_spheremap(void);

257 11 get_cubemap 0 4 516 26 TextureStages::get_cubemap 0 1 9 0
54
static TextureStage *TextureStages::get_cubemap(void);

258 13 get_normalmap 0 4 516 28 TextureStages::get_normalmap 0 1 10 0
56
static TextureStage *TextureStages::get_normalmap(void);

259 13 get_heightmap 0 4 516 28 TextureStages::get_heightmap 0 1 11 0
56
static TextureStage *TextureStages::get_heightmap(void);

260 12 get_glossmap 0 4 516 27 TextureStages::get_glossmap 0 1 12 0
55
static TextureStage *TextureStages::get_glossmap(void);

261 11 get_glowmap 0 4 516 26 TextureStages::get_glowmap 0 1 13 0
54
static TextureStage *TextureStages::get_glowmap(void);

262 13 TextureStages 0 4 516 28 TextureStages::TextureStages 0 2 1 2 0
122
inline TextureStages::TextureStages(void) = default;
inline TextureStages::TextureStages(TextureStages const &) = default;

263 14 ~TextureStages 0 4 516 29 TextureStages::~TextureStages 0 0 0
36
TextureStages::~TextureStages(void);

264 11 BSPMaterial 0 4 517 24 BSPMaterial::BSPMaterial 0 2 14 15 0
137
inline explicit BSPMaterial::BSPMaterial(std::string const &name = "material");
inline BSPMaterial::BSPMaterial(BSPMaterial const &copy);

265 10 operator = 0 4 517 23 BSPMaterial::operator = 0 1 16 0
61
inline void BSPMaterial::operator =(BSPMaterial const &copy);

266 12 set_keyvalue 0 4 517 25 BSPMaterial::set_keyvalue 0 1 17 0
88
inline void BSPMaterial::set_keyvalue(std::string const &key, std::string const &value);

267 12 get_keyvalue 0 4 517 25 BSPMaterial::get_keyvalue 0 1 18 0
75
inline std::string BSPMaterial::get_keyvalue(std::string const &key) const;

268 17 get_num_keyvalues 0 4 517 30 BSPMaterial::get_num_keyvalues 0 1 19 0
62
inline std::size_t BSPMaterial::get_num_keyvalues(void) const;

269 7 get_key 0 4 517 20 BSPMaterial::get_key 0 1 20 0
68
inline std::string const &BSPMaterial::get_key(std::size_t i) const;

270 9 get_value 0 4 517 22 BSPMaterial::get_value 0 1 21 0
70
inline std::string const &BSPMaterial::get_value(std::size_t i) const;

271 16 get_keyvalue_int 0 4 517 29 BSPMaterial::get_keyvalue_int 0 1 22 0
71
inline int BSPMaterial::get_keyvalue_int(std::string const &key) const;

272 18 get_keyvalue_float 0 4 517 31 BSPMaterial::get_keyvalue_float 0 1 23 0
75
inline float BSPMaterial::get_keyvalue_float(std::string const &key) const;

273 10 set_shader 0 4 517 23 BSPMaterial::set_shader 0 1 24 0
68
inline void BSPMaterial::set_shader(std::string const &shader_name);

274 10 get_shader 0 4 517 23 BSPMaterial::get_shader 0 1 25 0
55
inline std::string BSPMaterial::get_shader(void) const;

275 8 get_file 0 4 517 21 BSPMaterial::get_file 0 1 26 0
50
inline Filename BSPMaterial::get_file(void) const;

276 12 has_keyvalue 0 4 517 25 BSPMaterial::has_keyvalue 0 1 27 0
68
inline bool BSPMaterial::has_keyvalue(std::string const &key) const;

277 15 has_env_cubemap 0 4 517 28 BSPMaterial::has_env_cubemap 0 1 28 0
53
inline bool BSPMaterial::has_env_cubemap(void) const;

278 16 has_transparency 0 4 517 29 BSPMaterial::has_transparency 0 1 29 0
54
inline bool BSPMaterial::has_transparency(void) const;

279 16 get_surface_prop 0 4 517 29 BSPMaterial::get_surface_prop 0 1 30 0
61
inline std::string BSPMaterial::get_surface_prop(void) const;

280 12 get_contents 0 4 517 25 BSPMaterial::get_contents 0 1 31 0
57
inline std::string BSPMaterial::get_contents(void) const;

281 13 get_from_file 0 4 517 26 BSPMaterial::get_from_file 0 1 32 0
75
static BSPMaterial const *BSPMaterial::get_from_file(Filename const &file);

282 14 get_class_type 0 4 517 27 BSPMaterial::get_class_type 0 1 33 0
52
static TypeHandle BSPMaterial::get_class_type(void);

283 12 ~BSPMaterial 0 4 517 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

284 4 make 0 4 519 23 BSPMaterialAttrib::make 0 1 34 0
86
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make(BSPMaterial const *mat);

285 20 make_override_shader 0 4 519 39 BSPMaterialAttrib::make_override_shader 0 1 35 0
102
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_override_shader(BSPMaterial const *mat);

286 12 make_default 0 4 519 31 BSPMaterialAttrib::make_default 0 1 36 0
76
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_default(void);

287 19 get_override_shader 0 4 519 38 BSPMaterialAttrib::get_override_shader 0 1 37 0
70
inline std::string BSPMaterialAttrib::get_override_shader(void) const;

288 19 has_override_shader 0 4 519 38 BSPMaterialAttrib::has_override_shader 0 1 38 0
63
inline bool BSPMaterialAttrib::has_override_shader(void) const;

289 12 get_material 0 4 519 31 BSPMaterialAttrib::get_material 0 1 39 0
70
inline BSPMaterial const *BSPMaterialAttrib::get_material(void) const;

290 14 get_class_slot 0 4 519 33 BSPMaterialAttrib::get_class_slot 0 1 40 0
51
static int BSPMaterialAttrib::get_class_slot(void);

291 14 get_class_type 0 4 519 33 BSPMaterialAttrib::get_class_type 0 1 41 0
58
static TypeHandle BSPMaterialAttrib::get_class_type(void);

292 18 ~BSPMaterialAttrib 0 4 519 37 BSPMaterialAttrib::~BSPMaterialAttrib 0 0 0
44
BSPMaterialAttrib::~BSPMaterialAttrib(void);

293 14 get_class_type 0 4 522 27 CBaseEntity::get_class_type 0 1 44 0
52
static TypeHandle CBaseEntity::get_class_type(void);

294 11 CBaseEntity 0 4 522 24 CBaseEntity::CBaseEntity 0 2 42 43 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

295 10 get_entnum 0 4 522 23 CBaseEntity::get_entnum 0 1 45 0
40
int CBaseEntity::get_entnum(void) const;

296 10 get_loader 0 4 522 23 CBaseEntity::get_loader 0 1 46 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

297 12 ~CBaseEntity 0 4 522 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

298 14 get_class_type 0 4 523 28 CPointEntity::get_class_type 0 1 49 0
53
static TypeHandle CPointEntity::get_class_type(void);

299 12 CPointEntity 0 4 523 26 CPointEntity::CPointEntity 0 2 47 48 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

300 10 get_origin 0 4 523 24 CPointEntity::get_origin 0 1 50 0
45
LPoint3 CPointEntity::get_origin(void) const;

301 10 get_angles 0 4 523 24 CPointEntity::get_angles 0 1 51 0
46
LVector3 CPointEntity::get_angles(void) const;

302 13 ~CPointEntity 0 4 523 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

303 14 get_class_type 0 4 524 29 CBoundsEntity::get_class_type 0 1 54 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

304 13 CBoundsEntity 0 4 524 28 CBoundsEntity::CBoundsEntity 0 2 52 53 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

305 10 get_bounds 0 4 524 25 CBoundsEntity::get_bounds 0 1 55 0
51
BoundingBox *CBoundsEntity::get_bounds(void) const;

306 9 is_inside 0 4 524 24 CBoundsEntity::is_inside 0 1 56 0
63
inline bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

307 13 fillin_bounds 0 4 524 28 CBoundsEntity::fillin_bounds 0 1 57 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

308 14 ~CBoundsEntity 0 4 524 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

309 14 get_class_type 0 4 525 28 CBrushEntity::get_class_type 0 1 60 0
53
static TypeHandle CBrushEntity::get_class_type(void);

310 12 CBrushEntity 0 4 525 26 CBrushEntity::CBrushEntity 0 2 58 59 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

311 12 get_modelnum 0 4 525 26 CBrushEntity::get_modelnum 0 1 61 0
43
int CBrushEntity::get_modelnum(void) const;

312 12 get_model_np 0 4 525 26 CBrushEntity::get_model_np 0 1 62 0
48
NodePath CBrushEntity::get_model_np(void) const;

313 16 get_model_bounds 0 4 525 30 CBrushEntity::get_model_bounds 0 1 63 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

314 13 ~CBrushEntity 0 4 525 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

315 9 get_width 0 4 526 21 PackResult::get_width 0 1 65 0
45
inline int PackResult::get_width(void) const;

316 10 get_height 0 4 526 22 PackResult::get_height 0 1 66 0
46
inline int PackResult::get_height(void) const;

317 15 get_unused_area 0 4 526 27 PackResult::get_unused_area 0 1 67 0
51
inline int PackResult::get_unused_area(void) const;

318 10 PackResult 0 4 526 22 PackResult::PackResult 0 1 64 0
60
inline PackResult::PackResult(PackResult const &) = default;

319 11 ~PackResult 0 4 526 23 PackResult::~PackResult 0 0 0
30
PackResult::~PackResult(void);

320 5 get_x 0 4 527 22 TextureLocation::get_x 0 1 69 0
46
inline int TextureLocation::get_x(void) const;

321 5 get_y 0 4 527 22 TextureLocation::get_y 0 1 70 0
46
inline int TextureLocation::get_y(void) const;

322 9 get_width 0 4 527 26 TextureLocation::get_width 0 1 71 0
50
inline int TextureLocation::get_width(void) const;

323 10 get_height 0 4 527 27 TextureLocation::get_height 0 1 72 0
51
inline int TextureLocation::get_height(void) const;

324 11 get_rotated 0 4 527 28 TextureLocation::get_rotated 0 1 73 0
53
inline bool TextureLocation::get_rotated(void) const;

325 15 TextureLocation 0 4 527 32 TextureLocation::TextureLocation 0 1 68 0
75
inline TextureLocation::TextureLocation(TextureLocation const &) = default;

326 16 ~TextureLocation 0 4 527 33 TextureLocation::~TextureLocation 0 0 0
40
TextureLocation::~TextureLocation(void);

327 15 getTextureCount 0 6 528 30 TexturePacker::getTextureCount 0 1 74 0
53
virtual int TexturePacker::getTextureCount(void) = 0;

328 15 setTextureCount 0 6 528 30 TexturePacker::setTextureCount 0 1 75 35
// number of textures to consider..
60
virtual void TexturePacker::setTextureCount(int tcount) = 0;

329 10 addTexture 0 6 528 25 TexturePacker::addTexture 0 1 76 21
// add textures 0 - n
61
virtual void TexturePacker::addTexture(int wid, int hit) = 0;

330 15 wouldTextureFit 0 6 528 30 TexturePacker::wouldTextureFit 0 1 77 0
135
virtual bool TexturePacker::wouldTextureFit(int wid, int hit, bool forcePowerOfTwo, bool onePixelBorder, int max_wid, int max_hit) = 0;

331 13 addNewTexture 0 6 528 28 TexturePacker::addNewTexture 0 1 78 0
64
virtual void TexturePacker::addNewTexture(int wid, int hit) = 0;

332 12 packTextures 0 6 528 27 TexturePacker::packTextures 0 1 79 74
// pack the textures, the return code is the amount of wasted/unused area.
94
virtual PackResult TexturePacker::packTextures(bool forcePowerOfTwo, bool onePixelBorder) = 0;

333 18 getTextureLocation 0 6 528 33 TexturePacker::getTextureLocation 0 1 80 58
// returns true if the texture has been rotated 90 degrees
73
virtual TextureLocation TexturePacker::getTextureLocation(int index) = 0;

334 19 createTexturePacker 0 4 528 34 TexturePacker::createTexturePacker 0 1 81 0
63
static TexturePacker *TexturePacker::createTexturePacker(void);

335 20 releaseTexturePacker 0 4 528 35 TexturePacker::releaseTexturePacker 0 1 82 0
67
static void TexturePacker::releaseTexturePacker(TexturePacker *tp);

336 14 ~TexturePacker 0 4 528 29 TexturePacker::~TexturePacker 0 0 0
36
TexturePacker::~TexturePacker(void);

337 10 initialize 0 4 529 20 RayTrace::initialize 0 1 85 0
39
static void RayTrace::initialize(void);

338 8 destruct 0 4 529 18 RayTrace::destruct 0 1 86 0
37
static void RayTrace::destruct(void);

339 8 RayTrace 0 4 529 18 RayTrace::RayTrace 0 2 83 84 0
97
inline RayTrace::RayTrace(void) = default;
inline RayTrace::RayTrace(RayTrace const &) = default;

340 9 ~RayTrace 0 4 529 19 RayTrace::~RayTrace 0 0 0
26
RayTrace::~RayTrace(void);

341 17 RayTraceHitResult 0 4 530 36 RayTraceHitResult::RayTraceHitResult 0 2 87 88 0
132
inline RayTraceHitResult::RayTraceHitResult(void);
inline RayTraceHitResult::RayTraceHitResult(RayTraceHitResult const &) = default;

342 7 has_hit 0 4 530 26 RayTraceHitResult::has_hit 0 1 89 0
51
inline bool RayTraceHitResult::has_hit(void) const;

343 14 get_hit_normal 0 4 530 33 RayTraceHitResult::get_hit_normal 0 1 90 0
62
inline LVector3 RayTraceHitResult::get_hit_normal(void) const;

344 6 get_uv 0 4 530 25 RayTraceHitResult::get_uv 0 1 91 0
54
inline LVector2 RayTraceHitResult::get_uv(void) const;

345 11 get_prim_id 0 4 530 30 RayTraceHitResult::get_prim_id 0 1 92 0
63
inline unsigned int RayTraceHitResult::get_prim_id(void) const;

346 11 get_geom_id 0 4 530 30 RayTraceHitResult::get_geom_id 0 1 93 0
63
inline unsigned int RayTraceHitResult::get_geom_id(void) const;

347 16 get_hit_fraction 0 4 530 35 RayTraceHitResult::get_hit_fraction 0 1 94 0
61
inline float RayTraceHitResult::get_hit_fraction(void) const;

348 18 ~RayTraceHitResult 0 4 530 37 RayTraceHitResult::~RayTraceHitResult 0 0 0
44
RayTraceHitResult::~RayTraceHitResult(void);

349 13 RayTraceScene 0 4 531 28 RayTraceScene::RayTraceScene 0 2 95 96 0
105
RayTraceScene::RayTraceScene(void);
inline RayTraceScene::RayTraceScene(RayTraceScene const &) = default;

350 12 add_geometry 0 4 531 27 RayTraceScene::add_geometry 0 1 97 0
57
void RayTraceScene::add_geometry(RayTraceGeometry *geom);

351 15 remove_geometry 0 4 531 30 RayTraceScene::remove_geometry 0 1 98 0
60
void RayTraceScene::remove_geometry(RayTraceGeometry *geom);

352 10 remove_all 0 4 531 25 RayTraceScene::remove_all 0 1 99 0
37
void RayTraceScene::remove_all(void);

353 10 trace_line 0 4 531 25 RayTraceScene::trace_line 0 1 100 0
116
inline RayTraceHitResult RayTraceScene::trace_line(LPoint3 const &start, LPoint3 const &end, BitMask32 const &mask);

354 9 trace_ray 0 4 531 24 RayTraceScene::trace_ray 0 1 101 0
132
RayTraceHitResult RayTraceScene::trace_ray(LPoint3 const &origin, LVector3 const &direction, float distance, BitMask32 const &mask);

355 17 set_build_quality 0 4 531 32 RayTraceScene::set_build_quality 0 1 102 0
51
void RayTraceScene::set_build_quality(int quality);

356 6 update 0 4 531 21 RayTraceScene::update 0 1 103 0
33
void RayTraceScene::update(void);

357 12 get_geometry 0 4 531 27 RayTraceScene::get_geometry 0 1 104 0
75
inline RayTraceGeometry *RayTraceScene::get_geometry(unsigned int geom_id);

358 14 get_class_type 0 4 534 32 RayTraceGeometry::get_class_type 0 1 105 0
57
static TypeHandle RayTraceGeometry::get_class_type(void);

359 8 set_mask 0 4 534 26 RayTraceGeometry::set_mask 0 2 106 107 0
114
inline void RayTraceGeometry::set_mask(BitMask32 const &mask);
void RayTraceGeometry::set_mask(unsigned int mask);

360 8 get_mask 0 4 534 26 RayTraceGeometry::get_mask 0 1 108 0
56
inline BitMask32 RayTraceGeometry::get_mask(void) const;

361 11 get_geom_id 0 4 534 29 RayTraceGeometry::get_geom_id 0 1 109 0
62
inline unsigned int RayTraceGeometry::get_geom_id(void) const;

362 17 set_build_quality 0 4 534 35 RayTraceGeometry::set_build_quality 0 1 110 0
54
void RayTraceGeometry::set_build_quality(int quality);

363 5 build 0 6 534 23 RayTraceGeometry::build 0 1 111 0
47
virtual void RayTraceGeometry::build(void) = 0;

364 14 get_class_type 0 4 536 36 RayTraceTriangleMesh::get_class_type 0 1 113 0
61
static TypeHandle RayTraceTriangleMesh::get_class_type(void);

365 20 RayTraceTriangleMesh 0 4 536 42 RayTraceTriangleMesh::RayTraceTriangleMesh 0 1 112 0
73
RayTraceTriangleMesh::RayTraceTriangleMesh(std::string const &name = "");

366 12 add_triangle 0 4 536 34 RayTraceTriangleMesh::add_triangle 0 1 114 0
97
void RayTraceTriangleMesh::add_triangle(LPoint3 const &p1, LPoint3 const &p2, LPoint3 const &p3);

367 23 add_triangles_from_geom 0 4 536 45 RayTraceTriangleMesh::add_triangles_from_geom 0 1 115 0
105
void RayTraceTriangleMesh::add_triangles_from_geom(Geom const *geom, TransformState const *ts = nullptr);

368 21 ~RayTraceTriangleMesh 0 4 536 43 RayTraceTriangleMesh::~RayTraceTriangleMesh 0 0 0
50
RayTraceTriangleMesh::~RayTraceTriangleMesh(void);

369 4 make 0 4 537 19 BSPFaceAttrib::make 0 1 116 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

370 12 make_default 0 4 537 27 BSPFaceAttrib::make_default 0 1 117 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

371 15 make_ignore_pvs 0 4 537 30 BSPFaceAttrib::make_ignore_pvs 0 1 118 0
75
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_ignore_pvs(void);

372 12 get_material 0 4 537 27 BSPFaceAttrib::get_material 0 1 119 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

373 13 get_face_type 0 4 537 28 BSPFaceAttrib::get_face_type 0 1 120 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

374 14 get_ignore_pvs 0 4 537 29 BSPFaceAttrib::get_ignore_pvs 0 1 121 0
54
inline bool BSPFaceAttrib::get_ignore_pvs(void) const;

375 14 get_class_slot 0 4 537 29 BSPFaceAttrib::get_class_slot 0 1 122 0
47
static int BSPFaceAttrib::get_class_slot(void);

376 14 get_class_type 0 4 537 29 BSPFaceAttrib::get_class_type 0 1 123 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

377 14 ~BSPFaceAttrib 0 4 537 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

378 9 BSPLoader 0 4 539 20 BSPLoader::BSPLoader 0 1 124 0
27
BSPLoader::BSPLoader(void);

379 4 read 0 4 539 15 BSPLoader::read 0 1 125 0
43
bool BSPLoader::read(Filename const &file);

380 16 do_optimizations 0 4 539 27 BSPLoader::do_optimizations 0 1 126 0
39
void BSPLoader::do_optimizations(void);

381 9 set_gamma 0 4 539 20 BSPLoader::set_gamma 0 1 127 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

382 9 get_gamma 0 4 539 20 BSPLoader::get_gamma 0 1 128 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

383 7 set_win 0 4 539 18 BSPLoader::set_win 0 1 129 0
45
void BSPLoader::set_win(GraphicsWindow *win);

384 10 set_camera 0 4 539 21 BSPLoader::set_camera 0 1 130 0
51
void BSPLoader::set_camera(NodePath const &camera);

385 10 set_render 0 4 539 21 BSPLoader::set_render 0 1 131 0
51
void BSPLoader::set_render(NodePath const &render);

386 20 set_shader_generator 0 4 539 31 BSPLoader::set_shader_generator 0 1 132 0
64
void BSPLoader::set_shader_generator(BSPShaderGenerator *shgen);

387 19 set_want_visibility 0 4 539 30 BSPLoader::set_want_visibility 0 1 133 0
47
void BSPLoader::set_want_visibility(bool flag);

388 18 set_want_lightmaps 0 4 539 29 BSPLoader::set_want_lightmaps 0 1 134 0
46
void BSPLoader::set_want_lightmaps(bool flag);

389 16 set_physics_type 0 4 539 27 BSPLoader::set_physics_type 0 1 135 0
43
void BSPLoader::set_physics_type(int type);

390 19 set_visualize_leafs 0 4 539 30 BSPLoader::set_visualize_leafs 0 1 136 0
47
void BSPLoader::set_visualize_leafs(bool flag);

391 18 set_materials_file 0 4 539 29 BSPLoader::set_materials_file 0 1 137 0
57
void BSPLoader::set_materials_file(Filename const &file);

392 13 set_wireframe 0 4 539 24 BSPLoader::set_wireframe 0 1 138 0
41
void BSPLoader::set_wireframe(bool flag);

393 13 get_wireframe 0 4 539 24 BSPLoader::get_wireframe 0 1 139 0
49
inline bool BSPLoader::get_wireframe(void) const;

394 10 get_camera 0 4 539 21 BSPLoader::get_camera 0 1 140 0
50
inline NodePath BSPLoader::get_camera(void) const;

395 11 trace_decal 0 4 539 22 BSPLoader::trace_decal 0 1 141 0
158
inline NodePath BSPLoader::trace_decal(std::string const &decal_material, LPoint2 const &decal_scale, float rotate, LPoint3 const &start, LPoint3 const &end);

396 27 get_closest_cubemap_texture 0 4 539 38 BSPLoader::get_closest_cubemap_texture 0 1 142 0
68
Texture *BSPLoader::get_closest_cubemap_texture(LPoint3 const &pos);

397 14 build_cubemaps 0 4 539 25 BSPLoader::build_cubemaps 0 1 143 0
37
void BSPLoader::build_cubemaps(void);

398 16 set_want_shadows 0 4 539 27 BSPLoader::set_want_shadows 0 1 144 0
44
void BSPLoader::set_want_shadows(bool flag);

399 14 set_shadow_dir 0 4 539 25 BSPLoader::set_shadow_dir 0 1 145 0
52
void BSPLoader::set_shadow_dir(LVector3 const &dir);

400 16 extract_modelnum 0 4 539 27 BSPLoader::extract_modelnum 0 1 146 0
44
int BSPLoader::extract_modelnum(int entnum);

401 16 get_model_bounds 0 4 539 27 BSPLoader::get_model_bounds 0 1 147 0
77
void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

402 28 set_server_entity_dispatcher 0 4 539 39 BSPLoader::set_server_entity_dispatcher 0 1 148 0
67
void BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

403 27 link_server_entity_to_class 0 4 539 38 BSPLoader::link_server_entity_to_class 0 1 149 0
89
void BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

404 6 set_ai 0 4 539 17 BSPLoader::set_ai 0 1 150 0
32
void BSPLoader::set_ai(bool ai);

405 5 is_ai 0 4 539 16 BSPLoader::is_ai 0 1 151 0
41
inline bool BSPLoader::is_ai(void) const;

406 10 trace_line 0 4 539 21 BSPLoader::trace_line 0 1 152 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

407 9 clip_line 0 4 539 20 BSPLoader::clip_line 0 1 153 0
71
LPoint3 BSPLoader::clip_line(LPoint3 const &start, LPoint3 const &end);

408 20 link_entity_to_class 0 4 539 31 BSPLoader::link_entity_to_class 0 1 154 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

409 28 get_py_entity_by_target_name 0 4 539 39 BSPLoader::get_py_entity_by_target_name 0 1 155 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

410 17 find_all_entities 0 4 539 28 BSPLoader::find_all_entities 0 1 156 0
69
PyObject *BSPLoader::find_all_entities(std::string const &classname);

411 20 get_entity_keyvalues 0 4 539 31 BSPLoader::get_entity_keyvalues 0 1 157 0
71
void BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

412 18 link_cent_to_pyent 0 4 539 29 BSPLoader::link_cent_to_pyent 0 1 158 0
63
void BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

413 16 remove_py_entity 0 4 539 27 BSPLoader::remove_py_entity 0 1 159 0
48
void BSPLoader::remove_py_entity(PyObject *ent);

414 16 get_num_entities 0 4 539 27 BSPLoader::get_num_entities 0 1 160 0
51
inline int BSPLoader::get_num_entities(void) const;

415 16 get_entity_value 0 4 539 27 BSPLoader::get_entity_value 0 1 161 0
75
std::string BSPLoader::get_entity_value(int entnum, char const *key) const;

416 22 get_entity_value_float 0 4 539 33 BSPLoader::get_entity_value_float 0 1 162 0
75
float BSPLoader::get_entity_value_float(int entnum, char const *key) const;

417 20 get_entity_value_int 0 4 539 31 BSPLoader::get_entity_value_int 0 1 163 0
71
int BSPLoader::get_entity_value_int(int entnum, char const *key) const;

418 23 get_entity_value_vector 0 4 539 34 BSPLoader::get_entity_value_vector 0 1 164 0
79
LVector3 BSPLoader::get_entity_value_vector(int entnum, char const *key) const;

419 22 get_entity_value_color 0 4 539 33 BSPLoader::get_entity_value_color 0 1 165 0
95
LColor BSPLoader::get_entity_value_color(int entnum, char const *key, bool scale = true) const;

420 10 get_entity 0 4 539 21 BSPLoader::get_entity 0 1 166 0
49
NodePath BSPLoader::get_entity(int entnum) const;

421 9 get_model 0 4 539 20 BSPLoader::get_model 0 1 167 0
50
NodePath BSPLoader::get_model(int modelnum) const;

422 12 get_c_entity 0 4 539 23 BSPLoader::get_c_entity 0 1 168 0
61
CBaseEntity *BSPLoader::get_c_entity(int const entnum) const;

423 9 find_leaf 0 4 539 20 BSPLoader::find_leaf 0 2 169 170 0
98
inline int BSPLoader::find_leaf(NodePath const &np);
int BSPLoader::find_leaf(LPoint3 const &pos);

424 9 find_node 0 4 539 20 BSPLoader::find_node 0 1 171 0
45
int BSPLoader::find_node(LPoint3 const &pos);

425 18 is_cluster_visible 0 4 539 29 BSPLoader::is_cluster_visible 0 1 172 0
72
bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

426 15 pvs_bounds_test 0 4 539 26 BSPLoader::pvs_bounds_test 0 1 173 0
109
bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds, unsigned int required_leaf_flags = 0);

427 15 make_net_bounds 0 4 539 26 BSPLoader::make_net_bounds 0 1 174 0
147
ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

428 16 has_active_level 0 4 539 27 BSPLoader::has_active_level 0 1 175 0
52
inline bool BSPLoader::has_active_level(void) const;

429 14 has_visibility 0 4 539 25 BSPLoader::has_visibility 0 1 176 0
50
inline bool BSPLoader::has_visibility(void) const;

430 7 cleanup 0 4 539 18 BSPLoader::cleanup 0 1 177 0
30
void BSPLoader::cleanup(void);

431 10 get_result 0 4 539 21 BSPLoader::get_result 0 1 178 0
50
inline NodePath BSPLoader::get_result(void) const;

432 16 set_current_leaf 0 4 539 27 BSPLoader::set_current_leaf 0 1 179 0
50
inline void BSPLoader::set_current_leaf(int leaf);

433 16 get_current_leaf 0 4 539 27 BSPLoader::get_current_leaf 0 1 180 0
51
inline int BSPLoader::get_current_leaf(void) const;

434 16 get_num_visleafs 0 4 539 27 BSPLoader::get_num_visleafs 0 1 181 0
51
inline int BSPLoader::get_num_visleafs(void) const;

435 15 get_leaf_center 0 4 539 26 BSPLoader::get_leaf_center 0 1 182 0
58
inline LPoint3 BSPLoader::get_leaf_center(int leaf) const;

436 15 get_lightcoords 0 4 539 26 BSPLoader::get_lightcoords 0 1 183 0
73
LTexCoord BSPLoader::get_lightcoords(int facenum, LVector3 const &point);

437 6 update 0 4 539 17 BSPLoader::update 0 1 184 0
29
void BSPLoader::update(void);

438 14 get_global_ptr 0 4 539 25 BSPLoader::get_global_ptr 0 1 185 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

439 10 ~BSPLoader 0 4 539 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

440 15 add_permutation 0 4 541 35 ShaderPermutations::add_permutation 0 1 188 0
104
inline void ShaderPermutations::add_permutation(std::string const &key, std::string const &value = "1");

441 9 add_input 0 4 541 29 ShaderPermutations::add_input 0 1 189 0
82
void ShaderPermutations::add_input(ShaderInput const &inp, bool important = true);

442 8 add_flag 0 4 541 28 ShaderPermutations::add_flag 0 1 190 0
44
void ShaderPermutations::add_flag(int flag);

443 10 operator < 0 4 541 30 ShaderPermutations::operator < 0 1 191 0
75
bool ShaderPermutations::operator <(ShaderPermutations const &other) const;

444 18 ShaderPermutations 0 4 541 38 ShaderPermutations::ShaderPermutations 0 2 186 187 0
147
inline ShaderPermutations::ShaderPermutations(void) = default;
inline ShaderPermutations::ShaderPermutations(ShaderPermutations const &) = default;

445 19 ~ShaderPermutations 0 4 541 39 ShaderPermutations::~ShaderPermutations 0 0 0
46
ShaderPermutations::~ShaderPermutations(void);

446 24 upcast_to_ReferenceCount 0 12 542 36 ShaderSpec::upcast_to_ReferenceCount 0 1 194 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

447 22 downcast_to_ShaderSpec 0 12 532 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

448 17 upcast_to_Namable 0 12 542 29 ShaderSpec::upcast_to_Namable 0 1 195 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

449 22 downcast_to_ShaderSpec 0 12 543 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

450 17 read_shader_files 0 4 542 29 ShaderSpec::read_shader_files 0 1 192 0
117
void ShaderSpec::read_shader_files(Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file);

451 14 get_class_type 0 4 542 26 ShaderSpec::get_class_type 0 1 193 0
51
static TypeHandle ShaderSpec::get_class_type(void);

452 11 ~ShaderSpec 0 4 542 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

453 18 BSPShaderGenerator 0 4 546 38 BSPShaderGenerator::BSPShaderGenerator 0 2 196 197 0
200
BSPShaderGenerator::BSPShaderGenerator(GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline BSPShaderGenerator::BSPShaderGenerator(BSPShaderGenerator const &) = default;

454 13 set_sun_light 0 4 546 33 BSPShaderGenerator::set_sun_light 0 1 198 0
59
void BSPShaderGenerator::set_sun_light(NodePath const &np);

455 12 start_update 0 4 546 32 BSPShaderGenerator::start_update 0 1 199 0
44
void BSPShaderGenerator::start_update(void);

456 10 add_shader 0 4 546 30 BSPShaderGenerator::add_shader 0 1 200 0
66
void BSPShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

457 19 has_shadow_sunlight 0 4 546 39 BSPShaderGenerator::has_shadow_sunlight 0 1 201 0
64
inline bool BSPShaderGenerator::has_shadow_sunlight(void) const;

458 22 get_pssm_array_texture 0 4 546 42 BSPShaderGenerator::get_pssm_array_texture 0 1 202 0
71
inline Texture *BSPShaderGenerator::get_pssm_array_texture(void) const;

459 12 get_pssm_rig 0 4 546 32 BSPShaderGenerator::get_pssm_rig 0 1 203 0
67
inline PSSMCameraRig *BSPShaderGenerator::get_pssm_rig(void) const;

460 18 set_shader_quality 0 4 546 38 BSPShaderGenerator::set_shader_quality 0 1 204 0
57
void BSPShaderGenerator::set_shader_quality(int quality);

461 18 get_shader_quality 0 4 546 38 BSPShaderGenerator::get_shader_quality 0 1 205 0
62
inline int BSPShaderGenerator::get_shader_quality(void) const;

462 20 set_identity_cubemap 0 4 546 40 BSPShaderGenerator::set_identity_cubemap 0 1 206 0
67
static void BSPShaderGenerator::set_identity_cubemap(Texture *tex);

463 20 get_identity_cubemap 0 4 546 40 BSPShaderGenerator::get_identity_cubemap 0 1 207 0
63
static Texture *BSPShaderGenerator::get_identity_cubemap(void);

464 11 make_shader 0 4 546 31 BSPShaderGenerator::make_shader 0 1 208 0
121
static ConstPointerTo< Shader > BSPShaderGenerator::make_shader(ShaderSpec const *spec, ShaderPermutations const &perms);

465 14 get_class_type 0 4 546 34 BSPShaderGenerator::get_class_type 0 1 209 0
59
static TypeHandle BSPShaderGenerator::get_class_type(void);

466 19 ~BSPShaderGenerator 0 4 546 39 BSPShaderGenerator::~BSPShaderGenerator 0 0 0
46
BSPShaderGenerator::~BSPShaderGenerator(void);

467 14 get_class_type 0 4 548 32 BSPCullTraverser::get_class_type 0 1 212 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

468 16 BSPCullTraverser 0 4 548 34 BSPCullTraverser::BSPCullTraverser 0 2 210 211 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

469 17 ~BSPCullTraverser 0 4 548 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

470 14 get_class_type 0 4 550 25 BSPRender::get_class_type 0 1 215 0
50
static TypeHandle BSPRender::get_class_type(void);

471 9 BSPRender 0 4 550 20 BSPRender::BSPRender 0 2 213 214 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

472 10 ~BSPRender 0 4 550 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

473 14 get_class_type 0 4 551 23 BSPRoot::get_class_type 0 1 218 0
48
static TypeHandle BSPRoot::get_class_type(void);

474 7 BSPRoot 0 4 551 16 BSPRoot::BSPRoot 0 2 216 217 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

475 8 ~BSPRoot 0 4 551 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

476 14 get_class_type 0 4 552 23 BSPProp::get_class_type 0 1 221 0
48
static TypeHandle BSPProp::get_class_type(void);

477 7 BSPProp 0 4 552 16 BSPProp::BSPProp 0 2 219 220 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

478 8 ~BSPProp 0 4 552 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

479 14 get_class_type 0 4 554 24 BSPModel::get_class_type 0 1 224 0
49
static TypeHandle BSPModel::get_class_type(void);

480 8 BSPModel 0 4 554 18 BSPModel::BSPModel 0 2 222 223 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

481 9 ~BSPModel 0 4 554 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

482 20 VertexLitGenericSpec 0 4 556 42 VertexLitGenericSpec::VertexLitGenericSpec 0 1 225 0
49
VertexLitGenericSpec::VertexLitGenericSpec(void);

483 21 ~VertexLitGenericSpec 0 4 556 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

484 22 LightmappedGenericSpec 0 4 557 46 LightmappedGenericSpec::LightmappedGenericSpec 0 1 226 0
53
LightmappedGenericSpec::LightmappedGenericSpec(void);

485 23 ~LightmappedGenericSpec 0 4 557 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

486 16 UnlitGenericSpec 0 4 558 34 UnlitGenericSpec::UnlitGenericSpec 0 1 227 0
41
UnlitGenericSpec::UnlitGenericSpec(void);

487 17 ~UnlitGenericSpec 0 4 558 35 UnlitGenericSpec::~UnlitGenericSpec 0 0 0
42
UnlitGenericSpec::~UnlitGenericSpec(void);

488 14 UnlitNoMatSpec 0 4 559 30 UnlitNoMatSpec::UnlitNoMatSpec 0 1 228 0
37
UnlitNoMatSpec::UnlitNoMatSpec(void);

489 15 ~UnlitNoMatSpec 0 4 559 31 UnlitNoMatSpec::~UnlitNoMatSpec 0 0 0
38
UnlitNoMatSpec::~UnlitNoMatSpec(void);

490 13 CSMRenderSpec 0 4 560 28 CSMRenderSpec::CSMRenderSpec 0 1 229 0
35
CSMRenderSpec::CSMRenderSpec(void);

491 14 ~CSMRenderSpec 0 4 560 29 CSMRenderSpec::~CSMRenderSpec 0 0 0
36
CSMRenderSpec::~CSMRenderSpec(void);

492 10 SkyBoxSpec 0 4 561 22 SkyBoxSpec::SkyBoxSpec 0 1 230 0
29
SkyBoxSpec::SkyBoxSpec(void);

493 11 ~SkyBoxSpec 0 4 561 23 SkyBoxSpec::~SkyBoxSpec 0 0 0
30
SkyBoxSpec::~SkyBoxSpec(void);

494 4 make 0 4 562 24 AmbientBoostEffect::make 0 1 231 0
69
static ConstPointerTo< RenderEffect > AmbientBoostEffect::make(void);

495 14 get_class_type 0 4 562 34 AmbientBoostEffect::get_class_type 0 1 232 0
59
static TypeHandle AmbientBoostEffect::get_class_type(void);

496 19 ~AmbientBoostEffect 0 4 562 39 AmbientBoostEffect::~AmbientBoostEffect 0 0 0
46
AmbientBoostEffect::~AmbientBoostEffect(void);

497 14 Audio3DManager 0 4 564 30 Audio3DManager::Audio3DManager 0 2 233 234 0
228
Audio3DManager::Audio3DManager(AudioManager *mgr, NodePath const &listener_target = NodePath(), NodePath const &root = NodePath(), int task_priority = 51);
inline Audio3DManager::Audio3DManager(Audio3DManager const &) = default;

498 19 set_distance_factor 0 4 564 35 Audio3DManager::set_distance_factor 0 1 235 0
68
inline void Audio3DManager::set_distance_factor(PN_stdfloat factor);

499 19 get_distance_factor 0 4 564 35 Audio3DManager::get_distance_factor 0 1 236 0
67
inline PN_stdfloat Audio3DManager::get_distance_factor(void) const;

500 18 set_doppler_factor 0 4 564 34 Audio3DManager::set_doppler_factor 0 1 237 0
67
inline void Audio3DManager::set_doppler_factor(PN_stdfloat factor);

501 18 get_doppler_factor 0 4 564 34 Audio3DManager::get_doppler_factor 0 1 238 0
66
inline PN_stdfloat Audio3DManager::get_doppler_factor(void) const;

502 19 set_drop_off_factor 0 4 564 35 Audio3DManager::set_drop_off_factor 0 1 239 0
68
inline void Audio3DManager::set_drop_off_factor(PN_stdfloat factor);

503 19 get_drop_off_factor 0 4 564 35 Audio3DManager::get_drop_off_factor 0 1 240 0
67
inline PN_stdfloat Audio3DManager::get_drop_off_factor(void) const;

504 22 set_sound_min_distance 0 4 564 38 Audio3DManager::set_sound_min_distance 0 1 241 0
88
inline void Audio3DManager::set_sound_min_distance(AudioSound *sound, PN_stdfloat dist);

505 22 get_sound_min_distance 0 4 564 38 Audio3DManager::get_sound_min_distance 0 1 242 0
83
inline PN_stdfloat Audio3DManager::get_sound_min_distance(AudioSound *sound) const;

506 22 set_sound_max_distance 0 4 564 38 Audio3DManager::set_sound_max_distance 0 1 243 0
88
inline void Audio3DManager::set_sound_max_distance(AudioSound *sound, PN_stdfloat dist);

507 22 get_sound_max_distance 0 4 564 38 Audio3DManager::get_sound_max_distance 0 1 244 0
83
inline PN_stdfloat Audio3DManager::get_sound_max_distance(AudioSound *sound) const;

508 15 attach_listener 0 4 564 31 Audio3DManager::attach_listener 0 1 245 0
70
inline void Audio3DManager::attach_listener(NodePath const &listener);

509 15 detach_listener 0 4 564 31 Audio3DManager::detach_listener 0 1 246 0
50
inline void Audio3DManager::detach_listener(void);

510 8 load_sfx 0 4 564 24 Audio3DManager::load_sfx 0 1 247 0
81
inline PointerTo< AudioSound > Audio3DManager::load_sfx(std::string const &path);

511 22 attach_sound_to_object 0 4 564 38 Audio3DManager::attach_sound_to_object 0 1 248 0
87
void Audio3DManager::attach_sound_to_object(AudioSound *sound, NodePath const &object);

512 12 detach_sound 0 4 564 28 Audio3DManager::detach_sound 0 1 249 0
53
void Audio3DManager::detach_sound(AudioSound *sound);

513 18 print_audio_digest 0 4 564 34 Audio3DManager::print_audio_digest 0 1 250 0
46
void Audio3DManager::print_audio_digest(void);

514 6 update 0 4 564 22 Audio3DManager::update 0 1 251 0
34
void Audio3DManager::update(void);

515 15 ~Audio3DManager 0 4 564 31 Audio3DManager::~Audio3DManager 0 0 0
38
Audio3DManager::~Audio3DManager(void);

251
1 0 0 7 12 565 263 0 0 0 
2 0 0 7 12 565 263 0 0 1 6 param0 0 566  
3 0 0 7 2 570 0 0 0 1 4 name 1 569  
4 0 0 7 2 570 0 0 0 2 4 name 1 569  7 uv_name 1 569  
5 0 0 7 3 570 0 0 0 0 
6 0 0 7 4 570 0 0 0 0 
7 0 0 7 5 570 0 0 0 0 
8 0 0 7 6 570 0 0 0 0 
9 0 0 7 7 570 0 0 0 0 
10 0 0 7 8 570 0 0 0 0 
11 0 0 7 9 570 0 0 0 0 
12 0 0 7 10 570 0 0 0 0 
13 0 0 7 11 570 0 0 0 0 
14 0 0 7 16 573 283 0 0 1 4 copy 1 571  
15 0 0 7 16 573 283 0 0 1 4 name 1 569  
16 0 0 7 17 573 283 0 0 2 4 this 3 573  4 copy 1 571  
17 0 0 4 18 574 0 0 0 3 4 this 3 573  3 key 1 569  5 value 1 569  
18 0 0 6 19 569 0 0 0 2 4 this 3 571  3 key 1 569  
19 0 0 6 20 575 0 0 0 1 4 this 3 571  
20 0 0 6 21 569 0 0 0 2 4 this 3 571  1 i 1 575  
21 0 0 6 22 569 0 0 0 2 4 this 3 571  1 i 1 575  
22 0 0 6 23 521 0 0 0 2 4 this 3 571  3 key 1 569  
23 0 0 6 24 577 0 0 0 2 4 this 3 571  3 key 1 569  
24 0 0 4 25 574 0 0 0 2 4 this 3 573  11 shader_name 1 569  
25 0 0 6 26 569 0 0 0 1 4 this 3 571  
26 0 0 7 27 579 0 0 0 1 4 this 3 571  
27 0 0 6 28 580 0 0 0 2 4 this 3 571  3 key 1 569  
28 0 0 6 29 580 0 0 0 1 4 this 3 571  
29 0 0 6 30 580 0 0 0 1 4 this 3 571  
30 0 0 6 31 569 0 0 0 1 4 this 3 571  
31 0 0 6 32 569 0 0 0 1 4 this 3 571  
32 0 0 7 33 571 0 0 0 1 4 file 1 581  
33 0 0 7 34 584 0 0 0 0 
34 0 0 7 38 586 0 0 0 1 3 mat 1 571  
35 0 0 7 39 586 0 0 0 1 3 mat 1 571  
36 0 0 7 40 586 0 0 0 0 
37 0 0 6 41 569 0 0 0 1 4 this 3 587  
38 0 0 6 42 580 0 0 0 1 4 this 3 587  
39 0 0 7 43 571 0 0 0 1 4 this 3 587  
40 0 0 6 44 521 0 0 0 0 
41 0 0 7 47 584 0 0 0 0 
42 0 0 7 51 589 297 0 0 0 
43 0 0 7 51 589 297 0 0 1 6 param0 0 590  
44 0 0 7 50 584 0 0 0 0 
45 0 0 6 52 521 0 0 0 1 4 this 3 590  
46 0 0 6 53 592 0 0 0 1 4 this 3 590  
47 0 0 7 57 593 302 0 0 0 
48 0 0 7 57 593 302 0 0 1 6 param0 0 594  
49 0 0 7 56 584 0 0 0 0 
50 0 0 7 58 598 0 0 0 1 4 this 3 594  
51 0 0 7 59 601 0 0 0 1 4 this 3 594  
52 0 0 7 63 602 308 0 0 0 
53 0 0 7 63 602 308 0 0 1 6 param0 0 603  
54 0 0 7 62 584 0 0 0 0 
55 0 0 7 64 606 0 0 0 1 4 this 3 603  
56 0 0 6 65 580 0 0 0 2 4 this 3 603  3 pos 1 607  
57 0 0 4 66 574 0 0 0 3 4 this 3 602  4 mins 1 598  4 maxs 1 598  
58 0 0 7 70 609 314 0 0 0 
59 0 0 7 70 609 314 0 0 1 6 param0 0 610  
60 0 0 7 69 584 0 0 0 0 
61 0 0 6 71 521 0 0 0 1 4 this 3 610  
62 0 0 7 72 613 0 0 0 1 4 this 3 610  
63 0 0 4 73 574 0 0 0 3 4 this 3 609  4 mins 1 598  4 maxs 1 598  
64 0 0 7 79 616 319 0 0 1 6 param0 0 614  
65 0 0 6 76 521 0 0 0 1 4 this 3 614  
66 0 0 6 77 521 0 0 0 1 4 this 3 614  
67 0 0 6 78 521 0 0 0 1 4 this 3 614  
68 0 0 7 87 619 326 0 0 1 6 param0 0 617  
69 0 0 6 82 521 0 0 0 1 4 this 3 617  
70 0 0 6 83 521 0 0 0 1 4 this 3 617  
71 0 0 6 84 521 0 0 0 1 4 this 3 617  
72 0 0 6 85 521 0 0 0 1 4 this 3 617  
73 0 0 6 86 580 0 0 0 1 4 this 3 617  
74 0 0 6 90 521 0 0 0 1 4 this 3 620  
75 0 0 4 91 574 0 0 35 // number of textures to consider.. 2 4 this 3 620  6 tcount 1 521  
76 0 0 4 92 574 0 0 21 // add textures 0 - n 3 4 this 3 620  3 wid 1 521  3 hit 1 521  
77 0 0 6 93 580 0 0 0 7 4 this 3 620  3 wid 1 521  3 hit 1 521  15 forcePowerOfTwo 1 580  14 onePixelBorder 1 580  7 max_wid 1 521  7 max_hit 1 521  
78 0 0 4 94 574 0 0 0 3 4 this 3 620  3 wid 1 521  3 hit 1 521  
79 0 0 7 95 616 319 0 74 // pack the textures, the return code is the amount of wasted/unused area. 3 4 this 3 620  15 forcePowerOfTwo 1 580  14 onePixelBorder 1 580  
80 0 0 7 96 619 326 0 58 // returns true if the texture has been rotated 90 degrees 2 4 this 3 620  5 index 1 521  
81 0 0 6 97 620 0 0 0 0 
82 0 0 4 98 574 0 0 0 1 2 tp 1 620  
83 0 0 7 103 621 340 0 0 0 
84 0 0 7 103 621 340 0 0 1 6 param0 0 622  
85 0 0 4 101 574 0 0 0 0 
86 0 0 4 102 574 0 0 0 0 
87 0 0 7 106 624 348 0 0 0 
88 0 0 7 106 624 348 0 0 1 6 param0 0 625  
89 0 0 6 107 580 0 0 0 1 4 this 3 625  
90 0 0 7 108 601 0 0 0 1 4 this 3 625  
91 0 0 7 109 629 0 0 0 1 4 this 3 625  
92 0 0 6 110 630 0 0 0 1 4 this 3 625  
93 0 0 6 111 630 0 0 0 1 4 this 3 625  
94 0 0 6 112 577 0 0 0 1 4 this 3 625  
95 0 0 7 116 631 0 0 0 0 
96 0 0 7 116 631 0 0 0 1 6 param0 0 632  
97 0 0 4 117 574 0 0 0 2 4 this 3 631  4 geom 1 634  
98 0 0 4 118 574 0 0 0 2 4 this 3 631  4 geom 1 634  
99 0 0 4 119 574 0 0 0 1 4 this 3 631  
100 0 0 7 121 624 348 0 0 4 4 this 3 631  5 start 1 607  3 end 1 607  4 mask 1 635  
101 0 0 7 122 624 348 0 0 5 4 this 3 631  6 origin 1 607  9 direction 1 639  8 distance 1 577  4 mask 1 635  
102 0 0 4 123 574 0 0 0 2 4 this 3 631  7 quality 1 521  
103 0 0 4 124 574 0 0 0 1 4 this 3 631  
104 0 0 7 125 634 0 0 0 2 4 this 3 631  7 geom_id 1 630  
105 0 0 7 128 584 0 0 0 0 
106 0 0 4 129 574 0 0 0 2 4 this 3 634  4 mask 1 635  
107 0 0 4 129 574 0 0 0 2 4 this 3 634  4 mask 1 630  
108 0 0 7 130 643 0 0 0 1 4 this 3 641  
109 0 0 6 131 630 0 0 0 1 4 this 3 641  
110 0 0 4 132 574 0 0 0 2 4 this 3 634  7 quality 1 521  
111 0 0 4 133 574 0 0 0 1 4 this 3 634  
112 0 0 7 136 644 368 0 0 1 4 name 1 569  
113 0 0 7 135 584 0 0 0 0 
114 0 0 4 137 574 0 0 0 4 4 this 3 644  2 p1 1 607  2 p2 1 607  2 p3 1 607  
115 0 0 4 138 574 0 0 0 3 4 this 3 644  4 geom 1 645  2 ts 1 648  
116 0 0 7 142 586 0 0 0 2 13 face_material 1 569  9 face_type 1 521  
117 0 0 7 143 586 0 0 0 0 
118 0 0 7 144 586 0 0 0 0 
119 0 0 6 145 569 0 0 0 1 4 this 3 651  
120 0 0 6 146 521 0 0 0 1 4 this 3 651  
121 0 0 6 147 580 0 0 0 1 4 this 3 651  
122 0 0 6 148 521 0 0 0 0 
123 0 0 7 150 584 0 0 0 0 
124 0 0 7 153 592 439 0 0 0 
125 0 0 6 154 580 0 0 0 2 4 this 3 592  4 file 1 581  
126 0 0 4 155 574 0 0 0 1 4 this 3 592  
127 0 0 4 156 574 0 0 0 3 4 this 3 592  5 gamma 1 653  10 overbright 1 521  
128 0 0 6 157 653 0 0 0 1 4 this 3 654  
129 0 0 4 158 574 0 0 0 2 4 this 3 592  3 win 1 656  
130 0 0 4 159 574 0 0 0 2 4 this 3 592  6 camera 1 658  
131 0 0 4 160 574 0 0 0 2 4 this 3 592  6 render 1 658  
132 0 0 4 161 574 0 0 0 2 4 this 3 592  5 shgen 1 660  
133 0 0 4 162 574 0 0 0 2 4 this 3 592  4 flag 1 580  
134 0 0 4 163 574 0 0 0 2 4 this 3 592  4 flag 1 580  
135 0 0 4 164 574 0 0 0 2 4 this 3 592  4 type 1 521  
136 0 0 4 165 574 0 0 0 2 4 this 3 592  4 flag 1 580  
137 0 0 4 166 574 0 0 0 2 4 this 3 592  4 file 1 581  
138 0 0 4 167 574 0 0 0 2 4 this 3 592  4 flag 1 580  
139 0 0 6 168 580 0 0 0 1 4 this 3 654  
140 0 0 7 169 613 0 0 0 1 4 this 3 654  
141 0 0 7 170 613 0 0 0 6 4 this 3 592  14 decal_material 1 569  11 decal_scale 1 661  6 rotate 1 577  5 start 1 607  3 end 1 607  
142 0 0 7 171 666 0 0 0 2 4 this 3 592  3 pos 1 607  
143 0 0 4 172 574 0 0 0 1 4 this 3 592  
144 0 0 4 173 574 0 0 0 2 4 this 3 592  4 flag 1 580  
145 0 0 4 174 574 0 0 0 2 4 this 3 592  3 dir 1 639  
146 0 0 6 175 521 0 0 0 2 4 this 3 592  6 entnum 1 521  
147 0 0 4 176 574 0 0 0 4 4 this 3 592  8 modelnum 1 521  4 mins 1 598  4 maxs 1 598  
148 0 0 4 177 574 0 0 0 2 4 this 3 592  10 dispatcher 1 667  
149 0 0 4 178 574 0 0 0 3 4 this 3 592  4 name 1 569  4 type 1 670  
150 0 0 4 179 574 0 0 0 2 4 this 3 592  2 ai 1 580  
151 0 0 6 180 580 0 0 0 1 4 this 3 654  
152 0 0 6 181 580 0 0 0 3 4 this 3 592  5 start 1 607  3 end 1 607  
153 0 0 7 182 598 0 0 0 3 4 this 3 592  5 start 1 607  3 end 1 607  
154 0 0 4 183 574 0 0 0 3 4 this 3 592  7 entname 1 569  4 type 1 670  
155 0 0 6 184 667 0 0 0 2 4 this 3 654  10 targetname 1 569  
156 0 0 6 185 667 0 0 0 2 4 this 3 592  9 classname 1 569  
157 0 0 4 186 574 0 0 0 3 4 this 3 592  4 list 1 667  6 entnum 1 673  
158 0 0 4 187 574 0 0 0 3 4 this 3 592  5 entum 1 521  5 pyent 1 667  
159 0 0 4 188 574 0 0 0 2 4 this 3 592  3 ent 1 667  
160 0 0 6 189 521 0 0 0 1 4 this 3 654  
161 0 0 6 190 569 0 0 0 3 4 this 3 654  6 entnum 1 521  3 key 1 569  
162 0 0 6 191 577 0 0 0 3 4 this 3 654  6 entnum 1 521  3 key 1 569  
163 0 0 6 192 521 0 0 0 3 4 this 3 654  6 entnum 1 521  3 key 1 569  
164 0 0 7 193 601 0 0 0 3 4 this 3 654  6 entnum 1 521  3 key 1 569  
165 0 0 7 194 677 0 0 0 4 4 this 3 654  6 entnum 1 521  3 key 1 569  5 scale 1 580  
166 0 0 7 195 613 0 0 0 2 4 this 3 654  6 entnum 1 521  
167 0 0 7 196 613 0 0 0 2 4 this 3 654  8 modelnum 1 521  
168 0 0 7 197 589 297 0 0 2 4 this 3 654  6 entnum 1 673  
169 0 0 6 198 521 0 0 0 2 4 this 3 592  3 pos 1 607  
170 0 0 6 198 521 0 0 0 2 4 this 3 592  2 np 1 658  
171 0 0 6 199 521 0 0 0 2 4 this 3 592  3 pos 1 607  
172 0 0 6 200 580 0 0 0 3 4 this 3 654  12 curr_cluster 1 521  7 cluster 1 521  
173 0 0 6 201 580 0 0 0 3 4 this 3 592  6 bounds 1 678  19 required_leaf_flags 1 630  
174 0 0 7 202 678 0 0 0 3 4 this 3 592  13 net_transform 1 648  8 original 1 678  
175 0 0 6 203 580 0 0 0 1 4 this 3 654  
176 0 0 6 204 580 0 0 0 1 4 this 3 654  
177 0 0 4 205 574 0 0 0 1 4 this 3 592  
178 0 0 7 206 613 0 0 0 1 4 this 3 654  
179 0 0 4 207 574 0 0 0 2 4 this 3 592  4 leaf 1 521  
180 0 0 6 208 521 0 0 0 1 4 this 3 654  
181 0 0 6 209 521 0 0 0 1 4 this 3 654  
182 0 0 7 210 598 0 0 0 2 4 this 3 654  4 leaf 1 521  
183 0 0 7 211 683 0 0 0 3 4 this 3 592  7 facenum 1 521  5 point 1 639  
184 0 0 4 212 574 0 0 0 1 4 this 3 592  
185 0 0 6 213 592 0 0 0 0 
186 0 0 7 221 684 445 0 0 0 
187 0 0 7 221 684 445 0 0 1 6 param0 0 685  
188 0 0 4 217 574 0 0 0 3 4 this 3 684  3 key 1 569  5 value 1 569  
189 0 0 4 218 574 0 0 0 3 4 this 3 684  3 inp 1 687  9 important 1 580  
190 0 0 4 219 574 0 0 0 2 4 this 3 684  4 flag 1 521  
191 0 0 6 220 580 0 0 0 2 4 this 3 685  5 other 1 685  
192 0 0 4 229 574 0 0 0 4 4 this 3 690  9 vert_file 1 581  10 pixel_file 1 581  9 geom_file 1 581  
193 0 0 7 230 584 0 0 0 0 
194 0 0 7 224 691 0 0 0 1 4 this 3 690  
195 0 0 6 227 692 0 0 0 1 4 this 3 690  
196 0 0 7 236 660 466 0 0 1 6 param0 0 693  
197 0 0 7 236 660 466 0 0 3 3 gsg 1 695  6 camera 1 658  6 render 1 658  
198 0 0 4 237 574 0 0 0 2 4 this 3 660  2 np 1 658  
199 0 0 4 238 574 0 0 0 1 4 this 3 660  
200 0 0 4 239 574 0 0 0 2 4 this 3 660  4 spec 1 690  
201 0 0 6 240 580 0 0 0 1 4 this 3 693  
202 0 0 7 241 666 0 0 0 1 4 this 3 693  
203 0 0 6 242 697 0 0 0 1 4 this 3 693  
204 0 0 4 243 574 0 0 0 2 4 this 3 660  7 quality 1 521  
205 0 0 6 244 521 0 0 0 1 4 this 3 693  
206 0 0 4 245 574 0 0 0 1 3 tex 1 666  
207 0 0 7 246 666 0 0 0 0 
208 0 0 7 247 703 0 0 0 2 4 spec 1 701  5 perms 1 685  
209 0 0 7 248 584 0 0 0 0 
210 0 0 7 253 706 469 0 0 1 6 param0 0 704  
211 0 0 7 253 706 469 0 0 2 4 trav 1 707  6 loader 1 592  
212 0 0 7 252 584 0 0 0 0 
213 0 0 7 257 710 472 0 0 1 6 param0 0 708  
214 0 0 7 257 710 472 0 0 2 4 name 1 569  6 loader 1 592  
215 0 0 7 256 584 0 0 0 0 
216 0 0 7 261 713 475 0 0 1 6 param0 0 711  
217 0 0 7 261 713 475 0 0 1 4 name 1 569  
218 0 0 7 260 584 0 0 0 0 
219 0 0 7 266 716 478 0 0 1 6 param0 0 714  
220 0 0 7 266 716 478 0 0 1 4 name 1 569  
221 0 0 7 265 584 0 0 0 0 
222 0 0 7 271 719 481 0 0 1 6 param0 0 717  
223 0 0 7 271 719 481 0 0 1 4 name 1 569  
224 0 0 7 270 584 0 0 0 0 
225 0 0 7 274 720 483 0 0 0 
226 0 0 7 277 721 485 0 0 0 
227 0 0 7 280 722 487 0 0 0 
228 0 0 7 283 723 489 0 0 0 
229 0 0 7 286 724 491 0 0 0 
230 0 0 7 289 725 493 0 0 0 
231 0 0 7 293 727 0 0 0 0 
232 0 0 7 294 584 0 0 0 0 
233 0 0 7 297 730 515 0 0 1 6 param0 0 728  
234 0 0 7 297 730 515 0 0 4 3 mgr 1 731  15 listener_target 1 658  4 root 1 658  13 task_priority 1 521  
235 0 0 4 298 574 0 0 0 2 4 this 3 730  6 factor 1 653  
236 0 0 6 299 653 0 0 0 1 4 this 3 728  
237 0 0 4 300 574 0 0 0 2 4 this 3 730  6 factor 1 653  
238 0 0 6 301 653 0 0 0 1 4 this 3 728  
239 0 0 4 302 574 0 0 0 2 4 this 3 730  6 factor 1 653  
240 0 0 6 303 653 0 0 0 1 4 this 3 728  
241 0 0 4 304 574 0 0 0 3 4 this 3 730  5 sound 1 733  4 dist 1 653  
242 0 0 6 305 653 0 0 0 2 4 this 3 728  5 sound 1 733  
243 0 0 4 306 574 0 0 0 3 4 this 3 730  5 sound 1 733  4 dist 1 653  
244 0 0 6 307 653 0 0 0 2 4 this 3 728  5 sound 1 733  
245 0 0 4 308 574 0 0 0 2 4 this 3 730  8 listener 1 658  
246 0 0 4 309 574 0 0 0 1 4 this 3 730  
247 0 0 7 310 733 0 0 0 2 4 this 3 730  4 path 1 569  
248 0 0 4 311 574 0 0 0 3 4 this 3 730  5 sound 1 733  6 object 1 658  
249 0 0 4 312 574 0 0 0 2 4 this 3 730  5 sound 1 733  
250 0 0 4 313 574 0 0 0 1 4 this 3 730  
251 0 0 4 314 574 0 0 0 1 4 this 3 730  
219
516 13 TextureStages 0 141313 13 TextureStages 13 TextureStages 0 0 0 1 262 263 0 10 252 253 254 255 256 257 258 259 260 261 0 0 0 0 0 752
/**
 * This simple interface maintains a single TextureStage object for each unique name.
 * It avoids the creation of duplicate TextureStages with the same name, which
 * reduces texture swapping and draw call overhead.
 *
 * If using our shader system, you should always use this interface to get TextureStages.
 * You are not required to change any properties on the returned TextureStage, as the shader
 * specification will know what to do with the TextureStage from the name.
 * 
 * For example, you do not need to call TextureStage::set_mode() or NodePath::set_tex_gen().
 * If you apply a texture to a node with the get_normalmap() stage, the shader specification
 * will know that the texture you supplied is to be treated as a normal map.
 */

517 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 264 283 0 18 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 0 0 1 0 518 0 0 0 0 0

518 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

519 17 BSPMaterialAttrib 0 141313 17 BSPMaterialAttrib 17 BSPMaterialAttrib 0 0 0 0 292 1 735 8 284 285 286 287 288 289 290 291 0 0 1 0 520 0 0 0 0 0

520 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

521 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

522 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 294 297 0 3 293 295 296 0 0 1 0 518 0 0 0 0 0

523 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 299 302 0 3 298 300 301 0 0 1 0 522 0 0 0 0 0

524 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 304 308 0 4 303 305 306 307 0 0 1 0 522 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

525 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 310 314 0 4 309 311 312 313 0 0 1 0 522 0 0 0 0 0

526 10 PackResult 0 141313 10 PackResult 10 PackResult 0 0 0 1 318 319 0 3 315 316 317 0 0 0 0 0 0

527 15 TextureLocation 0 141313 15 TextureLocation 15 TextureLocation 0 0 0 1 325 326 0 5 320 321 322 323 324 0 0 0 0 0 0

528 13 TexturePacker 0 141313 13 TexturePacker 13 TexturePacker 0 0 0 0 336 0 9 327 328 329 330 331 332 333 334 335 0 0 0 0 0 0

529 8 RayTrace 0 141313 8 RayTrace 8 RayTrace 0 0 0 1 339 340 0 2 337 338 0 0 0 0 0 0

530 17 RayTraceHitResult 0 141313 17 RayTraceHitResult 17 RayTraceHitResult 0 0 0 1 341 348 0 6 342 343 344 345 346 347 0 0 0 0 0 0

531 13 RayTraceScene 0 75777 13 RayTraceScene 13 RayTraceScene 0 0 0 1 349 0 0 8 350 351 352 353 354 355 356 357 0 0 1 0 532 0 0 0 1 533 0

532 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

533 0 0 794624 15 RayTraceScene:: 0 531 0 0 0 0 0 0 0 0 0 3 17 BUILD_QUALITY_LOW 32 RayTraceScene::BUILD_QUALITY_LOW 0
0 20 BUILD_QUALITY_MEDIUM 35 RayTraceScene::BUILD_QUALITY_MEDIUM 0
1 18 BUILD_QUALITY_HIGH 33 RayTraceScene::BUILD_QUALITY_HIGH 0
2 0 0

534 16 RayTraceGeometry 0 75777 16 RayTraceGeometry 16 RayTraceGeometry 0 0 0 0 0 0 6 358 359 360 361 362 363 0 0 1 0 535 0 0 0 0 0

535 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

536 20 RayTraceTriangleMesh 0 141313 20 RayTraceTriangleMesh 20 RayTraceTriangleMesh 0 0 0 1 365 368 0 3 364 366 367 0 0 1 0 534 0 0 0 0 0

537 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 377 1 736 8 369 370 371 372 373 374 375 376 0 0 1 0 520 0 0 0 1 538 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

538 0 0 794624 15 BSPFaceAttrib:: 0 537 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

539 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 378 439 0 60 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 0 0 0 0 1 540 58
/**
 * Loads and handles the operations of PBSP files.
 */

540 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 539 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

541 18 ShaderPermutations 0 141313 18 ShaderPermutations 18 ShaderPermutations 0 0 0 1 444 445 0 4 440 441 442 443 0 0 0 0 0 97
/**
 * Represents a list of #defines and variable inputs to a shader that is being generated.
 */

542 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 0 452 0 2 450 451 0 0 2 3 532 446 447 3 543 448 449 0 0 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

543 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

544 13 ShaderQuality 0 532481 13 ShaderQuality 13 ShaderQuality 0 0 0 0 0 0 0 0 0 0 3 17 SHADERQUALITY_LOW 17 SHADERQUALITY_LOW 0
0 20 SHADERQUALITY_MEDIUM 20 SHADERQUALITY_MEDIUM 0
1 18 SHADERQUALITY_HIGH 18 SHADERQUALITY_HIGH 0
2 0 0

545 10 CameraBits 0 532481 10 CameraBits 10 CameraBits 0 0 0 0 0 0 0 0 0 0 6 11 CAMERA_MAIN 11 CAMERA_MAIN 0
1 13 CAMERA_SHADOW 13 CAMERA_SHADOW 0
2 17 CAMERA_REFLECTION 17 CAMERA_REFLECTION 0
4 17 CAMERA_REFRACTION 17 CAMERA_REFRACTION 0
8 16 CAMERA_VIEWMODEL 16 CAMERA_VIEWMODEL 0
16 14 CAMERA_COMPUTE 14 CAMERA_COMPUTE 0
32 0 0

546 18 BSPShaderGenerator 0 141313 18 BSPShaderGenerator 18 BSPShaderGenerator 0 0 0 1 453 466 0 12 454 455 456 457 458 459 460 461 462 463 464 465 0 0 1 0 547 0 0 0 0 0

547 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

548 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 468 469 0 1 467 0 0 1 0 549 0 0 0 0 0

549 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

550 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 471 472 0 1 470 0 0 1 0 535 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

551 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 474 475 0 1 473 0 0 1 0 535 0 0 0 0 0

552 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 477 478 0 1 476 0 0 1 0 553 0 0 0 0 0

553 9 ModelRoot 0 2048 9 ModelRoot 9 ModelRoot 0 0 0 0 0 0 0 0 0 0 0 0 314
/**
 * A node of this type is created automatically at the root of each model file
 * that is loaded.  It may eventually contain some information about the
 * contents of the model; at the moment, it contains no special information,
 * but can be used as a flag to indicate the presence of a loaded model file.
 */

554 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 480 481 0 1 479 0 0 1 0 555 0 0 0 0 0

555 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

556 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 482 483 0 0 0 0 1 0 542 0 0 0 0 0

557 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 484 485 0 0 0 0 1 0 542 0 0 0 0 0

558 16 UnlitGenericSpec 0 141313 16 UnlitGenericSpec 16 UnlitGenericSpec 0 0 0 1 486 487 0 0 0 0 1 0 542 0 0 0 0 160
/**
 * Shader that only supports a basetexture, no fancy lighting effects or anything.
 * Could be used for UI elements, emissive materials, particles, etc.
 */

559 14 UnlitNoMatSpec 0 141313 14 UnlitNoMatSpec 14 UnlitNoMatSpec 0 0 0 1 488 489 0 0 0 0 1 0 542 0 0 0 0 0

560 13 CSMRenderSpec 0 141313 13 CSMRenderSpec 13 CSMRenderSpec 0 0 0 1 490 491 0 0 0 0 1 0 542 0 0 0 0 0

561 10 SkyBoxSpec 0 141313 10 SkyBoxSpec 10 SkyBoxSpec 0 0 0 1 492 493 0 0 0 0 1 0 542 0 0 0 0 0

562 18 AmbientBoostEffect 0 141313 18 AmbientBoostEffect 18 AmbientBoostEffect 0 0 0 0 496 0 2 494 495 0 0 1 0 563 0 0 0 0 0

563 12 RenderEffect 0 2048 12 RenderEffect 12 RenderEffect 0 0 0 0 0 0 0 0 0 0 0 0 901
/**
 * This is the base class for a number of special render effects that may be
 * set on scene graph nodes to change the way they render.  This includes
 * BillboardEffect, DecalEffect, etc.
 *
 * RenderEffect represents render properties that must be applied as soon as
 * they are encountered in the scene graph, rather than propagating down to
 * the leaves.  This is different from RenderAttrib, which represents
 * properties like color and texture that don't do anything until they
 * propagate down to a GeomNode.
 *
 * You should not attempt to create or modify a RenderEffect directly;
 * instead, use the make() method of the appropriate kind of effect you want.
 * This will allocate and return a new RenderEffect of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderEffect
 * if you wish to change its properties; instead, create a new one.
 */

564 14 Audio3DManager 0 141313 14 Audio3DManager 14 Audio3DManager 0 0 0 1 497 515 0 17 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 0 0 0 0 0 0

565 15 TextureStages * 0 8576 15 TextureStages * 15 TextureStages * 0 0 516 0 0 0 0 0 0 0 0 0 0

566 21 TextureStages const * 0 8576 21 TextureStages const * 21 TextureStages const * 0 0 567 0 0 0 0 0 0 0 0 0 0

567 19 TextureStages const 0 8832 19 TextureStages const 19 TextureStages const 0 0 516 0 0 0 0 0 0 0 0 0 0

568 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 336
/**
 * Defines the properties of a named stage of the multitexture pipeline.  The
 * TextureAttrib will associated a number of these stages with Texture
 * objects, and the GSG will render geometry by sorting all of the currently
 * active TextureStages in order and then issuing the appropriate rendering
 * calls to activate them.
 */

569 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

570 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 568 0 0 0 0 0 0 0 0 0 0

571 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 572 0 0 0 0 0 0 0 0 0 0

572 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 517 0 0 0 0 0 0 0 0 0 0

573 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 517 0 0 0 0 0 0 0 0 0 0

574 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

575 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 576 0 0 0 0 0 0 0 0 0 0

576 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

577 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

578 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

579 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 578 0 0 0 0 0 0 0 0 0 0

580 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

581 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 582 0 0 0 0 0 0 0 0 0 0

582 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 578 0 0 0 0 0 0 0 0 0 0

583 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

584 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 583 0 0 0 0 0 0 0 0 0 0

585 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 520 0 0 0 0 0 0 0 0 0 0

586 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 585 0 0 0 0 0 0 0 0 0 0

587 25 BSPMaterialAttrib const * 0 8576 25 BSPMaterialAttrib const * 25 BSPMaterialAttrib const * 0 0 588 0 0 0 0 0 0 0 0 0 0

588 23 BSPMaterialAttrib const 0 8832 23 BSPMaterialAttrib const 23 BSPMaterialAttrib const 0 0 519 0 0 0 0 0 0 0 0 0 0

589 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 522 0 0 0 0 0 0 0 0 0 0

590 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 591 0 0 0 0 0 0 0 0 0 0

591 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 522 0 0 0 0 0 0 0 0 0 0

592 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 539 0 0 0 0 0 0 0 0 0 0

593 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 523 0 0 0 0 0 0 0 0 0 0

594 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 595 0 0 0 0 0 0 0 0 0 0

595 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 523 0 0 0 0 0 0 0 0 0 0

596 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 597 0 0 0 0 0 0 0 0 0 0

597 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

598 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 596 0 0 0 0 0 0 0 0 0 0

599 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 600 0 0 0 0 0 0 0 0 0 0

600 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

601 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 599 0 0 0 0 0 0 0 0 0 0

602 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 524 0 0 0 0 0 0 0 0 0 0

603 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 604 0 0 0 0 0 0 0 0 0 0

604 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 524 0 0 0 0 0 0 0 0 0 0

605 11 BoundingBox 0 2048 11 BoundingBox 11 BoundingBox 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

606 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 605 0 0 0 0 0 0 0 0 0 0

607 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 608 0 0 0 0 0 0 0 0 0 0

608 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 596 0 0 0 0 0 0 0 0 0 0

609 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 525 0 0 0 0 0 0 0 0 0 0

610 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 611 0 0 0 0 0 0 0 0 0 0

611 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 525 0 0 0 0 0 0 0 0 0 0

612 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

613 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 612 0 0 0 0 0 0 0 0 0 0

614 18 PackResult const * 0 8576 18 PackResult const * 18 PackResult const * 0 0 615 0 0 0 0 0 0 0 0 0 0

615 16 PackResult const 0 8832 16 PackResult const 16 PackResult const 0 0 526 0 0 0 0 0 0 0 0 0 0

616 12 PackResult * 0 8576 12 PackResult * 12 PackResult * 0 0 526 0 0 0 0 0 0 0 0 0 0

617 23 TextureLocation const * 0 8576 23 TextureLocation const * 23 TextureLocation const * 0 0 618 0 0 0 0 0 0 0 0 0 0

618 21 TextureLocation const 0 8832 21 TextureLocation const 21 TextureLocation const 0 0 527 0 0 0 0 0 0 0 0 0 0

619 17 TextureLocation * 0 8576 17 TextureLocation * 17 TextureLocation * 0 0 527 0 0 0 0 0 0 0 0 0 0

620 15 TexturePacker * 0 8576 15 TexturePacker * 15 TexturePacker * 0 0 528 0 0 0 0 0 0 0 0 0 0

621 10 RayTrace * 0 8576 10 RayTrace * 10 RayTrace * 0 0 529 0 0 0 0 0 0 0 0 0 0

622 16 RayTrace const * 0 8576 16 RayTrace const * 16 RayTrace const * 0 0 623 0 0 0 0 0 0 0 0 0 0

623 14 RayTrace const 0 8832 14 RayTrace const 14 RayTrace const 0 0 529 0 0 0 0 0 0 0 0 0 0

624 19 RayTraceHitResult * 0 8576 19 RayTraceHitResult * 19 RayTraceHitResult * 0 0 530 0 0 0 0 0 0 0 0 0 0

625 25 RayTraceHitResult const * 0 8576 25 RayTraceHitResult const * 25 RayTraceHitResult const * 0 0 626 0 0 0 0 0 0 0 0 0 0

626 23 RayTraceHitResult const 0 8832 23 RayTraceHitResult const 23 RayTraceHitResult const 0 0 530 0 0 0 0 0 0 0 0 0 0

627 8 LVector2 0 2105344 8 LVector2 8 LVector2 0 0 628 0 0 0 0 0 0 0 0 0 0

628 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

629 10 LVector2 * 0 8576 10 LVector2 * 10 LVector2 * 0 0 627 0 0 0 0 0 0 0 0 0 0

630 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

631 15 RayTraceScene * 0 8576 15 RayTraceScene * 15 RayTraceScene * 0 0 531 0 0 0 0 0 0 0 0 0 0

632 21 RayTraceScene const * 0 8576 21 RayTraceScene const * 21 RayTraceScene const * 0 0 633 0 0 0 0 0 0 0 0 0 0

633 19 RayTraceScene const 0 8832 19 RayTraceScene const 19 RayTraceScene const 0 0 531 0 0 0 0 0 0 0 0 0 0

634 18 RayTraceGeometry * 0 8576 18 RayTraceGeometry * 18 RayTraceGeometry * 0 0 534 0 0 0 0 0 0 0 0 0 0

635 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 636 0 0 0 0 0 0 0 0 0 0

636 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 637 0 0 0 0 0 0 0 0 0 0

637 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 638 0 0 0 0 0 0 0 0 0 0

638 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

639 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 640 0 0 0 0 0 0 0 0 0 0

640 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 599 0 0 0 0 0 0 0 0 0 0

641 24 RayTraceGeometry const * 0 8576 24 RayTraceGeometry const * 24 RayTraceGeometry const * 0 0 642 0 0 0 0 0 0 0 0 0 0

642 22 RayTraceGeometry const 0 8832 22 RayTraceGeometry const 22 RayTraceGeometry const 0 0 534 0 0 0 0 0 0 0 0 0 0

643 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 637 0 0 0 0 0 0 0 0 0 0

644 22 RayTraceTriangleMesh * 0 8576 22 RayTraceTriangleMesh * 22 RayTraceTriangleMesh * 0 0 536 0 0 0 0 0 0 0 0 0 0

645 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 646 0 0 0 0 0 0 0 0 0 0

646 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 647 0 0 0 0 0 0 0 0 0 0

647 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

648 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 649 0 0 0 0 0 0 0 0 0 0

649 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 650 0 0 0 0 0 0 0 0 0 0

650 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

651 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 652 0 0 0 0 0 0 0 0 0 0

652 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 537 0 0 0 0 0 0 0 0 0 0

653 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 577 0 0 0 0 0 0 0 0 0 0

654 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 655 0 0 0 0 0 0 0 0 0 0

655 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 539 0 0 0 0 0 0 0 0 0 0

656 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 657 0 0 0 0 0 0 0 0 0 0

657 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

658 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 659 0 0 0 0 0 0 0 0 0 0

659 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 612 0 0 0 0 0 0 0 0 0 0

660 20 BSPShaderGenerator * 0 8576 20 BSPShaderGenerator * 20 BSPShaderGenerator * 0 0 546 0 0 0 0 0 0 0 0 0 0

661 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 662 0 0 0 0 0 0 0 0 0 0

662 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 663 0 0 0 0 0 0 0 0 0 0

663 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 664 0 0 0 0 0 0 0 0 0 0

664 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

665 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

666 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 665 0 0 0 0 0 0 0 0 0 0

667 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 668 0 0 0 0 0 0 0 0 0 0

668 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 669 0 0 0 0 0 0 0 0 0 0

669 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

670 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 671 0 0 0 0 0 0 0 0 0 0

671 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 672 0 0 0 0 0 0 0 0 0 0

672 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

673 9 int const 0 8832 9 int const 9 int const 0 0 521 0 0 0 0 0 0 0 0 0 0

674 6 LColor 0 2105344 6 LColor 6 LColor 0 0 675 0 0 0 0 0 0 0 0 0 0

675 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 676 0 0 0 0 0 0 0 0 0 0

676 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

677 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 674 0 0 0 0 0 0 0 0 0 0

678 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 679 0 0 0 0 0 0 0 0 0 0

679 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 680 0 0 0 0 0 0 0 0 0 0

680 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

681 9 LTexCoord 0 2105344 9 LTexCoord 9 LTexCoord 0 0 682 0 0 0 0 0 0 0 0 0 0

682 10 LTexCoordf 0 2105344 10 LTexCoordf 10 LTexCoordf 0 0 664 0 0 0 0 0 0 0 0 0 0

683 11 LTexCoord * 0 8576 11 LTexCoord * 11 LTexCoord * 0 0 681 0 0 0 0 0 0 0 0 0 0

684 20 ShaderPermutations * 0 8576 20 ShaderPermutations * 20 ShaderPermutations * 0 0 541 0 0 0 0 0 0 0 0 0 0

685 26 ShaderPermutations const * 0 8576 26 ShaderPermutations const * 26 ShaderPermutations const * 0 0 686 0 0 0 0 0 0 0 0 0 0

686 24 ShaderPermutations const 0 8832 24 ShaderPermutations const 24 ShaderPermutations const 0 0 541 0 0 0 0 0 0 0 0 0 0

687 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 688 0 0 0 0 0 0 0 0 0 0

688 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 689 0 0 0 0 0 0 0 0 0 0

689 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

690 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 542 0 0 0 0 0 0 0 0 0 0

691 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 532 0 0 0 0 0 0 0 0 0 0

692 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 543 0 0 0 0 0 0 0 0 0 0

693 26 BSPShaderGenerator const * 0 8576 26 BSPShaderGenerator const * 26 BSPShaderGenerator const * 0 0 694 0 0 0 0 0 0 0 0 0 0

694 24 BSPShaderGenerator const 0 8832 24 BSPShaderGenerator const 24 BSPShaderGenerator const 0 0 546 0 0 0 0 0 0 0 0 0 0

695 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 696 0 0 0 0 0 0 0 0 0 0

696 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

697 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 698 0 0 0 0 0 0 0 0 0 0

698 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

699 12 Shader const 0 8832 12 Shader const 12 Shader const 0 0 700 0 0 0 0 0 0 0 0 0 0

700 6 Shader 0 2048 6 Shader 6 Shader 0 0 0 0 0 0 0 0 0 0 0 0 8
/**

 */

701 18 ShaderSpec const * 0 8576 18 ShaderSpec const * 18 ShaderSpec const * 0 0 702 0 0 0 0 0 0 0 0 0 0

702 16 ShaderSpec const 0 8832 16 ShaderSpec const 16 ShaderSpec const 0 0 542 0 0 0 0 0 0 0 0 0 0

703 14 Shader const * 0 8576 14 Shader const * 14 Shader const * 0 0 699 0 0 0 0 0 0 0 0 0 0

704 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 705 0 0 0 0 0 0 0 0 0 0

705 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 548 0 0 0 0 0 0 0 0 0 0

706 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 548 0 0 0 0 0 0 0 0 0 0

707 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 549 0 0 0 0 0 0 0 0 0 0

708 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 709 0 0 0 0 0 0 0 0 0 0

709 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 550 0 0 0 0 0 0 0 0 0 0

710 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 550 0 0 0 0 0 0 0 0 0 0

711 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 712 0 0 0 0 0 0 0 0 0 0

712 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 551 0 0 0 0 0 0 0 0 0 0

713 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 551 0 0 0 0 0 0 0 0 0 0

714 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 715 0 0 0 0 0 0 0 0 0 0

715 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 552 0 0 0 0 0 0 0 0 0 0

716 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 552 0 0 0 0 0 0 0 0 0 0

717 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 718 0 0 0 0 0 0 0 0 0 0

718 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 554 0 0 0 0 0 0 0 0 0 0

719 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 554 0 0 0 0 0 0 0 0 0 0

720 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 556 0 0 0 0 0 0 0 0 0 0

721 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 557 0 0 0 0 0 0 0 0 0 0

722 18 UnlitGenericSpec * 0 8576 18 UnlitGenericSpec * 18 UnlitGenericSpec * 0 0 558 0 0 0 0 0 0 0 0 0 0

723 16 UnlitNoMatSpec * 0 8576 16 UnlitNoMatSpec * 16 UnlitNoMatSpec * 0 0 559 0 0 0 0 0 0 0 0 0 0

724 15 CSMRenderSpec * 0 8576 15 CSMRenderSpec * 15 CSMRenderSpec * 0 0 560 0 0 0 0 0 0 0 0 0 0

725 12 SkyBoxSpec * 0 8576 12 SkyBoxSpec * 12 SkyBoxSpec * 0 0 561 0 0 0 0 0 0 0 0 0 0

726 18 RenderEffect const 0 8832 18 RenderEffect const 18 RenderEffect const 0 0 563 0 0 0 0 0 0 0 0 0 0

727 20 RenderEffect const * 0 8576 20 RenderEffect const * 20 RenderEffect const * 0 0 726 0 0 0 0 0 0 0 0 0 0

728 22 Audio3DManager const * 0 8576 22 Audio3DManager const * 22 Audio3DManager const * 0 0 729 0 0 0 0 0 0 0 0 0 0

729 20 Audio3DManager const 0 8832 20 Audio3DManager const 20 Audio3DManager const 0 0 564 0 0 0 0 0 0 0 0 0 0

730 16 Audio3DManager * 0 8576 16 Audio3DManager * 16 Audio3DManager * 0 0 564 0 0 0 0 0 0 0 0 0 0

731 14 AudioManager * 0 8576 14 AudioManager * 14 AudioManager * 0 0 732 0 0 0 0 0 0 0 0 0 0

732 12 AudioManager 0 2048 12 AudioManager 12 AudioManager 0 0 0 0 0 0 0 0 0 0 0 0 0

733 12 AudioSound * 0 8576 12 AudioSound * 12 AudioSound * 0 0 734 0 0 0 0 0 0 0 0 0 0

734 10 AudioSound 0 2048 10 AudioSound 10 AudioSound 0 0 0 0 0 0 0 0 0 0 0 0 0

0
2
735 10 class_slot 0 2 521 290 0 0 0 0 0 0 0 29 BSPMaterialAttrib::class_slot 0

736 10 class_slot 0 2 521 375 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

0
