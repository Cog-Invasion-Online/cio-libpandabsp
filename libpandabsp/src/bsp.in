1552773189
3 3
3 bsp 4 t5GT 3 bsp 
227
216 3 get 0 4 443 18 TextureStages::get 0 2 3 4 0
159
static TextureStage *TextureStages::get(std::string const &name);
static TextureStage *TextureStages::get(std::string const &name, std::string const &uv_name);

217 15 get_basetexture 0 4 443 30 TextureStages::get_basetexture 0 1 5 0
58
static TextureStage *TextureStages::get_basetexture(void);

218 12 get_lightmap 0 4 443 27 TextureStages::get_lightmap 0 1 6 0
55
static TextureStage *TextureStages::get_lightmap(void);

219 19 get_bumped_lightmap 0 4 443 34 TextureStages::get_bumped_lightmap 0 1 7 0
62
static TextureStage *TextureStages::get_bumped_lightmap(void);

220 13 get_spheremap 0 4 443 28 TextureStages::get_spheremap 0 1 8 0
56
static TextureStage *TextureStages::get_spheremap(void);

221 11 get_cubemap 0 4 443 26 TextureStages::get_cubemap 0 1 9 0
54
static TextureStage *TextureStages::get_cubemap(void);

222 13 get_normalmap 0 4 443 28 TextureStages::get_normalmap 0 1 10 0
56
static TextureStage *TextureStages::get_normalmap(void);

223 13 get_heightmap 0 4 443 28 TextureStages::get_heightmap 0 1 11 0
56
static TextureStage *TextureStages::get_heightmap(void);

224 12 get_glossmap 0 4 443 27 TextureStages::get_glossmap 0 1 12 0
55
static TextureStage *TextureStages::get_glossmap(void);

225 11 get_glowmap 0 4 443 26 TextureStages::get_glowmap 0 1 13 0
54
static TextureStage *TextureStages::get_glowmap(void);

226 13 TextureStages 0 4 443 28 TextureStages::TextureStages 0 2 1 2 0
122
inline TextureStages::TextureStages(void) = default;
inline TextureStages::TextureStages(TextureStages const &) = default;

227 14 ~TextureStages 0 4 443 29 TextureStages::~TextureStages 0 0 0
36
TextureStages::~TextureStages(void);

228 11 BSPMaterial 0 4 444 24 BSPMaterial::BSPMaterial 0 2 14 15 0
137
inline explicit BSPMaterial::BSPMaterial(std::string const &name = "material");
inline BSPMaterial::BSPMaterial(BSPMaterial const &copy);

229 10 operator = 0 4 444 23 BSPMaterial::operator = 0 1 16 0
61
inline void BSPMaterial::operator =(BSPMaterial const &copy);

230 12 set_keyvalue 0 4 444 25 BSPMaterial::set_keyvalue 0 1 17 0
88
inline void BSPMaterial::set_keyvalue(std::string const &key, std::string const &value);

231 12 get_keyvalue 0 4 444 25 BSPMaterial::get_keyvalue 0 1 18 0
75
inline std::string BSPMaterial::get_keyvalue(std::string const &key) const;

232 10 set_shader 0 4 444 23 BSPMaterial::set_shader 0 1 19 0
68
inline void BSPMaterial::set_shader(std::string const &shader_name);

233 10 get_shader 0 4 444 23 BSPMaterial::get_shader 0 1 20 0
55
inline std::string BSPMaterial::get_shader(void) const;

234 8 get_file 0 4 444 21 BSPMaterial::get_file 0 1 21 0
50
inline Filename BSPMaterial::get_file(void) const;

235 12 has_keyvalue 0 4 444 25 BSPMaterial::has_keyvalue 0 1 22 0
68
inline bool BSPMaterial::has_keyvalue(std::string const &key) const;

236 15 has_env_cubemap 0 4 444 28 BSPMaterial::has_env_cubemap 0 1 23 0
53
inline bool BSPMaterial::has_env_cubemap(void) const;

237 16 has_transparency 0 4 444 29 BSPMaterial::has_transparency 0 1 24 0
54
inline bool BSPMaterial::has_transparency(void) const;

238 16 get_surface_prop 0 4 444 29 BSPMaterial::get_surface_prop 0 1 25 0
61
inline std::string BSPMaterial::get_surface_prop(void) const;

239 12 get_contents 0 4 444 25 BSPMaterial::get_contents 0 1 26 0
57
inline std::string BSPMaterial::get_contents(void) const;

240 13 get_from_file 0 4 444 26 BSPMaterial::get_from_file 0 1 27 0
75
static BSPMaterial const *BSPMaterial::get_from_file(Filename const &file);

241 14 get_class_type 0 4 444 27 BSPMaterial::get_class_type 0 1 28 0
52
static TypeHandle BSPMaterial::get_class_type(void);

242 12 ~BSPMaterial 0 4 444 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

243 4 make 0 4 446 23 BSPMaterialAttrib::make 0 1 29 0
86
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make(BSPMaterial const *mat);

244 20 make_override_shader 0 4 446 39 BSPMaterialAttrib::make_override_shader 0 1 30 0
102
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_override_shader(BSPMaterial const *mat);

245 12 make_default 0 4 446 31 BSPMaterialAttrib::make_default 0 1 31 0
76
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_default(void);

246 19 get_override_shader 0 4 446 38 BSPMaterialAttrib::get_override_shader 0 1 32 0
70
inline std::string BSPMaterialAttrib::get_override_shader(void) const;

247 19 has_override_shader 0 4 446 38 BSPMaterialAttrib::has_override_shader 0 1 33 0
63
inline bool BSPMaterialAttrib::has_override_shader(void) const;

248 12 get_material 0 4 446 31 BSPMaterialAttrib::get_material 0 1 34 0
70
inline BSPMaterial const *BSPMaterialAttrib::get_material(void) const;

249 14 get_class_slot 0 4 446 33 BSPMaterialAttrib::get_class_slot 0 1 35 0
51
static int BSPMaterialAttrib::get_class_slot(void);

250 14 get_class_type 0 4 446 33 BSPMaterialAttrib::get_class_type 0 1 36 0
58
static TypeHandle BSPMaterialAttrib::get_class_type(void);

251 18 ~BSPMaterialAttrib 0 4 446 37 BSPMaterialAttrib::~BSPMaterialAttrib 0 0 0
44
BSPMaterialAttrib::~BSPMaterialAttrib(void);

252 14 get_class_type 0 4 449 27 CBaseEntity::get_class_type 0 1 39 0
52
static TypeHandle CBaseEntity::get_class_type(void);

253 11 CBaseEntity 0 4 449 24 CBaseEntity::CBaseEntity 0 2 37 38 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

254 10 get_entnum 0 4 449 23 CBaseEntity::get_entnum 0 1 40 0
40
int CBaseEntity::get_entnum(void) const;

255 10 get_loader 0 4 449 23 CBaseEntity::get_loader 0 1 41 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

256 12 ~CBaseEntity 0 4 449 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

257 14 get_class_type 0 4 450 28 CPointEntity::get_class_type 0 1 44 0
53
static TypeHandle CPointEntity::get_class_type(void);

258 12 CPointEntity 0 4 450 26 CPointEntity::CPointEntity 0 2 42 43 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

259 10 get_origin 0 4 450 24 CPointEntity::get_origin 0 1 45 0
45
LPoint3 CPointEntity::get_origin(void) const;

260 10 get_angles 0 4 450 24 CPointEntity::get_angles 0 1 46 0
46
LVector3 CPointEntity::get_angles(void) const;

261 13 ~CPointEntity 0 4 450 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

262 14 get_class_type 0 4 451 29 CBoundsEntity::get_class_type 0 1 49 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

263 13 CBoundsEntity 0 4 451 28 CBoundsEntity::CBoundsEntity 0 2 47 48 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

264 10 get_bounds 0 4 451 25 CBoundsEntity::get_bounds 0 1 50 0
51
BoundingBox *CBoundsEntity::get_bounds(void) const;

265 9 is_inside 0 4 451 24 CBoundsEntity::is_inside 0 1 51 0
63
inline bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

266 13 fillin_bounds 0 4 451 28 CBoundsEntity::fillin_bounds 0 1 52 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

267 14 ~CBoundsEntity 0 4 451 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

268 14 get_class_type 0 4 452 28 CBrushEntity::get_class_type 0 1 55 0
53
static TypeHandle CBrushEntity::get_class_type(void);

269 12 CBrushEntity 0 4 452 26 CBrushEntity::CBrushEntity 0 2 53 54 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

270 12 get_modelnum 0 4 452 26 CBrushEntity::get_modelnum 0 1 56 0
43
int CBrushEntity::get_modelnum(void) const;

271 12 get_model_np 0 4 452 26 CBrushEntity::get_model_np 0 1 57 0
48
NodePath CBrushEntity::get_model_np(void) const;

272 16 get_model_bounds 0 4 452 30 CBrushEntity::get_model_bounds 0 1 58 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

273 13 ~CBrushEntity 0 4 452 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

274 9 get_width 0 4 453 21 PackResult::get_width 0 1 60 0
45
inline int PackResult::get_width(void) const;

275 10 get_height 0 4 453 22 PackResult::get_height 0 1 61 0
46
inline int PackResult::get_height(void) const;

276 15 get_unused_area 0 4 453 27 PackResult::get_unused_area 0 1 62 0
51
inline int PackResult::get_unused_area(void) const;

277 10 PackResult 0 4 453 22 PackResult::PackResult 0 1 59 0
60
inline PackResult::PackResult(PackResult const &) = default;

278 11 ~PackResult 0 4 453 23 PackResult::~PackResult 0 0 0
30
PackResult::~PackResult(void);

279 5 get_x 0 4 454 22 TextureLocation::get_x 0 1 64 0
46
inline int TextureLocation::get_x(void) const;

280 5 get_y 0 4 454 22 TextureLocation::get_y 0 1 65 0
46
inline int TextureLocation::get_y(void) const;

281 9 get_width 0 4 454 26 TextureLocation::get_width 0 1 66 0
50
inline int TextureLocation::get_width(void) const;

282 10 get_height 0 4 454 27 TextureLocation::get_height 0 1 67 0
51
inline int TextureLocation::get_height(void) const;

283 11 get_rotated 0 4 454 28 TextureLocation::get_rotated 0 1 68 0
53
inline bool TextureLocation::get_rotated(void) const;

284 15 TextureLocation 0 4 454 32 TextureLocation::TextureLocation 0 1 63 0
75
inline TextureLocation::TextureLocation(TextureLocation const &) = default;

285 16 ~TextureLocation 0 4 454 33 TextureLocation::~TextureLocation 0 0 0
40
TextureLocation::~TextureLocation(void);

286 15 getTextureCount 0 6 455 30 TexturePacker::getTextureCount 0 1 69 0
53
virtual int TexturePacker::getTextureCount(void) = 0;

287 15 setTextureCount 0 6 455 30 TexturePacker::setTextureCount 0 1 70 35
// number of textures to consider..
60
virtual void TexturePacker::setTextureCount(int tcount) = 0;

288 10 addTexture 0 6 455 25 TexturePacker::addTexture 0 1 71 21
// add textures 0 - n
61
virtual void TexturePacker::addTexture(int wid, int hit) = 0;

289 15 wouldTextureFit 0 6 455 30 TexturePacker::wouldTextureFit 0 1 72 0
135
virtual bool TexturePacker::wouldTextureFit(int wid, int hit, bool forcePowerOfTwo, bool onePixelBorder, int max_wid, int max_hit) = 0;

290 13 addNewTexture 0 6 455 28 TexturePacker::addNewTexture 0 1 73 0
64
virtual void TexturePacker::addNewTexture(int wid, int hit) = 0;

291 12 packTextures 0 6 455 27 TexturePacker::packTextures 0 1 74 74
// pack the textures, the return code is the amount of wasted/unused area.
94
virtual PackResult TexturePacker::packTextures(bool forcePowerOfTwo, bool onePixelBorder) = 0;

292 18 getTextureLocation 0 6 455 33 TexturePacker::getTextureLocation 0 1 75 58
// returns true if the texture has been rotated 90 degrees
73
virtual TextureLocation TexturePacker::getTextureLocation(int index) = 0;

293 19 createTexturePacker 0 4 455 34 TexturePacker::createTexturePacker 0 1 76 0
63
static TexturePacker *TexturePacker::createTexturePacker(void);

294 20 releaseTexturePacker 0 4 455 35 TexturePacker::releaseTexturePacker 0 1 77 0
67
static void TexturePacker::releaseTexturePacker(TexturePacker *tp);

295 14 ~TexturePacker 0 4 455 29 TexturePacker::~TexturePacker 0 0 0
36
TexturePacker::~TexturePacker(void);

296 4 make 0 4 456 19 BSPFaceAttrib::make 0 1 78 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

297 12 make_default 0 4 456 27 BSPFaceAttrib::make_default 0 1 79 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

298 15 make_ignore_pvs 0 4 456 30 BSPFaceAttrib::make_ignore_pvs 0 1 80 0
75
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_ignore_pvs(void);

299 12 get_material 0 4 456 27 BSPFaceAttrib::get_material 0 1 81 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

300 13 get_face_type 0 4 456 28 BSPFaceAttrib::get_face_type 0 1 82 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

301 14 get_ignore_pvs 0 4 456 29 BSPFaceAttrib::get_ignore_pvs 0 1 83 0
54
inline bool BSPFaceAttrib::get_ignore_pvs(void) const;

302 14 get_class_slot 0 4 456 29 BSPFaceAttrib::get_class_slot 0 1 84 0
47
static int BSPFaceAttrib::get_class_slot(void);

303 14 get_class_type 0 4 456 29 BSPFaceAttrib::get_class_type 0 1 85 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

304 14 ~BSPFaceAttrib 0 4 456 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

305 9 BSPLoader 0 4 458 20 BSPLoader::BSPLoader 0 1 86 0
27
BSPLoader::BSPLoader(void);

306 4 read 0 4 458 15 BSPLoader::read 0 1 87 0
43
bool BSPLoader::read(Filename const &file);

307 16 do_optimizations 0 4 458 27 BSPLoader::do_optimizations 0 1 88 0
39
void BSPLoader::do_optimizations(void);

308 9 set_gamma 0 4 458 20 BSPLoader::set_gamma 0 1 89 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

309 9 get_gamma 0 4 458 20 BSPLoader::get_gamma 0 1 90 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

310 7 set_win 0 4 458 18 BSPLoader::set_win 0 1 91 0
45
void BSPLoader::set_win(GraphicsWindow *win);

311 10 set_camera 0 4 458 21 BSPLoader::set_camera 0 1 92 0
51
void BSPLoader::set_camera(NodePath const &camera);

312 10 set_render 0 4 458 21 BSPLoader::set_render 0 1 93 0
51
void BSPLoader::set_render(NodePath const &render);

313 20 set_shader_generator 0 4 458 31 BSPLoader::set_shader_generator 0 1 94 0
65
void BSPLoader::set_shader_generator(PSSMShaderGenerator *shgen);

314 19 set_want_visibility 0 4 458 30 BSPLoader::set_want_visibility 0 1 95 0
47
void BSPLoader::set_want_visibility(bool flag);

315 18 set_want_lightmaps 0 4 458 29 BSPLoader::set_want_lightmaps 0 1 96 0
46
void BSPLoader::set_want_lightmaps(bool flag);

316 16 set_physics_type 0 4 458 27 BSPLoader::set_physics_type 0 1 97 0
43
void BSPLoader::set_physics_type(int type);

317 19 set_visualize_leafs 0 4 458 30 BSPLoader::set_visualize_leafs 0 1 98 0
47
void BSPLoader::set_visualize_leafs(bool flag);

318 18 set_materials_file 0 4 458 29 BSPLoader::set_materials_file 0 1 99 0
57
void BSPLoader::set_materials_file(Filename const &file);

319 13 set_wireframe 0 4 458 24 BSPLoader::set_wireframe 0 1 100 0
41
void BSPLoader::set_wireframe(bool flag);

320 13 get_wireframe 0 4 458 24 BSPLoader::get_wireframe 0 1 101 0
49
inline bool BSPLoader::get_wireframe(void) const;

321 10 get_camera 0 4 458 21 BSPLoader::get_camera 0 1 102 0
50
inline NodePath BSPLoader::get_camera(void) const;

322 11 trace_decal 0 4 458 22 BSPLoader::trace_decal 0 1 103 0
158
inline NodePath BSPLoader::trace_decal(std::string const &decal_material, LPoint2 const &decal_scale, float rotate, LPoint3 const &start, LPoint3 const &end);

323 14 build_cubemaps 0 4 458 25 BSPLoader::build_cubemaps 0 1 104 0
37
void BSPLoader::build_cubemaps(void);

324 16 set_want_shadows 0 4 458 27 BSPLoader::set_want_shadows 0 1 105 0
44
void BSPLoader::set_want_shadows(bool flag);

325 14 set_shadow_dir 0 4 458 25 BSPLoader::set_shadow_dir 0 1 106 0
52
void BSPLoader::set_shadow_dir(LVector3 const &dir);

326 16 set_shadow_color 0 4 458 27 BSPLoader::set_shadow_color 0 1 107 0
54
void BSPLoader::set_shadow_color(LColor const &color);

327 16 extract_modelnum 0 4 458 27 BSPLoader::extract_modelnum 0 1 108 0
44
int BSPLoader::extract_modelnum(int entnum);

328 16 get_model_bounds 0 4 458 27 BSPLoader::get_model_bounds 0 1 109 0
77
void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

329 28 set_server_entity_dispatcher 0 4 458 39 BSPLoader::set_server_entity_dispatcher 0 1 110 0
67
void BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

330 27 link_server_entity_to_class 0 4 458 38 BSPLoader::link_server_entity_to_class 0 1 111 0
89
void BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

331 6 set_ai 0 4 458 17 BSPLoader::set_ai 0 1 112 0
32
void BSPLoader::set_ai(bool ai);

332 5 is_ai 0 4 458 16 BSPLoader::is_ai 0 1 113 0
41
inline bool BSPLoader::is_ai(void) const;

333 10 trace_line 0 4 458 21 BSPLoader::trace_line 0 1 114 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

334 9 clip_line 0 4 458 20 BSPLoader::clip_line 0 1 115 0
71
LPoint3 BSPLoader::clip_line(LPoint3 const &start, LPoint3 const &end);

335 20 link_entity_to_class 0 4 458 31 BSPLoader::link_entity_to_class 0 1 116 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

336 28 get_py_entity_by_target_name 0 4 458 39 BSPLoader::get_py_entity_by_target_name 0 1 117 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

337 17 find_all_entities 0 4 458 28 BSPLoader::find_all_entities 0 1 118 0
69
PyObject *BSPLoader::find_all_entities(std::string const &classname);

338 20 get_entity_keyvalues 0 4 458 31 BSPLoader::get_entity_keyvalues 0 1 119 0
71
void BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

339 18 link_cent_to_pyent 0 4 458 29 BSPLoader::link_cent_to_pyent 0 1 120 0
63
void BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

340 16 get_num_entities 0 4 458 27 BSPLoader::get_num_entities 0 1 121 0
51
inline int BSPLoader::get_num_entities(void) const;

341 16 get_entity_value 0 4 458 27 BSPLoader::get_entity_value 0 1 122 0
75
std::string BSPLoader::get_entity_value(int entnum, char const *key) const;

342 22 get_entity_value_float 0 4 458 33 BSPLoader::get_entity_value_float 0 1 123 0
75
float BSPLoader::get_entity_value_float(int entnum, char const *key) const;

343 20 get_entity_value_int 0 4 458 31 BSPLoader::get_entity_value_int 0 1 124 0
71
int BSPLoader::get_entity_value_int(int entnum, char const *key) const;

344 23 get_entity_value_vector 0 4 458 34 BSPLoader::get_entity_value_vector 0 1 125 0
79
LVector3 BSPLoader::get_entity_value_vector(int entnum, char const *key) const;

345 22 get_entity_value_color 0 4 458 33 BSPLoader::get_entity_value_color 0 1 126 0
95
LColor BSPLoader::get_entity_value_color(int entnum, char const *key, bool scale = true) const;

346 10 get_entity 0 4 458 21 BSPLoader::get_entity 0 1 127 0
49
NodePath BSPLoader::get_entity(int entnum) const;

347 9 get_model 0 4 458 20 BSPLoader::get_model 0 1 128 0
50
NodePath BSPLoader::get_model(int modelnum) const;

348 12 get_c_entity 0 4 458 23 BSPLoader::get_c_entity 0 1 129 0
61
CBaseEntity *BSPLoader::get_c_entity(int const entnum) const;

349 9 find_leaf 0 4 458 20 BSPLoader::find_leaf 0 2 130 131 0
98
inline int BSPLoader::find_leaf(NodePath const &np);
int BSPLoader::find_leaf(LPoint3 const &pos);

350 9 find_node 0 4 458 20 BSPLoader::find_node 0 1 132 0
45
int BSPLoader::find_node(LPoint3 const &pos);

351 18 is_cluster_visible 0 4 458 29 BSPLoader::is_cluster_visible 0 1 133 0
72
bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

352 15 pvs_bounds_test 0 4 458 26 BSPLoader::pvs_bounds_test 0 1 134 0
71
bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds);

353 15 make_net_bounds 0 4 458 26 BSPLoader::make_net_bounds 0 1 135 0
147
ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

354 16 has_active_level 0 4 458 27 BSPLoader::has_active_level 0 1 136 0
52
inline bool BSPLoader::has_active_level(void) const;

355 14 has_visibility 0 4 458 25 BSPLoader::has_visibility 0 1 137 0
50
inline bool BSPLoader::has_visibility(void) const;

356 7 cleanup 0 4 458 18 BSPLoader::cleanup 0 1 138 0
30
void BSPLoader::cleanup(void);

357 10 get_result 0 4 458 21 BSPLoader::get_result 0 1 139 0
50
inline NodePath BSPLoader::get_result(void) const;

358 14 get_global_ptr 0 4 458 25 BSPLoader::get_global_ptr 0 1 140 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

359 10 ~BSPLoader 0 4 458 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

360 14 get_class_type 0 4 460 32 BSPCullTraverser::get_class_type 0 1 143 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

361 16 BSPCullTraverser 0 4 460 34 BSPCullTraverser::BSPCullTraverser 0 2 141 142 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

362 17 ~BSPCullTraverser 0 4 460 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

363 14 get_class_type 0 4 462 25 BSPRender::get_class_type 0 1 146 0
50
static TypeHandle BSPRender::get_class_type(void);

364 9 BSPRender 0 4 462 20 BSPRender::BSPRender 0 2 144 145 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

365 10 ~BSPRender 0 4 462 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

366 14 get_class_type 0 4 464 23 BSPRoot::get_class_type 0 1 149 0
48
static TypeHandle BSPRoot::get_class_type(void);

367 7 BSPRoot 0 4 464 16 BSPRoot::BSPRoot 0 2 147 148 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

368 8 ~BSPRoot 0 4 464 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

369 14 get_class_type 0 4 465 23 BSPProp::get_class_type 0 1 152 0
48
static TypeHandle BSPProp::get_class_type(void);

370 7 BSPProp 0 4 465 16 BSPProp::BSPProp 0 2 150 151 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

371 8 ~BSPProp 0 4 465 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

372 14 get_class_type 0 4 467 24 BSPModel::get_class_type 0 1 155 0
49
static TypeHandle BSPModel::get_class_type(void);

373 8 BSPModel 0 4 467 18 BSPModel::BSPModel 0 2 153 154 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

374 9 ~BSPModel 0 4 467 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

375 15 add_permutation 0 4 469 35 ShaderPermutations::add_permutation 0 1 158 0
97
void ShaderPermutations::add_permutation(std::string const &key, std::string const &value = "1");

376 9 add_input 0 4 469 29 ShaderPermutations::add_input 0 1 159 0
82
void ShaderPermutations::add_input(ShaderInput const &inp, bool important = true);

377 8 add_flag 0 4 469 28 ShaderPermutations::add_flag 0 1 160 0
44
void ShaderPermutations::add_flag(int flag);

378 10 operator < 0 4 469 30 ShaderPermutations::operator < 0 1 161 0
75
bool ShaderPermutations::operator <(ShaderPermutations const &other) const;

379 18 ShaderPermutations 0 4 469 38 ShaderPermutations::ShaderPermutations 0 2 156 157 0
147
inline ShaderPermutations::ShaderPermutations(void) = default;
inline ShaderPermutations::ShaderPermutations(ShaderPermutations const &) = default;

380 19 ~ShaderPermutations 0 4 469 39 ShaderPermutations::~ShaderPermutations 0 0 0
46
ShaderPermutations::~ShaderPermutations(void);

381 24 upcast_to_ReferenceCount 0 12 470 36 ShaderSpec::upcast_to_ReferenceCount 0 1 164 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

382 22 downcast_to_ShaderSpec 0 12 471 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

383 17 upcast_to_Namable 0 12 470 29 ShaderSpec::upcast_to_Namable 0 1 165 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

384 22 downcast_to_ShaderSpec 0 12 472 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

385 17 read_shader_files 0 4 470 29 ShaderSpec::read_shader_files 0 1 162 0
117
void ShaderSpec::read_shader_files(Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file);

386 14 get_class_type 0 4 470 26 ShaderSpec::get_class_type 0 1 163 0
51
static TypeHandle ShaderSpec::get_class_type(void);

387 11 ~ShaderSpec 0 4 470 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

388 19 PSSMShaderGenerator 0 4 473 40 PSSMShaderGenerator::PSSMShaderGenerator 0 2 166 167 0
205
PSSMShaderGenerator::PSSMShaderGenerator(GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline PSSMShaderGenerator::PSSMShaderGenerator(PSSMShaderGenerator const &) = default;

389 13 set_sun_light 0 4 473 34 PSSMShaderGenerator::set_sun_light 0 1 168 0
60
void PSSMShaderGenerator::set_sun_light(NodePath const &np);

390 12 start_update 0 4 473 33 PSSMShaderGenerator::start_update 0 1 169 0
45
void PSSMShaderGenerator::start_update(void);

391 10 add_shader 0 4 473 31 PSSMShaderGenerator::add_shader 0 1 170 0
67
void PSSMShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

392 19 has_shadow_sunlight 0 4 473 40 PSSMShaderGenerator::has_shadow_sunlight 0 1 171 0
65
inline bool PSSMShaderGenerator::has_shadow_sunlight(void) const;

393 22 get_pssm_array_texture 0 4 473 43 PSSMShaderGenerator::get_pssm_array_texture 0 1 172 0
72
inline Texture *PSSMShaderGenerator::get_pssm_array_texture(void) const;

394 12 get_pssm_rig 0 4 473 33 PSSMShaderGenerator::get_pssm_rig 0 1 173 0
68
inline PSSMCameraRig *PSSMShaderGenerator::get_pssm_rig(void) const;

395 15 get_skybox_root 0 4 473 36 PSSMShaderGenerator::get_skybox_root 0 1 174 0
65
inline NodePath PSSMShaderGenerator::get_skybox_root(void) const;

396 14 get_skybox_rtt 0 4 473 35 PSSMShaderGenerator::get_skybox_rtt 0 1 175 0
64
inline Texture *PSSMShaderGenerator::get_skybox_rtt(void) const;

397 20 get_identity_cubemap 0 4 473 41 PSSMShaderGenerator::get_identity_cubemap 0 1 176 0
64
static Texture *PSSMShaderGenerator::get_identity_cubemap(void);

398 14 get_class_type 0 4 473 35 PSSMShaderGenerator::get_class_type 0 1 177 0
60
static TypeHandle PSSMShaderGenerator::get_class_type(void);

399 20 ~PSSMShaderGenerator 0 4 473 41 PSSMShaderGenerator::~PSSMShaderGenerator 0 0 0
48
PSSMShaderGenerator::~PSSMShaderGenerator(void);

400 20 VertexLitGenericSpec 0 4 475 42 VertexLitGenericSpec::VertexLitGenericSpec 0 1 178 0
49
VertexLitGenericSpec::VertexLitGenericSpec(void);

401 21 ~VertexLitGenericSpec 0 4 475 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

402 22 LightmappedGenericSpec 0 4 476 46 LightmappedGenericSpec::LightmappedGenericSpec 0 1 179 0
53
LightmappedGenericSpec::LightmappedGenericSpec(void);

403 23 ~LightmappedGenericSpec 0 4 476 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

404 16 UnlitGenericSpec 0 4 477 34 UnlitGenericSpec::UnlitGenericSpec 0 1 180 0
41
UnlitGenericSpec::UnlitGenericSpec(void);

405 17 ~UnlitGenericSpec 0 4 477 35 UnlitGenericSpec::~UnlitGenericSpec 0 0 0
42
UnlitGenericSpec::~UnlitGenericSpec(void);

406 14 UnlitNoMatSpec 0 4 478 30 UnlitNoMatSpec::UnlitNoMatSpec 0 1 181 0
37
UnlitNoMatSpec::UnlitNoMatSpec(void);

407 15 ~UnlitNoMatSpec 0 4 478 31 UnlitNoMatSpec::~UnlitNoMatSpec 0 0 0
38
UnlitNoMatSpec::~UnlitNoMatSpec(void);

408 13 CSMRenderSpec 0 4 479 28 CSMRenderSpec::CSMRenderSpec 0 1 182 0
35
CSMRenderSpec::CSMRenderSpec(void);

409 14 ~CSMRenderSpec 0 4 479 29 CSMRenderSpec::~CSMRenderSpec 0 0 0
36
CSMRenderSpec::~CSMRenderSpec(void);

410 10 initialize 0 4 480 20 RayTrace::initialize 0 1 185 0
39
static void RayTrace::initialize(void);

411 8 destruct 0 4 480 18 RayTrace::destruct 0 1 186 0
37
static void RayTrace::destruct(void);

412 8 RayTrace 0 4 480 18 RayTrace::RayTrace 0 2 183 184 0
97
inline RayTrace::RayTrace(void) = default;
inline RayTrace::RayTrace(RayTrace const &) = default;

413 9 ~RayTrace 0 4 480 19 RayTrace::~RayTrace 0 0 0
26
RayTrace::~RayTrace(void);

414 17 RayTraceHitResult 0 4 481 36 RayTraceHitResult::RayTraceHitResult 0 2 187 188 0
132
inline RayTraceHitResult::RayTraceHitResult(void);
inline RayTraceHitResult::RayTraceHitResult(RayTraceHitResult const &) = default;

415 7 has_hit 0 4 481 26 RayTraceHitResult::has_hit 0 1 189 0
51
inline bool RayTraceHitResult::has_hit(void) const;

416 14 get_hit_normal 0 4 481 33 RayTraceHitResult::get_hit_normal 0 1 190 0
62
inline LVector3 RayTraceHitResult::get_hit_normal(void) const;

417 6 get_uv 0 4 481 25 RayTraceHitResult::get_uv 0 1 191 0
54
inline LVector2 RayTraceHitResult::get_uv(void) const;

418 11 get_prim_id 0 4 481 30 RayTraceHitResult::get_prim_id 0 1 192 0
63
inline unsigned int RayTraceHitResult::get_prim_id(void) const;

419 11 get_geom_id 0 4 481 30 RayTraceHitResult::get_geom_id 0 1 193 0
63
inline unsigned int RayTraceHitResult::get_geom_id(void) const;

420 16 get_hit_fraction 0 4 481 35 RayTraceHitResult::get_hit_fraction 0 1 194 0
61
inline float RayTraceHitResult::get_hit_fraction(void) const;

421 18 ~RayTraceHitResult 0 4 481 37 RayTraceHitResult::~RayTraceHitResult 0 0 0
44
RayTraceHitResult::~RayTraceHitResult(void);

422 13 RayTraceScene 0 4 482 28 RayTraceScene::RayTraceScene 0 2 195 196 0
105
RayTraceScene::RayTraceScene(void);
inline RayTraceScene::RayTraceScene(RayTraceScene const &) = default;

423 12 add_geometry 0 4 482 27 RayTraceScene::add_geometry 0 1 197 0
57
void RayTraceScene::add_geometry(RayTraceGeometry *geom);

424 15 remove_geometry 0 4 482 30 RayTraceScene::remove_geometry 0 1 198 0
60
void RayTraceScene::remove_geometry(RayTraceGeometry *geom);

425 10 remove_all 0 4 482 25 RayTraceScene::remove_all 0 1 199 0
37
void RayTraceScene::remove_all(void);

426 10 trace_line 0 4 482 25 RayTraceScene::trace_line 0 1 200 0
116
inline RayTraceHitResult RayTraceScene::trace_line(LPoint3 const &start, LPoint3 const &end, BitMask32 const &mask);

427 9 trace_ray 0 4 482 24 RayTraceScene::trace_ray 0 1 201 0
132
RayTraceHitResult RayTraceScene::trace_ray(LPoint3 const &origin, LVector3 const &direction, float distance, BitMask32 const &mask);

428 17 set_build_quality 0 4 482 32 RayTraceScene::set_build_quality 0 1 202 0
51
void RayTraceScene::set_build_quality(int quality);

429 6 update 0 4 482 21 RayTraceScene::update 0 1 203 0
33
void RayTraceScene::update(void);

430 12 get_geometry 0 4 482 27 RayTraceScene::get_geometry 0 1 204 0
75
inline RayTraceGeometry *RayTraceScene::get_geometry(unsigned int geom_id);

431 14 get_class_type 0 4 484 32 RayTraceGeometry::get_class_type 0 1 205 0
57
static TypeHandle RayTraceGeometry::get_class_type(void);

432 8 set_mask 0 4 484 26 RayTraceGeometry::set_mask 0 2 206 207 0
114
inline void RayTraceGeometry::set_mask(BitMask32 const &mask);
void RayTraceGeometry::set_mask(unsigned int mask);

433 8 get_mask 0 4 484 26 RayTraceGeometry::get_mask 0 1 208 0
56
inline BitMask32 RayTraceGeometry::get_mask(void) const;

434 17 set_build_quality 0 4 484 35 RayTraceGeometry::set_build_quality 0 1 209 0
54
void RayTraceGeometry::set_build_quality(int quality);

435 5 build 0 6 484 23 RayTraceGeometry::build 0 1 210 0
47
virtual void RayTraceGeometry::build(void) = 0;

436 14 get_class_type 0 4 485 36 RayTraceTriangleMesh::get_class_type 0 1 212 0
61
static TypeHandle RayTraceTriangleMesh::get_class_type(void);

437 20 RayTraceTriangleMesh 0 4 485 42 RayTraceTriangleMesh::RayTraceTriangleMesh 0 1 211 0
73
RayTraceTriangleMesh::RayTraceTriangleMesh(std::string const &name = "");

438 12 add_triangle 0 4 485 34 RayTraceTriangleMesh::add_triangle 0 1 213 0
97
void RayTraceTriangleMesh::add_triangle(LPoint3 const &p1, LPoint3 const &p2, LPoint3 const &p3);

439 23 add_triangles_from_geom 0 4 485 45 RayTraceTriangleMesh::add_triangles_from_geom 0 1 214 0
105
void RayTraceTriangleMesh::add_triangles_from_geom(Geom const *geom, TransformState const *ts = nullptr);

440 21 ~RayTraceTriangleMesh 0 4 485 43 RayTraceTriangleMesh::~RayTraceTriangleMesh 0 0 0
50
RayTraceTriangleMesh::~RayTraceTriangleMesh(void);

441 10 SkyBoxSpec 0 4 486 22 SkyBoxSpec::SkyBoxSpec 0 1 215 0
29
SkyBoxSpec::SkyBoxSpec(void);

442 11 ~SkyBoxSpec 0 4 486 23 SkyBoxSpec::~SkyBoxSpec 0 0 0
30
SkyBoxSpec::~SkyBoxSpec(void);

215
1 0 0 7 12 487 227 0 0 0 
2 0 0 7 12 487 227 0 0 1 6 param0 0 488  
3 0 0 7 2 492 0 0 0 1 4 name 1 491  
4 0 0 7 2 492 0 0 0 2 4 name 1 491  7 uv_name 1 491  
5 0 0 7 3 492 0 0 0 0 
6 0 0 7 4 492 0 0 0 0 
7 0 0 7 5 492 0 0 0 0 
8 0 0 7 6 492 0 0 0 0 
9 0 0 7 7 492 0 0 0 0 
10 0 0 7 8 492 0 0 0 0 
11 0 0 7 9 492 0 0 0 0 
12 0 0 7 10 492 0 0 0 0 
13 0 0 7 11 492 0 0 0 0 
14 0 0 7 16 495 242 0 0 1 4 copy 1 493  
15 0 0 7 16 495 242 0 0 1 4 name 1 491  
16 0 0 7 17 495 242 0 0 2 4 this 3 495  4 copy 1 493  
17 0 0 4 18 496 0 0 0 3 4 this 3 495  3 key 1 491  5 value 1 491  
18 0 0 6 19 491 0 0 0 2 4 this 3 493  3 key 1 491  
19 0 0 4 20 496 0 0 0 2 4 this 3 495  11 shader_name 1 491  
20 0 0 6 21 491 0 0 0 1 4 this 3 493  
21 0 0 7 22 498 0 0 0 1 4 this 3 493  
22 0 0 6 23 499 0 0 0 2 4 this 3 493  3 key 1 491  
23 0 0 6 24 499 0 0 0 1 4 this 3 493  
24 0 0 6 25 499 0 0 0 1 4 this 3 493  
25 0 0 6 26 491 0 0 0 1 4 this 3 493  
26 0 0 6 27 491 0 0 0 1 4 this 3 493  
27 0 0 7 28 493 0 0 0 1 4 file 1 500  
28 0 0 7 29 503 0 0 0 0 
29 0 0 7 33 505 0 0 0 1 3 mat 1 493  
30 0 0 7 34 505 0 0 0 1 3 mat 1 493  
31 0 0 7 35 505 0 0 0 0 
32 0 0 6 36 491 0 0 0 1 4 this 3 506  
33 0 0 6 37 499 0 0 0 1 4 this 3 506  
34 0 0 7 38 493 0 0 0 1 4 this 3 506  
35 0 0 6 39 448 0 0 0 0 
36 0 0 7 42 503 0 0 0 0 
37 0 0 7 46 508 256 0 0 0 
38 0 0 7 46 508 256 0 0 1 6 param0 0 509  
39 0 0 7 45 503 0 0 0 0 
40 0 0 6 47 448 0 0 0 1 4 this 3 509  
41 0 0 6 48 511 0 0 0 1 4 this 3 509  
42 0 0 7 52 512 261 0 0 0 
43 0 0 7 52 512 261 0 0 1 6 param0 0 513  
44 0 0 7 51 503 0 0 0 0 
45 0 0 7 53 517 0 0 0 1 4 this 3 513  
46 0 0 7 54 520 0 0 0 1 4 this 3 513  
47 0 0 7 58 521 267 0 0 0 
48 0 0 7 58 521 267 0 0 1 6 param0 0 522  
49 0 0 7 57 503 0 0 0 0 
50 0 0 7 59 525 0 0 0 1 4 this 3 522  
51 0 0 6 60 499 0 0 0 2 4 this 3 522  3 pos 1 526  
52 0 0 4 61 496 0 0 0 3 4 this 3 521  4 mins 1 517  4 maxs 1 517  
53 0 0 7 65 528 273 0 0 0 
54 0 0 7 65 528 273 0 0 1 6 param0 0 529  
55 0 0 7 64 503 0 0 0 0 
56 0 0 6 66 448 0 0 0 1 4 this 3 529  
57 0 0 7 67 532 0 0 0 1 4 this 3 529  
58 0 0 4 68 496 0 0 0 3 4 this 3 528  4 mins 1 517  4 maxs 1 517  
59 0 0 7 74 535 278 0 0 1 6 param0 0 533  
60 0 0 6 71 448 0 0 0 1 4 this 3 533  
61 0 0 6 72 448 0 0 0 1 4 this 3 533  
62 0 0 6 73 448 0 0 0 1 4 this 3 533  
63 0 0 7 82 538 285 0 0 1 6 param0 0 536  
64 0 0 6 77 448 0 0 0 1 4 this 3 536  
65 0 0 6 78 448 0 0 0 1 4 this 3 536  
66 0 0 6 79 448 0 0 0 1 4 this 3 536  
67 0 0 6 80 448 0 0 0 1 4 this 3 536  
68 0 0 6 81 499 0 0 0 1 4 this 3 536  
69 0 0 6 85 448 0 0 0 1 4 this 3 539  
70 0 0 4 86 496 0 0 35 // number of textures to consider.. 2 4 this 3 539  6 tcount 1 448  
71 0 0 4 87 496 0 0 21 // add textures 0 - n 3 4 this 3 539  3 wid 1 448  3 hit 1 448  
72 0 0 6 88 499 0 0 0 7 4 this 3 539  3 wid 1 448  3 hit 1 448  15 forcePowerOfTwo 1 499  14 onePixelBorder 1 499  7 max_wid 1 448  7 max_hit 1 448  
73 0 0 4 89 496 0 0 0 3 4 this 3 539  3 wid 1 448  3 hit 1 448  
74 0 0 7 90 535 278 0 74 // pack the textures, the return code is the amount of wasted/unused area. 3 4 this 3 539  15 forcePowerOfTwo 1 499  14 onePixelBorder 1 499  
75 0 0 7 91 538 285 0 58 // returns true if the texture has been rotated 90 degrees 2 4 this 3 539  5 index 1 448  
76 0 0 6 92 539 0 0 0 0 
77 0 0 4 93 496 0 0 0 1 2 tp 1 539  
78 0 0 7 97 505 0 0 0 2 13 face_material 1 491  9 face_type 1 448  
79 0 0 7 98 505 0 0 0 0 
80 0 0 7 99 505 0 0 0 0 
81 0 0 6 100 491 0 0 0 1 4 this 3 540  
82 0 0 6 101 448 0 0 0 1 4 this 3 540  
83 0 0 6 102 499 0 0 0 1 4 this 3 540  
84 0 0 6 103 448 0 0 0 0 
85 0 0 7 105 503 0 0 0 0 
86 0 0 7 108 511 359 0 0 0 
87 0 0 6 109 499 0 0 0 2 4 this 3 511  4 file 1 500  
88 0 0 4 110 496 0 0 0 1 4 this 3 511  
89 0 0 4 111 496 0 0 0 3 4 this 3 511  5 gamma 1 542  10 overbright 1 448  
90 0 0 6 112 542 0 0 0 1 4 this 3 544  
91 0 0 4 113 496 0 0 0 2 4 this 3 511  3 win 1 546  
92 0 0 4 114 496 0 0 0 2 4 this 3 511  6 camera 1 548  
93 0 0 4 115 496 0 0 0 2 4 this 3 511  6 render 1 548  
94 0 0 4 116 496 0 0 0 2 4 this 3 511  5 shgen 1 550  
95 0 0 4 117 496 0 0 0 2 4 this 3 511  4 flag 1 499  
96 0 0 4 118 496 0 0 0 2 4 this 3 511  4 flag 1 499  
97 0 0 4 119 496 0 0 0 2 4 this 3 511  4 type 1 448  
98 0 0 4 120 496 0 0 0 2 4 this 3 511  4 flag 1 499  
99 0 0 4 121 496 0 0 0 2 4 this 3 511  4 file 1 500  
100 0 0 4 122 496 0 0 0 2 4 this 3 511  4 flag 1 499  
101 0 0 6 123 499 0 0 0 1 4 this 3 544  
102 0 0 7 124 532 0 0 0 1 4 this 3 544  
103 0 0 7 125 532 0 0 0 6 4 this 3 511  14 decal_material 1 491  11 decal_scale 1 551  6 rotate 1 543  5 start 1 526  3 end 1 526  
104 0 0 4 126 496 0 0 0 1 4 this 3 511  
105 0 0 4 127 496 0 0 0 2 4 this 3 511  4 flag 1 499  
106 0 0 4 128 496 0 0 0 2 4 this 3 511  3 dir 1 555  
107 0 0 4 129 496 0 0 0 2 4 this 3 511  5 color 1 557  
108 0 0 6 130 448 0 0 0 2 4 this 3 511  6 entnum 1 448  
109 0 0 4 131 496 0 0 0 4 4 this 3 511  8 modelnum 1 448  4 mins 1 517  4 maxs 1 517  
110 0 0 4 132 496 0 0 0 2 4 this 3 511  10 dispatcher 1 562  
111 0 0 4 133 496 0 0 0 3 4 this 3 511  4 name 1 491  4 type 1 565  
112 0 0 4 134 496 0 0 0 2 4 this 3 511  2 ai 1 499  
113 0 0 6 135 499 0 0 0 1 4 this 3 544  
114 0 0 6 136 499 0 0 0 3 4 this 3 511  5 start 1 526  3 end 1 526  
115 0 0 7 137 517 0 0 0 3 4 this 3 511  5 start 1 526  3 end 1 526  
116 0 0 4 138 496 0 0 0 3 4 this 3 511  7 entname 1 491  4 type 1 565  
117 0 0 6 139 562 0 0 0 2 4 this 3 544  10 targetname 1 491  
118 0 0 6 140 562 0 0 0 2 4 this 3 511  9 classname 1 491  
119 0 0 4 141 496 0 0 0 3 4 this 3 511  4 list 1 562  6 entnum 1 568  
120 0 0 4 142 496 0 0 0 3 4 this 3 511  5 entum 1 448  5 pyent 1 562  
121 0 0 6 143 448 0 0 0 1 4 this 3 544  
122 0 0 6 144 491 0 0 0 3 4 this 3 544  6 entnum 1 448  3 key 1 491  
123 0 0 6 145 543 0 0 0 3 4 this 3 544  6 entnum 1 448  3 key 1 491  
124 0 0 6 146 448 0 0 0 3 4 this 3 544  6 entnum 1 448  3 key 1 491  
125 0 0 7 147 520 0 0 0 3 4 this 3 544  6 entnum 1 448  3 key 1 491  
126 0 0 7 148 569 0 0 0 4 4 this 3 544  6 entnum 1 448  3 key 1 491  5 scale 1 499  
127 0 0 7 149 532 0 0 0 2 4 this 3 544  6 entnum 1 448  
128 0 0 7 150 532 0 0 0 2 4 this 3 544  8 modelnum 1 448  
129 0 0 7 151 508 256 0 0 2 4 this 3 544  6 entnum 1 568  
130 0 0 6 152 448 0 0 0 2 4 this 3 511  3 pos 1 526  
131 0 0 6 152 448 0 0 0 2 4 this 3 511  2 np 1 548  
132 0 0 6 153 448 0 0 0 2 4 this 3 511  3 pos 1 526  
133 0 0 6 154 499 0 0 0 3 4 this 3 544  12 curr_cluster 1 448  7 cluster 1 448  
134 0 0 6 155 499 0 0 0 2 4 this 3 511  6 bounds 1 570  
135 0 0 7 156 570 0 0 0 3 4 this 3 511  13 net_transform 1 573  8 original 1 570  
136 0 0 6 157 499 0 0 0 1 4 this 3 544  
137 0 0 6 158 499 0 0 0 1 4 this 3 544  
138 0 0 4 159 496 0 0 0 1 4 this 3 511  
139 0 0 7 160 532 0 0 0 1 4 this 3 544  
140 0 0 6 161 511 0 0 0 0 
141 0 0 7 167 578 362 0 0 1 6 param0 0 576  
142 0 0 7 167 578 362 0 0 2 4 trav 1 579  6 loader 1 511  
143 0 0 7 166 503 0 0 0 0 
144 0 0 7 172 582 365 0 0 1 6 param0 0 580  
145 0 0 7 172 582 365 0 0 2 4 name 1 491  6 loader 1 511  
146 0 0 7 171 503 0 0 0 0 
147 0 0 7 176 585 368 0 0 1 6 param0 0 583  
148 0 0 7 176 585 368 0 0 1 4 name 1 491  
149 0 0 7 175 503 0 0 0 0 
150 0 0 7 181 588 371 0 0 1 6 param0 0 586  
151 0 0 7 181 588 371 0 0 1 4 name 1 491  
152 0 0 7 180 503 0 0 0 0 
153 0 0 7 186 591 374 0 0 1 6 param0 0 589  
154 0 0 7 186 591 374 0 0 1 4 name 1 491  
155 0 0 7 185 503 0 0 0 0 
156 0 0 7 193 592 380 0 0 0 
157 0 0 7 193 592 380 0 0 1 6 param0 0 593  
158 0 0 4 189 496 0 0 0 3 4 this 3 592  3 key 1 491  5 value 1 491  
159 0 0 4 190 496 0 0 0 3 4 this 3 592  3 inp 1 595  9 important 1 499  
160 0 0 4 191 496 0 0 0 2 4 this 3 592  4 flag 1 448  
161 0 0 6 192 499 0 0 0 2 4 this 3 593  5 other 1 593  
162 0 0 4 202 496 0 0 0 4 4 this 3 598  9 vert_file 1 500  10 pixel_file 1 500  9 geom_file 1 500  
163 0 0 7 203 503 0 0 0 0 
164 0 0 7 197 599 0 0 0 1 4 this 3 598  
165 0 0 6 200 600 0 0 0 1 4 this 3 598  
166 0 0 7 207 550 399 0 0 3 3 gsg 1 601  6 camera 1 548  6 render 1 548  
167 0 0 7 207 550 399 0 0 1 6 param0 0 603  
168 0 0 4 208 496 0 0 0 2 4 this 3 550  2 np 1 548  
169 0 0 4 209 496 0 0 0 1 4 this 3 550  
170 0 0 4 210 496 0 0 0 2 4 this 3 550  4 spec 1 598  
171 0 0 6 211 499 0 0 0 1 4 this 3 603  
172 0 0 7 212 606 0 0 0 1 4 this 3 603  
173 0 0 6 213 607 0 0 0 1 4 this 3 603  
174 0 0 7 214 532 0 0 0 1 4 this 3 603  
175 0 0 7 215 606 0 0 0 1 4 this 3 603  
176 0 0 7 216 606 0 0 0 0 
177 0 0 7 217 503 0 0 0 0 
178 0 0 7 220 609 401 0 0 0 
179 0 0 7 223 610 403 0 0 0 
180 0 0 7 226 611 405 0 0 0 
181 0 0 7 229 612 407 0 0 0 
182 0 0 7 232 613 409 0 0 0 
183 0 0 7 237 614 413 0 0 0 
184 0 0 7 237 614 413 0 0 1 6 param0 0 615  
185 0 0 4 235 496 0 0 0 0 
186 0 0 4 236 496 0 0 0 0 
187 0 0 7 240 617 421 0 0 0 
188 0 0 7 240 617 421 0 0 1 6 param0 0 618  
189 0 0 6 241 499 0 0 0 1 4 this 3 618  
190 0 0 7 242 520 0 0 0 1 4 this 3 618  
191 0 0 7 243 622 0 0 0 1 4 this 3 618  
192 0 0 6 244 623 0 0 0 1 4 this 3 618  
193 0 0 6 245 623 0 0 0 1 4 this 3 618  
194 0 0 6 246 543 0 0 0 1 4 this 3 618  
195 0 0 7 249 624 0 0 0 0 
196 0 0 7 249 624 0 0 0 1 6 param0 0 625  
197 0 0 4 250 496 0 0 0 2 4 this 3 624  4 geom 1 627  
198 0 0 4 251 496 0 0 0 2 4 this 3 624  4 geom 1 627  
199 0 0 4 252 496 0 0 0 1 4 this 3 624  
200 0 0 7 254 617 421 0 0 4 4 this 3 624  5 start 1 526  3 end 1 526  4 mask 1 628  
201 0 0 7 255 617 421 0 0 5 4 this 3 624  6 origin 1 526  9 direction 1 555  8 distance 1 543  4 mask 1 628  
202 0 0 4 256 496 0 0 0 2 4 this 3 624  7 quality 1 448  
203 0 0 4 257 496 0 0 0 1 4 this 3 624  
204 0 0 7 258 627 0 0 0 2 4 this 3 624  7 geom_id 1 623  
205 0 0 7 260 503 0 0 0 0 
206 0 0 4 261 496 0 0 0 2 4 this 3 627  4 mask 1 628  
207 0 0 4 261 496 0 0 0 2 4 this 3 627  4 mask 1 623  
208 0 0 7 262 634 0 0 0 1 4 this 3 632  
209 0 0 4 263 496 0 0 0 2 4 this 3 627  7 quality 1 448  
210 0 0 4 264 496 0 0 0 1 4 this 3 627  
211 0 0 7 267 635 440 0 0 1 4 name 1 491  
212 0 0 7 266 503 0 0 0 0 
213 0 0 4 268 496 0 0 0 4 4 this 3 635  2 p1 1 526  2 p2 1 526  2 p3 1 526  
214 0 0 4 269 496 0 0 0 3 4 this 3 635  4 geom 1 636  2 ts 1 573  
215 0 0 7 272 639 442 0 0 0 
197
443 13 TextureStages 0 141313 13 TextureStages 13 TextureStages 0 0 0 1 226 227 0 10 216 217 218 219 220 221 222 223 224 225 0 0 0 0 0 752
/**
 * This simple interface maintains a single TextureStage object for each unique name.
 * It avoids the creation of duplicate TextureStages with the same name, which
 * reduces texture swapping and draw call overhead.
 *
 * If using our shader system, you should always use this interface to get TextureStages.
 * You are not required to change any properties on the returned TextureStage, as the shader
 * specification will know what to do with the TextureStage from the name.
 * 
 * For example, you do not need to call TextureStage::set_mode() or NodePath::set_tex_gen().
 * If you apply a texture to a node with the get_normalmap() stage, the shader specification
 * will know that the texture you supplied is to be treated as a normal map.
 */

444 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 228 242 0 13 229 230 231 232 233 234 235 236 237 238 239 240 241 0 0 1 0 445 0 0 0 0 0

445 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

446 17 BSPMaterialAttrib 0 141313 17 BSPMaterialAttrib 17 BSPMaterialAttrib 0 0 0 0 251 1 640 8 243 244 245 246 247 248 249 250 0 0 1 0 447 0 0 0 0 0

447 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

448 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

449 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 253 256 0 3 252 254 255 0 0 1 0 445 0 0 0 0 0

450 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 258 261 0 3 257 259 260 0 0 1 0 449 0 0 0 0 0

451 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 263 267 0 4 262 264 265 266 0 0 1 0 449 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

452 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 269 273 0 4 268 270 271 272 0 0 1 0 449 0 0 0 0 0

453 10 PackResult 0 141313 10 PackResult 10 PackResult 0 0 0 1 277 278 0 3 274 275 276 0 0 0 0 0 0

454 15 TextureLocation 0 141313 15 TextureLocation 15 TextureLocation 0 0 0 1 284 285 0 5 279 280 281 282 283 0 0 0 0 0 0

455 13 TexturePacker 0 141313 13 TexturePacker 13 TexturePacker 0 0 0 0 295 0 9 286 287 288 289 290 291 292 293 294 0 0 0 0 0 0

456 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 304 1 641 8 296 297 298 299 300 301 302 303 0 0 1 0 447 0 0 0 1 457 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

457 0 0 794624 15 BSPFaceAttrib:: 0 456 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

458 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 305 359 0 53 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 0 0 0 0 1 459 58
/**
 * Loads and handles the operations of PBSP files.
 */

459 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 458 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

460 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 361 362 0 1 360 0 0 1 0 461 0 0 0 0 0

461 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

462 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 364 365 0 1 363 0 0 1 0 463 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

463 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

464 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 367 368 0 1 366 0 0 1 0 463 0 0 0 0 0

465 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 370 371 0 1 369 0 0 1 0 466 0 0 0 0 0

466 9 ModelRoot 0 2048 9 ModelRoot 9 ModelRoot 0 0 0 0 0 0 0 0 0 0 0 0 314
/**
 * A node of this type is created automatically at the root of each model file
 * that is loaded.  It may eventually contain some information about the
 * contents of the model; at the moment, it contains no special information,
 * but can be used as a flag to indicate the presence of a loaded model file.
 */

467 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 373 374 0 1 372 0 0 1 0 468 0 0 0 0 0

468 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

469 18 ShaderPermutations 0 141313 18 ShaderPermutations 18 ShaderPermutations 0 0 0 1 379 380 0 4 375 376 377 378 0 0 0 0 0 97
/**
 * Represents a list of #defines and variable inputs to a shader that is being generated.
 */

470 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 0 387 0 2 385 386 0 0 2 3 471 381 382 3 472 383 384 0 0 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

471 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

472 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

473 19 PSSMShaderGenerator 0 141313 19 PSSMShaderGenerator 19 PSSMShaderGenerator 0 0 0 1 388 399 0 10 389 390 391 392 393 394 395 396 397 398 0 0 1 0 474 0 0 0 0 0

474 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

475 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 400 401 0 0 0 0 1 0 470 0 0 0 0 0

476 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 402 403 0 0 0 0 1 0 470 0 0 0 0 0

477 16 UnlitGenericSpec 0 141313 16 UnlitGenericSpec 16 UnlitGenericSpec 0 0 0 1 404 405 0 0 0 0 1 0 470 0 0 0 0 160
/**
 * Shader that only supports a basetexture, no fancy lighting effects or anything.
 * Could be used for UI elements, emissive materials, particles, etc.
 */

478 14 UnlitNoMatSpec 0 141313 14 UnlitNoMatSpec 14 UnlitNoMatSpec 0 0 0 1 406 407 0 0 0 0 1 0 470 0 0 0 0 0

479 13 CSMRenderSpec 0 141313 13 CSMRenderSpec 13 CSMRenderSpec 0 0 0 1 408 409 0 0 0 0 1 0 470 0 0 0 0 0

480 8 RayTrace 0 141313 8 RayTrace 8 RayTrace 0 0 0 1 412 413 0 2 410 411 0 0 0 0 0 0

481 17 RayTraceHitResult 0 141313 17 RayTraceHitResult 17 RayTraceHitResult 0 0 0 1 414 421 0 6 415 416 417 418 419 420 0 0 0 0 0 0

482 13 RayTraceScene 0 75777 13 RayTraceScene 13 RayTraceScene 0 0 0 1 422 0 0 8 423 424 425 426 427 428 429 430 0 0 1 0 471 0 0 0 1 483 0

483 0 0 794624 15 RayTraceScene:: 0 482 0 0 0 0 0 0 0 0 0 3 17 BUILD_QUALITY_LOW 32 RayTraceScene::BUILD_QUALITY_LOW 0
0 20 BUILD_QUALITY_MEDIUM 35 RayTraceScene::BUILD_QUALITY_MEDIUM 0
1 18 BUILD_QUALITY_HIGH 33 RayTraceScene::BUILD_QUALITY_HIGH 0
2 0 0

484 16 RayTraceGeometry 0 75777 16 RayTraceGeometry 16 RayTraceGeometry 0 0 0 0 0 0 5 431 432 433 434 435 0 0 1 0 463 0 0 0 0 0

485 20 RayTraceTriangleMesh 0 141313 20 RayTraceTriangleMesh 20 RayTraceTriangleMesh 0 0 0 1 437 440 0 3 436 438 439 0 0 1 0 484 0 0 0 0 0

486 10 SkyBoxSpec 0 141313 10 SkyBoxSpec 10 SkyBoxSpec 0 0 0 1 441 442 0 0 0 0 1 0 470 0 0 0 0 0

487 15 TextureStages * 0 8576 15 TextureStages * 15 TextureStages * 0 0 443 0 0 0 0 0 0 0 0 0 0

488 21 TextureStages const * 0 8576 21 TextureStages const * 21 TextureStages const * 0 0 489 0 0 0 0 0 0 0 0 0 0

489 19 TextureStages const 0 8832 19 TextureStages const 19 TextureStages const 0 0 443 0 0 0 0 0 0 0 0 0 0

490 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 336
/**
 * Defines the properties of a named stage of the multitexture pipeline.  The
 * TextureAttrib will associated a number of these stages with Texture
 * objects, and the GSG will render geometry by sorting all of the currently
 * active TextureStages in order and then issuing the appropriate rendering
 * calls to activate them.
 */

491 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

492 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 490 0 0 0 0 0 0 0 0 0 0

493 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 494 0 0 0 0 0 0 0 0 0 0

494 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 444 0 0 0 0 0 0 0 0 0 0

495 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 444 0 0 0 0 0 0 0 0 0 0

496 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

497 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

498 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 497 0 0 0 0 0 0 0 0 0 0

499 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

500 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 501 0 0 0 0 0 0 0 0 0 0

501 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 497 0 0 0 0 0 0 0 0 0 0

502 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

503 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 502 0 0 0 0 0 0 0 0 0 0

504 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 447 0 0 0 0 0 0 0 0 0 0

505 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 504 0 0 0 0 0 0 0 0 0 0

506 25 BSPMaterialAttrib const * 0 8576 25 BSPMaterialAttrib const * 25 BSPMaterialAttrib const * 0 0 507 0 0 0 0 0 0 0 0 0 0

507 23 BSPMaterialAttrib const 0 8832 23 BSPMaterialAttrib const 23 BSPMaterialAttrib const 0 0 446 0 0 0 0 0 0 0 0 0 0

508 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 449 0 0 0 0 0 0 0 0 0 0

509 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 510 0 0 0 0 0 0 0 0 0 0

510 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 449 0 0 0 0 0 0 0 0 0 0

511 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 458 0 0 0 0 0 0 0 0 0 0

512 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 450 0 0 0 0 0 0 0 0 0 0

513 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 514 0 0 0 0 0 0 0 0 0 0

514 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 450 0 0 0 0 0 0 0 0 0 0

515 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 516 0 0 0 0 0 0 0 0 0 0

516 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

517 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 515 0 0 0 0 0 0 0 0 0 0

518 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 519 0 0 0 0 0 0 0 0 0 0

519 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

520 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 518 0 0 0 0 0 0 0 0 0 0

521 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 451 0 0 0 0 0 0 0 0 0 0

522 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 523 0 0 0 0 0 0 0 0 0 0

523 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 451 0 0 0 0 0 0 0 0 0 0

524 11 BoundingBox 0 2048 11 BoundingBox 11 BoundingBox 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

525 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 524 0 0 0 0 0 0 0 0 0 0

526 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 527 0 0 0 0 0 0 0 0 0 0

527 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 515 0 0 0 0 0 0 0 0 0 0

528 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 452 0 0 0 0 0 0 0 0 0 0

529 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 530 0 0 0 0 0 0 0 0 0 0

530 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 452 0 0 0 0 0 0 0 0 0 0

531 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

532 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 531 0 0 0 0 0 0 0 0 0 0

533 18 PackResult const * 0 8576 18 PackResult const * 18 PackResult const * 0 0 534 0 0 0 0 0 0 0 0 0 0

534 16 PackResult const 0 8832 16 PackResult const 16 PackResult const 0 0 453 0 0 0 0 0 0 0 0 0 0

535 12 PackResult * 0 8576 12 PackResult * 12 PackResult * 0 0 453 0 0 0 0 0 0 0 0 0 0

536 23 TextureLocation const * 0 8576 23 TextureLocation const * 23 TextureLocation const * 0 0 537 0 0 0 0 0 0 0 0 0 0

537 21 TextureLocation const 0 8832 21 TextureLocation const 21 TextureLocation const 0 0 454 0 0 0 0 0 0 0 0 0 0

538 17 TextureLocation * 0 8576 17 TextureLocation * 17 TextureLocation * 0 0 454 0 0 0 0 0 0 0 0 0 0

539 15 TexturePacker * 0 8576 15 TexturePacker * 15 TexturePacker * 0 0 455 0 0 0 0 0 0 0 0 0 0

540 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 541 0 0 0 0 0 0 0 0 0 0

541 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 456 0 0 0 0 0 0 0 0 0 0

542 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 543 0 0 0 0 0 0 0 0 0 0

543 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

544 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 545 0 0 0 0 0 0 0 0 0 0

545 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 458 0 0 0 0 0 0 0 0 0 0

546 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 547 0 0 0 0 0 0 0 0 0 0

547 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

548 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 549 0 0 0 0 0 0 0 0 0 0

549 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 531 0 0 0 0 0 0 0 0 0 0

550 21 PSSMShaderGenerator * 0 8576 21 PSSMShaderGenerator * 21 PSSMShaderGenerator * 0 0 473 0 0 0 0 0 0 0 0 0 0

551 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 552 0 0 0 0 0 0 0 0 0 0

552 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 553 0 0 0 0 0 0 0 0 0 0

553 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 554 0 0 0 0 0 0 0 0 0 0

554 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

555 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 556 0 0 0 0 0 0 0 0 0 0

556 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 518 0 0 0 0 0 0 0 0 0 0

557 14 LColor const * 0 8576 14 LColor const * 14 LColor const * 0 0 558 0 0 0 0 0 0 0 0 0 0

558 12 LColor const 0 8832 12 LColor const 12 LColor const 0 0 559 0 0 0 0 0 0 0 0 0 0

559 6 LColor 0 2105344 6 LColor 6 LColor 0 0 560 0 0 0 0 0 0 0 0 0 0

560 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 561 0 0 0 0 0 0 0 0 0 0

561 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

562 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 563 0 0 0 0 0 0 0 0 0 0

563 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 564 0 0 0 0 0 0 0 0 0 0

564 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

565 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 566 0 0 0 0 0 0 0 0 0 0

566 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 567 0 0 0 0 0 0 0 0 0 0

567 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

568 9 int const 0 8832 9 int const 9 int const 0 0 448 0 0 0 0 0 0 0 0 0 0

569 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 559 0 0 0 0 0 0 0 0 0 0

570 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 571 0 0 0 0 0 0 0 0 0 0

571 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 572 0 0 0 0 0 0 0 0 0 0

572 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

573 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 574 0 0 0 0 0 0 0 0 0 0

574 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 575 0 0 0 0 0 0 0 0 0 0

575 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

576 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 577 0 0 0 0 0 0 0 0 0 0

577 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 460 0 0 0 0 0 0 0 0 0 0

578 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 460 0 0 0 0 0 0 0 0 0 0

579 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 461 0 0 0 0 0 0 0 0 0 0

580 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 581 0 0 0 0 0 0 0 0 0 0

581 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 462 0 0 0 0 0 0 0 0 0 0

582 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 462 0 0 0 0 0 0 0 0 0 0

583 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 584 0 0 0 0 0 0 0 0 0 0

584 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 464 0 0 0 0 0 0 0 0 0 0

585 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 464 0 0 0 0 0 0 0 0 0 0

586 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 587 0 0 0 0 0 0 0 0 0 0

587 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 465 0 0 0 0 0 0 0 0 0 0

588 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 465 0 0 0 0 0 0 0 0 0 0

589 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 590 0 0 0 0 0 0 0 0 0 0

590 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 467 0 0 0 0 0 0 0 0 0 0

591 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 467 0 0 0 0 0 0 0 0 0 0

592 20 ShaderPermutations * 0 8576 20 ShaderPermutations * 20 ShaderPermutations * 0 0 469 0 0 0 0 0 0 0 0 0 0

593 26 ShaderPermutations const * 0 8576 26 ShaderPermutations const * 26 ShaderPermutations const * 0 0 594 0 0 0 0 0 0 0 0 0 0

594 24 ShaderPermutations const 0 8832 24 ShaderPermutations const 24 ShaderPermutations const 0 0 469 0 0 0 0 0 0 0 0 0 0

595 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 596 0 0 0 0 0 0 0 0 0 0

596 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 597 0 0 0 0 0 0 0 0 0 0

597 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

598 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 470 0 0 0 0 0 0 0 0 0 0

599 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 471 0 0 0 0 0 0 0 0 0 0

600 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 472 0 0 0 0 0 0 0 0 0 0

601 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 602 0 0 0 0 0 0 0 0 0 0

602 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

603 27 PSSMShaderGenerator const * 0 8576 27 PSSMShaderGenerator const * 27 PSSMShaderGenerator const * 0 0 604 0 0 0 0 0 0 0 0 0 0

604 25 PSSMShaderGenerator const 0 8832 25 PSSMShaderGenerator const 25 PSSMShaderGenerator const 0 0 473 0 0 0 0 0 0 0 0 0 0

605 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

606 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 605 0 0 0 0 0 0 0 0 0 0

607 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 608 0 0 0 0 0 0 0 0 0 0

608 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

609 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 475 0 0 0 0 0 0 0 0 0 0

610 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 476 0 0 0 0 0 0 0 0 0 0

611 18 UnlitGenericSpec * 0 8576 18 UnlitGenericSpec * 18 UnlitGenericSpec * 0 0 477 0 0 0 0 0 0 0 0 0 0

612 16 UnlitNoMatSpec * 0 8576 16 UnlitNoMatSpec * 16 UnlitNoMatSpec * 0 0 478 0 0 0 0 0 0 0 0 0 0

613 15 CSMRenderSpec * 0 8576 15 CSMRenderSpec * 15 CSMRenderSpec * 0 0 479 0 0 0 0 0 0 0 0 0 0

614 10 RayTrace * 0 8576 10 RayTrace * 10 RayTrace * 0 0 480 0 0 0 0 0 0 0 0 0 0

615 16 RayTrace const * 0 8576 16 RayTrace const * 16 RayTrace const * 0 0 616 0 0 0 0 0 0 0 0 0 0

616 14 RayTrace const 0 8832 14 RayTrace const 14 RayTrace const 0 0 480 0 0 0 0 0 0 0 0 0 0

617 19 RayTraceHitResult * 0 8576 19 RayTraceHitResult * 19 RayTraceHitResult * 0 0 481 0 0 0 0 0 0 0 0 0 0

618 25 RayTraceHitResult const * 0 8576 25 RayTraceHitResult const * 25 RayTraceHitResult const * 0 0 619 0 0 0 0 0 0 0 0 0 0

619 23 RayTraceHitResult const 0 8832 23 RayTraceHitResult const 23 RayTraceHitResult const 0 0 481 0 0 0 0 0 0 0 0 0 0

620 8 LVector2 0 2105344 8 LVector2 8 LVector2 0 0 621 0 0 0 0 0 0 0 0 0 0

621 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

622 10 LVector2 * 0 8576 10 LVector2 * 10 LVector2 * 0 0 620 0 0 0 0 0 0 0 0 0 0

623 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

624 15 RayTraceScene * 0 8576 15 RayTraceScene * 15 RayTraceScene * 0 0 482 0 0 0 0 0 0 0 0 0 0

625 21 RayTraceScene const * 0 8576 21 RayTraceScene const * 21 RayTraceScene const * 0 0 626 0 0 0 0 0 0 0 0 0 0

626 19 RayTraceScene const 0 8832 19 RayTraceScene const 19 RayTraceScene const 0 0 482 0 0 0 0 0 0 0 0 0 0

627 18 RayTraceGeometry * 0 8576 18 RayTraceGeometry * 18 RayTraceGeometry * 0 0 484 0 0 0 0 0 0 0 0 0 0

628 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 629 0 0 0 0 0 0 0 0 0 0

629 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 630 0 0 0 0 0 0 0 0 0 0

630 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 631 0 0 0 0 0 0 0 0 0 0

631 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

632 24 RayTraceGeometry const * 0 8576 24 RayTraceGeometry const * 24 RayTraceGeometry const * 0 0 633 0 0 0 0 0 0 0 0 0 0

633 22 RayTraceGeometry const 0 8832 22 RayTraceGeometry const 22 RayTraceGeometry const 0 0 484 0 0 0 0 0 0 0 0 0 0

634 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 630 0 0 0 0 0 0 0 0 0 0

635 22 RayTraceTriangleMesh * 0 8576 22 RayTraceTriangleMesh * 22 RayTraceTriangleMesh * 0 0 485 0 0 0 0 0 0 0 0 0 0

636 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 637 0 0 0 0 0 0 0 0 0 0

637 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 638 0 0 0 0 0 0 0 0 0 0

638 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

639 12 SkyBoxSpec * 0 8576 12 SkyBoxSpec * 12 SkyBoxSpec * 0 0 486 0 0 0 0 0 0 0 0 0 0

0
2
640 10 class_slot 0 2 448 249 0 0 0 0 0 0 0 29 BSPMaterialAttrib::class_slot 0

641 10 class_slot 0 2 448 302 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

0
