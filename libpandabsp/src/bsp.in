1539299092
3 3
3 bsp 4 t5GT 3 bsp 
105
104 14 get_class_type 0 4 209 27 CBaseEntity::get_class_type 0 1 3 0
52
static TypeHandle CBaseEntity::get_class_type(void);

105 11 CBaseEntity 0 4 209 24 CBaseEntity::CBaseEntity 0 2 1 2 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

106 10 get_entnum 0 4 209 23 CBaseEntity::get_entnum 0 1 4 0
40
int CBaseEntity::get_entnum(void) const;

107 10 get_loader 0 4 209 23 CBaseEntity::get_loader 0 1 5 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

108 12 ~CBaseEntity 0 4 209 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

109 14 get_class_type 0 4 211 28 CPointEntity::get_class_type 0 1 8 0
53
static TypeHandle CPointEntity::get_class_type(void);

110 12 CPointEntity 0 4 211 26 CPointEntity::CPointEntity 0 2 6 7 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

111 10 get_origin 0 4 211 24 CPointEntity::get_origin 0 1 9 0
45
LPoint3 CPointEntity::get_origin(void) const;

112 10 get_angles 0 4 211 24 CPointEntity::get_angles 0 1 10 0
46
LVector3 CPointEntity::get_angles(void) const;

113 13 ~CPointEntity 0 4 211 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

114 14 get_class_type 0 4 212 29 CBoundsEntity::get_class_type 0 1 13 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

115 13 CBoundsEntity 0 4 212 28 CBoundsEntity::CBoundsEntity 0 2 11 12 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

116 10 get_bounds 0 4 212 25 CBoundsEntity::get_bounds 0 1 14 0
51
BoundingBox *CBoundsEntity::get_bounds(void) const;

117 9 is_inside 0 4 212 24 CBoundsEntity::is_inside 0 1 15 0
63
inline bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

118 13 fillin_bounds 0 4 212 28 CBoundsEntity::fillin_bounds 0 1 16 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

119 14 ~CBoundsEntity 0 4 212 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

120 14 get_class_type 0 4 213 28 CBrushEntity::get_class_type 0 1 19 0
53
static TypeHandle CBrushEntity::get_class_type(void);

121 12 CBrushEntity 0 4 213 26 CBrushEntity::CBrushEntity 0 2 17 18 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

122 12 get_modelnum 0 4 213 26 CBrushEntity::get_modelnum 0 1 20 0
43
int CBrushEntity::get_modelnum(void) const;

123 12 get_model_np 0 4 213 26 CBrushEntity::get_model_np 0 1 21 0
48
NodePath CBrushEntity::get_model_np(void) const;

124 16 get_model_bounds 0 4 213 30 CBrushEntity::get_model_bounds 0 1 22 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

125 13 ~CBrushEntity 0 4 213 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

126 4 make 0 4 214 19 BSPFaceAttrib::make 0 1 23 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

127 12 make_default 0 4 214 27 BSPFaceAttrib::make_default 0 1 24 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

128 12 get_material 0 4 214 27 BSPFaceAttrib::get_material 0 1 25 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

129 13 get_face_type 0 4 214 28 BSPFaceAttrib::get_face_type 0 1 26 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

130 14 get_class_slot 0 4 214 29 BSPFaceAttrib::get_class_slot 0 1 27 0
47
static int BSPFaceAttrib::get_class_slot(void);

131 14 get_class_type 0 4 214 29 BSPFaceAttrib::get_class_type 0 1 28 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

132 14 ~BSPFaceAttrib 0 4 214 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

133 9 BSPLoader 0 4 218 20 BSPLoader::BSPLoader 0 1 29 0
27
BSPLoader::BSPLoader(void);

134 4 read 0 4 218 15 BSPLoader::read 0 1 30 0
43
bool BSPLoader::read(Filename const &file);

135 16 do_optimizations 0 4 218 27 BSPLoader::do_optimizations 0 1 31 0
39
void BSPLoader::do_optimizations(void);

136 9 set_gamma 0 4 218 20 BSPLoader::set_gamma 0 1 32 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

137 9 get_gamma 0 4 218 20 BSPLoader::get_gamma 0 1 33 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

138 7 set_win 0 4 218 18 BSPLoader::set_win 0 1 34 0
45
void BSPLoader::set_win(GraphicsWindow *win);

139 10 set_camera 0 4 218 21 BSPLoader::set_camera 0 1 35 0
51
void BSPLoader::set_camera(NodePath const &camera);

140 10 set_render 0 4 218 21 BSPLoader::set_render 0 1 36 0
51
void BSPLoader::set_render(NodePath const &render);

141 19 set_want_visibility 0 4 218 30 BSPLoader::set_want_visibility 0 1 37 0
47
void BSPLoader::set_want_visibility(bool flag);

142 18 set_want_lightmaps 0 4 218 29 BSPLoader::set_want_lightmaps 0 1 38 0
46
void BSPLoader::set_want_lightmaps(bool flag);

143 16 set_physics_type 0 4 218 27 BSPLoader::set_physics_type 0 1 39 0
43
void BSPLoader::set_physics_type(int type);

144 19 set_visualize_leafs 0 4 218 30 BSPLoader::set_visualize_leafs 0 1 40 0
47
void BSPLoader::set_visualize_leafs(bool flag);

145 18 set_materials_file 0 4 218 29 BSPLoader::set_materials_file 0 1 41 0
57
void BSPLoader::set_materials_file(Filename const &file);

146 25 set_texture_contents_file 0 4 218 36 BSPLoader::set_texture_contents_file 0 1 42 0
64
void BSPLoader::set_texture_contents_file(Filename const &file);

147 15 setup_shadowcam 0 4 218 26 BSPLoader::setup_shadowcam 0 1 43 0
38
void BSPLoader::setup_shadowcam(void);

148 16 add_dynamic_node 0 4 218 27 BSPLoader::add_dynamic_node 0 1 44 0
55
void BSPLoader::add_dynamic_node(NodePath const &node);

149 16 set_want_shadows 0 4 218 27 BSPLoader::set_want_shadows 0 1 45 0
44
void BSPLoader::set_want_shadows(bool flag);

150 18 set_shadow_cam_pos 0 4 218 29 BSPLoader::set_shadow_cam_pos 0 1 46 0
55
void BSPLoader::set_shadow_cam_pos(LPoint3 const &pos);

151 22 set_shadow_cam_bitmask 0 4 218 33 BSPLoader::set_shadow_cam_bitmask 0 1 47 0
62
void BSPLoader::set_shadow_cam_bitmask(BitMask32 const &mask);

152 16 set_shadow_color 0 4 218 27 BSPLoader::set_shadow_color 0 1 48 0
54
void BSPLoader::set_shadow_color(LColor const &color);

153 21 set_shadow_resolution 0 4 218 32 BSPLoader::set_shadow_resolution 0 1 49 0
65
void BSPLoader::set_shadow_resolution(int filmsize, int texsize);

154 12 cast_shadows 0 4 218 23 BSPLoader::cast_shadows 0 1 50 0
45
void BSPLoader::cast_shadows(NodePath &node);

155 14 get_shadow_tex 0 4 218 25 BSPLoader::get_shadow_tex 0 1 51 0
47
Texture *BSPLoader::get_shadow_tex(void) const;

156 16 extract_modelnum 0 4 218 27 BSPLoader::extract_modelnum 0 1 52 0
51
inline int BSPLoader::extract_modelnum(int entnum);

157 16 get_model_bounds 0 4 218 27 BSPLoader::get_model_bounds 0 1 53 0
84
inline void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

158 28 set_server_entity_dispatcher 0 4 218 39 BSPLoader::set_server_entity_dispatcher 0 1 54 0
67
void BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

159 27 link_server_entity_to_class 0 4 218 38 BSPLoader::link_server_entity_to_class 0 1 55 0
89
void BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

160 6 set_ai 0 4 218 17 BSPLoader::set_ai 0 1 56 0
32
void BSPLoader::set_ai(bool ai);

161 5 is_ai 0 4 218 16 BSPLoader::is_ai 0 1 57 0
41
inline bool BSPLoader::is_ai(void) const;

162 19 update_dynamic_node 0 4 218 30 BSPLoader::update_dynamic_node 0 1 58 0
58
void BSPLoader::update_dynamic_node(NodePath const &node);

163 10 trace_line 0 4 218 21 BSPLoader::trace_line 0 1 59 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

164 20 link_entity_to_class 0 4 218 31 BSPLoader::link_entity_to_class 0 1 60 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

165 28 get_py_entity_by_target_name 0 4 218 39 BSPLoader::get_py_entity_by_target_name 0 1 61 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

166 17 find_all_entities 0 4 218 28 BSPLoader::find_all_entities 0 1 62 0
69
PyObject *BSPLoader::find_all_entities(std::string const &classname);

167 20 get_entity_keyvalues 0 4 218 31 BSPLoader::get_entity_keyvalues 0 1 63 0
71
void BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

168 18 link_cent_to_pyent 0 4 218 29 BSPLoader::link_cent_to_pyent 0 1 64 0
63
void BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

169 16 get_num_entities 0 4 218 27 BSPLoader::get_num_entities 0 1 65 0
44
int BSPLoader::get_num_entities(void) const;

170 16 get_entity_value 0 4 218 27 BSPLoader::get_entity_value 0 1 66 0
75
std::string BSPLoader::get_entity_value(int entnum, char const *key) const;

171 22 get_entity_value_float 0 4 218 33 BSPLoader::get_entity_value_float 0 1 67 0
75
float BSPLoader::get_entity_value_float(int entnum, char const *key) const;

172 20 get_entity_value_int 0 4 218 31 BSPLoader::get_entity_value_int 0 1 68 0
71
int BSPLoader::get_entity_value_int(int entnum, char const *key) const;

173 23 get_entity_value_vector 0 4 218 34 BSPLoader::get_entity_value_vector 0 1 69 0
79
LVector3 BSPLoader::get_entity_value_vector(int entnum, char const *key) const;

174 22 get_entity_value_color 0 4 218 33 BSPLoader::get_entity_value_color 0 1 70 0
95
LColor BSPLoader::get_entity_value_color(int entnum, char const *key, bool scale = true) const;

175 10 get_entity 0 4 218 21 BSPLoader::get_entity 0 1 71 0
49
NodePath BSPLoader::get_entity(int entnum) const;

176 9 get_model 0 4 218 20 BSPLoader::get_model 0 1 72 0
50
NodePath BSPLoader::get_model(int modelnum) const;

177 12 get_c_entity 0 4 218 23 BSPLoader::get_c_entity 0 1 73 0
68
inline CBaseEntity *BSPLoader::get_c_entity(int const entnum) const;

178 9 find_leaf 0 4 218 20 BSPLoader::find_leaf 0 2 74 75 0
105
inline int BSPLoader::find_leaf(NodePath const &np);
inline int BSPLoader::find_leaf(LPoint3 const &pos);

179 9 find_node 0 4 218 20 BSPLoader::find_node 0 1 76 0
52
inline int BSPLoader::find_node(LPoint3 const &pos);

180 18 is_cluster_visible 0 4 218 29 BSPLoader::is_cluster_visible 0 1 77 0
79
inline bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

181 15 pvs_bounds_test 0 4 218 26 BSPLoader::pvs_bounds_test 0 1 78 0
78
inline bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds);

182 15 make_net_bounds 0 4 218 26 BSPLoader::make_net_bounds 0 1 79 0
154
inline ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

183 16 has_active_level 0 4 218 27 BSPLoader::has_active_level 0 1 80 0
52
inline bool BSPLoader::has_active_level(void) const;

184 14 has_visibility 0 4 218 25 BSPLoader::has_visibility 0 1 81 0
50
inline bool BSPLoader::has_visibility(void) const;

185 7 cleanup 0 4 218 18 BSPLoader::cleanup 0 1 82 0
30
void BSPLoader::cleanup(void);

186 10 get_result 0 4 218 21 BSPLoader::get_result 0 1 83 0
43
NodePath BSPLoader::get_result(void) const;

187 14 get_global_ptr 0 4 218 25 BSPLoader::get_global_ptr 0 1 84 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

188 10 ~BSPLoader 0 4 218 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

189 14 get_class_type 0 4 220 32 BSPCullTraverser::get_class_type 0 1 87 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

190 16 BSPCullTraverser 0 4 220 34 BSPCullTraverser::BSPCullTraverser 0 2 85 86 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

191 17 ~BSPCullTraverser 0 4 220 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

192 15 IgnorePVSAttrib 0 4 222 32 IgnorePVSAttrib::IgnorePVSAttrib 0 1 88 0
46
inline IgnorePVSAttrib::IgnorePVSAttrib(void);

193 4 make 0 4 222 21 IgnorePVSAttrib::make 0 1 89 0
66
static ConstPointerTo< RenderAttrib > IgnorePVSAttrib::make(void);

194 14 get_class_slot 0 4 222 31 IgnorePVSAttrib::get_class_slot 0 1 90 0
49
static int IgnorePVSAttrib::get_class_slot(void);

195 14 get_class_type 0 4 222 31 IgnorePVSAttrib::get_class_type 0 1 91 0
56
static TypeHandle IgnorePVSAttrib::get_class_type(void);

196 16 ~IgnorePVSAttrib 0 4 222 33 IgnorePVSAttrib::~IgnorePVSAttrib 0 0 0
40
IgnorePVSAttrib::~IgnorePVSAttrib(void);

197 14 get_class_type 0 4 223 25 BSPRender::get_class_type 0 1 94 0
50
static TypeHandle BSPRender::get_class_type(void);

198 9 BSPRender 0 4 223 20 BSPRender::BSPRender 0 2 92 93 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

199 10 ~BSPRender 0 4 223 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

200 14 get_class_type 0 4 225 23 BSPRoot::get_class_type 0 1 97 0
48
static TypeHandle BSPRoot::get_class_type(void);

201 7 BSPRoot 0 4 225 16 BSPRoot::BSPRoot 0 2 95 96 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

202 8 ~BSPRoot 0 4 225 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

203 14 get_class_type 0 4 226 23 BSPProp::get_class_type 0 1 100 0
48
static TypeHandle BSPProp::get_class_type(void);

204 7 BSPProp 0 4 226 16 BSPProp::BSPProp 0 2 98 99 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

205 8 ~BSPProp 0 4 226 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

206 14 get_class_type 0 4 228 24 BSPModel::get_class_type 0 1 103 0
49
static TypeHandle BSPModel::get_class_type(void);

207 8 BSPModel 0 4 228 18 BSPModel::BSPModel 0 2 101 102 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

208 9 ~BSPModel 0 4 228 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

103
1 0 0 7 4 229 108 0 0 0 
2 0 0 7 4 229 108 0 0 1 6 param0 0 230  
3 0 0 7 3 233 0 0 0 0 
4 0 0 6 5 217 0 0 0 1 4 this 3 230  
5 0 0 6 6 234 0 0 0 1 4 this 3 230  
6 0 0 7 10 235 113 0 0 0 
7 0 0 7 10 235 113 0 0 1 6 param0 0 236  
8 0 0 7 9 233 0 0 0 0 
9 0 0 7 11 240 0 0 0 1 4 this 3 236  
10 0 0 7 12 243 0 0 0 1 4 this 3 236  
11 0 0 7 16 244 119 0 0 0 
12 0 0 7 16 244 119 0 0 1 6 param0 0 245  
13 0 0 7 15 233 0 0 0 0 
14 0 0 7 17 248 0 0 0 1 4 this 3 245  
15 0 0 6 18 251 0 0 0 2 4 this 3 245  3 pos 1 249  
16 0 0 4 19 252 0 0 0 3 4 this 3 244  4 mins 1 240  4 maxs 1 240  
17 0 0 7 23 253 125 0 0 0 
18 0 0 7 23 253 125 0 0 1 6 param0 0 254  
19 0 0 7 22 233 0 0 0 0 
20 0 0 6 24 217 0 0 0 1 4 this 3 254  
21 0 0 7 25 257 0 0 0 1 4 this 3 254  
22 0 0 4 26 252 0 0 0 3 4 this 3 253  4 mins 1 240  4 maxs 1 240  
23 0 0 7 31 260 0 0 0 2 13 face_material 1 259  9 face_type 1 217  
24 0 0 7 32 260 0 0 0 0 
25 0 0 6 33 259 0 0 0 1 4 this 3 261  
26 0 0 6 34 217 0 0 0 1 4 this 3 261  
27 0 0 6 35 217 0 0 0 0 
28 0 0 7 38 233 0 0 0 0 
29 0 0 7 41 234 188 0 0 0 
30 0 0 6 42 251 0 0 0 2 4 this 3 234  4 file 1 263  
31 0 0 4 43 252 0 0 0 1 4 this 3 234  
32 0 0 4 44 252 0 0 0 3 4 this 3 234  5 gamma 1 266  10 overbright 1 217  
33 0 0 6 45 266 0 0 0 1 4 this 3 268  
34 0 0 4 46 252 0 0 0 2 4 this 3 234  3 win 1 270  
35 0 0 4 47 252 0 0 0 2 4 this 3 234  6 camera 1 272  
36 0 0 4 48 252 0 0 0 2 4 this 3 234  6 render 1 272  
37 0 0 4 49 252 0 0 0 2 4 this 3 234  4 flag 1 251  
38 0 0 4 50 252 0 0 0 2 4 this 3 234  4 flag 1 251  
39 0 0 4 51 252 0 0 0 2 4 this 3 234  4 type 1 217  
40 0 0 4 52 252 0 0 0 2 4 this 3 234  4 flag 1 251  
41 0 0 4 53 252 0 0 0 2 4 this 3 234  4 file 1 263  
42 0 0 4 54 252 0 0 0 2 4 this 3 234  4 file 1 263  
43 0 0 4 55 252 0 0 0 1 4 this 3 234  
44 0 0 4 56 252 0 0 0 2 4 this 3 234  4 node 1 272  
45 0 0 4 57 252 0 0 0 2 4 this 3 234  4 flag 1 251  
46 0 0 4 58 252 0 0 0 2 4 this 3 234  3 pos 1 249  
47 0 0 4 59 252 0 0 0 2 4 this 3 234  4 mask 1 274  
48 0 0 4 60 252 0 0 0 2 4 this 3 234  5 color 1 278  
49 0 0 4 61 252 0 0 0 3 4 this 3 234  8 filmsize 1 217  7 texsize 1 217  
50 0 0 4 62 252 0 0 0 2 4 this 3 234  4 node 1 257  
51 0 0 7 63 284 0 0 0 1 4 this 3 268  
52 0 0 6 64 217 0 0 0 2 4 this 3 234  6 entnum 1 217  
53 0 0 4 65 252 0 0 0 4 4 this 3 234  8 modelnum 1 217  4 mins 1 240  4 maxs 1 240  
54 0 0 4 66 252 0 0 0 2 4 this 3 234  10 dispatcher 1 285  
55 0 0 4 67 252 0 0 0 3 4 this 3 234  4 name 1 259  4 type 1 288  
56 0 0 4 68 252 0 0 0 2 4 this 3 234  2 ai 1 251  
57 0 0 6 69 251 0 0 0 1 4 this 3 268  
58 0 0 4 70 252 0 0 0 2 4 this 3 234  4 node 1 272  
59 0 0 6 71 251 0 0 0 3 4 this 3 234  5 start 1 249  3 end 1 249  
60 0 0 4 72 252 0 0 0 3 4 this 3 234  7 entname 1 259  4 type 1 288  
61 0 0 6 73 285 0 0 0 2 4 this 3 268  10 targetname 1 259  
62 0 0 6 74 285 0 0 0 2 4 this 3 234  9 classname 1 259  
63 0 0 4 75 252 0 0 0 3 4 this 3 234  4 list 1 285  6 entnum 1 291  
64 0 0 4 76 252 0 0 0 3 4 this 3 234  5 entum 1 217  5 pyent 1 285  
65 0 0 6 77 217 0 0 0 1 4 this 3 268  
66 0 0 6 78 259 0 0 0 3 4 this 3 268  6 entnum 1 217  3 key 1 259  
67 0 0 6 79 267 0 0 0 3 4 this 3 268  6 entnum 1 217  3 key 1 259  
68 0 0 6 80 217 0 0 0 3 4 this 3 268  6 entnum 1 217  3 key 1 259  
69 0 0 7 81 243 0 0 0 3 4 this 3 268  6 entnum 1 217  3 key 1 259  
70 0 0 7 82 292 0 0 0 4 4 this 3 268  6 entnum 1 217  3 key 1 259  5 scale 1 251  
71 0 0 7 83 257 0 0 0 2 4 this 3 268  6 entnum 1 217  
72 0 0 7 84 257 0 0 0 2 4 this 3 268  8 modelnum 1 217  
73 0 0 7 85 229 108 0 0 2 4 this 3 268  6 entnum 1 291  
74 0 0 6 86 217 0 0 0 2 4 this 3 234  3 pos 1 249  
75 0 0 6 86 217 0 0 0 2 4 this 3 234  2 np 1 272  
76 0 0 6 87 217 0 0 0 2 4 this 3 234  3 pos 1 249  
77 0 0 6 88 251 0 0 0 3 4 this 3 268  12 curr_cluster 1 217  7 cluster 1 217  
78 0 0 6 89 251 0 0 0 2 4 this 3 234  6 bounds 1 293  
79 0 0 7 90 293 0 0 0 3 4 this 3 234  13 net_transform 1 296  8 original 1 293  
80 0 0 6 91 251 0 0 0 1 4 this 3 268  
81 0 0 6 92 251 0 0 0 1 4 this 3 268  
82 0 0 4 93 252 0 0 0 1 4 this 3 234  
83 0 0 7 94 257 0 0 0 1 4 this 3 268  
84 0 0 6 95 234 0 0 0 0 
85 0 0 7 101 301 191 0 0 1 6 param0 0 299  
86 0 0 7 101 301 191 0 0 2 4 trav 1 302  6 loader 1 234  
87 0 0 7 100 233 0 0 0 0 
88 0 0 7 104 303 196 0 0 0 
89 0 0 7 105 260 0 0 0 0 
90 0 0 6 106 217 0 0 0 0 
91 0 0 7 108 233 0 0 0 0 
92 0 0 7 113 306 199 0 0 1 6 param0 0 304  
93 0 0 7 113 306 199 0 0 2 4 name 1 259  6 loader 1 234  
94 0 0 7 112 233 0 0 0 0 
95 0 0 7 117 309 202 0 0 1 6 param0 0 307  
96 0 0 7 117 309 202 0 0 1 4 name 1 259  
97 0 0 7 116 233 0 0 0 0 
98 0 0 7 122 312 205 0 0 1 6 param0 0 310  
99 0 0 7 122 312 205 0 0 1 4 name 1 259  
100 0 0 7 121 233 0 0 0 0 
101 0 0 7 126 315 208 0 0 1 6 param0 0 313  
102 0 0 7 126 315 208 0 0 1 4 name 1 259  
103 0 0 7 125 233 0 0 0 0 
107
209 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 105 108 0 3 104 106 107 0 0 1 0 210 0 0 0 0 0

210 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

211 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 110 113 0 3 109 111 112 0 0 1 0 209 0 0 0 0 0

212 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 115 119 0 4 114 116 117 118 0 0 1 0 209 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

213 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 121 125 0 4 120 122 123 124 0 0 1 0 209 0 0 0 0 0

214 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 132 1 316 6 126 127 128 129 130 131 0 0 1 0 215 0 0 0 1 216 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

215 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

216 0 0 794624 15 BSPFaceAttrib:: 0 214 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

217 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

218 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 133 188 0 54 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 0 0 0 0 1 219 58
/**
 * Loads and handles the operations of PBSP files.
 */

219 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 218 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

220 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 190 191 0 1 189 0 0 1 0 221 0 0 0 0 0

221 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

222 15 IgnorePVSAttrib 0 141313 15 IgnorePVSAttrib 15 IgnorePVSAttrib 0 0 0 1 192 196 1 317 3 193 194 195 0 0 1 0 215 0 0 0 0 86
/**
 * Forces the node/geom to not be tested against the PVS, just frustum culled.
 */

223 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 198 199 0 1 197 0 0 1 0 224 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

224 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

225 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 201 202 0 1 200 0 0 1 0 224 0 0 0 0 0

226 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 204 205 0 1 203 0 0 1 0 227 0 0 0 0 0

227 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

228 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 207 208 0 1 206 0 0 1 0 227 0 0 0 0 0

229 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 209 0 0 0 0 0 0 0 0 0 0

230 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 231 0 0 0 0 0 0 0 0 0 0

231 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 209 0 0 0 0 0 0 0 0 0 0

232 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

233 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 232 0 0 0 0 0 0 0 0 0 0

234 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 218 0 0 0 0 0 0 0 0 0 0

235 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 211 0 0 0 0 0 0 0 0 0 0

236 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 237 0 0 0 0 0 0 0 0 0 0

237 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 211 0 0 0 0 0 0 0 0 0 0

238 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 239 0 0 0 0 0 0 0 0 0 0

239 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

240 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 238 0 0 0 0 0 0 0 0 0 0

241 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 242 0 0 0 0 0 0 0 0 0 0

242 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

243 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 241 0 0 0 0 0 0 0 0 0 0

244 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 212 0 0 0 0 0 0 0 0 0 0

245 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 246 0 0 0 0 0 0 0 0 0 0

246 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 212 0 0 0 0 0 0 0 0 0 0

247 11 BoundingBox 0 2048 11 BoundingBox 11 BoundingBox 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

248 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 247 0 0 0 0 0 0 0 0 0 0

249 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 250 0 0 0 0 0 0 0 0 0 0

250 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 238 0 0 0 0 0 0 0 0 0 0

251 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

252 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

253 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 213 0 0 0 0 0 0 0 0 0 0

254 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 255 0 0 0 0 0 0 0 0 0 0

255 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 213 0 0 0 0 0 0 0 0 0 0

256 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

257 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 256 0 0 0 0 0 0 0 0 0 0

258 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 215 0 0 0 0 0 0 0 0 0 0

259 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

260 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 258 0 0 0 0 0 0 0 0 0 0

261 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 262 0 0 0 0 0 0 0 0 0 0

262 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 214 0 0 0 0 0 0 0 0 0 0

263 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 264 0 0 0 0 0 0 0 0 0 0

264 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 265 0 0 0 0 0 0 0 0 0 0

265 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

266 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 267 0 0 0 0 0 0 0 0 0 0

267 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

268 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 269 0 0 0 0 0 0 0 0 0 0

269 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 218 0 0 0 0 0 0 0 0 0 0

270 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 271 0 0 0 0 0 0 0 0 0 0

271 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

272 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 273 0 0 0 0 0 0 0 0 0 0

273 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 256 0 0 0 0 0 0 0 0 0 0

274 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 275 0 0 0 0 0 0 0 0 0 0

275 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 276 0 0 0 0 0 0 0 0 0 0

276 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 277 0 0 0 0 0 0 0 0 0 0

277 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

278 14 LColor const * 0 8576 14 LColor const * 14 LColor const * 0 0 279 0 0 0 0 0 0 0 0 0 0

279 12 LColor const 0 8832 12 LColor const 12 LColor const 0 0 280 0 0 0 0 0 0 0 0 0 0

280 6 LColor 0 2105344 6 LColor 6 LColor 0 0 281 0 0 0 0 0 0 0 0 0 0

281 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 282 0 0 0 0 0 0 0 0 0 0

282 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

283 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

284 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 283 0 0 0 0 0 0 0 0 0 0

285 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 286 0 0 0 0 0 0 0 0 0 0

286 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 287 0 0 0 0 0 0 0 0 0 0

287 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

288 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 289 0 0 0 0 0 0 0 0 0 0

289 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 290 0 0 0 0 0 0 0 0 0 0

290 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

291 9 int const 0 8832 9 int const 9 int const 0 0 217 0 0 0 0 0 0 0 0 0 0

292 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 280 0 0 0 0 0 0 0 0 0 0

293 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 294 0 0 0 0 0 0 0 0 0 0

294 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 295 0 0 0 0 0 0 0 0 0 0

295 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

296 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 297 0 0 0 0 0 0 0 0 0 0

297 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 298 0 0 0 0 0 0 0 0 0 0

298 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

299 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 300 0 0 0 0 0 0 0 0 0 0

300 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 220 0 0 0 0 0 0 0 0 0 0

301 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 220 0 0 0 0 0 0 0 0 0 0

302 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 221 0 0 0 0 0 0 0 0 0 0

303 17 IgnorePVSAttrib * 0 8576 17 IgnorePVSAttrib * 17 IgnorePVSAttrib * 0 0 222 0 0 0 0 0 0 0 0 0 0

304 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 305 0 0 0 0 0 0 0 0 0 0

305 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 223 0 0 0 0 0 0 0 0 0 0

306 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 223 0 0 0 0 0 0 0 0 0 0

307 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 308 0 0 0 0 0 0 0 0 0 0

308 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 225 0 0 0 0 0 0 0 0 0 0

309 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 225 0 0 0 0 0 0 0 0 0 0

310 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 311 0 0 0 0 0 0 0 0 0 0

311 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 226 0 0 0 0 0 0 0 0 0 0

312 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 226 0 0 0 0 0 0 0 0 0 0

313 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 314 0 0 0 0 0 0 0 0 0 0

314 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 228 0 0 0 0 0 0 0 0 0 0

315 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 228 0 0 0 0 0 0 0 0 0 0

0
2
316 10 class_slot 0 2 0 130 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

317 10 class_slot 0 2 0 194 0 0 0 0 0 0 0 27 IgnorePVSAttrib::class_slot 0

0
