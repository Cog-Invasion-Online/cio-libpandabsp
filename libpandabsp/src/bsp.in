1564156896
3 3
3 bsp 4 t5GT 3 bsp 
367
346 3 get 0 4 713 18 TextureStages::get 0 2 3 4 0
159
static TextureStage *TextureStages::get(std::string const &name);
static TextureStage *TextureStages::get(std::string const &name, std::string const &uv_name);

347 15 get_basetexture 0 4 713 30 TextureStages::get_basetexture 0 1 5 0
58
static TextureStage *TextureStages::get_basetexture(void);

348 12 get_lightmap 0 4 713 27 TextureStages::get_lightmap 0 1 6 0
55
static TextureStage *TextureStages::get_lightmap(void);

349 19 get_bumped_lightmap 0 4 713 34 TextureStages::get_bumped_lightmap 0 1 7 0
62
static TextureStage *TextureStages::get_bumped_lightmap(void);

350 13 get_spheremap 0 4 713 28 TextureStages::get_spheremap 0 1 8 0
56
static TextureStage *TextureStages::get_spheremap(void);

351 11 get_cubemap 0 4 713 26 TextureStages::get_cubemap 0 1 9 0
54
static TextureStage *TextureStages::get_cubemap(void);

352 13 get_normalmap 0 4 713 28 TextureStages::get_normalmap 0 1 10 0
56
static TextureStage *TextureStages::get_normalmap(void);

353 13 get_heightmap 0 4 713 28 TextureStages::get_heightmap 0 1 11 0
56
static TextureStage *TextureStages::get_heightmap(void);

354 12 get_glossmap 0 4 713 27 TextureStages::get_glossmap 0 1 12 0
55
static TextureStage *TextureStages::get_glossmap(void);

355 11 get_glowmap 0 4 713 26 TextureStages::get_glowmap 0 1 13 0
54
static TextureStage *TextureStages::get_glowmap(void);

356 13 TextureStages 0 4 713 28 TextureStages::TextureStages 0 2 1 2 0
122
inline TextureStages::TextureStages(void) = default;
inline TextureStages::TextureStages(TextureStages const &) = default;

357 14 ~TextureStages 0 4 713 29 TextureStages::~TextureStages 0 0 0
36
TextureStages::~TextureStages(void);

358 11 BSPMaterial 0 4 714 24 BSPMaterial::BSPMaterial 0 2 14 15 0
137
inline explicit BSPMaterial::BSPMaterial(std::string const &name = "material");
inline BSPMaterial::BSPMaterial(BSPMaterial const &copy);

359 10 operator = 0 4 714 23 BSPMaterial::operator = 0 1 16 0
61
inline void BSPMaterial::operator =(BSPMaterial const &copy);

360 12 set_keyvalue 0 4 714 25 BSPMaterial::set_keyvalue 0 1 17 0
88
inline void BSPMaterial::set_keyvalue(std::string const &key, std::string const &value);

361 12 get_keyvalue 0 4 714 25 BSPMaterial::get_keyvalue 0 1 18 0
75
inline std::string BSPMaterial::get_keyvalue(std::string const &key) const;

362 17 get_num_keyvalues 0 4 714 30 BSPMaterial::get_num_keyvalues 0 1 19 0
62
inline std::size_t BSPMaterial::get_num_keyvalues(void) const;

363 7 get_key 0 4 714 20 BSPMaterial::get_key 0 1 20 0
68
inline std::string const &BSPMaterial::get_key(std::size_t i) const;

364 9 get_value 0 4 714 22 BSPMaterial::get_value 0 1 21 0
70
inline std::string const &BSPMaterial::get_value(std::size_t i) const;

365 16 get_keyvalue_int 0 4 714 29 BSPMaterial::get_keyvalue_int 0 1 22 0
71
inline int BSPMaterial::get_keyvalue_int(std::string const &key) const;

366 18 get_keyvalue_float 0 4 714 31 BSPMaterial::get_keyvalue_float 0 1 23 0
75
inline float BSPMaterial::get_keyvalue_float(std::string const &key) const;

367 10 set_shader 0 4 714 23 BSPMaterial::set_shader 0 1 24 0
68
inline void BSPMaterial::set_shader(std::string const &shader_name);

368 10 get_shader 0 4 714 23 BSPMaterial::get_shader 0 1 25 0
55
inline std::string BSPMaterial::get_shader(void) const;

369 8 get_file 0 4 714 21 BSPMaterial::get_file 0 1 26 0
50
inline Filename BSPMaterial::get_file(void) const;

370 12 has_keyvalue 0 4 714 25 BSPMaterial::has_keyvalue 0 1 27 0
68
inline bool BSPMaterial::has_keyvalue(std::string const &key) const;

371 15 has_env_cubemap 0 4 714 28 BSPMaterial::has_env_cubemap 0 1 28 0
53
inline bool BSPMaterial::has_env_cubemap(void) const;

372 16 has_transparency 0 4 714 29 BSPMaterial::has_transparency 0 1 29 0
54
inline bool BSPMaterial::has_transparency(void) const;

373 16 get_surface_prop 0 4 714 29 BSPMaterial::get_surface_prop 0 1 30 0
61
inline std::string BSPMaterial::get_surface_prop(void) const;

374 12 get_contents 0 4 714 25 BSPMaterial::get_contents 0 1 31 0
57
inline std::string BSPMaterial::get_contents(void) const;

375 14 is_lightmapped 0 4 714 27 BSPMaterial::is_lightmapped 0 1 32 0
52
inline bool BSPMaterial::is_lightmapped(void) const;

376 11 has_bumpmap 0 4 714 24 BSPMaterial::has_bumpmap 0 1 33 0
49
inline bool BSPMaterial::has_bumpmap(void) const;

377 13 get_from_file 0 4 714 26 BSPMaterial::get_from_file 0 1 34 0
75
static BSPMaterial const *BSPMaterial::get_from_file(Filename const &file);

378 14 get_class_type 0 4 714 27 BSPMaterial::get_class_type 0 1 35 0
52
static TypeHandle BSPMaterial::get_class_type(void);

379 12 ~BSPMaterial 0 4 714 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

380 4 make 0 4 716 23 BSPMaterialAttrib::make 0 1 36 0
86
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make(BSPMaterial const *mat);

381 20 make_override_shader 0 4 716 39 BSPMaterialAttrib::make_override_shader 0 1 37 0
102
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_override_shader(BSPMaterial const *mat);

382 12 make_default 0 4 716 31 BSPMaterialAttrib::make_default 0 1 38 0
76
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_default(void);

383 19 get_override_shader 0 4 716 38 BSPMaterialAttrib::get_override_shader 0 1 39 0
70
inline std::string BSPMaterialAttrib::get_override_shader(void) const;

384 19 has_override_shader 0 4 716 38 BSPMaterialAttrib::has_override_shader 0 1 40 0
63
inline bool BSPMaterialAttrib::has_override_shader(void) const;

385 12 get_material 0 4 716 31 BSPMaterialAttrib::get_material 0 1 41 0
70
inline BSPMaterial const *BSPMaterialAttrib::get_material(void) const;

386 14 get_class_slot 0 4 716 33 BSPMaterialAttrib::get_class_slot 0 1 42 0
51
static int BSPMaterialAttrib::get_class_slot(void);

387 14 get_class_type 0 4 716 33 BSPMaterialAttrib::get_class_type 0 1 43 0
58
static TypeHandle BSPMaterialAttrib::get_class_type(void);

388 18 ~BSPMaterialAttrib 0 4 716 37 BSPMaterialAttrib::~BSPMaterialAttrib 0 0 0
44
BSPMaterialAttrib::~BSPMaterialAttrib(void);

389 14 get_num_points 0 4 719 28 BoundingKDOP::get_num_points 0 1 44 0
60
inline std::size_t BoundingKDOP::get_num_points(void) const;

390 9 get_point 0 4 719 23 BoundingKDOP::get_point 0 1 45 0
52
inline LPoint3 BoundingKDOP::get_point(int n) const;

391 14 get_num_planes 0 4 719 28 BoundingKDOP::get_num_planes 0 1 46 0
60
inline std::size_t BoundingKDOP::get_num_planes(void) const;

392 9 get_plane 0 4 719 23 BoundingKDOP::get_plane 0 1 47 0
51
inline LPlane BoundingKDOP::get_plane(int n) const;

393 14 get_class_type 0 4 719 28 BoundingKDOP::get_class_type 0 1 48 0
53
static TypeHandle BoundingKDOP::get_class_type(void);

394 13 ~BoundingKDOP 0 4 719 27 BoundingKDOP::~BoundingKDOP 0 0 0
34
BoundingKDOP::~BoundingKDOP(void);

395 14 get_class_type 0 4 721 27 CBaseEntity::get_class_type 0 1 51 0
52
static TypeHandle CBaseEntity::get_class_type(void);

396 11 CBaseEntity 0 4 721 24 CBaseEntity::CBaseEntity 0 2 49 50 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

397 10 get_entnum 0 4 721 23 CBaseEntity::get_entnum 0 1 52 0
40
int CBaseEntity::get_entnum(void) const;

398 10 get_loader 0 4 721 23 CBaseEntity::get_loader 0 1 53 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

399 12 ~CBaseEntity 0 4 721 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

400 14 get_class_type 0 4 722 28 CPointEntity::get_class_type 0 1 56 0
53
static TypeHandle CPointEntity::get_class_type(void);

401 12 CPointEntity 0 4 722 26 CPointEntity::CPointEntity 0 2 54 55 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

402 10 get_origin 0 4 722 24 CPointEntity::get_origin 0 1 57 0
45
LPoint3 CPointEntity::get_origin(void) const;

403 10 get_angles 0 4 722 24 CPointEntity::get_angles 0 1 58 0
46
LVector3 CPointEntity::get_angles(void) const;

404 13 ~CPointEntity 0 4 722 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

405 14 get_class_type 0 4 723 29 CBoundsEntity::get_class_type 0 1 61 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

406 13 CBoundsEntity 0 4 723 28 CBoundsEntity::CBoundsEntity 0 2 59 60 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

407 10 get_bounds 0 4 723 25 CBoundsEntity::get_bounds 0 1 62 0
52
BoundingKDOP *CBoundsEntity::get_bounds(void) const;

408 9 is_inside 0 4 723 24 CBoundsEntity::is_inside 0 1 63 0
56
bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

409 13 fillin_bounds 0 4 723 28 CBoundsEntity::fillin_bounds 0 1 64 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

410 14 ~CBoundsEntity 0 4 723 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

411 14 get_class_type 0 4 724 28 CBrushEntity::get_class_type 0 1 67 0
53
static TypeHandle CBrushEntity::get_class_type(void);

412 12 CBrushEntity 0 4 724 26 CBrushEntity::CBrushEntity 0 2 65 66 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

413 12 get_modelnum 0 4 724 26 CBrushEntity::get_modelnum 0 1 68 0
43
int CBrushEntity::get_modelnum(void) const;

414 12 get_model_np 0 4 724 26 CBrushEntity::get_model_np 0 1 69 0
48
NodePath CBrushEntity::get_model_np(void) const;

415 16 get_model_bounds 0 4 724 30 CBrushEntity::get_model_bounds 0 1 70 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

416 13 ~CBrushEntity 0 4 724 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

417 9 get_width 0 4 725 21 PackResult::get_width 0 1 72 0
45
inline int PackResult::get_width(void) const;

418 10 get_height 0 4 725 22 PackResult::get_height 0 1 73 0
46
inline int PackResult::get_height(void) const;

419 15 get_unused_area 0 4 725 27 PackResult::get_unused_area 0 1 74 0
51
inline int PackResult::get_unused_area(void) const;

420 10 PackResult 0 4 725 22 PackResult::PackResult 0 1 71 0
60
inline PackResult::PackResult(PackResult const &) = default;

421 11 ~PackResult 0 4 725 23 PackResult::~PackResult 0 0 0
30
PackResult::~PackResult(void);

422 5 get_x 0 4 726 22 TextureLocation::get_x 0 1 76 0
46
inline int TextureLocation::get_x(void) const;

423 5 get_y 0 4 726 22 TextureLocation::get_y 0 1 77 0
46
inline int TextureLocation::get_y(void) const;

424 9 get_width 0 4 726 26 TextureLocation::get_width 0 1 78 0
50
inline int TextureLocation::get_width(void) const;

425 10 get_height 0 4 726 27 TextureLocation::get_height 0 1 79 0
51
inline int TextureLocation::get_height(void) const;

426 11 get_rotated 0 4 726 28 TextureLocation::get_rotated 0 1 80 0
53
inline bool TextureLocation::get_rotated(void) const;

427 15 TextureLocation 0 4 726 32 TextureLocation::TextureLocation 0 1 75 0
75
inline TextureLocation::TextureLocation(TextureLocation const &) = default;

428 16 ~TextureLocation 0 4 726 33 TextureLocation::~TextureLocation 0 0 0
40
TextureLocation::~TextureLocation(void);

429 15 getTextureCount 0 6 727 30 TexturePacker::getTextureCount 0 1 81 0
53
virtual int TexturePacker::getTextureCount(void) = 0;

430 15 setTextureCount 0 6 727 30 TexturePacker::setTextureCount 0 1 82 35
// number of textures to consider..
60
virtual void TexturePacker::setTextureCount(int tcount) = 0;

431 10 addTexture 0 6 727 25 TexturePacker::addTexture 0 1 83 21
// add textures 0 - n
61
virtual void TexturePacker::addTexture(int wid, int hit) = 0;

432 15 wouldTextureFit 0 6 727 30 TexturePacker::wouldTextureFit 0 1 84 0
135
virtual bool TexturePacker::wouldTextureFit(int wid, int hit, bool forcePowerOfTwo, bool onePixelBorder, int max_wid, int max_hit) = 0;

433 13 addNewTexture 0 6 727 28 TexturePacker::addNewTexture 0 1 85 0
64
virtual void TexturePacker::addNewTexture(int wid, int hit) = 0;

434 12 packTextures 0 6 727 27 TexturePacker::packTextures 0 1 86 74
// pack the textures, the return code is the amount of wasted/unused area.
94
virtual PackResult TexturePacker::packTextures(bool forcePowerOfTwo, bool onePixelBorder) = 0;

435 18 getTextureLocation 0 6 727 33 TexturePacker::getTextureLocation 0 1 87 58
// returns true if the texture has been rotated 90 degrees
73
virtual TextureLocation TexturePacker::getTextureLocation(int index) = 0;

436 19 createTexturePacker 0 4 727 34 TexturePacker::createTexturePacker 0 1 88 0
63
static TexturePacker *TexturePacker::createTexturePacker(void);

437 20 releaseTexturePacker 0 4 727 35 TexturePacker::releaseTexturePacker 0 1 89 0
67
static void TexturePacker::releaseTexturePacker(TexturePacker *tp);

438 14 ~TexturePacker 0 4 727 29 TexturePacker::~TexturePacker 0 0 0
36
TexturePacker::~TexturePacker(void);

439 10 initialize 0 4 728 20 RayTrace::initialize 0 1 92 0
39
static void RayTrace::initialize(void);

440 8 destruct 0 4 728 18 RayTrace::destruct 0 1 93 0
37
static void RayTrace::destruct(void);

441 8 RayTrace 0 4 728 18 RayTrace::RayTrace 0 2 90 91 0
97
inline RayTrace::RayTrace(void) = default;
inline RayTrace::RayTrace(RayTrace const &) = default;

442 9 ~RayTrace 0 4 728 19 RayTrace::~RayTrace 0 0 0
26
RayTrace::~RayTrace(void);

443 17 RayTraceHitResult 0 4 729 36 RayTraceHitResult::RayTraceHitResult 0 2 94 95 0
132
inline RayTraceHitResult::RayTraceHitResult(void);
inline RayTraceHitResult::RayTraceHitResult(RayTraceHitResult const &) = default;

444 7 has_hit 0 4 729 26 RayTraceHitResult::has_hit 0 1 96 0
51
inline bool RayTraceHitResult::has_hit(void) const;

445 14 get_hit_normal 0 4 729 33 RayTraceHitResult::get_hit_normal 0 1 97 0
62
inline LVector3 RayTraceHitResult::get_hit_normal(void) const;

446 6 get_uv 0 4 729 25 RayTraceHitResult::get_uv 0 1 98 0
54
inline LVector2 RayTraceHitResult::get_uv(void) const;

447 11 get_prim_id 0 4 729 30 RayTraceHitResult::get_prim_id 0 1 99 0
63
inline unsigned int RayTraceHitResult::get_prim_id(void) const;

448 11 get_geom_id 0 4 729 30 RayTraceHitResult::get_geom_id 0 1 100 0
63
inline unsigned int RayTraceHitResult::get_geom_id(void) const;

449 16 get_hit_fraction 0 4 729 35 RayTraceHitResult::get_hit_fraction 0 1 101 0
61
inline float RayTraceHitResult::get_hit_fraction(void) const;

450 18 ~RayTraceHitResult 0 4 729 37 RayTraceHitResult::~RayTraceHitResult 0 0 0
44
RayTraceHitResult::~RayTraceHitResult(void);

451 13 RayTraceScene 0 4 730 28 RayTraceScene::RayTraceScene 0 2 102 103 0
105
RayTraceScene::RayTraceScene(void);
inline RayTraceScene::RayTraceScene(RayTraceScene const &) = default;

452 12 add_geometry 0 4 730 27 RayTraceScene::add_geometry 0 1 104 0
57
void RayTraceScene::add_geometry(RayTraceGeometry *geom);

453 15 remove_geometry 0 4 730 30 RayTraceScene::remove_geometry 0 1 105 0
60
void RayTraceScene::remove_geometry(RayTraceGeometry *geom);

454 10 remove_all 0 4 730 25 RayTraceScene::remove_all 0 1 106 0
37
void RayTraceScene::remove_all(void);

455 10 trace_line 0 4 730 25 RayTraceScene::trace_line 0 1 107 0
116
inline RayTraceHitResult RayTraceScene::trace_line(LPoint3 const &start, LPoint3 const &end, BitMask32 const &mask);

456 9 trace_ray 0 4 730 24 RayTraceScene::trace_ray 0 1 108 0
132
RayTraceHitResult RayTraceScene::trace_ray(LPoint3 const &origin, LVector3 const &direction, float distance, BitMask32 const &mask);

457 17 set_build_quality 0 4 730 32 RayTraceScene::set_build_quality 0 1 109 0
51
void RayTraceScene::set_build_quality(int quality);

458 6 update 0 4 730 21 RayTraceScene::update 0 1 110 0
33
void RayTraceScene::update(void);

459 12 get_geometry 0 4 730 27 RayTraceScene::get_geometry 0 1 111 0
75
inline RayTraceGeometry *RayTraceScene::get_geometry(unsigned int geom_id);

460 14 get_class_type 0 4 733 32 RayTraceGeometry::get_class_type 0 1 112 0
57
static TypeHandle RayTraceGeometry::get_class_type(void);

461 8 set_mask 0 4 733 26 RayTraceGeometry::set_mask 0 2 113 114 0
114
inline void RayTraceGeometry::set_mask(BitMask32 const &mask);
void RayTraceGeometry::set_mask(unsigned int mask);

462 8 get_mask 0 4 733 26 RayTraceGeometry::get_mask 0 1 115 0
56
inline BitMask32 RayTraceGeometry::get_mask(void) const;

463 11 get_geom_id 0 4 733 29 RayTraceGeometry::get_geom_id 0 1 116 0
62
inline unsigned int RayTraceGeometry::get_geom_id(void) const;

464 17 set_build_quality 0 4 733 35 RayTraceGeometry::set_build_quality 0 1 117 0
54
void RayTraceGeometry::set_build_quality(int quality);

465 5 build 0 6 733 23 RayTraceGeometry::build 0 1 118 0
47
virtual void RayTraceGeometry::build(void) = 0;

466 14 get_class_type 0 4 735 36 RayTraceTriangleMesh::get_class_type 0 1 120 0
61
static TypeHandle RayTraceTriangleMesh::get_class_type(void);

467 20 RayTraceTriangleMesh 0 4 735 42 RayTraceTriangleMesh::RayTraceTriangleMesh 0 1 119 0
73
RayTraceTriangleMesh::RayTraceTriangleMesh(std::string const &name = "");

468 12 add_triangle 0 4 735 34 RayTraceTriangleMesh::add_triangle 0 1 121 0
97
void RayTraceTriangleMesh::add_triangle(LPoint3 const &p1, LPoint3 const &p2, LPoint3 const &p3);

469 23 add_triangles_from_geom 0 4 735 45 RayTraceTriangleMesh::add_triangles_from_geom 0 1 122 0
105
void RayTraceTriangleMesh::add_triangles_from_geom(Geom const *geom, TransformState const *ts = nullptr);

470 21 ~RayTraceTriangleMesh 0 4 735 43 RayTraceTriangleMesh::~RayTraceTriangleMesh 0 0 0
50
RayTraceTriangleMesh::~RayTraceTriangleMesh(void);

471 4 make 0 4 736 19 BSPFaceAttrib::make 0 1 123 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

472 12 make_default 0 4 736 27 BSPFaceAttrib::make_default 0 1 124 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

473 15 make_ignore_pvs 0 4 736 30 BSPFaceAttrib::make_ignore_pvs 0 1 125 0
75
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_ignore_pvs(void);

474 12 get_material 0 4 736 27 BSPFaceAttrib::get_material 0 1 126 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

475 13 get_face_type 0 4 736 28 BSPFaceAttrib::get_face_type 0 1 127 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

476 14 get_ignore_pvs 0 4 736 29 BSPFaceAttrib::get_ignore_pvs 0 1 128 0
54
inline bool BSPFaceAttrib::get_ignore_pvs(void) const;

477 14 get_class_slot 0 4 736 29 BSPFaceAttrib::get_class_slot 0 1 129 0
47
static int BSPFaceAttrib::get_class_slot(void);

478 14 get_class_type 0 4 736 29 BSPFaceAttrib::get_class_type 0 1 130 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

479 14 ~BSPFaceAttrib 0 4 736 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

480 9 BSPLoader 0 4 738 20 BSPLoader::BSPLoader 0 1 131 0
27
BSPLoader::BSPLoader(void);

481 4 read 0 4 738 15 BSPLoader::read 0 1 132 0
43
bool BSPLoader::read(Filename const &file);

482 16 do_optimizations 0 4 738 27 BSPLoader::do_optimizations 0 1 133 0
39
void BSPLoader::do_optimizations(void);

483 9 set_gamma 0 4 738 20 BSPLoader::set_gamma 0 1 134 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

484 9 get_gamma 0 4 738 20 BSPLoader::get_gamma 0 1 135 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

485 7 set_win 0 4 738 18 BSPLoader::set_win 0 1 136 0
45
void BSPLoader::set_win(GraphicsWindow *win);

486 10 set_camera 0 4 738 21 BSPLoader::set_camera 0 1 137 0
51
void BSPLoader::set_camera(NodePath const &camera);

487 10 set_render 0 4 738 21 BSPLoader::set_render 0 1 138 0
51
void BSPLoader::set_render(NodePath const &render);

488 20 set_shader_generator 0 4 738 31 BSPLoader::set_shader_generator 0 1 139 0
64
void BSPLoader::set_shader_generator(BSPShaderGenerator *shgen);

489 19 set_want_visibility 0 4 738 30 BSPLoader::set_want_visibility 0 1 140 0
47
void BSPLoader::set_want_visibility(bool flag);

490 18 set_want_lightmaps 0 4 738 29 BSPLoader::set_want_lightmaps 0 1 141 0
46
void BSPLoader::set_want_lightmaps(bool flag);

491 16 set_physics_type 0 4 738 27 BSPLoader::set_physics_type 0 1 142 0
43
void BSPLoader::set_physics_type(int type);

492 19 set_visualize_leafs 0 4 738 30 BSPLoader::set_visualize_leafs 0 1 143 0
47
void BSPLoader::set_visualize_leafs(bool flag);

493 18 set_materials_file 0 4 738 29 BSPLoader::set_materials_file 0 1 144 0
57
void BSPLoader::set_materials_file(Filename const &file);

494 13 set_wireframe 0 4 738 24 BSPLoader::set_wireframe 0 1 145 0
41
void BSPLoader::set_wireframe(bool flag);

495 13 get_wireframe 0 4 738 24 BSPLoader::get_wireframe 0 1 146 0
49
inline bool BSPLoader::get_wireframe(void) const;

496 10 get_camera 0 4 738 21 BSPLoader::get_camera 0 1 147 0
50
inline NodePath BSPLoader::get_camera(void) const;

497 11 trace_decal 0 4 738 22 BSPLoader::trace_decal 0 1 148 0
195
inline void BSPLoader::trace_decal(std::string const &decal_material, LPoint2 const &decal_scale, float rotate, LPoint3 const &start, LPoint3 const &end, LColorf const &decal_color = LColorf(1));

498 27 get_closest_cubemap_texture 0 4 738 38 BSPLoader::get_closest_cubemap_texture 0 1 149 0
68
Texture *BSPLoader::get_closest_cubemap_texture(LPoint3 const &pos);

499 14 build_cubemaps 0 4 738 25 BSPLoader::build_cubemaps 0 1 150 0
37
void BSPLoader::build_cubemaps(void);

500 16 set_want_shadows 0 4 738 27 BSPLoader::set_want_shadows 0 1 151 0
44
void BSPLoader::set_want_shadows(bool flag);

501 14 set_shadow_dir 0 4 738 25 BSPLoader::set_shadow_dir 0 1 152 0
52
void BSPLoader::set_shadow_dir(LVector3 const &dir);

502 16 extract_modelnum 0 4 738 27 BSPLoader::extract_modelnum 0 1 153 0
44
int BSPLoader::extract_modelnum(int entnum);

503 16 get_model_bounds 0 4 738 27 BSPLoader::get_model_bounds 0 1 154 0
77
void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

504 28 set_server_entity_dispatcher 0 4 738 39 BSPLoader::set_server_entity_dispatcher 0 1 155 0
67
void BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

505 27 link_server_entity_to_class 0 4 738 38 BSPLoader::link_server_entity_to_class 0 1 156 0
89
void BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

506 6 set_ai 0 4 738 17 BSPLoader::set_ai 0 1 157 0
32
void BSPLoader::set_ai(bool ai);

507 5 is_ai 0 4 738 16 BSPLoader::is_ai 0 1 158 0
41
inline bool BSPLoader::is_ai(void) const;

508 10 trace_line 0 4 738 21 BSPLoader::trace_line 0 1 159 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

509 9 clip_line 0 4 738 20 BSPLoader::clip_line 0 1 160 0
71
LPoint3 BSPLoader::clip_line(LPoint3 const &start, LPoint3 const &end);

510 20 link_entity_to_class 0 4 738 31 BSPLoader::link_entity_to_class 0 1 161 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

511 28 get_py_entity_by_target_name 0 4 738 39 BSPLoader::get_py_entity_by_target_name 0 1 162 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

512 17 find_all_entities 0 4 738 28 BSPLoader::find_all_entities 0 1 163 0
69
PyObject *BSPLoader::find_all_entities(std::string const &classname);

513 20 get_entity_keyvalues 0 4 738 31 BSPLoader::get_entity_keyvalues 0 1 164 0
71
void BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

514 18 link_cent_to_pyent 0 4 738 29 BSPLoader::link_cent_to_pyent 0 1 165 0
63
void BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

515 16 remove_py_entity 0 4 738 27 BSPLoader::remove_py_entity 0 1 166 0
48
void BSPLoader::remove_py_entity(PyObject *ent);

516 16 get_num_entities 0 4 738 27 BSPLoader::get_num_entities 0 1 167 0
51
inline int BSPLoader::get_num_entities(void) const;

517 16 get_entity_value 0 4 738 27 BSPLoader::get_entity_value 0 1 168 0
75
std::string BSPLoader::get_entity_value(int entnum, char const *key) const;

518 22 get_entity_value_float 0 4 738 33 BSPLoader::get_entity_value_float 0 1 169 0
75
float BSPLoader::get_entity_value_float(int entnum, char const *key) const;

519 20 get_entity_value_int 0 4 738 31 BSPLoader::get_entity_value_int 0 1 170 0
71
int BSPLoader::get_entity_value_int(int entnum, char const *key) const;

520 23 get_entity_value_vector 0 4 738 34 BSPLoader::get_entity_value_vector 0 1 171 0
79
LVector3 BSPLoader::get_entity_value_vector(int entnum, char const *key) const;

521 22 get_entity_value_color 0 4 738 33 BSPLoader::get_entity_value_color 0 1 172 0
95
LColor BSPLoader::get_entity_value_color(int entnum, char const *key, bool scale = true) const;

522 10 get_entity 0 4 738 21 BSPLoader::get_entity 0 1 173 0
49
NodePath BSPLoader::get_entity(int entnum) const;

523 9 get_model 0 4 738 20 BSPLoader::get_model 0 1 174 0
50
NodePath BSPLoader::get_model(int modelnum) const;

524 12 get_c_entity 0 4 738 23 BSPLoader::get_c_entity 0 1 175 0
61
CBaseEntity *BSPLoader::get_c_entity(int const entnum) const;

525 9 find_leaf 0 4 738 20 BSPLoader::find_leaf 0 2 176 177 0
116
inline int BSPLoader::find_leaf(NodePath const &np);
int BSPLoader::find_leaf(LPoint3 const &pos, int headnode = 0);

526 9 find_node 0 4 738 20 BSPLoader::find_node 0 1 178 0
45
int BSPLoader::find_node(LPoint3 const &pos);

527 18 is_cluster_visible 0 4 738 29 BSPLoader::is_cluster_visible 0 1 179 0
72
bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

528 15 pvs_bounds_test 0 4 738 26 BSPLoader::pvs_bounds_test 0 1 180 0
109
bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds, unsigned int required_leaf_flags = 0);

529 15 make_net_bounds 0 4 738 26 BSPLoader::make_net_bounds 0 1 181 0
147
ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

530 16 has_active_level 0 4 738 27 BSPLoader::has_active_level 0 1 182 0
52
inline bool BSPLoader::has_active_level(void) const;

531 14 has_visibility 0 4 738 25 BSPLoader::has_visibility 0 1 183 0
50
inline bool BSPLoader::has_visibility(void) const;

532 7 cleanup 0 4 738 18 BSPLoader::cleanup 0 1 184 0
30
void BSPLoader::cleanup(void);

533 10 get_result 0 4 738 21 BSPLoader::get_result 0 1 185 0
50
inline NodePath BSPLoader::get_result(void) const;

534 16 set_current_leaf 0 4 738 27 BSPLoader::set_current_leaf 0 1 186 0
50
inline void BSPLoader::set_current_leaf(int leaf);

535 16 get_current_leaf 0 4 738 27 BSPLoader::get_current_leaf 0 1 187 0
51
inline int BSPLoader::get_current_leaf(void) const;

536 16 get_num_visleafs 0 4 738 27 BSPLoader::get_num_visleafs 0 1 188 0
51
inline int BSPLoader::get_num_visleafs(void) const;

537 15 get_leaf_center 0 4 738 26 BSPLoader::get_leaf_center 0 1 189 0
58
inline LPoint3 BSPLoader::get_leaf_center(int leaf) const;

538 15 get_lightcoords 0 4 738 26 BSPLoader::get_lightcoords 0 1 190 0
73
LTexCoord BSPLoader::get_lightcoords(int facenum, LVector3 const &point);

539 6 update 0 4 738 17 BSPLoader::update 0 1 191 0
29
void BSPLoader::update(void);

540 14 get_global_ptr 0 4 738 25 BSPLoader::get_global_ptr 0 1 192 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

541 10 ~BSPLoader 0 4 738 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

542 18 ShaderPermutations 0 4 740 38 ShaderPermutations::ShaderPermutations 0 1 193 0
52
inline ShaderPermutations::ShaderPermutations(void);

543 15 add_permutation 0 4 740 35 ShaderPermutations::add_permutation 0 1 194 0
104
inline void ShaderPermutations::add_permutation(std::string const &key, std::string const &value = "1");

544 8 complete 0 4 740 28 ShaderPermutations::complete 0 1 195 0
47
inline void ShaderPermutations::complete(void);

545 9 add_input 0 4 740 29 ShaderPermutations::add_input 0 1 196 0
66
inline void ShaderPermutations::add_input(ShaderInput const &inp);

546 8 add_flag 0 4 740 28 ShaderPermutations::add_flag 0 1 197 0
51
inline void ShaderPermutations::add_flag(int flag);

547 8 get_hash 0 4 740 28 ShaderPermutations::get_hash 0 1 198 0
60
inline std::size_t ShaderPermutations::get_hash(void) const;

548 19 ~ShaderPermutations 0 4 740 39 ShaderPermutations::~ShaderPermutations 0 0 0
46
ShaderPermutations::~ShaderPermutations(void);

549 24 upcast_to_ReferenceCount 0 12 741 36 ShaderSpec::upcast_to_ReferenceCount 0 1 201 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

550 22 downcast_to_ShaderSpec 0 12 731 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

551 17 upcast_to_Namable 0 12 741 29 ShaderSpec::upcast_to_Namable 0 1 202 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

552 22 downcast_to_ShaderSpec 0 12 742 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

553 17 read_shader_files 0 4 741 29 ShaderSpec::read_shader_files 0 1 199 0
117
void ShaderSpec::read_shader_files(Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file);

554 14 get_class_type 0 4 741 26 ShaderSpec::get_class_type 0 1 200 0
51
static TypeHandle ShaderSpec::get_class_type(void);

555 11 ~ShaderSpec 0 4 741 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

556 18 BSPShaderGenerator 0 4 746 38 BSPShaderGenerator::BSPShaderGenerator 0 2 203 204 0
200
BSPShaderGenerator::BSPShaderGenerator(GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline BSPShaderGenerator::BSPShaderGenerator(BSPShaderGenerator const &) = default;

557 13 set_sun_light 0 4 746 33 BSPShaderGenerator::set_sun_light 0 1 205 0
59
void BSPShaderGenerator::set_sun_light(NodePath const &np);

558 12 start_update 0 4 746 32 BSPShaderGenerator::start_update 0 1 206 0
44
void BSPShaderGenerator::start_update(void);

559 10 add_shader 0 4 746 30 BSPShaderGenerator::add_shader 0 1 207 0
66
void BSPShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

560 14 get_sun_vector 0 4 746 34 BSPShaderGenerator::get_sun_vector 0 1 208 0
63
inline LVector3 BSPShaderGenerator::get_sun_vector(void) const;

561 19 has_shadow_sunlight 0 4 746 39 BSPShaderGenerator::has_shadow_sunlight 0 1 209 0
64
inline bool BSPShaderGenerator::has_shadow_sunlight(void) const;

562 22 get_pssm_array_texture 0 4 746 42 BSPShaderGenerator::get_pssm_array_texture 0 1 210 0
71
inline Texture *BSPShaderGenerator::get_pssm_array_texture(void) const;

563 12 get_pssm_rig 0 4 746 32 BSPShaderGenerator::get_pssm_rig 0 1 211 0
67
inline PSSMCameraRig *BSPShaderGenerator::get_pssm_rig(void) const;

564 18 set_shader_quality 0 4 746 38 BSPShaderGenerator::set_shader_quality 0 1 212 0
57
void BSPShaderGenerator::set_shader_quality(int quality);

565 18 get_shader_quality 0 4 746 38 BSPShaderGenerator::get_shader_quality 0 1 213 0
62
inline int BSPShaderGenerator::get_shader_quality(void) const;

566 7 set_fog 0 4 746 27 BSPShaderGenerator::set_fog 0 1 214 0
50
inline void BSPShaderGenerator::set_fog(Fog *fog);

567 9 clear_fog 0 4 746 29 BSPShaderGenerator::clear_fog 0 1 215 0
48
inline void BSPShaderGenerator::clear_fog(void);

568 7 get_fog 0 4 746 27 BSPShaderGenerator::get_fog 0 1 216 0
52
inline Fog *BSPShaderGenerator::get_fog(void) const;

569 12 get_fog_data 0 4 746 32 BSPShaderGenerator::get_fog_data 0 1 217 0
67
inline PTA_LVecBase4f BSPShaderGenerator::get_fog_data(void) const;

570 22 set_exposure_adustment 0 4 746 42 BSPShaderGenerator::set_exposure_adustment 0 1 218 0
71
inline void BSPShaderGenerator::set_exposure_adustment(float exposure);

571 23 get_exposure_adjustment 0 4 746 43 BSPShaderGenerator::get_exposure_adjustment 0 1 219 0
73
inline PTA_float BSPShaderGenerator::get_exposure_adjustment(void) const;

572 20 set_identity_cubemap 0 4 746 40 BSPShaderGenerator::set_identity_cubemap 0 1 220 0
67
static void BSPShaderGenerator::set_identity_cubemap(Texture *tex);

573 20 get_identity_cubemap 0 4 746 40 BSPShaderGenerator::get_identity_cubemap 0 1 221 0
63
static Texture *BSPShaderGenerator::get_identity_cubemap(void);

574 11 make_shader 0 4 746 31 BSPShaderGenerator::make_shader 0 1 222 0
121
static ConstPointerTo< Shader > BSPShaderGenerator::make_shader(ShaderSpec const *spec, ShaderPermutations const *perms);

575 14 get_class_type 0 4 746 34 BSPShaderGenerator::get_class_type 0 1 223 0
59
static TypeHandle BSPShaderGenerator::get_class_type(void);

576 19 ~BSPShaderGenerator 0 4 746 39 BSPShaderGenerator::~BSPShaderGenerator 0 0 0
46
BSPShaderGenerator::~BSPShaderGenerator(void);

577 14 get_class_type 0 4 748 32 BSPCullTraverser::get_class_type 0 1 226 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

578 16 BSPCullTraverser 0 4 748 34 BSPCullTraverser::BSPCullTraverser 0 2 224 225 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

579 17 ~BSPCullTraverser 0 4 748 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

580 14 get_class_type 0 4 750 25 BSPRender::get_class_type 0 1 229 0
50
static TypeHandle BSPRender::get_class_type(void);

581 9 BSPRender 0 4 750 20 BSPRender::BSPRender 0 2 227 228 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

582 10 ~BSPRender 0 4 750 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

583 14 get_class_type 0 4 751 23 BSPRoot::get_class_type 0 1 232 0
48
static TypeHandle BSPRoot::get_class_type(void);

584 7 BSPRoot 0 4 751 16 BSPRoot::BSPRoot 0 2 230 231 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

585 8 ~BSPRoot 0 4 751 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

586 14 get_class_type 0 4 752 23 BSPProp::get_class_type 0 1 235 0
48
static TypeHandle BSPProp::get_class_type(void);

587 7 BSPProp 0 4 752 16 BSPProp::BSPProp 0 2 233 234 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

588 8 ~BSPProp 0 4 752 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

589 14 get_class_type 0 4 754 24 BSPModel::get_class_type 0 1 238 0
49
static TypeHandle BSPModel::get_class_type(void);

590 8 BSPModel 0 4 754 18 BSPModel::BSPModel 0 2 236 237 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

591 9 ~BSPModel 0 4 754 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

592 20 VertexLitGenericSpec 0 4 756 42 VertexLitGenericSpec::VertexLitGenericSpec 0 1 239 0
49
VertexLitGenericSpec::VertexLitGenericSpec(void);

593 21 ~VertexLitGenericSpec 0 4 756 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

594 22 LightmappedGenericSpec 0 4 757 46 LightmappedGenericSpec::LightmappedGenericSpec 0 1 240 0
53
LightmappedGenericSpec::LightmappedGenericSpec(void);

595 23 ~LightmappedGenericSpec 0 4 757 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

596 16 UnlitGenericSpec 0 4 758 34 UnlitGenericSpec::UnlitGenericSpec 0 1 241 0
41
UnlitGenericSpec::UnlitGenericSpec(void);

597 17 ~UnlitGenericSpec 0 4 758 35 UnlitGenericSpec::~UnlitGenericSpec 0 0 0
42
UnlitGenericSpec::~UnlitGenericSpec(void);

598 14 UnlitNoMatSpec 0 4 759 30 UnlitNoMatSpec::UnlitNoMatSpec 0 1 242 0
37
UnlitNoMatSpec::UnlitNoMatSpec(void);

599 15 ~UnlitNoMatSpec 0 4 759 31 UnlitNoMatSpec::~UnlitNoMatSpec 0 0 0
38
UnlitNoMatSpec::~UnlitNoMatSpec(void);

600 13 CSMRenderSpec 0 4 760 28 CSMRenderSpec::CSMRenderSpec 0 1 243 0
35
CSMRenderSpec::CSMRenderSpec(void);

601 14 ~CSMRenderSpec 0 4 760 29 CSMRenderSpec::~CSMRenderSpec 0 0 0
36
CSMRenderSpec::~CSMRenderSpec(void);

602 10 SkyBoxSpec 0 4 761 22 SkyBoxSpec::SkyBoxSpec 0 1 244 0
29
SkyBoxSpec::SkyBoxSpec(void);

603 11 ~SkyBoxSpec 0 4 761 23 SkyBoxSpec::~SkyBoxSpec 0 0 0
30
SkyBoxSpec::~SkyBoxSpec(void);

604 4 make 0 4 762 24 AmbientBoostEffect::make 0 1 245 0
69
static ConstPointerTo< RenderEffect > AmbientBoostEffect::make(void);

605 14 get_class_type 0 4 762 34 AmbientBoostEffect::get_class_type 0 1 246 0
59
static TypeHandle AmbientBoostEffect::get_class_type(void);

606 19 ~AmbientBoostEffect 0 4 762 39 AmbientBoostEffect::~AmbientBoostEffect 0 0 0
46
AmbientBoostEffect::~AmbientBoostEffect(void);

607 14 Audio3DManager 0 4 764 30 Audio3DManager::Audio3DManager 0 2 247 248 0
228
Audio3DManager::Audio3DManager(AudioManager *mgr, NodePath const &listener_target = NodePath(), NodePath const &root = NodePath(), int task_priority = 51);
inline Audio3DManager::Audio3DManager(Audio3DManager const &) = default;

608 19 set_distance_factor 0 4 764 35 Audio3DManager::set_distance_factor 0 1 249 0
68
inline void Audio3DManager::set_distance_factor(PN_stdfloat factor);

609 19 get_distance_factor 0 4 764 35 Audio3DManager::get_distance_factor 0 1 250 0
67
inline PN_stdfloat Audio3DManager::get_distance_factor(void) const;

610 18 set_doppler_factor 0 4 764 34 Audio3DManager::set_doppler_factor 0 1 251 0
67
inline void Audio3DManager::set_doppler_factor(PN_stdfloat factor);

611 18 get_doppler_factor 0 4 764 34 Audio3DManager::get_doppler_factor 0 1 252 0
66
inline PN_stdfloat Audio3DManager::get_doppler_factor(void) const;

612 19 set_drop_off_factor 0 4 764 35 Audio3DManager::set_drop_off_factor 0 1 253 0
68
inline void Audio3DManager::set_drop_off_factor(PN_stdfloat factor);

613 19 get_drop_off_factor 0 4 764 35 Audio3DManager::get_drop_off_factor 0 1 254 0
67
inline PN_stdfloat Audio3DManager::get_drop_off_factor(void) const;

614 22 set_sound_min_distance 0 4 764 38 Audio3DManager::set_sound_min_distance 0 1 255 0
88
inline void Audio3DManager::set_sound_min_distance(AudioSound *sound, PN_stdfloat dist);

615 22 get_sound_min_distance 0 4 764 38 Audio3DManager::get_sound_min_distance 0 1 256 0
83
inline PN_stdfloat Audio3DManager::get_sound_min_distance(AudioSound *sound) const;

616 22 set_sound_max_distance 0 4 764 38 Audio3DManager::set_sound_max_distance 0 1 257 0
88
inline void Audio3DManager::set_sound_max_distance(AudioSound *sound, PN_stdfloat dist);

617 22 get_sound_max_distance 0 4 764 38 Audio3DManager::get_sound_max_distance 0 1 258 0
83
inline PN_stdfloat Audio3DManager::get_sound_max_distance(AudioSound *sound) const;

618 15 attach_listener 0 4 764 31 Audio3DManager::attach_listener 0 1 259 0
70
inline void Audio3DManager::attach_listener(NodePath const &listener);

619 15 detach_listener 0 4 764 31 Audio3DManager::detach_listener 0 1 260 0
50
inline void Audio3DManager::detach_listener(void);

620 8 load_sfx 0 4 764 24 Audio3DManager::load_sfx 0 1 261 0
81
inline PointerTo< AudioSound > Audio3DManager::load_sfx(std::string const &path);

621 22 attach_sound_to_object 0 4 764 38 Audio3DManager::attach_sound_to_object 0 1 262 0
87
void Audio3DManager::attach_sound_to_object(AudioSound *sound, NodePath const &object);

622 12 detach_sound 0 4 764 28 Audio3DManager::detach_sound 0 1 263 0
53
void Audio3DManager::detach_sound(AudioSound *sound);

623 18 print_audio_digest 0 4 764 34 Audio3DManager::print_audio_digest 0 1 264 0
46
void Audio3DManager::print_audio_digest(void);

624 6 update 0 4 764 22 Audio3DManager::update 0 1 265 0
34
void Audio3DManager::update(void);

625 15 ~Audio3DManager 0 4 764 31 Audio3DManager::~Audio3DManager 0 0 0
38
Audio3DManager::~Audio3DManager(void);

626 19 set_pupil_direction 0 4 765 27 CIOLib::set_pupil_direction 0 1 268 0
91
static void CIOLib::set_pupil_direction(float x, float y, LVector3 &left, LVector3 &right);

627 14 look_pupils_at 0 4 765 22 CIOLib::look_pupils_at 0 1 269 0
106
static LVector2 CIOLib::look_pupils_at(NodePath const &node, LVector3 const &point, NodePath const &eyes);

628 6 CIOLib 0 4 765 14 CIOLib::CIOLib 0 2 266 267 0
87
inline CIOLib::CIOLib(void) = default;
inline CIOLib::CIOLib(CIOLib const &) = default;

629 7 ~CIOLib 0 4 765 15 CIOLib::~CIOLib 0 0 0
22
CIOLib::~CIOLib(void);

630 17 DecalModulateSpec 0 4 766 36 DecalModulateSpec::DecalModulateSpec 0 1 270 0
43
DecalModulateSpec::DecalModulateSpec(void);

631 18 ~DecalModulateSpec 0 4 766 37 DecalModulateSpec::~DecalModulateSpec 0 0 0
44
DecalModulateSpec::~DecalModulateSpec(void);

632 14 get_class_type 0 4 767 24 GlowNode::get_class_type 0 1 274 0
49
static TypeHandle GlowNode::get_class_type(void);

633 8 GlowNode 0 4 767 18 GlowNode::GlowNode 0 3 271 272 273 0
219
GlowNode::GlowNode(std::string const &name, float query_size = ::r_glow_querysize);
GlowNode::GlowNode(GeomNode const &copy, float query_size = ::r_glow_querysize);
inline GlowNode::GlowNode(GlowNode const &) = default;

634 9 ~GlowNode 0 4 767 19 GlowNode::~GlowNode 0 0 0
26
GlowNode::~GlowNode(void);

635 24 upcast_to_ReferenceCount 0 12 769 43 PostProcessEffect::upcast_to_ReferenceCount 0 1 284 47
upcast from PostProcessEffect to ReferenceCount
66
ReferenceCount *PostProcessEffect::upcast_to_ReferenceCount(void);

636 29 downcast_to_PostProcessEffect 0 12 731 45 ReferenceCount::downcast_to_PostProcessEffect 0 0 49
downcast from ReferenceCount to PostProcessEffect
71
PostProcessEffect *ReferenceCount::downcast_to_PostProcessEffect(void);

637 17 upcast_to_Namable 0 12 769 36 PostProcessEffect::upcast_to_Namable 0 1 285 40
upcast from PostProcessEffect to Namable
52
Namable *PostProcessEffect::upcast_to_Namable(void);

638 29 downcast_to_PostProcessEffect 0 12 742 38 Namable::downcast_to_PostProcessEffect 0 0 42
downcast from Namable to PostProcessEffect
64
PostProcessEffect *Namable::downcast_to_PostProcessEffect(void);

639 14 get_class_type 0 4 769 33 PostProcessEffect::get_class_type 0 1 275 0
58
static TypeHandle PostProcessEffect::get_class_type(void);

640 17 get_final_texture 0 6 769 36 PostProcessEffect::get_final_texture 0 1 276 0
64
virtual Texture *PostProcessEffect::get_final_texture(void) = 0;

641 8 add_pass 0 4 769 27 PostProcessEffect::add_pass 0 1 277 0
56
void PostProcessEffect::add_pass(PostProcessPass *pass);

642 11 remove_pass 0 4 769 30 PostProcessEffect::remove_pass 0 1 278 0
59
void PostProcessEffect::remove_pass(PostProcessPass *pass);

643 8 get_pass 0 4 769 27 PostProcessEffect::get_pass 0 1 279 0
70
PostProcessPass *PostProcessEffect::get_pass(std::string const &name);

644 5 setup 0 6 769 24 PostProcessEffect::setup 0 1 280 0
44
virtual void PostProcessEffect::setup(void);

645 6 update 0 6 769 25 PostProcessEffect::update 0 1 281 0
45
virtual void PostProcessEffect::update(void);

646 12 window_event 0 4 769 31 PostProcessEffect::window_event 0 1 282 0
58
void PostProcessEffect::window_event(GraphicsOutput *win);

647 8 shutdown 0 6 769 27 PostProcessEffect::shutdown 0 1 283 0
47
virtual void PostProcessEffect::shutdown(void);

648 18 ~PostProcessEffect 0 4 769 37 PostProcessEffect::~PostProcessEffect 0 0 0
44
PostProcessEffect::~PostProcessEffect(void);

649 24 upcast_to_ReferenceCount 0 12 771 41 PostProcessPass::upcast_to_ReferenceCount 0 1 311 45
upcast from PostProcessPass to ReferenceCount
64
ReferenceCount *PostProcessPass::upcast_to_ReferenceCount(void);

650 27 downcast_to_PostProcessPass 0 12 731 43 ReferenceCount::downcast_to_PostProcessPass 0 0 47
downcast from ReferenceCount to PostProcessPass
67
PostProcessPass *ReferenceCount::downcast_to_PostProcessPass(void);

651 17 upcast_to_Namable 0 12 771 34 PostProcessPass::upcast_to_Namable 0 1 312 38
upcast from PostProcessPass to Namable
50
Namable *PostProcessPass::upcast_to_Namable(void);

652 27 downcast_to_PostProcessPass 0 12 742 36 Namable::downcast_to_PostProcessPass 0 0 40
downcast from Namable to PostProcessPass
60
PostProcessPass *Namable::downcast_to_PostProcessPass(void);

653 14 get_class_type 0 4 771 31 PostProcessPass::get_class_type 0 1 288 0
56
static TypeHandle PostProcessPass::get_class_type(void);

654 15 PostProcessPass 0 4 771 32 PostProcessPass::PostProcessPass 0 2 286 287 0
379
PostProcessPass::PostProcessPass(PostProcess *pp, std::string const &name = "pass", int texture_output_bits = 0, FrameBufferProperties const &fbprops = PostProcessPass::get_default_fbprops(), bool force_size = false, LVector2i const &forced_size = LVector2i::zero(), bool div_size = false, int div = 1);
inline PostProcessPass::PostProcessPass(PostProcessPass const &) = default;

655 8 get_quad 0 4 771 25 PostProcessPass::get_quad 0 1 289 0
54
inline NodePath PostProcessPass::get_quad(void) const;

656 26 get_back_buffer_dimensions 0 4 771 43 PostProcessPass::get_back_buffer_dimensions 0 1 290 0
66
LVector2i PostProcessPass::get_back_buffer_dimensions(void) const;

657 10 get_camera 0 4 771 27 PostProcessPass::get_camera 0 1 291 0
56
inline NodePath PostProcessPass::get_camera(void) const;

658 16 has_texture_bits 0 4 771 33 PostProcessPass::has_texture_bits 0 1 292 0
62
inline bool PostProcessPass::has_texture_bits(int bits) const;

659 12 set_div_size 0 4 771 29 PostProcessPass::set_div_size 0 1 293 0
66
inline void PostProcessPass::set_div_size(bool div_size, int div);

660 15 set_forced_size 0 4 771 32 PostProcessPass::set_forced_size 0 1 294 0
92
inline void PostProcessPass::set_forced_size(bool force_size, LVector2i const &forced_size);

661 26 set_framebuffer_properties 0 4 771 43 PostProcessPass::set_framebuffer_properties 0 1 295 0
94
inline void PostProcessPass::set_framebuffer_properties(FrameBufferProperties const &fbprops);

662 23 set_output_texture_bits 0 4 771 40 PostProcessPass::set_output_texture_bits 0 1 296 0
63
inline void PostProcessPass::set_output_texture_bits(int bits);

663 18 get_corrected_size 0 4 771 35 PostProcessPass::get_corrected_size 0 1 297 0
69
LVector2i PostProcessPass::get_corrected_size(LVector2i const &size);

664 11 get_texture 0 4 771 28 PostProcessPass::get_texture 0 1 298 0
47
Texture *PostProcessPass::get_texture(int bit);

665 17 get_color_texture 0 4 771 34 PostProcessPass::get_color_texture 0 1 299 0
57
inline Texture *PostProcessPass::get_color_texture(void);

666 17 get_depth_texture 0 4 771 34 PostProcessPass::get_depth_texture 0 1 300 0
57
inline Texture *PostProcessPass::get_depth_texture(void);

667 12 setup_buffer 0 6 771 29 PostProcessPass::setup_buffer 0 1 301 0
49
virtual bool PostProcessPass::setup_buffer(void);

668 14 setup_textures 0 6 771 31 PostProcessPass::setup_textures 0 1 302 0
51
virtual void PostProcessPass::setup_textures(void);

669 10 setup_quad 0 6 771 27 PostProcessPass::setup_quad 0 1 303 0
47
virtual void PostProcessPass::setup_quad(void);

670 12 setup_camera 0 6 771 29 PostProcessPass::setup_camera 0 1 304 0
49
virtual void PostProcessPass::setup_camera(void);

671 12 setup_region 0 6 771 29 PostProcessPass::setup_region 0 1 305 0
49
virtual void PostProcessPass::setup_region(void);

672 5 setup 0 6 771 22 PostProcessPass::setup 0 1 306 0
42
virtual void PostProcessPass::setup(void);

673 6 update 0 6 771 23 PostProcessPass::update 0 1 307 0
43
virtual void PostProcessPass::update(void);

674 12 window_event 0 6 771 29 PostProcessPass::window_event 0 1 308 0
67
virtual void PostProcessPass::window_event(GraphicsOutput *output);

675 8 shutdown 0 6 771 25 PostProcessPass::shutdown 0 1 309 0
45
virtual void PostProcessPass::shutdown(void);

676 19 get_default_fbprops 0 4 771 36 PostProcessPass::get_default_fbprops 0 1 310 0
72
static FrameBufferProperties PostProcessPass::get_default_fbprops(void);

677 16 ~PostProcessPass 0 4 771 33 PostProcessPass::~PostProcessPass 0 0 0
40
PostProcessPass::~PostProcessPass(void);

678 20 PostProcessScenePass 0 4 772 42 PostProcessScenePass::PostProcessScenePass 0 2 313 314 0
220
PostProcessScenePass::PostProcessScenePass(PostProcess *pp, int output_texture_bits = ::bits_PASSTEXTURE_COLOR, int auxbits = 0);
inline PostProcessScenePass::PostProcessScenePass(PostProcessScenePass const &) = default;

679 18 setup_scene_camera 0 4 772 40 PostProcessScenePass::setup_scene_camera 0 1 315 0
53
void PostProcessScenePass::setup_scene_camera(int i);

680 16 set_camera_state 0 4 772 38 PostProcessScenePass::set_camera_state 0 1 316 0
70
void PostProcessScenePass::set_camera_state(RenderState const *state);

681 21 ~PostProcessScenePass 0 4 772 43 PostProcessScenePass::~PostProcessScenePass 0 0 0
50
PostProcessScenePass::~PostProcessScenePass(void);

682 11 PostProcess 0 4 773 24 PostProcess::PostProcess 0 2 317 318 0
113
PostProcess::PostProcess(GraphicsOutput *output);
inline PostProcess::PostProcess(PostProcess const &) = default;

683 10 add_camera 0 4 773 23 PostProcess::add_camera 0 1 319 0
53
void PostProcess::add_camera(NodePath const &camera);

684 13 remove_camera 0 4 773 26 PostProcess::remove_camera 0 1 320 0
56
void PostProcess::remove_camera(NodePath const &camera);

685 10 add_effect 0 4 773 23 PostProcess::add_effect 0 1 321 0
63
inline void PostProcess::add_effect(PostProcessEffect *effect);

686 13 remove_effect 0 4 773 26 PostProcess::remove_effect 0 1 322 0
66
inline void PostProcess::remove_effect(PostProcessEffect *effect);

687 10 get_effect 0 4 773 23 PostProcess::get_effect 0 1 323 0
75
inline PostProcessEffect *PostProcess::get_effect(std::string const &name);

688 23 get_scene_color_texture 0 4 773 36 PostProcess::get_scene_color_texture 0 1 324 0
65
inline Texture *PostProcess::get_scene_color_texture(void) const;

689 23 get_scene_depth_texture 0 4 773 36 PostProcess::get_scene_depth_texture 0 1 325 0
65
inline Texture *PostProcess::get_scene_depth_texture(void) const;

690 14 get_scene_pass 0 4 773 27 PostProcess::get_scene_pass 0 1 326 0
69
inline PostProcessScenePass *PostProcess::get_scene_pass(void) const;

691 10 get_output 0 4 773 23 PostProcess::get_output 0 1 327 0
59
inline GraphicsOutput *PostProcess::get_output(void) const;

692 10 get_camera 0 4 773 23 PostProcess::get_camera 0 1 328 0
53
inline NodePath PostProcess::get_camera(int n) const;

693 9 next_sort 0 4 773 22 PostProcess::next_sort 0 1 329 0
40
inline int PostProcess::next_sort(void);

694 25 get_output_display_region 0 4 773 38 PostProcess::get_output_display_region 0 1 330 0
73
inline DisplayRegion *PostProcess::get_output_display_region(void) const;

695 13 is_fullscreen 0 4 773 26 PostProcess::is_fullscreen 0 1 331 0
51
inline bool PostProcess::is_fullscreen(void) const;

696 18 set_scene_aux_bits 0 4 773 31 PostProcess::set_scene_aux_bits 0 1 332 0
47
void PostProcess::set_scene_aux_bits(int bits);

697 18 set_stacked_clears 0 4 773 31 PostProcess::set_stacked_clears 0 1 333 0
68
void PostProcess::set_stacked_clears(int n, DrawableRegion *region);

698 17 set_window_clears 0 4 773 30 PostProcess::set_window_clears 0 1 334 0
60
void PostProcess::set_window_clears(DrawableRegion *region);

699 10 set_clears 0 4 773 23 PostProcess::set_clears 0 1 335 0
60
void PostProcess::set_clears(int n, DrawableRegion *region);

700 8 shutdown 0 4 773 21 PostProcess::shutdown 0 1 336 0
33
void PostProcess::shutdown(void);

701 12 ~PostProcess 0 4 773 25 PostProcess::~PostProcess 0 0 0
32
PostProcess::~PostProcess(void);

702 14 get_class_type 0 4 774 23 HDRPass::get_class_type 0 1 339 0
48
static TypeHandle HDRPass::get_class_type(void);

703 7 HDRPass 0 4 774 16 HDRPass::HDRPass 0 2 337 338 0
86
HDRPass::HDRPass(PostProcess *pp);
inline HDRPass::HDRPass(HDRPass const &) = default;

704 19 set_exposure_output 0 4 774 28 HDRPass::set_exposure_output 0 1 340 0
59
inline void HDRPass::set_exposure_output(PTA_float output);

705 12 get_exposure 0 4 774 21 HDRPass::get_exposure 0 1 341 56
/**
	 * Returns the calculated exposure adjustment.
	 */
47
inline float HDRPass::get_exposure(void) const;

706 8 ~HDRPass 0 4 774 17 HDRPass::~HDRPass 0 0 0
24
HDRPass::~HDRPass(void);

707 9 HDREffect 0 4 775 20 HDREffect::HDREffect 0 1 342 0
38
HDREffect::HDREffect(PostProcess *pp);

708 12 get_hdr_pass 0 4 775 23 HDREffect::get_hdr_pass 0 1 343 0
52
inline HDRPass *HDREffect::get_hdr_pass(void) const;

709 10 ~HDREffect 0 4 775 21 HDREffect::~HDREffect 0 0 0
28
HDREffect::~HDREffect(void);

710 14 get_class_type 0 4 776 27 BloomEffect::get_class_type 0 1 345 0
52
static TypeHandle BloomEffect::get_class_type(void);

711 11 BloomEffect 0 4 776 24 BloomEffect::BloomEffect 0 1 344 0
42
BloomEffect::BloomEffect(PostProcess *pp);

712 12 ~BloomEffect 0 4 776 25 BloomEffect::~BloomEffect 0 0 0
32
BloomEffect::~BloomEffect(void);

345
1 0 0 7 12 777 357 0 0 0 
2 0 0 7 12 777 357 0 0 1 6 param0 0 778  
3 0 0 7 2 782 0 0 0 1 4 name 1 781  
4 0 0 7 2 782 0 0 0 2 4 name 1 781  7 uv_name 1 781  
5 0 0 7 3 782 0 0 0 0 
6 0 0 7 4 782 0 0 0 0 
7 0 0 7 5 782 0 0 0 0 
8 0 0 7 6 782 0 0 0 0 
9 0 0 7 7 782 0 0 0 0 
10 0 0 7 8 782 0 0 0 0 
11 0 0 7 9 782 0 0 0 0 
12 0 0 7 10 782 0 0 0 0 
13 0 0 7 11 782 0 0 0 0 
14 0 0 7 16 785 379 0 0 1 4 copy 1 783  
15 0 0 7 16 785 379 0 0 1 4 name 1 781  
16 0 0 7 17 785 379 0 0 2 4 this 3 785  4 copy 1 783  
17 0 0 4 18 786 0 0 0 3 4 this 3 785  3 key 1 781  5 value 1 781  
18 0 0 6 19 781 0 0 0 2 4 this 3 783  3 key 1 781  
19 0 0 6 20 787 0 0 0 1 4 this 3 783  
20 0 0 6 21 781 0 0 0 2 4 this 3 783  1 i 1 787  
21 0 0 6 22 781 0 0 0 2 4 this 3 783  1 i 1 787  
22 0 0 6 23 718 0 0 0 2 4 this 3 783  3 key 1 781  
23 0 0 6 24 789 0 0 0 2 4 this 3 783  3 key 1 781  
24 0 0 4 25 786 0 0 0 2 4 this 3 785  11 shader_name 1 781  
25 0 0 6 26 781 0 0 0 1 4 this 3 783  
26 0 0 7 27 791 0 0 0 1 4 this 3 783  
27 0 0 6 28 792 0 0 0 2 4 this 3 783  3 key 1 781  
28 0 0 6 29 792 0 0 0 1 4 this 3 783  
29 0 0 6 30 792 0 0 0 1 4 this 3 783  
30 0 0 6 31 781 0 0 0 1 4 this 3 783  
31 0 0 6 32 781 0 0 0 1 4 this 3 783  
32 0 0 6 33 792 0 0 0 1 4 this 3 783  
33 0 0 6 34 792 0 0 0 1 4 this 3 783  
34 0 0 7 35 783 0 0 0 1 4 file 1 793  
35 0 0 7 36 796 0 0 0 0 
36 0 0 7 40 798 0 0 0 1 3 mat 1 783  
37 0 0 7 41 798 0 0 0 1 3 mat 1 783  
38 0 0 7 42 798 0 0 0 0 
39 0 0 6 43 781 0 0 0 1 4 this 3 799  
40 0 0 6 44 792 0 0 0 1 4 this 3 799  
41 0 0 7 45 783 0 0 0 1 4 this 3 799  
42 0 0 6 46 718 0 0 0 0 
43 0 0 7 49 796 0 0 0 0 
44 0 0 6 53 787 0 0 0 1 4 this 3 801  
45 0 0 7 54 805 0 0 0 2 4 this 3 801  1 n 1 718  
46 0 0 6 55 787 0 0 0 1 4 this 3 801  
47 0 0 7 56 808 0 0 0 2 4 this 3 801  1 n 1 718  
48 0 0 7 57 796 0 0 0 0 
49 0 0 7 61 809 399 0 0 0 
50 0 0 7 61 809 399 0 0 1 6 param0 0 810  
51 0 0 7 60 796 0 0 0 0 
52 0 0 6 62 718 0 0 0 1 4 this 3 810  
53 0 0 6 63 812 0 0 0 1 4 this 3 810  
54 0 0 7 67 813 404 0 0 0 
55 0 0 7 67 813 404 0 0 1 6 param0 0 814  
56 0 0 7 66 796 0 0 0 0 
57 0 0 7 68 805 0 0 0 1 4 this 3 814  
58 0 0 7 69 818 0 0 0 1 4 this 3 814  
59 0 0 7 73 819 410 0 0 0 
60 0 0 7 73 819 410 0 0 1 6 param0 0 820  
61 0 0 7 72 796 0 0 0 0 
62 0 0 7 74 822 394 0 0 1 4 this 3 820  
63 0 0 6 75 792 0 0 0 2 4 this 3 820  3 pos 1 823  
64 0 0 4 76 786 0 0 0 3 4 this 3 819  4 mins 1 805  4 maxs 1 805  
65 0 0 7 80 825 416 0 0 0 
66 0 0 7 80 825 416 0 0 1 6 param0 0 826  
67 0 0 7 79 796 0 0 0 0 
68 0 0 6 81 718 0 0 0 1 4 this 3 826  
69 0 0 7 82 829 0 0 0 1 4 this 3 826  
70 0 0 4 83 786 0 0 0 3 4 this 3 825  4 mins 1 805  4 maxs 1 805  
71 0 0 7 89 832 421 0 0 1 6 param0 0 830  
72 0 0 6 86 718 0 0 0 1 4 this 3 830  
73 0 0 6 87 718 0 0 0 1 4 this 3 830  
74 0 0 6 88 718 0 0 0 1 4 this 3 830  
75 0 0 7 97 835 428 0 0 1 6 param0 0 833  
76 0 0 6 92 718 0 0 0 1 4 this 3 833  
77 0 0 6 93 718 0 0 0 1 4 this 3 833  
78 0 0 6 94 718 0 0 0 1 4 this 3 833  
79 0 0 6 95 718 0 0 0 1 4 this 3 833  
80 0 0 6 96 792 0 0 0 1 4 this 3 833  
81 0 0 6 100 718 0 0 0 1 4 this 3 836  
82 0 0 4 101 786 0 0 35 // number of textures to consider.. 2 4 this 3 836  6 tcount 1 718  
83 0 0 4 102 786 0 0 21 // add textures 0 - n 3 4 this 3 836  3 wid 1 718  3 hit 1 718  
84 0 0 6 103 792 0 0 0 7 4 this 3 836  3 wid 1 718  3 hit 1 718  15 forcePowerOfTwo 1 792  14 onePixelBorder 1 792  7 max_wid 1 718  7 max_hit 1 718  
85 0 0 4 104 786 0 0 0 3 4 this 3 836  3 wid 1 718  3 hit 1 718  
86 0 0 7 105 832 421 0 74 // pack the textures, the return code is the amount of wasted/unused area. 3 4 this 3 836  15 forcePowerOfTwo 1 792  14 onePixelBorder 1 792  
87 0 0 7 106 835 428 0 58 // returns true if the texture has been rotated 90 degrees 2 4 this 3 836  5 index 1 718  
88 0 0 6 107 836 0 0 0 0 
89 0 0 4 108 786 0 0 0 1 2 tp 1 836  
90 0 0 7 113 837 442 0 0 0 
91 0 0 7 113 837 442 0 0 1 6 param0 0 838  
92 0 0 4 111 786 0 0 0 0 
93 0 0 4 112 786 0 0 0 0 
94 0 0 7 116 840 450 0 0 0 
95 0 0 7 116 840 450 0 0 1 6 param0 0 841  
96 0 0 6 117 792 0 0 0 1 4 this 3 841  
97 0 0 7 118 818 0 0 0 1 4 this 3 841  
98 0 0 7 119 845 0 0 0 1 4 this 3 841  
99 0 0 6 120 846 0 0 0 1 4 this 3 841  
100 0 0 6 121 846 0 0 0 1 4 this 3 841  
101 0 0 6 122 789 0 0 0 1 4 this 3 841  
102 0 0 7 126 847 0 0 0 0 
103 0 0 7 126 847 0 0 0 1 6 param0 0 848  
104 0 0 4 127 786 0 0 0 2 4 this 3 847  4 geom 1 850  
105 0 0 4 128 786 0 0 0 2 4 this 3 847  4 geom 1 850  
106 0 0 4 129 786 0 0 0 1 4 this 3 847  
107 0 0 7 131 840 450 0 0 4 4 this 3 847  5 start 1 823  3 end 1 823  4 mask 1 851  
108 0 0 7 132 840 450 0 0 5 4 this 3 847  6 origin 1 823  9 direction 1 855  8 distance 1 789  4 mask 1 851  
109 0 0 4 133 786 0 0 0 2 4 this 3 847  7 quality 1 718  
110 0 0 4 134 786 0 0 0 1 4 this 3 847  
111 0 0 7 135 850 0 0 0 2 4 this 3 847  7 geom_id 1 846  
112 0 0 7 138 796 0 0 0 0 
113 0 0 4 139 786 0 0 0 2 4 this 3 850  4 mask 1 851  
114 0 0 4 139 786 0 0 0 2 4 this 3 850  4 mask 1 846  
115 0 0 7 140 859 0 0 0 1 4 this 3 857  
116 0 0 6 141 846 0 0 0 1 4 this 3 857  
117 0 0 4 142 786 0 0 0 2 4 this 3 850  7 quality 1 718  
118 0 0 4 143 786 0 0 0 1 4 this 3 850  
119 0 0 7 146 860 470 0 0 1 4 name 1 781  
120 0 0 7 145 796 0 0 0 0 
121 0 0 4 147 786 0 0 0 4 4 this 3 860  2 p1 1 823  2 p2 1 823  2 p3 1 823  
122 0 0 4 148 786 0 0 0 3 4 this 3 860  4 geom 1 861  2 ts 1 864  
123 0 0 7 152 798 0 0 0 2 13 face_material 1 781  9 face_type 1 718  
124 0 0 7 153 798 0 0 0 0 
125 0 0 7 154 798 0 0 0 0 
126 0 0 6 155 781 0 0 0 1 4 this 3 867  
127 0 0 6 156 718 0 0 0 1 4 this 3 867  
128 0 0 6 157 792 0 0 0 1 4 this 3 867  
129 0 0 6 158 718 0 0 0 0 
130 0 0 7 160 796 0 0 0 0 
131 0 0 7 163 812 541 0 0 0 
132 0 0 6 164 792 0 0 0 2 4 this 3 812  4 file 1 793  
133 0 0 4 165 786 0 0 0 1 4 this 3 812  
134 0 0 4 166 786 0 0 0 3 4 this 3 812  5 gamma 1 869  10 overbright 1 718  
135 0 0 6 167 869 0 0 0 1 4 this 3 870  
136 0 0 4 168 786 0 0 0 2 4 this 3 812  3 win 1 872  
137 0 0 4 169 786 0 0 0 2 4 this 3 812  6 camera 1 874  
138 0 0 4 170 786 0 0 0 2 4 this 3 812  6 render 1 874  
139 0 0 4 171 786 0 0 0 2 4 this 3 812  5 shgen 1 876  
140 0 0 4 172 786 0 0 0 2 4 this 3 812  4 flag 1 792  
141 0 0 4 173 786 0 0 0 2 4 this 3 812  4 flag 1 792  
142 0 0 4 174 786 0 0 0 2 4 this 3 812  4 type 1 718  
143 0 0 4 175 786 0 0 0 2 4 this 3 812  4 flag 1 792  
144 0 0 4 176 786 0 0 0 2 4 this 3 812  4 file 1 793  
145 0 0 4 177 786 0 0 0 2 4 this 3 812  4 flag 1 792  
146 0 0 6 178 792 0 0 0 1 4 this 3 870  
147 0 0 7 179 829 0 0 0 1 4 this 3 870  
148 0 0 4 180 786 0 0 0 7 4 this 3 812  14 decal_material 1 781  11 decal_scale 1 877  6 rotate 1 789  5 start 1 823  3 end 1 823  11 decal_color 1 881  
149 0 0 7 181 886 0 0 0 2 4 this 3 812  3 pos 1 823  
150 0 0 4 182 786 0 0 0 1 4 this 3 812  
151 0 0 4 183 786 0 0 0 2 4 this 3 812  4 flag 1 792  
152 0 0 4 184 786 0 0 0 2 4 this 3 812  3 dir 1 855  
153 0 0 6 185 718 0 0 0 2 4 this 3 812  6 entnum 1 718  
154 0 0 4 186 786 0 0 0 4 4 this 3 812  8 modelnum 1 718  4 mins 1 805  4 maxs 1 805  
155 0 0 4 187 786 0 0 0 2 4 this 3 812  10 dispatcher 1 887  
156 0 0 4 188 786 0 0 0 3 4 this 3 812  4 name 1 781  4 type 1 890  
157 0 0 4 189 786 0 0 0 2 4 this 3 812  2 ai 1 792  
158 0 0 6 190 792 0 0 0 1 4 this 3 870  
159 0 0 6 191 792 0 0 0 3 4 this 3 812  5 start 1 823  3 end 1 823  
160 0 0 7 192 805 0 0 0 3 4 this 3 812  5 start 1 823  3 end 1 823  
161 0 0 4 193 786 0 0 0 3 4 this 3 812  7 entname 1 781  4 type 1 890  
162 0 0 6 194 887 0 0 0 2 4 this 3 870  10 targetname 1 781  
163 0 0 6 195 887 0 0 0 2 4 this 3 812  9 classname 1 781  
164 0 0 4 196 786 0 0 0 3 4 this 3 812  4 list 1 887  6 entnum 1 893  
165 0 0 4 197 786 0 0 0 3 4 this 3 812  5 entum 1 718  5 pyent 1 887  
166 0 0 4 198 786 0 0 0 2 4 this 3 812  3 ent 1 887  
167 0 0 6 199 718 0 0 0 1 4 this 3 870  
168 0 0 6 200 781 0 0 0 3 4 this 3 870  6 entnum 1 718  3 key 1 781  
169 0 0 6 201 789 0 0 0 3 4 this 3 870  6 entnum 1 718  3 key 1 781  
170 0 0 6 202 718 0 0 0 3 4 this 3 870  6 entnum 1 718  3 key 1 781  
171 0 0 7 203 818 0 0 0 3 4 this 3 870  6 entnum 1 718  3 key 1 781  
172 0 0 7 204 895 0 0 0 4 4 this 3 870  6 entnum 1 718  3 key 1 781  5 scale 1 792  
173 0 0 7 205 829 0 0 0 2 4 this 3 870  6 entnum 1 718  
174 0 0 7 206 829 0 0 0 2 4 this 3 870  8 modelnum 1 718  
175 0 0 7 207 809 399 0 0 2 4 this 3 870  6 entnum 1 893  
176 0 0 6 208 718 0 0 0 3 4 this 3 812  3 pos 1 823  8 headnode 1 718  
177 0 0 6 208 718 0 0 0 2 4 this 3 812  2 np 1 874  
178 0 0 6 209 718 0 0 0 2 4 this 3 812  3 pos 1 823  
179 0 0 6 210 792 0 0 0 3 4 this 3 870  12 curr_cluster 1 718  7 cluster 1 718  
180 0 0 6 211 792 0 0 0 3 4 this 3 812  6 bounds 1 896  19 required_leaf_flags 1 846  
181 0 0 7 212 896 0 0 0 3 4 this 3 812  13 net_transform 1 864  8 original 1 896  
182 0 0 6 213 792 0 0 0 1 4 this 3 870  
183 0 0 6 214 792 0 0 0 1 4 this 3 870  
184 0 0 4 215 786 0 0 0 1 4 this 3 812  
185 0 0 7 216 829 0 0 0 1 4 this 3 870  
186 0 0 4 217 786 0 0 0 2 4 this 3 812  4 leaf 1 718  
187 0 0 6 218 718 0 0 0 1 4 this 3 870  
188 0 0 6 219 718 0 0 0 1 4 this 3 870  
189 0 0 7 220 805 0 0 0 2 4 this 3 870  4 leaf 1 718  
190 0 0 7 221 901 0 0 0 3 4 this 3 812  7 facenum 1 718  5 point 1 855  
191 0 0 4 222 786 0 0 0 1 4 this 3 812  
192 0 0 6 223 812 0 0 0 0 
193 0 0 7 227 902 548 0 0 0 
194 0 0 4 228 786 0 0 0 3 4 this 3 902  3 key 1 781  5 value 1 781  
195 0 0 4 229 786 0 0 0 1 4 this 3 902  
196 0 0 4 230 786 0 0 0 2 4 this 3 902  3 inp 1 903  
197 0 0 4 231 786 0 0 0 2 4 this 3 902  4 flag 1 718  
198 0 0 6 232 787 0 0 0 1 4 this 3 906  
199 0 0 4 240 786 0 0 0 4 4 this 3 908  9 vert_file 1 793  10 pixel_file 1 793  9 geom_file 1 793  
200 0 0 7 241 796 0 0 0 0 
201 0 0 7 235 909 0 0 0 1 4 this 3 908  
202 0 0 6 238 910 0 0 0 1 4 this 3 908  
203 0 0 7 248 876 576 0 0 1 6 param0 0 911  
204 0 0 7 248 876 576 0 0 3 3 gsg 1 913  6 camera 1 874  6 render 1 874  
205 0 0 4 249 786 0 0 0 2 4 this 3 876  2 np 1 874  
206 0 0 4 250 786 0 0 0 1 4 this 3 876  
207 0 0 4 251 786 0 0 0 2 4 this 3 876  4 spec 1 908  
208 0 0 7 252 818 0 0 0 1 4 this 3 911  
209 0 0 6 253 792 0 0 0 1 4 this 3 911  
210 0 0 7 254 886 0 0 0 1 4 this 3 911  
211 0 0 6 255 915 0 0 0 1 4 this 3 911  
212 0 0 4 256 786 0 0 0 2 4 this 3 876  7 quality 1 718  
213 0 0 6 257 718 0 0 0 1 4 this 3 911  
214 0 0 4 258 786 0 0 0 2 4 this 3 876  3 fog 1 917  
215 0 0 4 259 786 0 0 0 1 4 this 3 876  
216 0 0 7 260 917 0 0 0 1 4 this 3 911  
217 0 0 7 261 921 0 0 0 1 4 this 3 911  
218 0 0 4 262 786 0 0 0 2 4 this 3 876  8 exposure 1 789  
219 0 0 7 263 924 0 0 0 1 4 this 3 911  
220 0 0 4 264 786 0 0 0 1 3 tex 1 886  
221 0 0 7 265 886 0 0 0 0 
222 0 0 7 266 929 0 0 0 2 4 spec 1 927  5 perms 1 906  
223 0 0 7 267 796 0 0 0 0 
224 0 0 7 272 932 579 0 0 1 6 param0 0 930  
225 0 0 7 272 932 579 0 0 2 4 trav 1 933  6 loader 1 812  
226 0 0 7 271 796 0 0 0 0 
227 0 0 7 276 936 582 0 0 1 6 param0 0 934  
228 0 0 7 276 936 582 0 0 2 4 name 1 781  6 loader 1 812  
229 0 0 7 275 796 0 0 0 0 
230 0 0 7 280 939 585 0 0 1 6 param0 0 937  
231 0 0 7 280 939 585 0 0 1 4 name 1 781  
232 0 0 7 279 796 0 0 0 0 
233 0 0 7 285 942 588 0 0 1 6 param0 0 940  
234 0 0 7 285 942 588 0 0 1 4 name 1 781  
235 0 0 7 284 796 0 0 0 0 
236 0 0 7 290 945 591 0 0 1 6 param0 0 943  
237 0 0 7 290 945 591 0 0 1 4 name 1 781  
238 0 0 7 289 796 0 0 0 0 
239 0 0 7 293 946 593 0 0 0 
240 0 0 7 296 947 595 0 0 0 
241 0 0 7 299 948 597 0 0 0 
242 0 0 7 302 949 599 0 0 0 
243 0 0 7 305 950 601 0 0 0 
244 0 0 7 308 951 603 0 0 0 
245 0 0 7 312 953 0 0 0 0 
246 0 0 7 313 796 0 0 0 0 
247 0 0 7 316 956 625 0 0 1 6 param0 0 954  
248 0 0 7 316 956 625 0 0 4 3 mgr 1 957  15 listener_target 1 874  4 root 1 874  13 task_priority 1 718  
249 0 0 4 317 786 0 0 0 2 4 this 3 956  6 factor 1 869  
250 0 0 6 318 869 0 0 0 1 4 this 3 954  
251 0 0 4 319 786 0 0 0 2 4 this 3 956  6 factor 1 869  
252 0 0 6 320 869 0 0 0 1 4 this 3 954  
253 0 0 4 321 786 0 0 0 2 4 this 3 956  6 factor 1 869  
254 0 0 6 322 869 0 0 0 1 4 this 3 954  
255 0 0 4 323 786 0 0 0 3 4 this 3 956  5 sound 1 959  4 dist 1 869  
256 0 0 6 324 869 0 0 0 2 4 this 3 954  5 sound 1 959  
257 0 0 4 325 786 0 0 0 3 4 this 3 956  5 sound 1 959  4 dist 1 869  
258 0 0 6 326 869 0 0 0 2 4 this 3 954  5 sound 1 959  
259 0 0 4 327 786 0 0 0 2 4 this 3 956  8 listener 1 874  
260 0 0 4 328 786 0 0 0 1 4 this 3 956  
261 0 0 7 329 959 0 0 0 2 4 this 3 956  4 path 1 781  
262 0 0 4 330 786 0 0 0 3 4 this 3 956  5 sound 1 959  6 object 1 874  
263 0 0 4 331 786 0 0 0 2 4 this 3 956  5 sound 1 959  
264 0 0 4 332 786 0 0 0 1 4 this 3 956  
265 0 0 4 333 786 0 0 0 1 4 this 3 956  
266 0 0 7 338 961 629 0 0 0 
267 0 0 7 338 961 629 0 0 1 6 param0 0 962  
268 0 0 4 336 786 0 0 0 4 1 x 1 789  1 y 1 789  4 left 1 818  5 right 1 818  
269 0 0 7 337 845 0 0 0 3 4 node 1 874  5 point 1 855  4 eyes 1 874  
270 0 0 7 341 964 631 0 0 0 
271 0 0 7 346 967 634 0 0 2 4 copy 1 965  10 query_size 1 789  
272 0 0 7 346 967 634 0 0 1 6 param0 0 968  
273 0 0 7 346 967 634 0 0 2 4 name 1 781  10 query_size 1 789  
274 0 0 7 345 796 0 0 0 0 
275 0 0 7 353 796 0 0 0 0 
276 0 0 7 354 886 0 0 0 1 4 this 3 970  
277 0 0 4 355 786 0 0 0 2 4 this 3 970  4 pass 1 971  
278 0 0 4 356 786 0 0 0 2 4 this 3 970  4 pass 1 971  
279 0 0 7 357 971 677 0 0 2 4 this 3 970  4 name 1 781  
280 0 0 4 358 786 0 0 0 1 4 this 3 970  
281 0 0 4 359 786 0 0 0 1 4 this 3 970  
282 0 0 4 360 786 0 0 0 2 4 this 3 970  3 win 1 972  
283 0 0 4 361 786 0 0 0 1 4 this 3 970  
284 0 0 7 349 909 0 0 0 1 4 this 3 970  
285 0 0 6 351 910 0 0 0 1 4 this 3 970  
286 0 0 7 370 971 677 0 0 8 2 pp 1 974  4 name 1 781  19 texture_output_bits 1 718  7 fbprops 1 975  10 force_size 1 792  11 forced_size 1 978  8 div_size 1 792  3 div 1 718  
287 0 0 7 370 971 677 0 0 1 6 param0 0 981  
288 0 0 7 369 796 0 0 0 0 
289 0 0 7 371 829 0 0 0 1 4 this 3 981  
290 0 0 7 372 983 0 0 0 1 4 this 3 981  
291 0 0 7 373 829 0 0 0 1 4 this 3 981  
292 0 0 6 374 792 0 0 0 2 4 this 3 981  4 bits 1 718  
293 0 0 4 375 786 0 0 0 3 4 this 3 971  8 div_size 1 792  3 div 1 718  
294 0 0 4 376 786 0 0 0 3 4 this 3 971  10 force_size 1 792  11 forced_size 1 978  
295 0 0 4 377 786 0 0 0 2 4 this 3 971  7 fbprops 1 975  
296 0 0 4 378 786 0 0 0 2 4 this 3 971  4 bits 1 718  
297 0 0 7 379 983 0 0 0 2 4 this 3 971  4 size 1 978  
298 0 0 7 380 886 0 0 0 2 4 this 3 971  3 bit 1 718  
299 0 0 7 381 886 0 0 0 1 4 this 3 971  
300 0 0 7 382 886 0 0 0 1 4 this 3 971  
301 0 0 6 383 792 0 0 0 1 4 this 3 971  
302 0 0 4 384 786 0 0 0 1 4 this 3 971  
303 0 0 4 385 786 0 0 0 1 4 this 3 971  
304 0 0 4 386 786 0 0 0 1 4 this 3 971  
305 0 0 4 387 786 0 0 0 1 4 this 3 971  
306 0 0 4 388 786 0 0 0 1 4 this 3 971  
307 0 0 4 389 786 0 0 0 1 4 this 3 971  
308 0 0 4 390 786 0 0 0 2 4 this 3 971  6 output 1 972  
309 0 0 4 391 786 0 0 0 1 4 this 3 971  
310 0 0 7 392 984 0 0 0 0 
311 0 0 7 365 909 0 0 0 1 4 this 3 971  
312 0 0 6 367 910 0 0 0 1 4 this 3 971  
313 0 0 7 395 985 681 0 0 3 2 pp 1 974  19 output_texture_bits 1 718  7 auxbits 1 718  
314 0 0 7 395 985 681 0 0 1 6 param0 0 986  
315 0 0 4 396 786 0 0 0 2 4 this 3 985  1 i 1 718  
316 0 0 4 397 786 0 0 0 2 4 this 3 985  5 state 1 988  
317 0 0 7 400 974 701 0 0 1 6 output 1 972  
318 0 0 7 400 974 701 0 0 1 6 param0 0 991  
319 0 0 4 401 786 0 0 0 2 4 this 3 974  6 camera 1 874  
320 0 0 4 402 786 0 0 0 2 4 this 3 974  6 camera 1 874  
321 0 0 4 403 786 0 0 0 2 4 this 3 974  6 effect 1 970  
322 0 0 4 404 786 0 0 0 2 4 this 3 974  6 effect 1 970  
323 0 0 7 405 970 648 0 0 2 4 this 3 974  4 name 1 781  
324 0 0 7 406 886 0 0 0 1 4 this 3 991  
325 0 0 7 407 886 0 0 0 1 4 this 3 991  
326 0 0 7 408 985 681 0 0 1 4 this 3 991  
327 0 0 7 409 972 0 0 0 1 4 this 3 991  
328 0 0 7 410 829 0 0 0 2 4 this 3 991  1 n 1 718  
329 0 0 6 411 718 0 0 0 1 4 this 3 974  
330 0 0 7 412 994 0 0 0 1 4 this 3 991  
331 0 0 6 413 792 0 0 0 1 4 this 3 991  
332 0 0 4 414 786 0 0 0 2 4 this 3 974  4 bits 1 718  
333 0 0 4 415 786 0 0 0 3 4 this 3 974  1 n 1 718  6 region 1 995  
334 0 0 4 416 786 0 0 0 2 4 this 3 974  6 region 1 995  
335 0 0 4 417 786 0 0 0 3 4 this 3 974  1 n 1 718  6 region 1 995  
336 0 0 4 418 786 0 0 0 1 4 this 3 974  
337 0 0 7 422 999 706 0 0 1 6 param0 0 997  
338 0 0 7 422 999 706 0 0 1 2 pp 1 974  
339 0 0 7 421 796 0 0 0 0 
340 0 0 4 423 786 0 0 0 2 4 this 3 999  6 output 1 924  
341 0 0 6 424 789 0 0 56 /**
	 * Returns the calculated exposure adjustment.
	 */ 1 4 this 3 997  
342 0 0 7 427 1000 709 0 0 1 2 pp 1 974  
343 0 0 7 428 999 706 0 0 1 4 this 3 1001  
344 0 0 7 432 1003 712 0 0 1 2 pp 1 974  
345 0 0 7 431 796 0 0 0 0 
291
713 13 TextureStages 0 141313 13 TextureStages 13 TextureStages 0 0 0 1 356 357 0 10 346 347 348 349 350 351 352 353 354 355 0 0 0 0 0 752
/**
 * This simple interface maintains a single TextureStage object for each unique name.
 * It avoids the creation of duplicate TextureStages with the same name, which
 * reduces texture swapping and draw call overhead.
 *
 * If using our shader system, you should always use this interface to get TextureStages.
 * You are not required to change any properties on the returned TextureStage, as the shader
 * specification will know what to do with the TextureStage from the name.
 * 
 * For example, you do not need to call TextureStage::set_mode() or NodePath::set_tex_gen().
 * If you apply a texture to a node with the get_normalmap() stage, the shader specification
 * will know that the texture you supplied is to be treated as a normal map.
 */

714 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 358 379 0 20 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 0 0 1 0 715 0 0 0 0 0

715 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

716 17 BSPMaterialAttrib 0 141313 17 BSPMaterialAttrib 17 BSPMaterialAttrib 0 0 0 0 388 1 1004 8 380 381 382 383 384 385 386 387 0 0 1 0 717 0 0 0 0 0

717 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

718 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

719 12 BoundingKDOP 0 141313 12 BoundingKDOP 12 BoundingKDOP 0 0 0 0 394 0 5 389 390 391 392 393 0 0 1 0 720 0 0 0 0 243
/**
 * This defines a bounding convex volume.  It may represent any enclosing convex volume,
 * including simple boxes.  However, if all you want is an axis-aligned
 * bounding box, you may be better off with the simpler BoundingBox class.
 */

720 20 FiniteBoundingVolume 0 2048 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 168
/**
 * A special kind of GeometricBoundingVolume that is known to be finite.  It
 * is possible to query this kind of volume for its minimum and maximum
 * extents.
 */

721 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 396 399 0 3 395 397 398 0 0 1 0 715 0 0 0 0 0

722 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 401 404 0 3 400 402 403 0 0 1 0 721 0 0 0 0 0

723 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 406 410 0 4 405 407 408 409 0 0 1 0 721 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

724 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 412 416 0 4 411 413 414 415 0 0 1 0 721 0 0 0 0 0

725 10 PackResult 0 141313 10 PackResult 10 PackResult 0 0 0 1 420 421 0 3 417 418 419 0 0 0 0 0 0

726 15 TextureLocation 0 141313 15 TextureLocation 15 TextureLocation 0 0 0 1 427 428 0 5 422 423 424 425 426 0 0 0 0 0 0

727 13 TexturePacker 0 141313 13 TexturePacker 13 TexturePacker 0 0 0 0 438 0 9 429 430 431 432 433 434 435 436 437 0 0 0 0 0 0

728 8 RayTrace 0 141313 8 RayTrace 8 RayTrace 0 0 0 1 441 442 0 2 439 440 0 0 0 0 0 0

729 17 RayTraceHitResult 0 141313 17 RayTraceHitResult 17 RayTraceHitResult 0 0 0 1 443 450 0 6 444 445 446 447 448 449 0 0 0 0 0 0

730 13 RayTraceScene 0 75777 13 RayTraceScene 13 RayTraceScene 0 0 0 1 451 0 0 8 452 453 454 455 456 457 458 459 0 0 1 0 731 0 0 0 1 732 0

731 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

732 0 0 794624 15 RayTraceScene:: 0 730 0 0 0 0 0 0 0 0 0 3 17 BUILD_QUALITY_LOW 32 RayTraceScene::BUILD_QUALITY_LOW 0
0 20 BUILD_QUALITY_MEDIUM 35 RayTraceScene::BUILD_QUALITY_MEDIUM 0
1 18 BUILD_QUALITY_HIGH 33 RayTraceScene::BUILD_QUALITY_HIGH 0
2 0 0

733 16 RayTraceGeometry 0 75777 16 RayTraceGeometry 16 RayTraceGeometry 0 0 0 0 0 0 6 460 461 462 463 464 465 0 0 1 0 734 0 0 0 0 0

734 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

735 20 RayTraceTriangleMesh 0 141313 20 RayTraceTriangleMesh 20 RayTraceTriangleMesh 0 0 0 1 467 470 0 3 466 468 469 0 0 1 0 733 0 0 0 0 0

736 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 479 1 1005 8 471 472 473 474 475 476 477 478 0 0 1 0 717 0 0 0 1 737 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

737 0 0 794624 15 BSPFaceAttrib:: 0 736 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

738 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 480 541 0 60 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 0 0 0 0 1 739 58
/**
 * Loads and handles the operations of PBSP files.
 */

739 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 738 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

740 18 ShaderPermutations 0 141313 18 ShaderPermutations 18 ShaderPermutations 0 0 0 1 542 548 0 5 543 544 545 546 547 0 0 1 0 731 0 0 0 0 97
/**
 * Represents a list of #defines and variable inputs to a shader that is being generated.
 */

741 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 0 555 0 2 553 554 0 0 2 3 731 549 550 3 742 551 552 0 0 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

742 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

743 13 ShaderQuality 0 532481 13 ShaderQuality 13 ShaderQuality 0 0 0 0 0 0 0 0 0 0 3 17 SHADERQUALITY_LOW 17 SHADERQUALITY_LOW 0
0 20 SHADERQUALITY_MEDIUM 20 SHADERQUALITY_MEDIUM 0
1 18 SHADERQUALITY_HIGH 18 SHADERQUALITY_HIGH 0
2 0 0

744 10 CameraBits 0 532481 10 CameraBits 10 CameraBits 0 0 0 0 0 0 0 0 0 0 6 11 CAMERA_MAIN 11 CAMERA_MAIN 0
1 13 CAMERA_SHADOW 13 CAMERA_SHADOW 0
2 17 CAMERA_REFLECTION 17 CAMERA_REFLECTION 0
4 17 CAMERA_REFRACTION 17 CAMERA_REFRACTION 0
8 16 CAMERA_VIEWMODEL 16 CAMERA_VIEWMODEL 0
16 14 CAMERA_COMPUTE 14 CAMERA_COMPUTE 0
32 0 0

745 7 AuxBits 0 532481 7 AuxBits 7 AuxBits 0 0 0 0 0 0 0 0 0 0 2 14 AUXBITS_NORMAL 14 AUXBITS_NORMAL 0
1 12 AUXBITS_ARME 12 AUXBITS_ARME 0
2 0 0

746 18 BSPShaderGenerator 0 141313 18 BSPShaderGenerator 18 BSPShaderGenerator 0 0 0 1 556 576 0 19 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 0 0 1 0 747 0 0 0 0 0

747 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

748 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 578 579 0 1 577 0 0 1 0 749 0 0 0 0 0

749 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

750 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 581 582 0 1 580 0 0 1 0 734 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

751 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 584 585 0 1 583 0 0 1 0 734 0 0 0 0 0

752 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 587 588 0 1 586 0 0 1 0 753 0 0 0 0 0

753 9 ModelRoot 0 2048 9 ModelRoot 9 ModelRoot 0 0 0 0 0 0 0 0 0 0 0 0 314
/**
 * A node of this type is created automatically at the root of each model file
 * that is loaded.  It may eventually contain some information about the
 * contents of the model; at the moment, it contains no special information,
 * but can be used as a flag to indicate the presence of a loaded model file.
 */

754 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 590 591 0 1 589 0 0 1 0 755 0 0 0 0 0

755 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

756 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 592 593 0 0 0 0 1 0 741 0 0 0 0 0

757 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 594 595 0 0 0 0 1 0 741 0 0 0 0 0

758 16 UnlitGenericSpec 0 141313 16 UnlitGenericSpec 16 UnlitGenericSpec 0 0 0 1 596 597 0 0 0 0 1 0 741 0 0 0 0 160
/**
 * Shader that only supports a basetexture, no fancy lighting effects or anything.
 * Could be used for UI elements, emissive materials, particles, etc.
 */

759 14 UnlitNoMatSpec 0 141313 14 UnlitNoMatSpec 14 UnlitNoMatSpec 0 0 0 1 598 599 0 0 0 0 1 0 741 0 0 0 0 0

760 13 CSMRenderSpec 0 141313 13 CSMRenderSpec 13 CSMRenderSpec 0 0 0 1 600 601 0 0 0 0 1 0 741 0 0 0 0 0

761 10 SkyBoxSpec 0 141313 10 SkyBoxSpec 10 SkyBoxSpec 0 0 0 1 602 603 0 0 0 0 1 0 741 0 0 0 0 0

762 18 AmbientBoostEffect 0 141313 18 AmbientBoostEffect 18 AmbientBoostEffect 0 0 0 0 606 0 2 604 605 0 0 1 0 763 0 0 0 0 0

763 12 RenderEffect 0 2048 12 RenderEffect 12 RenderEffect 0 0 0 0 0 0 0 0 0 0 0 0 901
/**
 * This is the base class for a number of special render effects that may be
 * set on scene graph nodes to change the way they render.  This includes
 * BillboardEffect, DecalEffect, etc.
 *
 * RenderEffect represents render properties that must be applied as soon as
 * they are encountered in the scene graph, rather than propagating down to
 * the leaves.  This is different from RenderAttrib, which represents
 * properties like color and texture that don't do anything until they
 * propagate down to a GeomNode.
 *
 * You should not attempt to create or modify a RenderEffect directly;
 * instead, use the make() method of the appropriate kind of effect you want.
 * This will allocate and return a new RenderEffect of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderEffect
 * if you wish to change its properties; instead, create a new one.
 */

764 14 Audio3DManager 0 141313 14 Audio3DManager 14 Audio3DManager 0 0 0 1 607 625 0 17 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 0 0 0 0 0 0

765 6 CIOLib 0 141313 6 CIOLib 6 CIOLib 0 0 0 1 628 629 0 2 626 627 0 0 0 0 0 0

766 17 DecalModulateSpec 0 141313 17 DecalModulateSpec 17 DecalModulateSpec 0 0 0 1 630 631 0 0 0 0 1 0 758 0 0 0 0 90
/**
 * This is just an alias of UnlitGeneric that enables color blending on the decal.
 */

767 8 GlowNode 0 141313 8 GlowNode 8 GlowNode 0 0 0 1 633 634 0 1 632 0 0 1 0 768 0 0 0 0 207
/**
 * This is a specialization on GeomNode that uses a pixel occlusion query
 * to determine if the Geoms on the node should be rendered.
 *
 * This is useful for things like light glows or lens flares.
 */

768 8 GeomNode 0 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 0 0 0 0 0 208
/**
 * A node that holds Geom objects, renderable pieces of geometry.  This is the
 * primary kind of leaf node in the scene graph; almost all visible objects
 * will be contained in a GeomNode somewhere.
 */

769 17 PostProcessEffect 0 141313 17 PostProcessEffect 17 PostProcessEffect 0 0 0 0 648 0 9 639 640 641 642 643 644 645 646 647 0 0 2 3 731 635 636 3 742 637 638 0 0 0

770 15 PassTextureBits 0 532481 15 PassTextureBits 15 PassTextureBits 0 0 0 0 0 0 0 0 0 0 6 22 bits_PASSTEXTURE_COLOR 22 bits_PASSTEXTURE_COLOR 0
1 22 bits_PASSTEXTURE_DEPTH 22 bits_PASSTEXTURE_DEPTH 0
2 21 bits_PASSTEXTURE_AUX0 21 bits_PASSTEXTURE_AUX0 0
4 21 bits_PASSTEXTURE_AUX1 21 bits_PASSTEXTURE_AUX1 0
8 21 bits_PASSTEXTURE_AUX2 21 bits_PASSTEXTURE_AUX2 0
16 21 bits_PASSTEXTURE_AUX3 21 bits_PASSTEXTURE_AUX3 0
32 0 0

771 15 PostProcessPass 0 141313 15 PostProcessPass 15 PostProcessPass 0 0 0 1 654 677 0 23 653 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 0 0 2 3 731 649 650 3 742 651 652 0 0 0

772 20 PostProcessScenePass 0 141313 20 PostProcessScenePass 20 PostProcessScenePass 0 0 0 1 678 681 0 2 679 680 0 0 1 0 771 0 0 0 0 0

773 11 PostProcess 0 141313 11 PostProcess 11 PostProcess 0 0 0 1 682 701 0 18 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 0 0 0 0 0 0

774 7 HDRPass 0 141313 7 HDRPass 7 HDRPass 0 0 0 1 703 706 0 3 702 704 705 0 0 1 0 771 0 0 0 0 0

775 9 HDREffect 0 141313 9 HDREffect 9 HDREffect 0 0 0 1 707 709 0 1 708 0 0 1 0 769 0 0 0 0 0

776 11 BloomEffect 0 141313 11 BloomEffect 11 BloomEffect 0 0 0 1 711 712 0 1 710 0 0 1 0 769 0 0 0 0 0

777 15 TextureStages * 0 8576 15 TextureStages * 15 TextureStages * 0 0 713 0 0 0 0 0 0 0 0 0 0

778 21 TextureStages const * 0 8576 21 TextureStages const * 21 TextureStages const * 0 0 779 0 0 0 0 0 0 0 0 0 0

779 19 TextureStages const 0 8832 19 TextureStages const 19 TextureStages const 0 0 713 0 0 0 0 0 0 0 0 0 0

780 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 336
/**
 * Defines the properties of a named stage of the multitexture pipeline.  The
 * TextureAttrib will associated a number of these stages with Texture
 * objects, and the GSG will render geometry by sorting all of the currently
 * active TextureStages in order and then issuing the appropriate rendering
 * calls to activate them.
 */

781 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

782 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 780 0 0 0 0 0 0 0 0 0 0

783 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 784 0 0 0 0 0 0 0 0 0 0

784 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 714 0 0 0 0 0 0 0 0 0 0

785 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 714 0 0 0 0 0 0 0 0 0 0

786 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

787 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 788 0 0 0 0 0 0 0 0 0 0

788 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

789 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

790 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

791 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 790 0 0 0 0 0 0 0 0 0 0

792 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

793 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 794 0 0 0 0 0 0 0 0 0 0

794 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 790 0 0 0 0 0 0 0 0 0 0

795 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

796 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 795 0 0 0 0 0 0 0 0 0 0

797 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 717 0 0 0 0 0 0 0 0 0 0

798 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 797 0 0 0 0 0 0 0 0 0 0

799 25 BSPMaterialAttrib const * 0 8576 25 BSPMaterialAttrib const * 25 BSPMaterialAttrib const * 0 0 800 0 0 0 0 0 0 0 0 0 0

800 23 BSPMaterialAttrib const 0 8832 23 BSPMaterialAttrib const 23 BSPMaterialAttrib const 0 0 716 0 0 0 0 0 0 0 0 0 0

801 20 BoundingKDOP const * 0 8576 20 BoundingKDOP const * 20 BoundingKDOP const * 0 0 802 0 0 0 0 0 0 0 0 0 0

802 18 BoundingKDOP const 0 8832 18 BoundingKDOP const 18 BoundingKDOP const 0 0 719 0 0 0 0 0 0 0 0 0 0

803 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 804 0 0 0 0 0 0 0 0 0 0

804 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

805 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 803 0 0 0 0 0 0 0 0 0 0

806 6 LPlane 0 2105344 6 LPlane 6 LPlane 0 0 807 0 0 0 0 0 0 0 0 0 0

807 7 LPlanef 0 2048 7 LPlanef 7 LPlanef 0 0 0 0 0 0 0 0 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

808 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 806 0 0 0 0 0 0 0 0 0 0

809 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 721 0 0 0 0 0 0 0 0 0 0

810 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 811 0 0 0 0 0 0 0 0 0 0

811 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 721 0 0 0 0 0 0 0 0 0 0

812 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 738 0 0 0 0 0 0 0 0 0 0

813 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 722 0 0 0 0 0 0 0 0 0 0

814 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 815 0 0 0 0 0 0 0 0 0 0

815 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 722 0 0 0 0 0 0 0 0 0 0

816 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 817 0 0 0 0 0 0 0 0 0 0

817 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

818 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 816 0 0 0 0 0 0 0 0 0 0

819 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 723 0 0 0 0 0 0 0 0 0 0

820 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 821 0 0 0 0 0 0 0 0 0 0

821 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 723 0 0 0 0 0 0 0 0 0 0

822 14 BoundingKDOP * 0 8576 14 BoundingKDOP * 14 BoundingKDOP * 0 0 719 0 0 0 0 0 0 0 0 0 0

823 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 824 0 0 0 0 0 0 0 0 0 0

824 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 803 0 0 0 0 0 0 0 0 0 0

825 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 724 0 0 0 0 0 0 0 0 0 0

826 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 827 0 0 0 0 0 0 0 0 0 0

827 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 724 0 0 0 0 0 0 0 0 0 0

828 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

829 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 828 0 0 0 0 0 0 0 0 0 0

830 18 PackResult const * 0 8576 18 PackResult const * 18 PackResult const * 0 0 831 0 0 0 0 0 0 0 0 0 0

831 16 PackResult const 0 8832 16 PackResult const 16 PackResult const 0 0 725 0 0 0 0 0 0 0 0 0 0

832 12 PackResult * 0 8576 12 PackResult * 12 PackResult * 0 0 725 0 0 0 0 0 0 0 0 0 0

833 23 TextureLocation const * 0 8576 23 TextureLocation const * 23 TextureLocation const * 0 0 834 0 0 0 0 0 0 0 0 0 0

834 21 TextureLocation const 0 8832 21 TextureLocation const 21 TextureLocation const 0 0 726 0 0 0 0 0 0 0 0 0 0

835 17 TextureLocation * 0 8576 17 TextureLocation * 17 TextureLocation * 0 0 726 0 0 0 0 0 0 0 0 0 0

836 15 TexturePacker * 0 8576 15 TexturePacker * 15 TexturePacker * 0 0 727 0 0 0 0 0 0 0 0 0 0

837 10 RayTrace * 0 8576 10 RayTrace * 10 RayTrace * 0 0 728 0 0 0 0 0 0 0 0 0 0

838 16 RayTrace const * 0 8576 16 RayTrace const * 16 RayTrace const * 0 0 839 0 0 0 0 0 0 0 0 0 0

839 14 RayTrace const 0 8832 14 RayTrace const 14 RayTrace const 0 0 728 0 0 0 0 0 0 0 0 0 0

840 19 RayTraceHitResult * 0 8576 19 RayTraceHitResult * 19 RayTraceHitResult * 0 0 729 0 0 0 0 0 0 0 0 0 0

841 25 RayTraceHitResult const * 0 8576 25 RayTraceHitResult const * 25 RayTraceHitResult const * 0 0 842 0 0 0 0 0 0 0 0 0 0

842 23 RayTraceHitResult const 0 8832 23 RayTraceHitResult const 23 RayTraceHitResult const 0 0 729 0 0 0 0 0 0 0 0 0 0

843 8 LVector2 0 2105344 8 LVector2 8 LVector2 0 0 844 0 0 0 0 0 0 0 0 0 0

844 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

845 10 LVector2 * 0 8576 10 LVector2 * 10 LVector2 * 0 0 843 0 0 0 0 0 0 0 0 0 0

846 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

847 15 RayTraceScene * 0 8576 15 RayTraceScene * 15 RayTraceScene * 0 0 730 0 0 0 0 0 0 0 0 0 0

848 21 RayTraceScene const * 0 8576 21 RayTraceScene const * 21 RayTraceScene const * 0 0 849 0 0 0 0 0 0 0 0 0 0

849 19 RayTraceScene const 0 8832 19 RayTraceScene const 19 RayTraceScene const 0 0 730 0 0 0 0 0 0 0 0 0 0

850 18 RayTraceGeometry * 0 8576 18 RayTraceGeometry * 18 RayTraceGeometry * 0 0 733 0 0 0 0 0 0 0 0 0 0

851 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 852 0 0 0 0 0 0 0 0 0 0

852 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 853 0 0 0 0 0 0 0 0 0 0

853 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 854 0 0 0 0 0 0 0 0 0 0

854 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

855 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 856 0 0 0 0 0 0 0 0 0 0

856 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 816 0 0 0 0 0 0 0 0 0 0

857 24 RayTraceGeometry const * 0 8576 24 RayTraceGeometry const * 24 RayTraceGeometry const * 0 0 858 0 0 0 0 0 0 0 0 0 0

858 22 RayTraceGeometry const 0 8832 22 RayTraceGeometry const 22 RayTraceGeometry const 0 0 733 0 0 0 0 0 0 0 0 0 0

859 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 853 0 0 0 0 0 0 0 0 0 0

860 22 RayTraceTriangleMesh * 0 8576 22 RayTraceTriangleMesh * 22 RayTraceTriangleMesh * 0 0 735 0 0 0 0 0 0 0 0 0 0

861 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 862 0 0 0 0 0 0 0 0 0 0

862 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 863 0 0 0 0 0 0 0 0 0 0

863 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

864 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 865 0 0 0 0 0 0 0 0 0 0

865 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 866 0 0 0 0 0 0 0 0 0 0

866 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

867 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 868 0 0 0 0 0 0 0 0 0 0

868 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 736 0 0 0 0 0 0 0 0 0 0

869 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 789 0 0 0 0 0 0 0 0 0 0

870 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 871 0 0 0 0 0 0 0 0 0 0

871 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 738 0 0 0 0 0 0 0 0 0 0

872 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 873 0 0 0 0 0 0 0 0 0 0

873 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

874 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 875 0 0 0 0 0 0 0 0 0 0

875 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 828 0 0 0 0 0 0 0 0 0 0

876 20 BSPShaderGenerator * 0 8576 20 BSPShaderGenerator * 20 BSPShaderGenerator * 0 0 746 0 0 0 0 0 0 0 0 0 0

877 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 878 0 0 0 0 0 0 0 0 0 0

878 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 879 0 0 0 0 0 0 0 0 0 0

879 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 880 0 0 0 0 0 0 0 0 0 0

880 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

881 15 LColorf const * 0 8576 15 LColorf const * 15 LColorf const * 0 0 882 0 0 0 0 0 0 0 0 0 0

882 13 LColorf const 0 8832 13 LColorf const 13 LColorf const 0 0 883 0 0 0 0 0 0 0 0 0 0

883 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 884 0 0 0 0 0 0 0 0 0 0

884 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

885 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

886 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 885 0 0 0 0 0 0 0 0 0 0

887 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 888 0 0 0 0 0 0 0 0 0 0

888 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 889 0 0 0 0 0 0 0 0 0 0

889 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

890 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 891 0 0 0 0 0 0 0 0 0 0

891 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 892 0 0 0 0 0 0 0 0 0 0

892 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

893 9 int const 0 8832 9 int const 9 int const 0 0 718 0 0 0 0 0 0 0 0 0 0

894 6 LColor 0 2105344 6 LColor 6 LColor 0 0 883 0 0 0 0 0 0 0 0 0 0

895 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 894 0 0 0 0 0 0 0 0 0 0

896 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 897 0 0 0 0 0 0 0 0 0 0

897 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 898 0 0 0 0 0 0 0 0 0 0

898 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

899 9 LTexCoord 0 2105344 9 LTexCoord 9 LTexCoord 0 0 900 0 0 0 0 0 0 0 0 0 0

900 10 LTexCoordf 0 2105344 10 LTexCoordf 10 LTexCoordf 0 0 880 0 0 0 0 0 0 0 0 0 0

901 11 LTexCoord * 0 8576 11 LTexCoord * 11 LTexCoord * 0 0 899 0 0 0 0 0 0 0 0 0 0

902 20 ShaderPermutations * 0 8576 20 ShaderPermutations * 20 ShaderPermutations * 0 0 740 0 0 0 0 0 0 0 0 0 0

903 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 904 0 0 0 0 0 0 0 0 0 0

904 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 905 0 0 0 0 0 0 0 0 0 0

905 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

906 26 ShaderPermutations const * 0 8576 26 ShaderPermutations const * 26 ShaderPermutations const * 0 0 907 0 0 0 0 0 0 0 0 0 0

907 24 ShaderPermutations const 0 8832 24 ShaderPermutations const 24 ShaderPermutations const 0 0 740 0 0 0 0 0 0 0 0 0 0

908 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 741 0 0 0 0 0 0 0 0 0 0

909 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 731 0 0 0 0 0 0 0 0 0 0

910 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 742 0 0 0 0 0 0 0 0 0 0

911 26 BSPShaderGenerator const * 0 8576 26 BSPShaderGenerator const * 26 BSPShaderGenerator const * 0 0 912 0 0 0 0 0 0 0 0 0 0

912 24 BSPShaderGenerator const 0 8832 24 BSPShaderGenerator const 24 BSPShaderGenerator const 0 0 746 0 0 0 0 0 0 0 0 0 0

913 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 914 0 0 0 0 0 0 0 0 0 0

914 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

915 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 916 0 0 0 0 0 0 0 0 0 0

916 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

917 5 Fog * 0 8576 5 Fog * 5 Fog * 0 0 918 0 0 0 0 0 0 0 0 0 0

918 3 Fog 0 2048 3 Fog 3 Fog 0 0 0 0 0 0 0 0 0 0 0 0 782
/**
 * Specifies how atmospheric fog effects are applied to geometry.  The Fog
 * object is now a PandaNode, which means it can be used similarly to a Light
 * to define effects relative to a particular coordinate system within the
 * scene graph.
 *
 * In exponential mode, the fog effects are always camera-relative, and it
 * does not matter where the Fog node is parented.  However, in linear mode,
 * the onset and opaque distances are defined as offsets along the local
 * forward axis (e.g.  the Y axis).  This allows the fog effect to be
 * localized to a particular region in space, rather than always camera-
 * relative.  If the fog object is not parented to any node, it is used to
 * generate traditonal camera-relative fog, as if it were parented to the
 * camera.
 */

919 14 PTA_LVecBase4f 0 2105344 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 920 0 0 0 0 0 0 0 0 0 0

920 37 PointerToArray< UnalignedLVecBase4f > 0 2048 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 0 0 0 0 0 0 0 0 0 0

921 16 PTA_LVecBase4f * 0 8576 16 PTA_LVecBase4f * 16 PTA_LVecBase4f * 0 0 919 0 0 0 0 0 0 0 0 0 0

922 9 PTA_float 0 2105344 9 PTA_float 9 PTA_float 0 0 923 0 0 0 0 0 0 0 0 0 0

923 23 PointerToArray< float > 0 2048 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

924 11 PTA_float * 0 8576 11 PTA_float * 11 PTA_float * 0 0 922 0 0 0 0 0 0 0 0 0 0

925 12 Shader const 0 8832 12 Shader const 12 Shader const 0 0 926 0 0 0 0 0 0 0 0 0 0

926 6 Shader 0 2048 6 Shader 6 Shader 0 0 0 0 0 0 0 0 0 0 0 0 8
/**

 */

927 18 ShaderSpec const * 0 8576 18 ShaderSpec const * 18 ShaderSpec const * 0 0 928 0 0 0 0 0 0 0 0 0 0

928 16 ShaderSpec const 0 8832 16 ShaderSpec const 16 ShaderSpec const 0 0 741 0 0 0 0 0 0 0 0 0 0

929 14 Shader const * 0 8576 14 Shader const * 14 Shader const * 0 0 925 0 0 0 0 0 0 0 0 0 0

930 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 931 0 0 0 0 0 0 0 0 0 0

931 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 748 0 0 0 0 0 0 0 0 0 0

932 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 748 0 0 0 0 0 0 0 0 0 0

933 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 749 0 0 0 0 0 0 0 0 0 0

934 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 935 0 0 0 0 0 0 0 0 0 0

935 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 750 0 0 0 0 0 0 0 0 0 0

936 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 750 0 0 0 0 0 0 0 0 0 0

937 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 938 0 0 0 0 0 0 0 0 0 0

938 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 751 0 0 0 0 0 0 0 0 0 0

939 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 751 0 0 0 0 0 0 0 0 0 0

940 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 941 0 0 0 0 0 0 0 0 0 0

941 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 752 0 0 0 0 0 0 0 0 0 0

942 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 752 0 0 0 0 0 0 0 0 0 0

943 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 944 0 0 0 0 0 0 0 0 0 0

944 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 754 0 0 0 0 0 0 0 0 0 0

945 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 754 0 0 0 0 0 0 0 0 0 0

946 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 756 0 0 0 0 0 0 0 0 0 0

947 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 757 0 0 0 0 0 0 0 0 0 0

948 18 UnlitGenericSpec * 0 8576 18 UnlitGenericSpec * 18 UnlitGenericSpec * 0 0 758 0 0 0 0 0 0 0 0 0 0

949 16 UnlitNoMatSpec * 0 8576 16 UnlitNoMatSpec * 16 UnlitNoMatSpec * 0 0 759 0 0 0 0 0 0 0 0 0 0

950 15 CSMRenderSpec * 0 8576 15 CSMRenderSpec * 15 CSMRenderSpec * 0 0 760 0 0 0 0 0 0 0 0 0 0

951 12 SkyBoxSpec * 0 8576 12 SkyBoxSpec * 12 SkyBoxSpec * 0 0 761 0 0 0 0 0 0 0 0 0 0

952 18 RenderEffect const 0 8832 18 RenderEffect const 18 RenderEffect const 0 0 763 0 0 0 0 0 0 0 0 0 0

953 20 RenderEffect const * 0 8576 20 RenderEffect const * 20 RenderEffect const * 0 0 952 0 0 0 0 0 0 0 0 0 0

954 22 Audio3DManager const * 0 8576 22 Audio3DManager const * 22 Audio3DManager const * 0 0 955 0 0 0 0 0 0 0 0 0 0

955 20 Audio3DManager const 0 8832 20 Audio3DManager const 20 Audio3DManager const 0 0 764 0 0 0 0 0 0 0 0 0 0

956 16 Audio3DManager * 0 8576 16 Audio3DManager * 16 Audio3DManager * 0 0 764 0 0 0 0 0 0 0 0 0 0

957 14 AudioManager * 0 8576 14 AudioManager * 14 AudioManager * 0 0 958 0 0 0 0 0 0 0 0 0 0

958 12 AudioManager 0 2048 12 AudioManager 12 AudioManager 0 0 0 0 0 0 0 0 0 0 0 0 0

959 12 AudioSound * 0 8576 12 AudioSound * 12 AudioSound * 0 0 960 0 0 0 0 0 0 0 0 0 0

960 10 AudioSound 0 2048 10 AudioSound 10 AudioSound 0 0 0 0 0 0 0 0 0 0 0 0 0

961 8 CIOLib * 0 8576 8 CIOLib * 8 CIOLib * 0 0 765 0 0 0 0 0 0 0 0 0 0

962 14 CIOLib const * 0 8576 14 CIOLib const * 14 CIOLib const * 0 0 963 0 0 0 0 0 0 0 0 0 0

963 12 CIOLib const 0 8832 12 CIOLib const 12 CIOLib const 0 0 765 0 0 0 0 0 0 0 0 0 0

964 19 DecalModulateSpec * 0 8576 19 DecalModulateSpec * 19 DecalModulateSpec * 0 0 766 0 0 0 0 0 0 0 0 0 0

965 16 GeomNode const * 0 8576 16 GeomNode const * 16 GeomNode const * 0 0 966 0 0 0 0 0 0 0 0 0 0

966 14 GeomNode const 0 8832 14 GeomNode const 14 GeomNode const 0 0 768 0 0 0 0 0 0 0 0 0 0

967 10 GlowNode * 0 8576 10 GlowNode * 10 GlowNode * 0 0 767 0 0 0 0 0 0 0 0 0 0

968 16 GlowNode const * 0 8576 16 GlowNode const * 16 GlowNode const * 0 0 969 0 0 0 0 0 0 0 0 0 0

969 14 GlowNode const 0 8832 14 GlowNode const 14 GlowNode const 0 0 767 0 0 0 0 0 0 0 0 0 0

970 19 PostProcessEffect * 0 8576 19 PostProcessEffect * 19 PostProcessEffect * 0 0 769 0 0 0 0 0 0 0 0 0 0

971 17 PostProcessPass * 0 8576 17 PostProcessPass * 17 PostProcessPass * 0 0 771 0 0 0 0 0 0 0 0 0 0

972 16 GraphicsOutput * 0 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 973 0 0 0 0 0 0 0 0 0 0

973 14 GraphicsOutput 0 2048 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 0 0 0 0 0 0 0 0 727
/**
 * This is a base class for the various different classes that represent the
 * result of a frame of rendering.  The most common kind of GraphicsOutput is
 * a GraphicsWindow, which is a real-time window on the desktop, but another
 * example is GraphicsBuffer, which is an offscreen buffer.
 *
 * The actual rendering, and anything associated with the graphics context
 * itself, is managed by the associated GraphicsStateGuardian (which might
 * output to multiple GraphicsOutput objects).
 *
 * GraphicsOutputs are not actually writable to bam files, of course, but they
 * may be passed as event parameters, so they inherit from
 * TypedWritableReferenceCount instead of TypedReferenceCount for that
 * convenience.
 */

974 13 PostProcess * 0 8576 13 PostProcess * 13 PostProcess * 0 0 773 0 0 0 0 0 0 0 0 0 0

975 29 FrameBufferProperties const * 0 8576 29 FrameBufferProperties const * 29 FrameBufferProperties const * 0 0 976 0 0 0 0 0 0 0 0 0 0

976 27 FrameBufferProperties const 0 8832 27 FrameBufferProperties const 27 FrameBufferProperties const 0 0 977 0 0 0 0 0 0 0 0 0 0

977 21 FrameBufferProperties 0 2048 21 FrameBufferProperties 21 FrameBufferProperties 0 0 0 0 0 0 0 0 0 0 0 0 132
/**
 * A container for the various kinds of properties we might ask to have on a
 * graphics frameBuffer before we create a GSG.
 */

978 17 LVector2i const * 0 8576 17 LVector2i const * 17 LVector2i const * 0 0 979 0 0 0 0 0 0 0 0 0 0

979 15 LVector2i const 0 8832 15 LVector2i const 15 LVector2i const 0 0 980 0 0 0 0 0 0 0 0 0 0

980 9 LVector2i 0 2048 9 LVector2i 9 LVector2i 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

981 23 PostProcessPass const * 0 8576 23 PostProcessPass const * 23 PostProcessPass const * 0 0 982 0 0 0 0 0 0 0 0 0 0

982 21 PostProcessPass const 0 8832 21 PostProcessPass const 21 PostProcessPass const 0 0 771 0 0 0 0 0 0 0 0 0 0

983 11 LVector2i * 0 8576 11 LVector2i * 11 LVector2i * 0 0 980 0 0 0 0 0 0 0 0 0 0

984 23 FrameBufferProperties * 0 8576 23 FrameBufferProperties * 23 FrameBufferProperties * 0 0 977 0 0 0 0 0 0 0 0 0 0

985 22 PostProcessScenePass * 0 8576 22 PostProcessScenePass * 22 PostProcessScenePass * 0 0 772 0 0 0 0 0 0 0 0 0 0

986 28 PostProcessScenePass const * 0 8576 28 PostProcessScenePass const * 28 PostProcessScenePass const * 0 0 987 0 0 0 0 0 0 0 0 0 0

987 26 PostProcessScenePass const 0 8832 26 PostProcessScenePass const 26 PostProcessScenePass const 0 0 772 0 0 0 0 0 0 0 0 0 0

988 19 RenderState const * 0 8576 19 RenderState const * 19 RenderState const * 0 0 989 0 0 0 0 0 0 0 0 0 0

989 17 RenderState const 0 8832 17 RenderState const 17 RenderState const 0 0 990 0 0 0 0 0 0 0 0 0 0

990 11 RenderState 0 2048 11 RenderState 11 RenderState 0 0 0 0 0 0 0 0 0 0 0 0 340
/**
 * This represents a unique collection of RenderAttrib objects that correspond
 * to a particular renderable state.
 *
 * You should not attempt to create or modify a RenderState object directly.
 * Instead, call one of the make() functions to create one for you.  And
 * instead of modifying a RenderState object, create a new one.
 */

991 19 PostProcess const * 0 8576 19 PostProcess const * 19 PostProcess const * 0 0 992 0 0 0 0 0 0 0 0 0 0

992 17 PostProcess const 0 8832 17 PostProcess const 17 PostProcess const 0 0 773 0 0 0 0 0 0 0 0 0 0

993 13 DisplayRegion 0 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 399
/**
 * A rectangular subregion within a window for rendering into.  Typically,
 * there is one DisplayRegion that covers the whole window, but you may also
 * create smaller DisplayRegions for having different regions within the
 * window that represent different scenes.  You may also stack up
 * DisplayRegions like panes of glass, usually for layering 2-d interfaces on
 * top of a 3-d scene.
 */

994 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 993 0 0 0 0 0 0 0 0 0 0

995 16 DrawableRegion * 0 8576 16 DrawableRegion * 16 DrawableRegion * 0 0 996 0 0 0 0 0 0 0 0 0 0

996 14 DrawableRegion 0 2048 14 DrawableRegion 14 DrawableRegion 0 0 0 0 0 0 0 0 0 0 0 0 389
/**
 * This is a base class for GraphicsWindow (actually, GraphicsOutput) and
 * DisplayRegion, both of which are conceptually rectangular regions into
 * which drawing commands may be issued.  Sometimes you want to deal with a
 * single display region, and sometimes you want to deal with the whole window
 * at once, particularly for issuing clear commands and capturing screenshots.
 */

997 15 HDRPass const * 0 8576 15 HDRPass const * 15 HDRPass const * 0 0 998 0 0 0 0 0 0 0 0 0 0

998 13 HDRPass const 0 8832 13 HDRPass const 13 HDRPass const 0 0 774 0 0 0 0 0 0 0 0 0 0

999 9 HDRPass * 0 8576 9 HDRPass * 9 HDRPass * 0 0 774 0 0 0 0 0 0 0 0 0 0

1000 11 HDREffect * 0 8576 11 HDREffect * 11 HDREffect * 0 0 775 0 0 0 0 0 0 0 0 0 0

1001 17 HDREffect const * 0 8576 17 HDREffect const * 17 HDREffect const * 0 0 1002 0 0 0 0 0 0 0 0 0 0

1002 15 HDREffect const 0 8832 15 HDREffect const 15 HDREffect const 0 0 775 0 0 0 0 0 0 0 0 0 0

1003 13 BloomEffect * 0 8576 13 BloomEffect * 13 BloomEffect * 0 0 776 0 0 0 0 0 0 0 0 0 0

0
2
1004 10 class_slot 0 2 718 386 0 0 0 0 0 0 0 29 BSPMaterialAttrib::class_slot 0

1005 10 class_slot 0 2 718 477 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

0
