1552080525
3 3
3 bsp 4 t5GT 3 bsp 
223
213 3 get 0 4 436 18 TextureStages::get 0 2 3 4 0
159
static TextureStage *TextureStages::get(std::string const &name);
static TextureStage *TextureStages::get(std::string const &name, std::string const &uv_name);

214 15 get_basetexture 0 4 436 30 TextureStages::get_basetexture 0 1 5 0
58
static TextureStage *TextureStages::get_basetexture(void);

215 12 get_lightmap 0 4 436 27 TextureStages::get_lightmap 0 1 6 0
55
static TextureStage *TextureStages::get_lightmap(void);

216 19 get_bumped_lightmap 0 4 436 34 TextureStages::get_bumped_lightmap 0 1 7 0
62
static TextureStage *TextureStages::get_bumped_lightmap(void);

217 13 get_spheremap 0 4 436 28 TextureStages::get_spheremap 0 1 8 0
56
static TextureStage *TextureStages::get_spheremap(void);

218 11 get_cubemap 0 4 436 26 TextureStages::get_cubemap 0 1 9 0
54
static TextureStage *TextureStages::get_cubemap(void);

219 13 get_normalmap 0 4 436 28 TextureStages::get_normalmap 0 1 10 0
56
static TextureStage *TextureStages::get_normalmap(void);

220 13 get_heightmap 0 4 436 28 TextureStages::get_heightmap 0 1 11 0
56
static TextureStage *TextureStages::get_heightmap(void);

221 12 get_glossmap 0 4 436 27 TextureStages::get_glossmap 0 1 12 0
55
static TextureStage *TextureStages::get_glossmap(void);

222 11 get_glowmap 0 4 436 26 TextureStages::get_glowmap 0 1 13 0
54
static TextureStage *TextureStages::get_glowmap(void);

223 13 TextureStages 0 4 436 28 TextureStages::TextureStages 0 2 1 2 0
122
inline TextureStages::TextureStages(void) = default;
inline TextureStages::TextureStages(TextureStages const &) = default;

224 14 ~TextureStages 0 4 436 29 TextureStages::~TextureStages 0 0 0
36
TextureStages::~TextureStages(void);

225 11 BSPMaterial 0 4 437 24 BSPMaterial::BSPMaterial 0 2 14 15 0
137
inline explicit BSPMaterial::BSPMaterial(std::string const &name = "material");
inline BSPMaterial::BSPMaterial(BSPMaterial const &copy);

226 10 operator = 0 4 437 23 BSPMaterial::operator = 0 1 16 0
61
inline void BSPMaterial::operator =(BSPMaterial const &copy);

227 12 set_keyvalue 0 4 437 25 BSPMaterial::set_keyvalue 0 1 17 0
88
inline void BSPMaterial::set_keyvalue(std::string const &key, std::string const &value);

228 12 get_keyvalue 0 4 437 25 BSPMaterial::get_keyvalue 0 1 18 0
75
inline std::string BSPMaterial::get_keyvalue(std::string const &key) const;

229 10 set_shader 0 4 437 23 BSPMaterial::set_shader 0 1 19 0
68
inline void BSPMaterial::set_shader(std::string const &shader_name);

230 10 get_shader 0 4 437 23 BSPMaterial::get_shader 0 1 20 0
55
inline std::string BSPMaterial::get_shader(void) const;

231 8 get_file 0 4 437 21 BSPMaterial::get_file 0 1 21 0
50
inline Filename BSPMaterial::get_file(void) const;

232 12 has_keyvalue 0 4 437 25 BSPMaterial::has_keyvalue 0 1 22 0
68
inline bool BSPMaterial::has_keyvalue(std::string const &key) const;

233 15 has_env_cubemap 0 4 437 28 BSPMaterial::has_env_cubemap 0 1 23 0
53
inline bool BSPMaterial::has_env_cubemap(void) const;

234 16 has_transparency 0 4 437 29 BSPMaterial::has_transparency 0 1 24 0
54
inline bool BSPMaterial::has_transparency(void) const;

235 16 get_surface_prop 0 4 437 29 BSPMaterial::get_surface_prop 0 1 25 0
61
inline std::string BSPMaterial::get_surface_prop(void) const;

236 12 get_contents 0 4 437 25 BSPMaterial::get_contents 0 1 26 0
57
inline std::string BSPMaterial::get_contents(void) const;

237 13 get_from_file 0 4 437 26 BSPMaterial::get_from_file 0 1 27 0
75
static BSPMaterial const *BSPMaterial::get_from_file(Filename const &file);

238 14 get_class_type 0 4 437 27 BSPMaterial::get_class_type 0 1 28 0
52
static TypeHandle BSPMaterial::get_class_type(void);

239 12 ~BSPMaterial 0 4 437 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

240 4 make 0 4 439 23 BSPMaterialAttrib::make 0 1 29 0
86
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make(BSPMaterial const *mat);

241 20 make_override_shader 0 4 439 39 BSPMaterialAttrib::make_override_shader 0 1 30 0
102
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_override_shader(BSPMaterial const *mat);

242 12 make_default 0 4 439 31 BSPMaterialAttrib::make_default 0 1 31 0
76
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_default(void);

243 19 get_override_shader 0 4 439 38 BSPMaterialAttrib::get_override_shader 0 1 32 0
70
inline std::string BSPMaterialAttrib::get_override_shader(void) const;

244 19 has_override_shader 0 4 439 38 BSPMaterialAttrib::has_override_shader 0 1 33 0
63
inline bool BSPMaterialAttrib::has_override_shader(void) const;

245 12 get_material 0 4 439 31 BSPMaterialAttrib::get_material 0 1 34 0
70
inline BSPMaterial const *BSPMaterialAttrib::get_material(void) const;

246 14 get_class_slot 0 4 439 33 BSPMaterialAttrib::get_class_slot 0 1 35 0
51
static int BSPMaterialAttrib::get_class_slot(void);

247 14 get_class_type 0 4 439 33 BSPMaterialAttrib::get_class_type 0 1 36 0
58
static TypeHandle BSPMaterialAttrib::get_class_type(void);

248 18 ~BSPMaterialAttrib 0 4 439 37 BSPMaterialAttrib::~BSPMaterialAttrib 0 0 0
44
BSPMaterialAttrib::~BSPMaterialAttrib(void);

249 14 get_class_type 0 4 442 27 CBaseEntity::get_class_type 0 1 39 0
52
static TypeHandle CBaseEntity::get_class_type(void);

250 11 CBaseEntity 0 4 442 24 CBaseEntity::CBaseEntity 0 2 37 38 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

251 10 get_entnum 0 4 442 23 CBaseEntity::get_entnum 0 1 40 0
40
int CBaseEntity::get_entnum(void) const;

252 10 get_loader 0 4 442 23 CBaseEntity::get_loader 0 1 41 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

253 12 ~CBaseEntity 0 4 442 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

254 14 get_class_type 0 4 443 28 CPointEntity::get_class_type 0 1 44 0
53
static TypeHandle CPointEntity::get_class_type(void);

255 12 CPointEntity 0 4 443 26 CPointEntity::CPointEntity 0 2 42 43 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

256 10 get_origin 0 4 443 24 CPointEntity::get_origin 0 1 45 0
45
LPoint3 CPointEntity::get_origin(void) const;

257 10 get_angles 0 4 443 24 CPointEntity::get_angles 0 1 46 0
46
LVector3 CPointEntity::get_angles(void) const;

258 13 ~CPointEntity 0 4 443 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

259 14 get_class_type 0 4 444 29 CBoundsEntity::get_class_type 0 1 49 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

260 13 CBoundsEntity 0 4 444 28 CBoundsEntity::CBoundsEntity 0 2 47 48 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

261 10 get_bounds 0 4 444 25 CBoundsEntity::get_bounds 0 1 50 0
51
BoundingBox *CBoundsEntity::get_bounds(void) const;

262 9 is_inside 0 4 444 24 CBoundsEntity::is_inside 0 1 51 0
63
inline bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

263 13 fillin_bounds 0 4 444 28 CBoundsEntity::fillin_bounds 0 1 52 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

264 14 ~CBoundsEntity 0 4 444 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

265 14 get_class_type 0 4 445 28 CBrushEntity::get_class_type 0 1 55 0
53
static TypeHandle CBrushEntity::get_class_type(void);

266 12 CBrushEntity 0 4 445 26 CBrushEntity::CBrushEntity 0 2 53 54 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

267 12 get_modelnum 0 4 445 26 CBrushEntity::get_modelnum 0 1 56 0
43
int CBrushEntity::get_modelnum(void) const;

268 12 get_model_np 0 4 445 26 CBrushEntity::get_model_np 0 1 57 0
48
NodePath CBrushEntity::get_model_np(void) const;

269 16 get_model_bounds 0 4 445 30 CBrushEntity::get_model_bounds 0 1 58 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

270 13 ~CBrushEntity 0 4 445 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

271 9 get_width 0 4 446 21 PackResult::get_width 0 1 60 0
45
inline int PackResult::get_width(void) const;

272 10 get_height 0 4 446 22 PackResult::get_height 0 1 61 0
46
inline int PackResult::get_height(void) const;

273 15 get_unused_area 0 4 446 27 PackResult::get_unused_area 0 1 62 0
51
inline int PackResult::get_unused_area(void) const;

274 10 PackResult 0 4 446 22 PackResult::PackResult 0 1 59 0
60
inline PackResult::PackResult(PackResult const &) = default;

275 11 ~PackResult 0 4 446 23 PackResult::~PackResult 0 0 0
30
PackResult::~PackResult(void);

276 5 get_x 0 4 447 22 TextureLocation::get_x 0 1 64 0
46
inline int TextureLocation::get_x(void) const;

277 5 get_y 0 4 447 22 TextureLocation::get_y 0 1 65 0
46
inline int TextureLocation::get_y(void) const;

278 9 get_width 0 4 447 26 TextureLocation::get_width 0 1 66 0
50
inline int TextureLocation::get_width(void) const;

279 10 get_height 0 4 447 27 TextureLocation::get_height 0 1 67 0
51
inline int TextureLocation::get_height(void) const;

280 11 get_rotated 0 4 447 28 TextureLocation::get_rotated 0 1 68 0
53
inline bool TextureLocation::get_rotated(void) const;

281 15 TextureLocation 0 4 447 32 TextureLocation::TextureLocation 0 1 63 0
75
inline TextureLocation::TextureLocation(TextureLocation const &) = default;

282 16 ~TextureLocation 0 4 447 33 TextureLocation::~TextureLocation 0 0 0
40
TextureLocation::~TextureLocation(void);

283 15 getTextureCount 0 6 448 30 TexturePacker::getTextureCount 0 1 69 0
53
virtual int TexturePacker::getTextureCount(void) = 0;

284 15 setTextureCount 0 6 448 30 TexturePacker::setTextureCount 0 1 70 35
// number of textures to consider..
60
virtual void TexturePacker::setTextureCount(int tcount) = 0;

285 10 addTexture 0 6 448 25 TexturePacker::addTexture 0 1 71 21
// add textures 0 - n
61
virtual void TexturePacker::addTexture(int wid, int hit) = 0;

286 15 wouldTextureFit 0 6 448 30 TexturePacker::wouldTextureFit 0 1 72 0
135
virtual bool TexturePacker::wouldTextureFit(int wid, int hit, bool forcePowerOfTwo, bool onePixelBorder, int max_wid, int max_hit) = 0;

287 13 addNewTexture 0 6 448 28 TexturePacker::addNewTexture 0 1 73 0
64
virtual void TexturePacker::addNewTexture(int wid, int hit) = 0;

288 12 packTextures 0 6 448 27 TexturePacker::packTextures 0 1 74 74
// pack the textures, the return code is the amount of wasted/unused area.
94
virtual PackResult TexturePacker::packTextures(bool forcePowerOfTwo, bool onePixelBorder) = 0;

289 18 getTextureLocation 0 6 448 33 TexturePacker::getTextureLocation 0 1 75 58
// returns true if the texture has been rotated 90 degrees
73
virtual TextureLocation TexturePacker::getTextureLocation(int index) = 0;

290 19 createTexturePacker 0 4 448 34 TexturePacker::createTexturePacker 0 1 76 0
63
static TexturePacker *TexturePacker::createTexturePacker(void);

291 20 releaseTexturePacker 0 4 448 35 TexturePacker::releaseTexturePacker 0 1 77 0
67
static void TexturePacker::releaseTexturePacker(TexturePacker *tp);

292 14 ~TexturePacker 0 4 448 29 TexturePacker::~TexturePacker 0 0 0
36
TexturePacker::~TexturePacker(void);

293 4 make 0 4 449 19 BSPFaceAttrib::make 0 1 78 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

294 12 make_default 0 4 449 27 BSPFaceAttrib::make_default 0 1 79 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

295 15 make_ignore_pvs 0 4 449 30 BSPFaceAttrib::make_ignore_pvs 0 1 80 0
75
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_ignore_pvs(void);

296 12 get_material 0 4 449 27 BSPFaceAttrib::get_material 0 1 81 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

297 13 get_face_type 0 4 449 28 BSPFaceAttrib::get_face_type 0 1 82 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

298 14 get_ignore_pvs 0 4 449 29 BSPFaceAttrib::get_ignore_pvs 0 1 83 0
54
inline bool BSPFaceAttrib::get_ignore_pvs(void) const;

299 14 get_class_slot 0 4 449 29 BSPFaceAttrib::get_class_slot 0 1 84 0
47
static int BSPFaceAttrib::get_class_slot(void);

300 14 get_class_type 0 4 449 29 BSPFaceAttrib::get_class_type 0 1 85 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

301 14 ~BSPFaceAttrib 0 4 449 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

302 9 BSPLoader 0 4 451 20 BSPLoader::BSPLoader 0 1 86 0
27
BSPLoader::BSPLoader(void);

303 4 read 0 4 451 15 BSPLoader::read 0 1 87 0
43
bool BSPLoader::read(Filename const &file);

304 16 do_optimizations 0 4 451 27 BSPLoader::do_optimizations 0 1 88 0
39
void BSPLoader::do_optimizations(void);

305 9 set_gamma 0 4 451 20 BSPLoader::set_gamma 0 1 89 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

306 9 get_gamma 0 4 451 20 BSPLoader::get_gamma 0 1 90 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

307 7 set_win 0 4 451 18 BSPLoader::set_win 0 1 91 0
45
void BSPLoader::set_win(GraphicsWindow *win);

308 10 set_camera 0 4 451 21 BSPLoader::set_camera 0 1 92 0
51
void BSPLoader::set_camera(NodePath const &camera);

309 10 set_render 0 4 451 21 BSPLoader::set_render 0 1 93 0
51
void BSPLoader::set_render(NodePath const &render);

310 20 set_shader_generator 0 4 451 31 BSPLoader::set_shader_generator 0 1 94 0
65
void BSPLoader::set_shader_generator(PSSMShaderGenerator *shgen);

311 19 set_want_visibility 0 4 451 30 BSPLoader::set_want_visibility 0 1 95 0
47
void BSPLoader::set_want_visibility(bool flag);

312 18 set_want_lightmaps 0 4 451 29 BSPLoader::set_want_lightmaps 0 1 96 0
46
void BSPLoader::set_want_lightmaps(bool flag);

313 16 set_physics_type 0 4 451 27 BSPLoader::set_physics_type 0 1 97 0
43
void BSPLoader::set_physics_type(int type);

314 19 set_visualize_leafs 0 4 451 30 BSPLoader::set_visualize_leafs 0 1 98 0
47
void BSPLoader::set_visualize_leafs(bool flag);

315 18 set_materials_file 0 4 451 29 BSPLoader::set_materials_file 0 1 99 0
57
void BSPLoader::set_materials_file(Filename const &file);

316 13 set_wireframe 0 4 451 24 BSPLoader::set_wireframe 0 1 100 0
41
void BSPLoader::set_wireframe(bool flag);

317 13 get_wireframe 0 4 451 24 BSPLoader::get_wireframe 0 1 101 0
49
inline bool BSPLoader::get_wireframe(void) const;

318 10 get_camera 0 4 451 21 BSPLoader::get_camera 0 1 102 0
50
inline NodePath BSPLoader::get_camera(void) const;

319 11 trace_decal 0 4 451 22 BSPLoader::trace_decal 0 1 103 0
158
inline NodePath BSPLoader::trace_decal(std::string const &decal_material, LPoint2 const &decal_scale, float rotate, LPoint3 const &start, LPoint3 const &end);

320 14 build_cubemaps 0 4 451 25 BSPLoader::build_cubemaps 0 1 104 0
37
void BSPLoader::build_cubemaps(void);

321 16 set_want_shadows 0 4 451 27 BSPLoader::set_want_shadows 0 1 105 0
44
void BSPLoader::set_want_shadows(bool flag);

322 14 set_shadow_dir 0 4 451 25 BSPLoader::set_shadow_dir 0 1 106 0
52
void BSPLoader::set_shadow_dir(LVector3 const &dir);

323 16 set_shadow_color 0 4 451 27 BSPLoader::set_shadow_color 0 1 107 0
54
void BSPLoader::set_shadow_color(LColor const &color);

324 16 extract_modelnum 0 4 451 27 BSPLoader::extract_modelnum 0 1 108 0
44
int BSPLoader::extract_modelnum(int entnum);

325 16 get_model_bounds 0 4 451 27 BSPLoader::get_model_bounds 0 1 109 0
77
void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

326 28 set_server_entity_dispatcher 0 4 451 39 BSPLoader::set_server_entity_dispatcher 0 1 110 0
67
void BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

327 27 link_server_entity_to_class 0 4 451 38 BSPLoader::link_server_entity_to_class 0 1 111 0
89
void BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

328 6 set_ai 0 4 451 17 BSPLoader::set_ai 0 1 112 0
32
void BSPLoader::set_ai(bool ai);

329 5 is_ai 0 4 451 16 BSPLoader::is_ai 0 1 113 0
41
inline bool BSPLoader::is_ai(void) const;

330 10 trace_line 0 4 451 21 BSPLoader::trace_line 0 1 114 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

331 9 clip_line 0 4 451 20 BSPLoader::clip_line 0 1 115 0
71
LPoint3 BSPLoader::clip_line(LPoint3 const &start, LPoint3 const &end);

332 20 link_entity_to_class 0 4 451 31 BSPLoader::link_entity_to_class 0 1 116 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

333 28 get_py_entity_by_target_name 0 4 451 39 BSPLoader::get_py_entity_by_target_name 0 1 117 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

334 17 find_all_entities 0 4 451 28 BSPLoader::find_all_entities 0 1 118 0
69
PyObject *BSPLoader::find_all_entities(std::string const &classname);

335 20 get_entity_keyvalues 0 4 451 31 BSPLoader::get_entity_keyvalues 0 1 119 0
71
void BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

336 18 link_cent_to_pyent 0 4 451 29 BSPLoader::link_cent_to_pyent 0 1 120 0
63
void BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

337 16 get_num_entities 0 4 451 27 BSPLoader::get_num_entities 0 1 121 0
51
inline int BSPLoader::get_num_entities(void) const;

338 16 get_entity_value 0 4 451 27 BSPLoader::get_entity_value 0 1 122 0
75
std::string BSPLoader::get_entity_value(int entnum, char const *key) const;

339 22 get_entity_value_float 0 4 451 33 BSPLoader::get_entity_value_float 0 1 123 0
75
float BSPLoader::get_entity_value_float(int entnum, char const *key) const;

340 20 get_entity_value_int 0 4 451 31 BSPLoader::get_entity_value_int 0 1 124 0
71
int BSPLoader::get_entity_value_int(int entnum, char const *key) const;

341 23 get_entity_value_vector 0 4 451 34 BSPLoader::get_entity_value_vector 0 1 125 0
79
LVector3 BSPLoader::get_entity_value_vector(int entnum, char const *key) const;

342 22 get_entity_value_color 0 4 451 33 BSPLoader::get_entity_value_color 0 1 126 0
95
LColor BSPLoader::get_entity_value_color(int entnum, char const *key, bool scale = true) const;

343 10 get_entity 0 4 451 21 BSPLoader::get_entity 0 1 127 0
49
NodePath BSPLoader::get_entity(int entnum) const;

344 9 get_model 0 4 451 20 BSPLoader::get_model 0 1 128 0
50
NodePath BSPLoader::get_model(int modelnum) const;

345 12 get_c_entity 0 4 451 23 BSPLoader::get_c_entity 0 1 129 0
61
CBaseEntity *BSPLoader::get_c_entity(int const entnum) const;

346 9 find_leaf 0 4 451 20 BSPLoader::find_leaf 0 2 130 131 0
98
inline int BSPLoader::find_leaf(NodePath const &np);
int BSPLoader::find_leaf(LPoint3 const &pos);

347 9 find_node 0 4 451 20 BSPLoader::find_node 0 1 132 0
45
int BSPLoader::find_node(LPoint3 const &pos);

348 18 is_cluster_visible 0 4 451 29 BSPLoader::is_cluster_visible 0 1 133 0
72
bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

349 15 pvs_bounds_test 0 4 451 26 BSPLoader::pvs_bounds_test 0 1 134 0
71
bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds);

350 15 make_net_bounds 0 4 451 26 BSPLoader::make_net_bounds 0 1 135 0
147
ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

351 16 has_active_level 0 4 451 27 BSPLoader::has_active_level 0 1 136 0
52
inline bool BSPLoader::has_active_level(void) const;

352 14 has_visibility 0 4 451 25 BSPLoader::has_visibility 0 1 137 0
50
inline bool BSPLoader::has_visibility(void) const;

353 7 cleanup 0 4 451 18 BSPLoader::cleanup 0 1 138 0
30
void BSPLoader::cleanup(void);

354 10 get_result 0 4 451 21 BSPLoader::get_result 0 1 139 0
50
inline NodePath BSPLoader::get_result(void) const;

355 14 get_global_ptr 0 4 451 25 BSPLoader::get_global_ptr 0 1 140 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

356 10 ~BSPLoader 0 4 451 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

357 14 get_class_type 0 4 453 32 BSPCullTraverser::get_class_type 0 1 143 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

358 16 BSPCullTraverser 0 4 453 34 BSPCullTraverser::BSPCullTraverser 0 2 141 142 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

359 17 ~BSPCullTraverser 0 4 453 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

360 14 get_class_type 0 4 455 25 BSPRender::get_class_type 0 1 146 0
50
static TypeHandle BSPRender::get_class_type(void);

361 9 BSPRender 0 4 455 20 BSPRender::BSPRender 0 2 144 145 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

362 10 ~BSPRender 0 4 455 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

363 14 get_class_type 0 4 457 23 BSPRoot::get_class_type 0 1 149 0
48
static TypeHandle BSPRoot::get_class_type(void);

364 7 BSPRoot 0 4 457 16 BSPRoot::BSPRoot 0 2 147 148 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

365 8 ~BSPRoot 0 4 457 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

366 14 get_class_type 0 4 458 23 BSPProp::get_class_type 0 1 152 0
48
static TypeHandle BSPProp::get_class_type(void);

367 7 BSPProp 0 4 458 16 BSPProp::BSPProp 0 2 150 151 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

368 8 ~BSPProp 0 4 458 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

369 14 get_class_type 0 4 460 24 BSPModel::get_class_type 0 1 155 0
49
static TypeHandle BSPModel::get_class_type(void);

370 8 BSPModel 0 4 460 18 BSPModel::BSPModel 0 2 153 154 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

371 9 ~BSPModel 0 4 460 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

372 15 add_permutation 0 4 462 35 ShaderPermutations::add_permutation 0 1 158 0
97
void ShaderPermutations::add_permutation(std::string const &key, std::string const &value = "1");

373 9 add_input 0 4 462 29 ShaderPermutations::add_input 0 1 159 0
82
void ShaderPermutations::add_input(ShaderInput const &inp, bool important = true);

374 8 add_flag 0 4 462 28 ShaderPermutations::add_flag 0 1 160 0
44
void ShaderPermutations::add_flag(int flag);

375 10 operator < 0 4 462 30 ShaderPermutations::operator < 0 1 161 0
75
bool ShaderPermutations::operator <(ShaderPermutations const &other) const;

376 18 ShaderPermutations 0 4 462 38 ShaderPermutations::ShaderPermutations 0 2 156 157 0
147
inline ShaderPermutations::ShaderPermutations(void) = default;
inline ShaderPermutations::ShaderPermutations(ShaderPermutations const &) = default;

377 19 ~ShaderPermutations 0 4 462 39 ShaderPermutations::~ShaderPermutations 0 0 0
46
ShaderPermutations::~ShaderPermutations(void);

378 24 upcast_to_ReferenceCount 0 12 463 36 ShaderSpec::upcast_to_ReferenceCount 0 1 164 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

379 22 downcast_to_ShaderSpec 0 12 464 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

380 17 upcast_to_Namable 0 12 463 29 ShaderSpec::upcast_to_Namable 0 1 165 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

381 22 downcast_to_ShaderSpec 0 12 465 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

382 17 read_shader_files 0 4 463 29 ShaderSpec::read_shader_files 0 1 162 0
117
void ShaderSpec::read_shader_files(Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file);

383 14 get_class_type 0 4 463 26 ShaderSpec::get_class_type 0 1 163 0
51
static TypeHandle ShaderSpec::get_class_type(void);

384 11 ~ShaderSpec 0 4 463 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

385 19 PSSMShaderGenerator 0 4 466 40 PSSMShaderGenerator::PSSMShaderGenerator 0 2 166 167 0
205
PSSMShaderGenerator::PSSMShaderGenerator(GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline PSSMShaderGenerator::PSSMShaderGenerator(PSSMShaderGenerator const &) = default;

386 13 set_sun_light 0 4 466 34 PSSMShaderGenerator::set_sun_light 0 1 168 0
60
void PSSMShaderGenerator::set_sun_light(NodePath const &np);

387 12 start_update 0 4 466 33 PSSMShaderGenerator::start_update 0 1 169 0
45
void PSSMShaderGenerator::start_update(void);

388 10 add_shader 0 4 466 31 PSSMShaderGenerator::add_shader 0 1 170 0
67
void PSSMShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

389 19 has_shadow_sunlight 0 4 466 40 PSSMShaderGenerator::has_shadow_sunlight 0 1 171 0
65
inline bool PSSMShaderGenerator::has_shadow_sunlight(void) const;

390 22 get_pssm_array_texture 0 4 466 43 PSSMShaderGenerator::get_pssm_array_texture 0 1 172 0
72
inline Texture *PSSMShaderGenerator::get_pssm_array_texture(void) const;

391 12 get_pssm_rig 0 4 466 33 PSSMShaderGenerator::get_pssm_rig 0 1 173 0
68
inline PSSMCameraRig *PSSMShaderGenerator::get_pssm_rig(void) const;

392 20 get_identity_cubemap 0 4 466 41 PSSMShaderGenerator::get_identity_cubemap 0 1 174 0
64
static Texture *PSSMShaderGenerator::get_identity_cubemap(void);

393 14 get_class_type 0 4 466 35 PSSMShaderGenerator::get_class_type 0 1 175 0
60
static TypeHandle PSSMShaderGenerator::get_class_type(void);

394 20 ~PSSMShaderGenerator 0 4 466 41 PSSMShaderGenerator::~PSSMShaderGenerator 0 0 0
48
PSSMShaderGenerator::~PSSMShaderGenerator(void);

395 20 VertexLitGenericSpec 0 4 468 42 VertexLitGenericSpec::VertexLitGenericSpec 0 1 176 0
49
VertexLitGenericSpec::VertexLitGenericSpec(void);

396 21 ~VertexLitGenericSpec 0 4 468 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

397 22 LightmappedGenericSpec 0 4 469 46 LightmappedGenericSpec::LightmappedGenericSpec 0 1 177 0
53
LightmappedGenericSpec::LightmappedGenericSpec(void);

398 23 ~LightmappedGenericSpec 0 4 469 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

399 16 UnlitGenericSpec 0 4 470 34 UnlitGenericSpec::UnlitGenericSpec 0 1 178 0
41
UnlitGenericSpec::UnlitGenericSpec(void);

400 17 ~UnlitGenericSpec 0 4 470 35 UnlitGenericSpec::~UnlitGenericSpec 0 0 0
42
UnlitGenericSpec::~UnlitGenericSpec(void);

401 14 UnlitNoMatSpec 0 4 471 30 UnlitNoMatSpec::UnlitNoMatSpec 0 1 179 0
37
UnlitNoMatSpec::UnlitNoMatSpec(void);

402 15 ~UnlitNoMatSpec 0 4 471 31 UnlitNoMatSpec::~UnlitNoMatSpec 0 0 0
38
UnlitNoMatSpec::~UnlitNoMatSpec(void);

403 13 CSMRenderSpec 0 4 472 28 CSMRenderSpec::CSMRenderSpec 0 1 180 0
35
CSMRenderSpec::CSMRenderSpec(void);

404 14 ~CSMRenderSpec 0 4 472 29 CSMRenderSpec::~CSMRenderSpec 0 0 0
36
CSMRenderSpec::~CSMRenderSpec(void);

405 10 initialize 0 4 473 20 RayTrace::initialize 0 1 183 0
39
static void RayTrace::initialize(void);

406 8 destruct 0 4 473 18 RayTrace::destruct 0 1 184 0
37
static void RayTrace::destruct(void);

407 8 RayTrace 0 4 473 18 RayTrace::RayTrace 0 2 181 182 0
97
inline RayTrace::RayTrace(void) = default;
inline RayTrace::RayTrace(RayTrace const &) = default;

408 9 ~RayTrace 0 4 473 19 RayTrace::~RayTrace 0 0 0
26
RayTrace::~RayTrace(void);

409 17 RayTraceHitResult 0 4 474 36 RayTraceHitResult::RayTraceHitResult 0 2 185 186 0
132
inline RayTraceHitResult::RayTraceHitResult(void);
inline RayTraceHitResult::RayTraceHitResult(RayTraceHitResult const &) = default;

410 7 has_hit 0 4 474 26 RayTraceHitResult::has_hit 0 1 187 0
51
inline bool RayTraceHitResult::has_hit(void) const;

411 14 get_hit_normal 0 4 474 33 RayTraceHitResult::get_hit_normal 0 1 188 0
62
inline LVector3 RayTraceHitResult::get_hit_normal(void) const;

412 6 get_uv 0 4 474 25 RayTraceHitResult::get_uv 0 1 189 0
54
inline LVector2 RayTraceHitResult::get_uv(void) const;

413 11 get_prim_id 0 4 474 30 RayTraceHitResult::get_prim_id 0 1 190 0
63
inline unsigned int RayTraceHitResult::get_prim_id(void) const;

414 11 get_geom_id 0 4 474 30 RayTraceHitResult::get_geom_id 0 1 191 0
63
inline unsigned int RayTraceHitResult::get_geom_id(void) const;

415 16 get_hit_fraction 0 4 474 35 RayTraceHitResult::get_hit_fraction 0 1 192 0
61
inline float RayTraceHitResult::get_hit_fraction(void) const;

416 18 ~RayTraceHitResult 0 4 474 37 RayTraceHitResult::~RayTraceHitResult 0 0 0
44
RayTraceHitResult::~RayTraceHitResult(void);

417 13 RayTraceScene 0 4 475 28 RayTraceScene::RayTraceScene 0 2 193 194 0
105
RayTraceScene::RayTraceScene(void);
inline RayTraceScene::RayTraceScene(RayTraceScene const &) = default;

418 12 add_geometry 0 4 475 27 RayTraceScene::add_geometry 0 1 195 0
57
void RayTraceScene::add_geometry(RayTraceGeometry *geom);

419 15 remove_geometry 0 4 475 30 RayTraceScene::remove_geometry 0 1 196 0
60
void RayTraceScene::remove_geometry(RayTraceGeometry *geom);

420 10 remove_all 0 4 475 25 RayTraceScene::remove_all 0 1 197 0
37
void RayTraceScene::remove_all(void);

421 10 trace_line 0 4 475 25 RayTraceScene::trace_line 0 1 198 0
116
inline RayTraceHitResult RayTraceScene::trace_line(LPoint3 const &start, LPoint3 const &end, BitMask32 const &mask);

422 9 trace_ray 0 4 475 24 RayTraceScene::trace_ray 0 1 199 0
132
RayTraceHitResult RayTraceScene::trace_ray(LPoint3 const &origin, LVector3 const &direction, float distance, BitMask32 const &mask);

423 17 set_build_quality 0 4 475 32 RayTraceScene::set_build_quality 0 1 200 0
51
void RayTraceScene::set_build_quality(int quality);

424 6 update 0 4 475 21 RayTraceScene::update 0 1 201 0
33
void RayTraceScene::update(void);

425 12 get_geometry 0 4 475 27 RayTraceScene::get_geometry 0 1 202 0
75
inline RayTraceGeometry *RayTraceScene::get_geometry(unsigned int geom_id);

426 14 get_class_type 0 4 477 32 RayTraceGeometry::get_class_type 0 1 203 0
57
static TypeHandle RayTraceGeometry::get_class_type(void);

427 8 set_mask 0 4 477 26 RayTraceGeometry::set_mask 0 2 204 205 0
114
inline void RayTraceGeometry::set_mask(BitMask32 const &mask);
void RayTraceGeometry::set_mask(unsigned int mask);

428 8 get_mask 0 4 477 26 RayTraceGeometry::get_mask 0 1 206 0
56
inline BitMask32 RayTraceGeometry::get_mask(void) const;

429 17 set_build_quality 0 4 477 35 RayTraceGeometry::set_build_quality 0 1 207 0
54
void RayTraceGeometry::set_build_quality(int quality);

430 5 build 0 6 477 23 RayTraceGeometry::build 0 1 208 0
47
virtual void RayTraceGeometry::build(void) = 0;

431 14 get_class_type 0 4 478 36 RayTraceTriangleMesh::get_class_type 0 1 210 0
61
static TypeHandle RayTraceTriangleMesh::get_class_type(void);

432 20 RayTraceTriangleMesh 0 4 478 42 RayTraceTriangleMesh::RayTraceTriangleMesh 0 1 209 0
73
RayTraceTriangleMesh::RayTraceTriangleMesh(std::string const &name = "");

433 12 add_triangle 0 4 478 34 RayTraceTriangleMesh::add_triangle 0 1 211 0
97
void RayTraceTriangleMesh::add_triangle(LPoint3 const &p1, LPoint3 const &p2, LPoint3 const &p3);

434 23 add_triangles_from_geom 0 4 478 45 RayTraceTriangleMesh::add_triangles_from_geom 0 1 212 0
105
void RayTraceTriangleMesh::add_triangles_from_geom(Geom const *geom, TransformState const *ts = nullptr);

435 21 ~RayTraceTriangleMesh 0 4 478 43 RayTraceTriangleMesh::~RayTraceTriangleMesh 0 0 0
50
RayTraceTriangleMesh::~RayTraceTriangleMesh(void);

212
1 0 0 7 12 479 224 0 0 0 
2 0 0 7 12 479 224 0 0 1 6 param0 0 480  
3 0 0 7 2 484 0 0 0 1 4 name 1 483  
4 0 0 7 2 484 0 0 0 2 4 name 1 483  7 uv_name 1 483  
5 0 0 7 3 484 0 0 0 0 
6 0 0 7 4 484 0 0 0 0 
7 0 0 7 5 484 0 0 0 0 
8 0 0 7 6 484 0 0 0 0 
9 0 0 7 7 484 0 0 0 0 
10 0 0 7 8 484 0 0 0 0 
11 0 0 7 9 484 0 0 0 0 
12 0 0 7 10 484 0 0 0 0 
13 0 0 7 11 484 0 0 0 0 
14 0 0 7 16 487 239 0 0 1 4 copy 1 485  
15 0 0 7 16 487 239 0 0 1 4 name 1 483  
16 0 0 7 17 487 239 0 0 2 4 this 3 487  4 copy 1 485  
17 0 0 4 18 488 0 0 0 3 4 this 3 487  3 key 1 483  5 value 1 483  
18 0 0 6 19 483 0 0 0 2 4 this 3 485  3 key 1 483  
19 0 0 4 20 488 0 0 0 2 4 this 3 487  11 shader_name 1 483  
20 0 0 6 21 483 0 0 0 1 4 this 3 485  
21 0 0 7 22 490 0 0 0 1 4 this 3 485  
22 0 0 6 23 491 0 0 0 2 4 this 3 485  3 key 1 483  
23 0 0 6 24 491 0 0 0 1 4 this 3 485  
24 0 0 6 25 491 0 0 0 1 4 this 3 485  
25 0 0 6 26 483 0 0 0 1 4 this 3 485  
26 0 0 6 27 483 0 0 0 1 4 this 3 485  
27 0 0 7 28 485 0 0 0 1 4 file 1 492  
28 0 0 7 29 495 0 0 0 0 
29 0 0 7 33 497 0 0 0 1 3 mat 1 485  
30 0 0 7 34 497 0 0 0 1 3 mat 1 485  
31 0 0 7 35 497 0 0 0 0 
32 0 0 6 36 483 0 0 0 1 4 this 3 498  
33 0 0 6 37 491 0 0 0 1 4 this 3 498  
34 0 0 7 38 485 0 0 0 1 4 this 3 498  
35 0 0 6 39 441 0 0 0 0 
36 0 0 7 42 495 0 0 0 0 
37 0 0 7 46 500 253 0 0 0 
38 0 0 7 46 500 253 0 0 1 6 param0 0 501  
39 0 0 7 45 495 0 0 0 0 
40 0 0 6 47 441 0 0 0 1 4 this 3 501  
41 0 0 6 48 503 0 0 0 1 4 this 3 501  
42 0 0 7 52 504 258 0 0 0 
43 0 0 7 52 504 258 0 0 1 6 param0 0 505  
44 0 0 7 51 495 0 0 0 0 
45 0 0 7 53 509 0 0 0 1 4 this 3 505  
46 0 0 7 54 512 0 0 0 1 4 this 3 505  
47 0 0 7 58 513 264 0 0 0 
48 0 0 7 58 513 264 0 0 1 6 param0 0 514  
49 0 0 7 57 495 0 0 0 0 
50 0 0 7 59 517 0 0 0 1 4 this 3 514  
51 0 0 6 60 491 0 0 0 2 4 this 3 514  3 pos 1 518  
52 0 0 4 61 488 0 0 0 3 4 this 3 513  4 mins 1 509  4 maxs 1 509  
53 0 0 7 65 520 270 0 0 0 
54 0 0 7 65 520 270 0 0 1 6 param0 0 521  
55 0 0 7 64 495 0 0 0 0 
56 0 0 6 66 441 0 0 0 1 4 this 3 521  
57 0 0 7 67 524 0 0 0 1 4 this 3 521  
58 0 0 4 68 488 0 0 0 3 4 this 3 520  4 mins 1 509  4 maxs 1 509  
59 0 0 7 74 527 275 0 0 1 6 param0 0 525  
60 0 0 6 71 441 0 0 0 1 4 this 3 525  
61 0 0 6 72 441 0 0 0 1 4 this 3 525  
62 0 0 6 73 441 0 0 0 1 4 this 3 525  
63 0 0 7 82 530 282 0 0 1 6 param0 0 528  
64 0 0 6 77 441 0 0 0 1 4 this 3 528  
65 0 0 6 78 441 0 0 0 1 4 this 3 528  
66 0 0 6 79 441 0 0 0 1 4 this 3 528  
67 0 0 6 80 441 0 0 0 1 4 this 3 528  
68 0 0 6 81 491 0 0 0 1 4 this 3 528  
69 0 0 6 85 441 0 0 0 1 4 this 3 531  
70 0 0 4 86 488 0 0 35 // number of textures to consider.. 2 4 this 3 531  6 tcount 1 441  
71 0 0 4 87 488 0 0 21 // add textures 0 - n 3 4 this 3 531  3 wid 1 441  3 hit 1 441  
72 0 0 6 88 491 0 0 0 7 4 this 3 531  3 wid 1 441  3 hit 1 441  15 forcePowerOfTwo 1 491  14 onePixelBorder 1 491  7 max_wid 1 441  7 max_hit 1 441  
73 0 0 4 89 488 0 0 0 3 4 this 3 531  3 wid 1 441  3 hit 1 441  
74 0 0 7 90 527 275 0 74 // pack the textures, the return code is the amount of wasted/unused area. 3 4 this 3 531  15 forcePowerOfTwo 1 491  14 onePixelBorder 1 491  
75 0 0 7 91 530 282 0 58 // returns true if the texture has been rotated 90 degrees 2 4 this 3 531  5 index 1 441  
76 0 0 6 92 531 0 0 0 0 
77 0 0 4 93 488 0 0 0 1 2 tp 1 531  
78 0 0 7 97 497 0 0 0 2 13 face_material 1 483  9 face_type 1 441  
79 0 0 7 98 497 0 0 0 0 
80 0 0 7 99 497 0 0 0 0 
81 0 0 6 100 483 0 0 0 1 4 this 3 532  
82 0 0 6 101 441 0 0 0 1 4 this 3 532  
83 0 0 6 102 491 0 0 0 1 4 this 3 532  
84 0 0 6 103 441 0 0 0 0 
85 0 0 7 105 495 0 0 0 0 
86 0 0 7 108 503 356 0 0 0 
87 0 0 6 109 491 0 0 0 2 4 this 3 503  4 file 1 492  
88 0 0 4 110 488 0 0 0 1 4 this 3 503  
89 0 0 4 111 488 0 0 0 3 4 this 3 503  5 gamma 1 534  10 overbright 1 441  
90 0 0 6 112 534 0 0 0 1 4 this 3 536  
91 0 0 4 113 488 0 0 0 2 4 this 3 503  3 win 1 538  
92 0 0 4 114 488 0 0 0 2 4 this 3 503  6 camera 1 540  
93 0 0 4 115 488 0 0 0 2 4 this 3 503  6 render 1 540  
94 0 0 4 116 488 0 0 0 2 4 this 3 503  5 shgen 1 542  
95 0 0 4 117 488 0 0 0 2 4 this 3 503  4 flag 1 491  
96 0 0 4 118 488 0 0 0 2 4 this 3 503  4 flag 1 491  
97 0 0 4 119 488 0 0 0 2 4 this 3 503  4 type 1 441  
98 0 0 4 120 488 0 0 0 2 4 this 3 503  4 flag 1 491  
99 0 0 4 121 488 0 0 0 2 4 this 3 503  4 file 1 492  
100 0 0 4 122 488 0 0 0 2 4 this 3 503  4 flag 1 491  
101 0 0 6 123 491 0 0 0 1 4 this 3 536  
102 0 0 7 124 524 0 0 0 1 4 this 3 536  
103 0 0 7 125 524 0 0 0 6 4 this 3 503  14 decal_material 1 483  11 decal_scale 1 543  6 rotate 1 535  5 start 1 518  3 end 1 518  
104 0 0 4 126 488 0 0 0 1 4 this 3 503  
105 0 0 4 127 488 0 0 0 2 4 this 3 503  4 flag 1 491  
106 0 0 4 128 488 0 0 0 2 4 this 3 503  3 dir 1 547  
107 0 0 4 129 488 0 0 0 2 4 this 3 503  5 color 1 549  
108 0 0 6 130 441 0 0 0 2 4 this 3 503  6 entnum 1 441  
109 0 0 4 131 488 0 0 0 4 4 this 3 503  8 modelnum 1 441  4 mins 1 509  4 maxs 1 509  
110 0 0 4 132 488 0 0 0 2 4 this 3 503  10 dispatcher 1 554  
111 0 0 4 133 488 0 0 0 3 4 this 3 503  4 name 1 483  4 type 1 557  
112 0 0 4 134 488 0 0 0 2 4 this 3 503  2 ai 1 491  
113 0 0 6 135 491 0 0 0 1 4 this 3 536  
114 0 0 6 136 491 0 0 0 3 4 this 3 503  5 start 1 518  3 end 1 518  
115 0 0 7 137 509 0 0 0 3 4 this 3 503  5 start 1 518  3 end 1 518  
116 0 0 4 138 488 0 0 0 3 4 this 3 503  7 entname 1 483  4 type 1 557  
117 0 0 6 139 554 0 0 0 2 4 this 3 536  10 targetname 1 483  
118 0 0 6 140 554 0 0 0 2 4 this 3 503  9 classname 1 483  
119 0 0 4 141 488 0 0 0 3 4 this 3 503  4 list 1 554  6 entnum 1 560  
120 0 0 4 142 488 0 0 0 3 4 this 3 503  5 entum 1 441  5 pyent 1 554  
121 0 0 6 143 441 0 0 0 1 4 this 3 536  
122 0 0 6 144 483 0 0 0 3 4 this 3 536  6 entnum 1 441  3 key 1 483  
123 0 0 6 145 535 0 0 0 3 4 this 3 536  6 entnum 1 441  3 key 1 483  
124 0 0 6 146 441 0 0 0 3 4 this 3 536  6 entnum 1 441  3 key 1 483  
125 0 0 7 147 512 0 0 0 3 4 this 3 536  6 entnum 1 441  3 key 1 483  
126 0 0 7 148 561 0 0 0 4 4 this 3 536  6 entnum 1 441  3 key 1 483  5 scale 1 491  
127 0 0 7 149 524 0 0 0 2 4 this 3 536  6 entnum 1 441  
128 0 0 7 150 524 0 0 0 2 4 this 3 536  8 modelnum 1 441  
129 0 0 7 151 500 253 0 0 2 4 this 3 536  6 entnum 1 560  
130 0 0 6 152 441 0 0 0 2 4 this 3 503  3 pos 1 518  
131 0 0 6 152 441 0 0 0 2 4 this 3 503  2 np 1 540  
132 0 0 6 153 441 0 0 0 2 4 this 3 503  3 pos 1 518  
133 0 0 6 154 491 0 0 0 3 4 this 3 536  12 curr_cluster 1 441  7 cluster 1 441  
134 0 0 6 155 491 0 0 0 2 4 this 3 503  6 bounds 1 562  
135 0 0 7 156 562 0 0 0 3 4 this 3 503  13 net_transform 1 565  8 original 1 562  
136 0 0 6 157 491 0 0 0 1 4 this 3 536  
137 0 0 6 158 491 0 0 0 1 4 this 3 536  
138 0 0 4 159 488 0 0 0 1 4 this 3 503  
139 0 0 7 160 524 0 0 0 1 4 this 3 536  
140 0 0 6 161 503 0 0 0 0 
141 0 0 7 167 570 359 0 0 1 6 param0 0 568  
142 0 0 7 167 570 359 0 0 2 4 trav 1 571  6 loader 1 503  
143 0 0 7 166 495 0 0 0 0 
144 0 0 7 172 574 362 0 0 1 6 param0 0 572  
145 0 0 7 172 574 362 0 0 2 4 name 1 483  6 loader 1 503  
146 0 0 7 171 495 0 0 0 0 
147 0 0 7 176 577 365 0 0 1 6 param0 0 575  
148 0 0 7 176 577 365 0 0 1 4 name 1 483  
149 0 0 7 175 495 0 0 0 0 
150 0 0 7 181 580 368 0 0 1 6 param0 0 578  
151 0 0 7 181 580 368 0 0 1 4 name 1 483  
152 0 0 7 180 495 0 0 0 0 
153 0 0 7 186 583 371 0 0 1 6 param0 0 581  
154 0 0 7 186 583 371 0 0 1 4 name 1 483  
155 0 0 7 185 495 0 0 0 0 
156 0 0 7 193 584 377 0 0 0 
157 0 0 7 193 584 377 0 0 1 6 param0 0 585  
158 0 0 4 189 488 0 0 0 3 4 this 3 584  3 key 1 483  5 value 1 483  
159 0 0 4 190 488 0 0 0 3 4 this 3 584  3 inp 1 587  9 important 1 491  
160 0 0 4 191 488 0 0 0 2 4 this 3 584  4 flag 1 441  
161 0 0 6 192 491 0 0 0 2 4 this 3 585  5 other 1 585  
162 0 0 4 202 488 0 0 0 4 4 this 3 590  9 vert_file 1 492  10 pixel_file 1 492  9 geom_file 1 492  
163 0 0 7 203 495 0 0 0 0 
164 0 0 7 197 591 0 0 0 1 4 this 3 590  
165 0 0 6 200 592 0 0 0 1 4 this 3 590  
166 0 0 7 207 542 394 0 0 3 3 gsg 1 593  6 camera 1 540  6 render 1 540  
167 0 0 7 207 542 394 0 0 1 6 param0 0 595  
168 0 0 4 208 488 0 0 0 2 4 this 3 542  2 np 1 540  
169 0 0 4 209 488 0 0 0 1 4 this 3 542  
170 0 0 4 210 488 0 0 0 2 4 this 3 542  4 spec 1 590  
171 0 0 6 211 491 0 0 0 1 4 this 3 595  
172 0 0 7 212 598 0 0 0 1 4 this 3 595  
173 0 0 6 213 599 0 0 0 1 4 this 3 595  
174 0 0 7 214 598 0 0 0 0 
175 0 0 7 215 495 0 0 0 0 
176 0 0 7 218 601 396 0 0 0 
177 0 0 7 221 602 398 0 0 0 
178 0 0 7 224 603 400 0 0 0 
179 0 0 7 227 604 402 0 0 0 
180 0 0 7 230 605 404 0 0 0 
181 0 0 7 235 606 408 0 0 0 
182 0 0 7 235 606 408 0 0 1 6 param0 0 607  
183 0 0 4 233 488 0 0 0 0 
184 0 0 4 234 488 0 0 0 0 
185 0 0 7 238 609 416 0 0 0 
186 0 0 7 238 609 416 0 0 1 6 param0 0 610  
187 0 0 6 239 491 0 0 0 1 4 this 3 610  
188 0 0 7 240 512 0 0 0 1 4 this 3 610  
189 0 0 7 241 614 0 0 0 1 4 this 3 610  
190 0 0 6 242 615 0 0 0 1 4 this 3 610  
191 0 0 6 243 615 0 0 0 1 4 this 3 610  
192 0 0 6 244 535 0 0 0 1 4 this 3 610  
193 0 0 7 247 616 0 0 0 0 
194 0 0 7 247 616 0 0 0 1 6 param0 0 617  
195 0 0 4 248 488 0 0 0 2 4 this 3 616  4 geom 1 619  
196 0 0 4 249 488 0 0 0 2 4 this 3 616  4 geom 1 619  
197 0 0 4 250 488 0 0 0 1 4 this 3 616  
198 0 0 7 252 609 416 0 0 4 4 this 3 616  5 start 1 518  3 end 1 518  4 mask 1 620  
199 0 0 7 253 609 416 0 0 5 4 this 3 616  6 origin 1 518  9 direction 1 547  8 distance 1 535  4 mask 1 620  
200 0 0 4 254 488 0 0 0 2 4 this 3 616  7 quality 1 441  
201 0 0 4 255 488 0 0 0 1 4 this 3 616  
202 0 0 7 256 619 0 0 0 2 4 this 3 616  7 geom_id 1 615  
203 0 0 7 258 495 0 0 0 0 
204 0 0 4 259 488 0 0 0 2 4 this 3 619  4 mask 1 620  
205 0 0 4 259 488 0 0 0 2 4 this 3 619  4 mask 1 615  
206 0 0 7 260 626 0 0 0 1 4 this 3 624  
207 0 0 4 261 488 0 0 0 2 4 this 3 619  7 quality 1 441  
208 0 0 4 262 488 0 0 0 1 4 this 3 619  
209 0 0 7 265 627 435 0 0 1 4 name 1 483  
210 0 0 7 264 495 0 0 0 0 
211 0 0 4 266 488 0 0 0 4 4 this 3 627  2 p1 1 518  2 p2 1 518  2 p3 1 518  
212 0 0 4 267 488 0 0 0 3 4 this 3 627  4 geom 1 628  2 ts 1 565  
195
436 13 TextureStages 0 141313 13 TextureStages 13 TextureStages 0 0 0 1 223 224 0 10 213 214 215 216 217 218 219 220 221 222 0 0 0 0 0 752
/**
 * This simple interface maintains a single TextureStage object for each unique name.
 * It avoids the creation of duplicate TextureStages with the same name, which
 * reduces texture swapping and draw call overhead.
 *
 * If using our shader system, you should always use this interface to get TextureStages.
 * You are not required to change any properties on the returned TextureStage, as the shader
 * specification will know what to do with the TextureStage from the name.
 * 
 * For example, you do not need to call TextureStage::set_mode() or NodePath::set_tex_gen().
 * If you apply a texture to a node with the get_normalmap() stage, the shader specification
 * will know that the texture you supplied is to be treated as a normal map.
 */

437 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 225 239 0 13 226 227 228 229 230 231 232 233 234 235 236 237 238 0 0 1 0 438 0 0 0 0 0

438 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

439 17 BSPMaterialAttrib 0 141313 17 BSPMaterialAttrib 17 BSPMaterialAttrib 0 0 0 0 248 1 631 8 240 241 242 243 244 245 246 247 0 0 1 0 440 0 0 0 0 0

440 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

441 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

442 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 250 253 0 3 249 251 252 0 0 1 0 438 0 0 0 0 0

443 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 255 258 0 3 254 256 257 0 0 1 0 442 0 0 0 0 0

444 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 260 264 0 4 259 261 262 263 0 0 1 0 442 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

445 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 266 270 0 4 265 267 268 269 0 0 1 0 442 0 0 0 0 0

446 10 PackResult 0 141313 10 PackResult 10 PackResult 0 0 0 1 274 275 0 3 271 272 273 0 0 0 0 0 0

447 15 TextureLocation 0 141313 15 TextureLocation 15 TextureLocation 0 0 0 1 281 282 0 5 276 277 278 279 280 0 0 0 0 0 0

448 13 TexturePacker 0 141313 13 TexturePacker 13 TexturePacker 0 0 0 0 292 0 9 283 284 285 286 287 288 289 290 291 0 0 0 0 0 0

449 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 301 1 632 8 293 294 295 296 297 298 299 300 0 0 1 0 440 0 0 0 1 450 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

450 0 0 794624 15 BSPFaceAttrib:: 0 449 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

451 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 302 356 0 53 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 0 0 0 0 1 452 58
/**
 * Loads and handles the operations of PBSP files.
 */

452 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 451 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

453 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 358 359 0 1 357 0 0 1 0 454 0 0 0 0 0

454 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

455 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 361 362 0 1 360 0 0 1 0 456 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

456 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

457 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 364 365 0 1 363 0 0 1 0 456 0 0 0 0 0

458 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 367 368 0 1 366 0 0 1 0 459 0 0 0 0 0

459 9 ModelRoot 0 2048 9 ModelRoot 9 ModelRoot 0 0 0 0 0 0 0 0 0 0 0 0 314
/**
 * A node of this type is created automatically at the root of each model file
 * that is loaded.  It may eventually contain some information about the
 * contents of the model; at the moment, it contains no special information,
 * but can be used as a flag to indicate the presence of a loaded model file.
 */

460 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 370 371 0 1 369 0 0 1 0 461 0 0 0 0 0

461 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

462 18 ShaderPermutations 0 141313 18 ShaderPermutations 18 ShaderPermutations 0 0 0 1 376 377 0 4 372 373 374 375 0 0 0 0 0 97
/**
 * Represents a list of #defines and variable inputs to a shader that is being generated.
 */

463 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 0 384 0 2 382 383 0 0 2 3 464 378 379 3 465 380 381 0 0 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

464 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

465 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

466 19 PSSMShaderGenerator 0 141313 19 PSSMShaderGenerator 19 PSSMShaderGenerator 0 0 0 1 385 394 0 8 386 387 388 389 390 391 392 393 0 0 1 0 467 0 0 0 0 0

467 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

468 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 395 396 0 0 0 0 1 0 463 0 0 0 0 0

469 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 397 398 0 0 0 0 1 0 463 0 0 0 0 0

470 16 UnlitGenericSpec 0 141313 16 UnlitGenericSpec 16 UnlitGenericSpec 0 0 0 1 399 400 0 0 0 0 1 0 463 0 0 0 0 160
/**
 * Shader that only supports a basetexture, no fancy lighting effects or anything.
 * Could be used for UI elements, emissive materials, particles, etc.
 */

471 14 UnlitNoMatSpec 0 141313 14 UnlitNoMatSpec 14 UnlitNoMatSpec 0 0 0 1 401 402 0 0 0 0 1 0 463 0 0 0 0 0

472 13 CSMRenderSpec 0 141313 13 CSMRenderSpec 13 CSMRenderSpec 0 0 0 1 403 404 0 0 0 0 1 0 463 0 0 0 0 0

473 8 RayTrace 0 141313 8 RayTrace 8 RayTrace 0 0 0 1 407 408 0 2 405 406 0 0 0 0 0 0

474 17 RayTraceHitResult 0 141313 17 RayTraceHitResult 17 RayTraceHitResult 0 0 0 1 409 416 0 6 410 411 412 413 414 415 0 0 0 0 0 0

475 13 RayTraceScene 0 75777 13 RayTraceScene 13 RayTraceScene 0 0 0 1 417 0 0 8 418 419 420 421 422 423 424 425 0 0 1 0 464 0 0 0 1 476 0

476 0 0 794624 15 RayTraceScene:: 0 475 0 0 0 0 0 0 0 0 0 3 17 BUILD_QUALITY_LOW 32 RayTraceScene::BUILD_QUALITY_LOW 0
0 20 BUILD_QUALITY_MEDIUM 35 RayTraceScene::BUILD_QUALITY_MEDIUM 0
1 18 BUILD_QUALITY_HIGH 33 RayTraceScene::BUILD_QUALITY_HIGH 0
2 0 0

477 16 RayTraceGeometry 0 75777 16 RayTraceGeometry 16 RayTraceGeometry 0 0 0 0 0 0 5 426 427 428 429 430 0 0 1 0 456 0 0 0 0 0

478 20 RayTraceTriangleMesh 0 141313 20 RayTraceTriangleMesh 20 RayTraceTriangleMesh 0 0 0 1 432 435 0 3 431 433 434 0 0 1 0 477 0 0 0 0 0

479 15 TextureStages * 0 8576 15 TextureStages * 15 TextureStages * 0 0 436 0 0 0 0 0 0 0 0 0 0

480 21 TextureStages const * 0 8576 21 TextureStages const * 21 TextureStages const * 0 0 481 0 0 0 0 0 0 0 0 0 0

481 19 TextureStages const 0 8832 19 TextureStages const 19 TextureStages const 0 0 436 0 0 0 0 0 0 0 0 0 0

482 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 336
/**
 * Defines the properties of a named stage of the multitexture pipeline.  The
 * TextureAttrib will associated a number of these stages with Texture
 * objects, and the GSG will render geometry by sorting all of the currently
 * active TextureStages in order and then issuing the appropriate rendering
 * calls to activate them.
 */

483 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

484 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 482 0 0 0 0 0 0 0 0 0 0

485 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 486 0 0 0 0 0 0 0 0 0 0

486 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 437 0 0 0 0 0 0 0 0 0 0

487 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 437 0 0 0 0 0 0 0 0 0 0

488 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

489 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

490 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 489 0 0 0 0 0 0 0 0 0 0

491 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

492 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 493 0 0 0 0 0 0 0 0 0 0

493 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 489 0 0 0 0 0 0 0 0 0 0

494 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

495 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 494 0 0 0 0 0 0 0 0 0 0

496 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 440 0 0 0 0 0 0 0 0 0 0

497 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 496 0 0 0 0 0 0 0 0 0 0

498 25 BSPMaterialAttrib const * 0 8576 25 BSPMaterialAttrib const * 25 BSPMaterialAttrib const * 0 0 499 0 0 0 0 0 0 0 0 0 0

499 23 BSPMaterialAttrib const 0 8832 23 BSPMaterialAttrib const 23 BSPMaterialAttrib const 0 0 439 0 0 0 0 0 0 0 0 0 0

500 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 442 0 0 0 0 0 0 0 0 0 0

501 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 502 0 0 0 0 0 0 0 0 0 0

502 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 442 0 0 0 0 0 0 0 0 0 0

503 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 451 0 0 0 0 0 0 0 0 0 0

504 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 443 0 0 0 0 0 0 0 0 0 0

505 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 506 0 0 0 0 0 0 0 0 0 0

506 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 443 0 0 0 0 0 0 0 0 0 0

507 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 508 0 0 0 0 0 0 0 0 0 0

508 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

509 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 507 0 0 0 0 0 0 0 0 0 0

510 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 511 0 0 0 0 0 0 0 0 0 0

511 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

512 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 510 0 0 0 0 0 0 0 0 0 0

513 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 444 0 0 0 0 0 0 0 0 0 0

514 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 515 0 0 0 0 0 0 0 0 0 0

515 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 444 0 0 0 0 0 0 0 0 0 0

516 11 BoundingBox 0 2048 11 BoundingBox 11 BoundingBox 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

517 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 516 0 0 0 0 0 0 0 0 0 0

518 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 519 0 0 0 0 0 0 0 0 0 0

519 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 507 0 0 0 0 0 0 0 0 0 0

520 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 445 0 0 0 0 0 0 0 0 0 0

521 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 522 0 0 0 0 0 0 0 0 0 0

522 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 445 0 0 0 0 0 0 0 0 0 0

523 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

524 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 523 0 0 0 0 0 0 0 0 0 0

525 18 PackResult const * 0 8576 18 PackResult const * 18 PackResult const * 0 0 526 0 0 0 0 0 0 0 0 0 0

526 16 PackResult const 0 8832 16 PackResult const 16 PackResult const 0 0 446 0 0 0 0 0 0 0 0 0 0

527 12 PackResult * 0 8576 12 PackResult * 12 PackResult * 0 0 446 0 0 0 0 0 0 0 0 0 0

528 23 TextureLocation const * 0 8576 23 TextureLocation const * 23 TextureLocation const * 0 0 529 0 0 0 0 0 0 0 0 0 0

529 21 TextureLocation const 0 8832 21 TextureLocation const 21 TextureLocation const 0 0 447 0 0 0 0 0 0 0 0 0 0

530 17 TextureLocation * 0 8576 17 TextureLocation * 17 TextureLocation * 0 0 447 0 0 0 0 0 0 0 0 0 0

531 15 TexturePacker * 0 8576 15 TexturePacker * 15 TexturePacker * 0 0 448 0 0 0 0 0 0 0 0 0 0

532 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 533 0 0 0 0 0 0 0 0 0 0

533 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 449 0 0 0 0 0 0 0 0 0 0

534 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 535 0 0 0 0 0 0 0 0 0 0

535 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

536 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 537 0 0 0 0 0 0 0 0 0 0

537 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 451 0 0 0 0 0 0 0 0 0 0

538 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 539 0 0 0 0 0 0 0 0 0 0

539 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

540 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 541 0 0 0 0 0 0 0 0 0 0

541 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 523 0 0 0 0 0 0 0 0 0 0

542 21 PSSMShaderGenerator * 0 8576 21 PSSMShaderGenerator * 21 PSSMShaderGenerator * 0 0 466 0 0 0 0 0 0 0 0 0 0

543 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 544 0 0 0 0 0 0 0 0 0 0

544 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 545 0 0 0 0 0 0 0 0 0 0

545 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 546 0 0 0 0 0 0 0 0 0 0

546 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

547 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 548 0 0 0 0 0 0 0 0 0 0

548 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 510 0 0 0 0 0 0 0 0 0 0

549 14 LColor const * 0 8576 14 LColor const * 14 LColor const * 0 0 550 0 0 0 0 0 0 0 0 0 0

550 12 LColor const 0 8832 12 LColor const 12 LColor const 0 0 551 0 0 0 0 0 0 0 0 0 0

551 6 LColor 0 2105344 6 LColor 6 LColor 0 0 552 0 0 0 0 0 0 0 0 0 0

552 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 553 0 0 0 0 0 0 0 0 0 0

553 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

554 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 555 0 0 0 0 0 0 0 0 0 0

555 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 556 0 0 0 0 0 0 0 0 0 0

556 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

557 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 558 0 0 0 0 0 0 0 0 0 0

558 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 559 0 0 0 0 0 0 0 0 0 0

559 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

560 9 int const 0 8832 9 int const 9 int const 0 0 441 0 0 0 0 0 0 0 0 0 0

561 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 551 0 0 0 0 0 0 0 0 0 0

562 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 563 0 0 0 0 0 0 0 0 0 0

563 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 564 0 0 0 0 0 0 0 0 0 0

564 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

565 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 566 0 0 0 0 0 0 0 0 0 0

566 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 567 0 0 0 0 0 0 0 0 0 0

567 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

568 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 569 0 0 0 0 0 0 0 0 0 0

569 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 453 0 0 0 0 0 0 0 0 0 0

570 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 453 0 0 0 0 0 0 0 0 0 0

571 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 454 0 0 0 0 0 0 0 0 0 0

572 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 573 0 0 0 0 0 0 0 0 0 0

573 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 455 0 0 0 0 0 0 0 0 0 0

574 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 455 0 0 0 0 0 0 0 0 0 0

575 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 576 0 0 0 0 0 0 0 0 0 0

576 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 457 0 0 0 0 0 0 0 0 0 0

577 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 457 0 0 0 0 0 0 0 0 0 0

578 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 579 0 0 0 0 0 0 0 0 0 0

579 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 458 0 0 0 0 0 0 0 0 0 0

580 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 458 0 0 0 0 0 0 0 0 0 0

581 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 582 0 0 0 0 0 0 0 0 0 0

582 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 460 0 0 0 0 0 0 0 0 0 0

583 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 460 0 0 0 0 0 0 0 0 0 0

584 20 ShaderPermutations * 0 8576 20 ShaderPermutations * 20 ShaderPermutations * 0 0 462 0 0 0 0 0 0 0 0 0 0

585 26 ShaderPermutations const * 0 8576 26 ShaderPermutations const * 26 ShaderPermutations const * 0 0 586 0 0 0 0 0 0 0 0 0 0

586 24 ShaderPermutations const 0 8832 24 ShaderPermutations const 24 ShaderPermutations const 0 0 462 0 0 0 0 0 0 0 0 0 0

587 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 588 0 0 0 0 0 0 0 0 0 0

588 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 589 0 0 0 0 0 0 0 0 0 0

589 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

590 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 463 0 0 0 0 0 0 0 0 0 0

591 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 464 0 0 0 0 0 0 0 0 0 0

592 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 465 0 0 0 0 0 0 0 0 0 0

593 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 594 0 0 0 0 0 0 0 0 0 0

594 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

595 27 PSSMShaderGenerator const * 0 8576 27 PSSMShaderGenerator const * 27 PSSMShaderGenerator const * 0 0 596 0 0 0 0 0 0 0 0 0 0

596 25 PSSMShaderGenerator const 0 8832 25 PSSMShaderGenerator const 25 PSSMShaderGenerator const 0 0 466 0 0 0 0 0 0 0 0 0 0

597 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

598 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 597 0 0 0 0 0 0 0 0 0 0

599 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 600 0 0 0 0 0 0 0 0 0 0

600 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

601 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 468 0 0 0 0 0 0 0 0 0 0

602 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 469 0 0 0 0 0 0 0 0 0 0

603 18 UnlitGenericSpec * 0 8576 18 UnlitGenericSpec * 18 UnlitGenericSpec * 0 0 470 0 0 0 0 0 0 0 0 0 0

604 16 UnlitNoMatSpec * 0 8576 16 UnlitNoMatSpec * 16 UnlitNoMatSpec * 0 0 471 0 0 0 0 0 0 0 0 0 0

605 15 CSMRenderSpec * 0 8576 15 CSMRenderSpec * 15 CSMRenderSpec * 0 0 472 0 0 0 0 0 0 0 0 0 0

606 10 RayTrace * 0 8576 10 RayTrace * 10 RayTrace * 0 0 473 0 0 0 0 0 0 0 0 0 0

607 16 RayTrace const * 0 8576 16 RayTrace const * 16 RayTrace const * 0 0 608 0 0 0 0 0 0 0 0 0 0

608 14 RayTrace const 0 8832 14 RayTrace const 14 RayTrace const 0 0 473 0 0 0 0 0 0 0 0 0 0

609 19 RayTraceHitResult * 0 8576 19 RayTraceHitResult * 19 RayTraceHitResult * 0 0 474 0 0 0 0 0 0 0 0 0 0

610 25 RayTraceHitResult const * 0 8576 25 RayTraceHitResult const * 25 RayTraceHitResult const * 0 0 611 0 0 0 0 0 0 0 0 0 0

611 23 RayTraceHitResult const 0 8832 23 RayTraceHitResult const 23 RayTraceHitResult const 0 0 474 0 0 0 0 0 0 0 0 0 0

612 8 LVector2 0 2105344 8 LVector2 8 LVector2 0 0 613 0 0 0 0 0 0 0 0 0 0

613 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

614 10 LVector2 * 0 8576 10 LVector2 * 10 LVector2 * 0 0 612 0 0 0 0 0 0 0 0 0 0

615 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

616 15 RayTraceScene * 0 8576 15 RayTraceScene * 15 RayTraceScene * 0 0 475 0 0 0 0 0 0 0 0 0 0

617 21 RayTraceScene const * 0 8576 21 RayTraceScene const * 21 RayTraceScene const * 0 0 618 0 0 0 0 0 0 0 0 0 0

618 19 RayTraceScene const 0 8832 19 RayTraceScene const 19 RayTraceScene const 0 0 475 0 0 0 0 0 0 0 0 0 0

619 18 RayTraceGeometry * 0 8576 18 RayTraceGeometry * 18 RayTraceGeometry * 0 0 477 0 0 0 0 0 0 0 0 0 0

620 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 621 0 0 0 0 0 0 0 0 0 0

621 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 622 0 0 0 0 0 0 0 0 0 0

622 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 623 0 0 0 0 0 0 0 0 0 0

623 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

624 24 RayTraceGeometry const * 0 8576 24 RayTraceGeometry const * 24 RayTraceGeometry const * 0 0 625 0 0 0 0 0 0 0 0 0 0

625 22 RayTraceGeometry const 0 8832 22 RayTraceGeometry const 22 RayTraceGeometry const 0 0 477 0 0 0 0 0 0 0 0 0 0

626 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 622 0 0 0 0 0 0 0 0 0 0

627 22 RayTraceTriangleMesh * 0 8576 22 RayTraceTriangleMesh * 22 RayTraceTriangleMesh * 0 0 478 0 0 0 0 0 0 0 0 0 0

628 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 629 0 0 0 0 0 0 0 0 0 0

629 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 630 0 0 0 0 0 0 0 0 0 0

630 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

0
2
631 10 class_slot 0 2 441 246 0 0 0 0 0 0 0 29 BSPMaterialAttrib::class_slot 0

632 10 class_slot 0 2 441 299 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

0
