1539264363
3 3
3 bsp 4 t5GT 3 bsp 
104
103 14 get_class_type 0 4 207 27 CBaseEntity::get_class_type 0 1 3 0
52
static TypeHandle CBaseEntity::get_class_type(void);

104 11 CBaseEntity 0 4 207 24 CBaseEntity::CBaseEntity 0 2 1 2 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

105 10 get_entnum 0 4 207 23 CBaseEntity::get_entnum 0 1 4 0
40
int CBaseEntity::get_entnum(void) const;

106 10 get_loader 0 4 207 23 CBaseEntity::get_loader 0 1 5 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

107 12 ~CBaseEntity 0 4 207 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

108 14 get_class_type 0 4 209 28 CPointEntity::get_class_type 0 1 8 0
53
static TypeHandle CPointEntity::get_class_type(void);

109 12 CPointEntity 0 4 209 26 CPointEntity::CPointEntity 0 2 6 7 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

110 10 get_origin 0 4 209 24 CPointEntity::get_origin 0 1 9 0
45
LPoint3 CPointEntity::get_origin(void) const;

111 10 get_angles 0 4 209 24 CPointEntity::get_angles 0 1 10 0
46
LVector3 CPointEntity::get_angles(void) const;

112 13 ~CPointEntity 0 4 209 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

113 14 get_class_type 0 4 210 29 CBoundsEntity::get_class_type 0 1 13 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

114 13 CBoundsEntity 0 4 210 28 CBoundsEntity::CBoundsEntity 0 2 11 12 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

115 10 get_bounds 0 4 210 25 CBoundsEntity::get_bounds 0 1 14 0
51
BoundingBox *CBoundsEntity::get_bounds(void) const;

116 9 is_inside 0 4 210 24 CBoundsEntity::is_inside 0 1 15 0
63
inline bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

117 13 fillin_bounds 0 4 210 28 CBoundsEntity::fillin_bounds 0 1 16 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

118 14 ~CBoundsEntity 0 4 210 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

119 14 get_class_type 0 4 211 28 CBrushEntity::get_class_type 0 1 19 0
53
static TypeHandle CBrushEntity::get_class_type(void);

120 12 CBrushEntity 0 4 211 26 CBrushEntity::CBrushEntity 0 2 17 18 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

121 12 get_modelnum 0 4 211 26 CBrushEntity::get_modelnum 0 1 20 0
43
int CBrushEntity::get_modelnum(void) const;

122 12 get_model_np 0 4 211 26 CBrushEntity::get_model_np 0 1 21 0
48
NodePath CBrushEntity::get_model_np(void) const;

123 16 get_model_bounds 0 4 211 30 CBrushEntity::get_model_bounds 0 1 22 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

124 13 ~CBrushEntity 0 4 211 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

125 4 make 0 4 212 19 BSPFaceAttrib::make 0 1 23 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

126 12 make_default 0 4 212 27 BSPFaceAttrib::make_default 0 1 24 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

127 12 get_material 0 4 212 27 BSPFaceAttrib::get_material 0 1 25 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

128 13 get_face_type 0 4 212 28 BSPFaceAttrib::get_face_type 0 1 26 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

129 14 get_class_slot 0 4 212 29 BSPFaceAttrib::get_class_slot 0 1 27 0
47
static int BSPFaceAttrib::get_class_slot(void);

130 14 get_class_type 0 4 212 29 BSPFaceAttrib::get_class_type 0 1 28 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

131 14 ~BSPFaceAttrib 0 4 212 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

132 9 BSPLoader 0 4 216 20 BSPLoader::BSPLoader 0 1 29 0
27
BSPLoader::BSPLoader(void);

133 4 read 0 4 216 15 BSPLoader::read 0 1 30 0
43
bool BSPLoader::read(Filename const &file);

134 16 do_optimizations 0 4 216 27 BSPLoader::do_optimizations 0 1 31 0
39
void BSPLoader::do_optimizations(void);

135 9 set_gamma 0 4 216 20 BSPLoader::set_gamma 0 1 32 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

136 9 get_gamma 0 4 216 20 BSPLoader::get_gamma 0 1 33 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

137 7 set_win 0 4 216 18 BSPLoader::set_win 0 1 34 0
45
void BSPLoader::set_win(GraphicsWindow *win);

138 10 set_camera 0 4 216 21 BSPLoader::set_camera 0 1 35 0
51
void BSPLoader::set_camera(NodePath const &camera);

139 10 set_render 0 4 216 21 BSPLoader::set_render 0 1 36 0
51
void BSPLoader::set_render(NodePath const &render);

140 19 set_want_visibility 0 4 216 30 BSPLoader::set_want_visibility 0 1 37 0
47
void BSPLoader::set_want_visibility(bool flag);

141 18 set_want_lightmaps 0 4 216 29 BSPLoader::set_want_lightmaps 0 1 38 0
46
void BSPLoader::set_want_lightmaps(bool flag);

142 16 set_physics_type 0 4 216 27 BSPLoader::set_physics_type 0 1 39 0
43
void BSPLoader::set_physics_type(int type);

143 19 set_visualize_leafs 0 4 216 30 BSPLoader::set_visualize_leafs 0 1 40 0
47
void BSPLoader::set_visualize_leafs(bool flag);

144 18 set_materials_file 0 4 216 29 BSPLoader::set_materials_file 0 1 41 0
57
void BSPLoader::set_materials_file(Filename const &file);

145 25 set_texture_contents_file 0 4 216 36 BSPLoader::set_texture_contents_file 0 1 42 0
64
void BSPLoader::set_texture_contents_file(Filename const &file);

146 15 setup_shadowcam 0 4 216 26 BSPLoader::setup_shadowcam 0 1 43 0
38
void BSPLoader::setup_shadowcam(void);

147 16 add_dynamic_node 0 4 216 27 BSPLoader::add_dynamic_node 0 1 44 0
55
void BSPLoader::add_dynamic_node(NodePath const &node);

148 18 set_shadow_cam_pos 0 4 216 29 BSPLoader::set_shadow_cam_pos 0 1 45 0
55
void BSPLoader::set_shadow_cam_pos(LPoint3 const &pos);

149 22 set_shadow_cam_bitmask 0 4 216 33 BSPLoader::set_shadow_cam_bitmask 0 1 46 0
62
void BSPLoader::set_shadow_cam_bitmask(BitMask32 const &mask);

150 16 set_shadow_color 0 4 216 27 BSPLoader::set_shadow_color 0 1 47 0
54
void BSPLoader::set_shadow_color(LColor const &color);

151 21 set_shadow_resolution 0 4 216 32 BSPLoader::set_shadow_resolution 0 1 48 0
65
void BSPLoader::set_shadow_resolution(int filmsize, int texsize);

152 12 cast_shadows 0 4 216 23 BSPLoader::cast_shadows 0 1 49 0
45
void BSPLoader::cast_shadows(NodePath &node);

153 14 get_shadow_tex 0 4 216 25 BSPLoader::get_shadow_tex 0 1 50 0
47
Texture *BSPLoader::get_shadow_tex(void) const;

154 16 extract_modelnum 0 4 216 27 BSPLoader::extract_modelnum 0 1 51 0
51
inline int BSPLoader::extract_modelnum(int entnum);

155 16 get_model_bounds 0 4 216 27 BSPLoader::get_model_bounds 0 1 52 0
84
inline void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

156 28 set_server_entity_dispatcher 0 4 216 39 BSPLoader::set_server_entity_dispatcher 0 1 53 0
67
void BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

157 27 link_server_entity_to_class 0 4 216 38 BSPLoader::link_server_entity_to_class 0 1 54 0
89
void BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

158 6 set_ai 0 4 216 17 BSPLoader::set_ai 0 1 55 0
32
void BSPLoader::set_ai(bool ai);

159 5 is_ai 0 4 216 16 BSPLoader::is_ai 0 1 56 0
41
inline bool BSPLoader::is_ai(void) const;

160 19 update_dynamic_node 0 4 216 30 BSPLoader::update_dynamic_node 0 1 57 0
58
void BSPLoader::update_dynamic_node(NodePath const &node);

161 10 trace_line 0 4 216 21 BSPLoader::trace_line 0 1 58 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

162 20 link_entity_to_class 0 4 216 31 BSPLoader::link_entity_to_class 0 1 59 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

163 28 get_py_entity_by_target_name 0 4 216 39 BSPLoader::get_py_entity_by_target_name 0 1 60 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

164 17 find_all_entities 0 4 216 28 BSPLoader::find_all_entities 0 1 61 0
69
PyObject *BSPLoader::find_all_entities(std::string const &classname);

165 20 get_entity_keyvalues 0 4 216 31 BSPLoader::get_entity_keyvalues 0 1 62 0
71
void BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

166 18 link_cent_to_pyent 0 4 216 29 BSPLoader::link_cent_to_pyent 0 1 63 0
63
void BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

167 16 get_num_entities 0 4 216 27 BSPLoader::get_num_entities 0 1 64 0
44
int BSPLoader::get_num_entities(void) const;

168 16 get_entity_value 0 4 216 27 BSPLoader::get_entity_value 0 1 65 0
75
std::string BSPLoader::get_entity_value(int entnum, char const *key) const;

169 22 get_entity_value_float 0 4 216 33 BSPLoader::get_entity_value_float 0 1 66 0
75
float BSPLoader::get_entity_value_float(int entnum, char const *key) const;

170 20 get_entity_value_int 0 4 216 31 BSPLoader::get_entity_value_int 0 1 67 0
71
int BSPLoader::get_entity_value_int(int entnum, char const *key) const;

171 23 get_entity_value_vector 0 4 216 34 BSPLoader::get_entity_value_vector 0 1 68 0
79
LVector3 BSPLoader::get_entity_value_vector(int entnum, char const *key) const;

172 22 get_entity_value_color 0 4 216 33 BSPLoader::get_entity_value_color 0 1 69 0
95
LColor BSPLoader::get_entity_value_color(int entnum, char const *key, bool scale = true) const;

173 10 get_entity 0 4 216 21 BSPLoader::get_entity 0 1 70 0
49
NodePath BSPLoader::get_entity(int entnum) const;

174 9 get_model 0 4 216 20 BSPLoader::get_model 0 1 71 0
50
NodePath BSPLoader::get_model(int modelnum) const;

175 12 get_c_entity 0 4 216 23 BSPLoader::get_c_entity 0 1 72 0
68
inline CBaseEntity *BSPLoader::get_c_entity(int const entnum) const;

176 9 find_leaf 0 4 216 20 BSPLoader::find_leaf 0 2 73 74 0
105
inline int BSPLoader::find_leaf(NodePath const &np);
inline int BSPLoader::find_leaf(LPoint3 const &pos);

177 9 find_node 0 4 216 20 BSPLoader::find_node 0 1 75 0
52
inline int BSPLoader::find_node(LPoint3 const &pos);

178 18 is_cluster_visible 0 4 216 29 BSPLoader::is_cluster_visible 0 1 76 0
79
inline bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

179 15 pvs_bounds_test 0 4 216 26 BSPLoader::pvs_bounds_test 0 1 77 0
78
inline bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds);

180 15 make_net_bounds 0 4 216 26 BSPLoader::make_net_bounds 0 1 78 0
154
inline ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

181 16 has_active_level 0 4 216 27 BSPLoader::has_active_level 0 1 79 0
52
inline bool BSPLoader::has_active_level(void) const;

182 14 has_visibility 0 4 216 25 BSPLoader::has_visibility 0 1 80 0
50
inline bool BSPLoader::has_visibility(void) const;

183 7 cleanup 0 4 216 18 BSPLoader::cleanup 0 1 81 0
30
void BSPLoader::cleanup(void);

184 10 get_result 0 4 216 21 BSPLoader::get_result 0 1 82 0
43
NodePath BSPLoader::get_result(void) const;

185 14 get_global_ptr 0 4 216 25 BSPLoader::get_global_ptr 0 1 83 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

186 10 ~BSPLoader 0 4 216 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

187 14 get_class_type 0 4 218 32 BSPCullTraverser::get_class_type 0 1 86 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

188 16 BSPCullTraverser 0 4 218 34 BSPCullTraverser::BSPCullTraverser 0 2 84 85 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

189 17 ~BSPCullTraverser 0 4 218 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

190 15 IgnorePVSAttrib 0 4 220 32 IgnorePVSAttrib::IgnorePVSAttrib 0 1 87 0
46
inline IgnorePVSAttrib::IgnorePVSAttrib(void);

191 4 make 0 4 220 21 IgnorePVSAttrib::make 0 1 88 0
66
static ConstPointerTo< RenderAttrib > IgnorePVSAttrib::make(void);

192 14 get_class_slot 0 4 220 31 IgnorePVSAttrib::get_class_slot 0 1 89 0
49
static int IgnorePVSAttrib::get_class_slot(void);

193 14 get_class_type 0 4 220 31 IgnorePVSAttrib::get_class_type 0 1 90 0
56
static TypeHandle IgnorePVSAttrib::get_class_type(void);

194 16 ~IgnorePVSAttrib 0 4 220 33 IgnorePVSAttrib::~IgnorePVSAttrib 0 0 0
40
IgnorePVSAttrib::~IgnorePVSAttrib(void);

195 14 get_class_type 0 4 221 25 BSPRender::get_class_type 0 1 93 0
50
static TypeHandle BSPRender::get_class_type(void);

196 9 BSPRender 0 4 221 20 BSPRender::BSPRender 0 2 91 92 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

197 10 ~BSPRender 0 4 221 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

198 14 get_class_type 0 4 223 23 BSPRoot::get_class_type 0 1 96 0
48
static TypeHandle BSPRoot::get_class_type(void);

199 7 BSPRoot 0 4 223 16 BSPRoot::BSPRoot 0 2 94 95 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

200 8 ~BSPRoot 0 4 223 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

201 14 get_class_type 0 4 224 23 BSPProp::get_class_type 0 1 99 0
48
static TypeHandle BSPProp::get_class_type(void);

202 7 BSPProp 0 4 224 16 BSPProp::BSPProp 0 2 97 98 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

203 8 ~BSPProp 0 4 224 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

204 14 get_class_type 0 4 226 24 BSPModel::get_class_type 0 1 102 0
49
static TypeHandle BSPModel::get_class_type(void);

205 8 BSPModel 0 4 226 18 BSPModel::BSPModel 0 2 100 101 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

206 9 ~BSPModel 0 4 226 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

102
1 0 0 7 4 227 107 0 0 0 
2 0 0 7 4 227 107 0 0 1 6 param0 0 228  
3 0 0 7 3 231 0 0 0 0 
4 0 0 6 5 215 0 0 0 1 4 this 3 228  
5 0 0 6 6 232 0 0 0 1 4 this 3 228  
6 0 0 7 10 233 112 0 0 0 
7 0 0 7 10 233 112 0 0 1 6 param0 0 234  
8 0 0 7 9 231 0 0 0 0 
9 0 0 7 11 238 0 0 0 1 4 this 3 234  
10 0 0 7 12 241 0 0 0 1 4 this 3 234  
11 0 0 7 16 242 118 0 0 0 
12 0 0 7 16 242 118 0 0 1 6 param0 0 243  
13 0 0 7 15 231 0 0 0 0 
14 0 0 7 17 246 0 0 0 1 4 this 3 243  
15 0 0 6 18 249 0 0 0 2 4 this 3 243  3 pos 1 247  
16 0 0 4 19 250 0 0 0 3 4 this 3 242  4 mins 1 238  4 maxs 1 238  
17 0 0 7 23 251 124 0 0 0 
18 0 0 7 23 251 124 0 0 1 6 param0 0 252  
19 0 0 7 22 231 0 0 0 0 
20 0 0 6 24 215 0 0 0 1 4 this 3 252  
21 0 0 7 25 255 0 0 0 1 4 this 3 252  
22 0 0 4 26 250 0 0 0 3 4 this 3 251  4 mins 1 238  4 maxs 1 238  
23 0 0 7 31 258 0 0 0 2 13 face_material 1 257  9 face_type 1 215  
24 0 0 7 32 258 0 0 0 0 
25 0 0 6 33 257 0 0 0 1 4 this 3 259  
26 0 0 6 34 215 0 0 0 1 4 this 3 259  
27 0 0 6 35 215 0 0 0 0 
28 0 0 7 38 231 0 0 0 0 
29 0 0 7 41 232 186 0 0 0 
30 0 0 6 42 249 0 0 0 2 4 this 3 232  4 file 1 261  
31 0 0 4 43 250 0 0 0 1 4 this 3 232  
32 0 0 4 44 250 0 0 0 3 4 this 3 232  5 gamma 1 264  10 overbright 1 215  
33 0 0 6 45 264 0 0 0 1 4 this 3 266  
34 0 0 4 46 250 0 0 0 2 4 this 3 232  3 win 1 268  
35 0 0 4 47 250 0 0 0 2 4 this 3 232  6 camera 1 270  
36 0 0 4 48 250 0 0 0 2 4 this 3 232  6 render 1 270  
37 0 0 4 49 250 0 0 0 2 4 this 3 232  4 flag 1 249  
38 0 0 4 50 250 0 0 0 2 4 this 3 232  4 flag 1 249  
39 0 0 4 51 250 0 0 0 2 4 this 3 232  4 type 1 215  
40 0 0 4 52 250 0 0 0 2 4 this 3 232  4 flag 1 249  
41 0 0 4 53 250 0 0 0 2 4 this 3 232  4 file 1 261  
42 0 0 4 54 250 0 0 0 2 4 this 3 232  4 file 1 261  
43 0 0 4 55 250 0 0 0 1 4 this 3 232  
44 0 0 4 56 250 0 0 0 2 4 this 3 232  4 node 1 270  
45 0 0 4 57 250 0 0 0 2 4 this 3 232  3 pos 1 247  
46 0 0 4 58 250 0 0 0 2 4 this 3 232  4 mask 1 272  
47 0 0 4 59 250 0 0 0 2 4 this 3 232  5 color 1 276  
48 0 0 4 60 250 0 0 0 3 4 this 3 232  8 filmsize 1 215  7 texsize 1 215  
49 0 0 4 61 250 0 0 0 2 4 this 3 232  4 node 1 255  
50 0 0 7 62 282 0 0 0 1 4 this 3 266  
51 0 0 6 63 215 0 0 0 2 4 this 3 232  6 entnum 1 215  
52 0 0 4 64 250 0 0 0 4 4 this 3 232  8 modelnum 1 215  4 mins 1 238  4 maxs 1 238  
53 0 0 4 65 250 0 0 0 2 4 this 3 232  10 dispatcher 1 283  
54 0 0 4 66 250 0 0 0 3 4 this 3 232  4 name 1 257  4 type 1 286  
55 0 0 4 67 250 0 0 0 2 4 this 3 232  2 ai 1 249  
56 0 0 6 68 249 0 0 0 1 4 this 3 266  
57 0 0 4 69 250 0 0 0 2 4 this 3 232  4 node 1 270  
58 0 0 6 70 249 0 0 0 3 4 this 3 232  5 start 1 247  3 end 1 247  
59 0 0 4 71 250 0 0 0 3 4 this 3 232  7 entname 1 257  4 type 1 286  
60 0 0 6 72 283 0 0 0 2 4 this 3 266  10 targetname 1 257  
61 0 0 6 73 283 0 0 0 2 4 this 3 232  9 classname 1 257  
62 0 0 4 74 250 0 0 0 3 4 this 3 232  4 list 1 283  6 entnum 1 289  
63 0 0 4 75 250 0 0 0 3 4 this 3 232  5 entum 1 215  5 pyent 1 283  
64 0 0 6 76 215 0 0 0 1 4 this 3 266  
65 0 0 6 77 257 0 0 0 3 4 this 3 266  6 entnum 1 215  3 key 1 257  
66 0 0 6 78 265 0 0 0 3 4 this 3 266  6 entnum 1 215  3 key 1 257  
67 0 0 6 79 215 0 0 0 3 4 this 3 266  6 entnum 1 215  3 key 1 257  
68 0 0 7 80 241 0 0 0 3 4 this 3 266  6 entnum 1 215  3 key 1 257  
69 0 0 7 81 290 0 0 0 4 4 this 3 266  6 entnum 1 215  3 key 1 257  5 scale 1 249  
70 0 0 7 82 255 0 0 0 2 4 this 3 266  6 entnum 1 215  
71 0 0 7 83 255 0 0 0 2 4 this 3 266  8 modelnum 1 215  
72 0 0 7 84 227 107 0 0 2 4 this 3 266  6 entnum 1 289  
73 0 0 6 85 215 0 0 0 2 4 this 3 232  3 pos 1 247  
74 0 0 6 85 215 0 0 0 2 4 this 3 232  2 np 1 270  
75 0 0 6 86 215 0 0 0 2 4 this 3 232  3 pos 1 247  
76 0 0 6 87 249 0 0 0 3 4 this 3 266  12 curr_cluster 1 215  7 cluster 1 215  
77 0 0 6 88 249 0 0 0 2 4 this 3 232  6 bounds 1 291  
78 0 0 7 89 291 0 0 0 3 4 this 3 232  13 net_transform 1 294  8 original 1 291  
79 0 0 6 90 249 0 0 0 1 4 this 3 266  
80 0 0 6 91 249 0 0 0 1 4 this 3 266  
81 0 0 4 92 250 0 0 0 1 4 this 3 232  
82 0 0 7 93 255 0 0 0 1 4 this 3 266  
83 0 0 6 94 232 0 0 0 0 
84 0 0 7 100 299 189 0 0 1 6 param0 0 297  
85 0 0 7 100 299 189 0 0 2 4 trav 1 300  6 loader 1 232  
86 0 0 7 99 231 0 0 0 0 
87 0 0 7 103 301 194 0 0 0 
88 0 0 7 104 258 0 0 0 0 
89 0 0 6 105 215 0 0 0 0 
90 0 0 7 107 231 0 0 0 0 
91 0 0 7 112 304 197 0 0 1 6 param0 0 302  
92 0 0 7 112 304 197 0 0 2 4 name 1 257  6 loader 1 232  
93 0 0 7 111 231 0 0 0 0 
94 0 0 7 116 307 200 0 0 1 6 param0 0 305  
95 0 0 7 116 307 200 0 0 1 4 name 1 257  
96 0 0 7 115 231 0 0 0 0 
97 0 0 7 121 310 203 0 0 1 6 param0 0 308  
98 0 0 7 121 310 203 0 0 1 4 name 1 257  
99 0 0 7 120 231 0 0 0 0 
100 0 0 7 125 313 206 0 0 1 6 param0 0 311  
101 0 0 7 125 313 206 0 0 1 4 name 1 257  
102 0 0 7 124 231 0 0 0 0 
107
207 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 104 107 0 3 103 105 106 0 0 1 0 208 0 0 0 0 0

208 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

209 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 109 112 0 3 108 110 111 0 0 1 0 207 0 0 0 0 0

210 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 114 118 0 4 113 115 116 117 0 0 1 0 207 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

211 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 120 124 0 4 119 121 122 123 0 0 1 0 207 0 0 0 0 0

212 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 131 1 314 6 125 126 127 128 129 130 0 0 1 0 213 0 0 0 1 214 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

213 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

214 0 0 794624 15 BSPFaceAttrib:: 0 212 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

215 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

216 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 132 186 0 53 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 0 0 0 0 1 217 58
/**
 * Loads and handles the operations of PBSP files.
 */

217 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 216 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

218 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 188 189 0 1 187 0 0 1 0 219 0 0 0 0 0

219 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

220 15 IgnorePVSAttrib 0 141313 15 IgnorePVSAttrib 15 IgnorePVSAttrib 0 0 0 1 190 194 1 315 3 191 192 193 0 0 1 0 213 0 0 0 0 86
/**
 * Forces the node/geom to not be tested against the PVS, just frustum culled.
 */

221 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 196 197 0 1 195 0 0 1 0 222 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

222 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

223 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 199 200 0 1 198 0 0 1 0 222 0 0 0 0 0

224 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 202 203 0 1 201 0 0 1 0 225 0 0 0 0 0

225 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

226 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 205 206 0 1 204 0 0 1 0 225 0 0 0 0 0

227 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 207 0 0 0 0 0 0 0 0 0 0

228 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 229 0 0 0 0 0 0 0 0 0 0

229 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 207 0 0 0 0 0 0 0 0 0 0

230 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

231 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 230 0 0 0 0 0 0 0 0 0 0

232 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 216 0 0 0 0 0 0 0 0 0 0

233 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 209 0 0 0 0 0 0 0 0 0 0

234 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 235 0 0 0 0 0 0 0 0 0 0

235 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 209 0 0 0 0 0 0 0 0 0 0

236 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 237 0 0 0 0 0 0 0 0 0 0

237 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

238 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 236 0 0 0 0 0 0 0 0 0 0

239 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 240 0 0 0 0 0 0 0 0 0 0

240 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

241 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 239 0 0 0 0 0 0 0 0 0 0

242 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 210 0 0 0 0 0 0 0 0 0 0

243 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 244 0 0 0 0 0 0 0 0 0 0

244 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 210 0 0 0 0 0 0 0 0 0 0

245 11 BoundingBox 0 2048 11 BoundingBox 11 BoundingBox 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

246 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 245 0 0 0 0 0 0 0 0 0 0

247 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 248 0 0 0 0 0 0 0 0 0 0

248 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 236 0 0 0 0 0 0 0 0 0 0

249 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

250 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

251 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 211 0 0 0 0 0 0 0 0 0 0

252 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 253 0 0 0 0 0 0 0 0 0 0

253 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 211 0 0 0 0 0 0 0 0 0 0

254 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

255 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 254 0 0 0 0 0 0 0 0 0 0

256 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 213 0 0 0 0 0 0 0 0 0 0

257 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

258 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 256 0 0 0 0 0 0 0 0 0 0

259 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 260 0 0 0 0 0 0 0 0 0 0

260 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 212 0 0 0 0 0 0 0 0 0 0

261 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 262 0 0 0 0 0 0 0 0 0 0

262 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 263 0 0 0 0 0 0 0 0 0 0

263 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

264 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 265 0 0 0 0 0 0 0 0 0 0

265 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

266 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 267 0 0 0 0 0 0 0 0 0 0

267 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 216 0 0 0 0 0 0 0 0 0 0

268 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 269 0 0 0 0 0 0 0 0 0 0

269 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

270 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 271 0 0 0 0 0 0 0 0 0 0

271 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 254 0 0 0 0 0 0 0 0 0 0

272 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 273 0 0 0 0 0 0 0 0 0 0

273 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 274 0 0 0 0 0 0 0 0 0 0

274 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 275 0 0 0 0 0 0 0 0 0 0

275 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

276 14 LColor const * 0 8576 14 LColor const * 14 LColor const * 0 0 277 0 0 0 0 0 0 0 0 0 0

277 12 LColor const 0 8832 12 LColor const 12 LColor const 0 0 278 0 0 0 0 0 0 0 0 0 0

278 6 LColor 0 2105344 6 LColor 6 LColor 0 0 279 0 0 0 0 0 0 0 0 0 0

279 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 280 0 0 0 0 0 0 0 0 0 0

280 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

281 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

282 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 281 0 0 0 0 0 0 0 0 0 0

283 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 284 0 0 0 0 0 0 0 0 0 0

284 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 285 0 0 0 0 0 0 0 0 0 0

285 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

286 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 287 0 0 0 0 0 0 0 0 0 0

287 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 288 0 0 0 0 0 0 0 0 0 0

288 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

289 9 int const 0 8832 9 int const 9 int const 0 0 215 0 0 0 0 0 0 0 0 0 0

290 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 278 0 0 0 0 0 0 0 0 0 0

291 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 292 0 0 0 0 0 0 0 0 0 0

292 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 293 0 0 0 0 0 0 0 0 0 0

293 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

294 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 295 0 0 0 0 0 0 0 0 0 0

295 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 296 0 0 0 0 0 0 0 0 0 0

296 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

297 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 298 0 0 0 0 0 0 0 0 0 0

298 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 218 0 0 0 0 0 0 0 0 0 0

299 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 218 0 0 0 0 0 0 0 0 0 0

300 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 219 0 0 0 0 0 0 0 0 0 0

301 17 IgnorePVSAttrib * 0 8576 17 IgnorePVSAttrib * 17 IgnorePVSAttrib * 0 0 220 0 0 0 0 0 0 0 0 0 0

302 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 303 0 0 0 0 0 0 0 0 0 0

303 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 221 0 0 0 0 0 0 0 0 0 0

304 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 221 0 0 0 0 0 0 0 0 0 0

305 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 306 0 0 0 0 0 0 0 0 0 0

306 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 223 0 0 0 0 0 0 0 0 0 0

307 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 223 0 0 0 0 0 0 0 0 0 0

308 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 309 0 0 0 0 0 0 0 0 0 0

309 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 224 0 0 0 0 0 0 0 0 0 0

310 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 224 0 0 0 0 0 0 0 0 0 0

311 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 312 0 0 0 0 0 0 0 0 0 0

312 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 226 0 0 0 0 0 0 0 0 0 0

313 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 226 0 0 0 0 0 0 0 0 0 0

0
2
314 10 class_slot 0 2 0 129 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

315 10 class_slot 0 2 0 192 0 0 0 0 0 0 0 27 IgnorePVSAttrib::class_slot 0

0
