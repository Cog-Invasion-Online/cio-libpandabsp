1541773983
3 3
3 bsp 4 t5GT 3 bsp 
158
156 14 get_class_type 0 4 314 27 CBaseEntity::get_class_type 0 1 3 0
52
static TypeHandle CBaseEntity::get_class_type(void);

157 11 CBaseEntity 0 4 314 24 CBaseEntity::CBaseEntity 0 2 1 2 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

158 10 get_entnum 0 4 314 23 CBaseEntity::get_entnum 0 1 4 0
40
int CBaseEntity::get_entnum(void) const;

159 10 get_loader 0 4 314 23 CBaseEntity::get_loader 0 1 5 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

160 12 ~CBaseEntity 0 4 314 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

161 14 get_class_type 0 4 316 28 CPointEntity::get_class_type 0 1 8 0
53
static TypeHandle CPointEntity::get_class_type(void);

162 12 CPointEntity 0 4 316 26 CPointEntity::CPointEntity 0 2 6 7 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

163 10 get_origin 0 4 316 24 CPointEntity::get_origin 0 1 9 0
45
LPoint3 CPointEntity::get_origin(void) const;

164 10 get_angles 0 4 316 24 CPointEntity::get_angles 0 1 10 0
46
LVector3 CPointEntity::get_angles(void) const;

165 13 ~CPointEntity 0 4 316 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

166 14 get_class_type 0 4 317 29 CBoundsEntity::get_class_type 0 1 13 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

167 13 CBoundsEntity 0 4 317 28 CBoundsEntity::CBoundsEntity 0 2 11 12 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

168 10 get_bounds 0 4 317 25 CBoundsEntity::get_bounds 0 1 14 0
51
BoundingBox *CBoundsEntity::get_bounds(void) const;

169 9 is_inside 0 4 317 24 CBoundsEntity::is_inside 0 1 15 0
63
inline bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

170 13 fillin_bounds 0 4 317 28 CBoundsEntity::fillin_bounds 0 1 16 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

171 14 ~CBoundsEntity 0 4 317 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

172 14 get_class_type 0 4 318 28 CBrushEntity::get_class_type 0 1 19 0
53
static TypeHandle CBrushEntity::get_class_type(void);

173 12 CBrushEntity 0 4 318 26 CBrushEntity::CBrushEntity 0 2 17 18 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

174 12 get_modelnum 0 4 318 26 CBrushEntity::get_modelnum 0 1 20 0
43
int CBrushEntity::get_modelnum(void) const;

175 12 get_model_np 0 4 318 26 CBrushEntity::get_model_np 0 1 21 0
48
NodePath CBrushEntity::get_model_np(void) const;

176 16 get_model_bounds 0 4 318 30 CBrushEntity::get_model_bounds 0 1 22 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

177 13 ~CBrushEntity 0 4 318 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

178 4 make 0 4 319 19 BSPFaceAttrib::make 0 1 23 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

179 12 make_default 0 4 319 27 BSPFaceAttrib::make_default 0 1 24 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

180 12 get_material 0 4 319 27 BSPFaceAttrib::get_material 0 1 25 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

181 13 get_face_type 0 4 319 28 BSPFaceAttrib::get_face_type 0 1 26 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

182 14 get_class_slot 0 4 319 29 BSPFaceAttrib::get_class_slot 0 1 27 0
47
static int BSPFaceAttrib::get_class_slot(void);

183 14 get_class_type 0 4 319 29 BSPFaceAttrib::get_class_type 0 1 28 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

184 14 ~BSPFaceAttrib 0 4 319 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

185 9 BSPLoader 0 4 323 20 BSPLoader::BSPLoader 0 1 29 0
27
BSPLoader::BSPLoader(void);

186 4 read 0 4 323 15 BSPLoader::read 0 1 30 0
43
bool BSPLoader::read(Filename const &file);

187 16 do_optimizations 0 4 323 27 BSPLoader::do_optimizations 0 1 31 0
39
void BSPLoader::do_optimizations(void);

188 9 set_gamma 0 4 323 20 BSPLoader::set_gamma 0 1 32 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

189 9 get_gamma 0 4 323 20 BSPLoader::get_gamma 0 1 33 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

190 7 set_win 0 4 323 18 BSPLoader::set_win 0 1 34 0
45
void BSPLoader::set_win(GraphicsWindow *win);

191 10 set_camera 0 4 323 21 BSPLoader::set_camera 0 1 35 0
51
void BSPLoader::set_camera(NodePath const &camera);

192 10 set_render 0 4 323 21 BSPLoader::set_render 0 1 36 0
51
void BSPLoader::set_render(NodePath const &render);

193 19 set_want_visibility 0 4 323 30 BSPLoader::set_want_visibility 0 1 37 0
47
void BSPLoader::set_want_visibility(bool flag);

194 18 set_want_lightmaps 0 4 323 29 BSPLoader::set_want_lightmaps 0 1 38 0
46
void BSPLoader::set_want_lightmaps(bool flag);

195 16 set_physics_type 0 4 323 27 BSPLoader::set_physics_type 0 1 39 0
43
void BSPLoader::set_physics_type(int type);

196 19 set_visualize_leafs 0 4 323 30 BSPLoader::set_visualize_leafs 0 1 40 0
47
void BSPLoader::set_visualize_leafs(bool flag);

197 18 set_materials_file 0 4 323 29 BSPLoader::set_materials_file 0 1 41 0
57
void BSPLoader::set_materials_file(Filename const &file);

198 25 set_texture_contents_file 0 4 323 36 BSPLoader::set_texture_contents_file 0 1 42 0
64
void BSPLoader::set_texture_contents_file(Filename const &file);

199 15 setup_shadowcam 0 4 323 26 BSPLoader::setup_shadowcam 0 1 43 0
38
void BSPLoader::setup_shadowcam(void);

200 16 add_dynamic_node 0 4 323 27 BSPLoader::add_dynamic_node 0 1 44 0
55
void BSPLoader::add_dynamic_node(NodePath const &node);

201 16 set_want_shadows 0 4 323 27 BSPLoader::set_want_shadows 0 1 45 0
44
void BSPLoader::set_want_shadows(bool flag);

202 18 set_shadow_cam_pos 0 4 323 29 BSPLoader::set_shadow_cam_pos 0 1 46 0
55
void BSPLoader::set_shadow_cam_pos(LPoint3 const &pos);

203 22 set_shadow_cam_bitmask 0 4 323 33 BSPLoader::set_shadow_cam_bitmask 0 1 47 0
62
void BSPLoader::set_shadow_cam_bitmask(BitMask32 const &mask);

204 16 set_shadow_color 0 4 323 27 BSPLoader::set_shadow_color 0 1 48 0
54
void BSPLoader::set_shadow_color(LColor const &color);

205 21 set_shadow_resolution 0 4 323 32 BSPLoader::set_shadow_resolution 0 1 49 0
65
void BSPLoader::set_shadow_resolution(int filmsize, int texsize);

206 12 cast_shadows 0 4 323 23 BSPLoader::cast_shadows 0 1 50 0
45
void BSPLoader::cast_shadows(NodePath &node);

207 14 get_shadow_tex 0 4 323 25 BSPLoader::get_shadow_tex 0 1 51 0
47
Texture *BSPLoader::get_shadow_tex(void) const;

208 16 extract_modelnum 0 4 323 27 BSPLoader::extract_modelnum 0 1 52 0
51
inline int BSPLoader::extract_modelnum(int entnum);

209 16 get_model_bounds 0 4 323 27 BSPLoader::get_model_bounds 0 1 53 0
84
inline void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

210 28 set_server_entity_dispatcher 0 4 323 39 BSPLoader::set_server_entity_dispatcher 0 1 54 0
67
void BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

211 27 link_server_entity_to_class 0 4 323 38 BSPLoader::link_server_entity_to_class 0 1 55 0
89
void BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

212 6 set_ai 0 4 323 17 BSPLoader::set_ai 0 1 56 0
32
void BSPLoader::set_ai(bool ai);

213 5 is_ai 0 4 323 16 BSPLoader::is_ai 0 1 57 0
41
inline bool BSPLoader::is_ai(void) const;

214 19 update_dynamic_node 0 4 323 30 BSPLoader::update_dynamic_node 0 1 58 0
58
void BSPLoader::update_dynamic_node(NodePath const &node);

215 10 trace_line 0 4 323 21 BSPLoader::trace_line 0 1 59 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

216 20 link_entity_to_class 0 4 323 31 BSPLoader::link_entity_to_class 0 1 60 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

217 28 get_py_entity_by_target_name 0 4 323 39 BSPLoader::get_py_entity_by_target_name 0 1 61 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

218 17 find_all_entities 0 4 323 28 BSPLoader::find_all_entities 0 1 62 0
69
PyObject *BSPLoader::find_all_entities(std::string const &classname);

219 20 get_entity_keyvalues 0 4 323 31 BSPLoader::get_entity_keyvalues 0 1 63 0
71
void BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

220 18 link_cent_to_pyent 0 4 323 29 BSPLoader::link_cent_to_pyent 0 1 64 0
63
void BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

221 16 get_num_entities 0 4 323 27 BSPLoader::get_num_entities 0 1 65 0
44
int BSPLoader::get_num_entities(void) const;

222 16 get_entity_value 0 4 323 27 BSPLoader::get_entity_value 0 1 66 0
75
std::string BSPLoader::get_entity_value(int entnum, char const *key) const;

223 22 get_entity_value_float 0 4 323 33 BSPLoader::get_entity_value_float 0 1 67 0
75
float BSPLoader::get_entity_value_float(int entnum, char const *key) const;

224 20 get_entity_value_int 0 4 323 31 BSPLoader::get_entity_value_int 0 1 68 0
71
int BSPLoader::get_entity_value_int(int entnum, char const *key) const;

225 23 get_entity_value_vector 0 4 323 34 BSPLoader::get_entity_value_vector 0 1 69 0
79
LVector3 BSPLoader::get_entity_value_vector(int entnum, char const *key) const;

226 22 get_entity_value_color 0 4 323 33 BSPLoader::get_entity_value_color 0 1 70 0
95
LColor BSPLoader::get_entity_value_color(int entnum, char const *key, bool scale = true) const;

227 10 get_entity 0 4 323 21 BSPLoader::get_entity 0 1 71 0
49
NodePath BSPLoader::get_entity(int entnum) const;

228 9 get_model 0 4 323 20 BSPLoader::get_model 0 1 72 0
50
NodePath BSPLoader::get_model(int modelnum) const;

229 12 get_c_entity 0 4 323 23 BSPLoader::get_c_entity 0 1 73 0
68
inline CBaseEntity *BSPLoader::get_c_entity(int const entnum) const;

230 9 find_leaf 0 4 323 20 BSPLoader::find_leaf 0 2 74 75 0
105
inline int BSPLoader::find_leaf(NodePath const &np);
inline int BSPLoader::find_leaf(LPoint3 const &pos);

231 9 find_node 0 4 323 20 BSPLoader::find_node 0 1 76 0
52
inline int BSPLoader::find_node(LPoint3 const &pos);

232 18 is_cluster_visible 0 4 323 29 BSPLoader::is_cluster_visible 0 1 77 0
79
inline bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

233 15 pvs_bounds_test 0 4 323 26 BSPLoader::pvs_bounds_test 0 1 78 0
78
inline bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds);

234 15 make_net_bounds 0 4 323 26 BSPLoader::make_net_bounds 0 1 79 0
154
inline ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

235 16 has_active_level 0 4 323 27 BSPLoader::has_active_level 0 1 80 0
52
inline bool BSPLoader::has_active_level(void) const;

236 14 has_visibility 0 4 323 25 BSPLoader::has_visibility 0 1 81 0
50
inline bool BSPLoader::has_visibility(void) const;

237 7 cleanup 0 4 323 18 BSPLoader::cleanup 0 1 82 0
30
void BSPLoader::cleanup(void);

238 10 get_result 0 4 323 21 BSPLoader::get_result 0 1 83 0
43
NodePath BSPLoader::get_result(void) const;

239 14 get_global_ptr 0 4 323 25 BSPLoader::get_global_ptr 0 1 84 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

240 10 ~BSPLoader 0 4 323 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

241 14 get_class_type 0 4 325 32 BSPCullTraverser::get_class_type 0 1 87 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

242 16 BSPCullTraverser 0 4 325 34 BSPCullTraverser::BSPCullTraverser 0 2 85 86 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

243 17 ~BSPCullTraverser 0 4 325 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

244 15 IgnorePVSAttrib 0 4 327 32 IgnorePVSAttrib::IgnorePVSAttrib 0 1 88 0
46
inline IgnorePVSAttrib::IgnorePVSAttrib(void);

245 4 make 0 4 327 21 IgnorePVSAttrib::make 0 1 89 0
66
static ConstPointerTo< RenderAttrib > IgnorePVSAttrib::make(void);

246 14 get_class_slot 0 4 327 31 IgnorePVSAttrib::get_class_slot 0 1 90 0
49
static int IgnorePVSAttrib::get_class_slot(void);

247 14 get_class_type 0 4 327 31 IgnorePVSAttrib::get_class_type 0 1 91 0
56
static TypeHandle IgnorePVSAttrib::get_class_type(void);

248 16 ~IgnorePVSAttrib 0 4 327 33 IgnorePVSAttrib::~IgnorePVSAttrib 0 0 0
40
IgnorePVSAttrib::~IgnorePVSAttrib(void);

249 14 get_class_type 0 4 328 25 BSPRender::get_class_type 0 1 94 0
50
static TypeHandle BSPRender::get_class_type(void);

250 9 BSPRender 0 4 328 20 BSPRender::BSPRender 0 2 92 93 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

251 10 ~BSPRender 0 4 328 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

252 14 get_class_type 0 4 330 23 BSPRoot::get_class_type 0 1 97 0
48
static TypeHandle BSPRoot::get_class_type(void);

253 7 BSPRoot 0 4 330 16 BSPRoot::BSPRoot 0 2 95 96 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

254 8 ~BSPRoot 0 4 330 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

255 14 get_class_type 0 4 331 23 BSPProp::get_class_type 0 1 100 0
48
static TypeHandle BSPProp::get_class_type(void);

256 7 BSPProp 0 4 331 16 BSPProp::BSPProp 0 2 98 99 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

257 8 ~BSPProp 0 4 331 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

258 14 get_class_type 0 4 333 24 BSPModel::get_class_type 0 1 103 0
49
static TypeHandle BSPModel::get_class_type(void);

259 8 BSPModel 0 4 333 18 BSPModel::BSPModel 0 2 101 102 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

260 9 ~BSPModel 0 4 333 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

261 24 upcast_to_ReferenceCount 0 12 334 36 ShaderSpec::upcast_to_ReferenceCount 0 1 108 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

262 22 downcast_to_ShaderSpec 0 12 335 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

263 17 upcast_to_Namable 0 12 334 29 ShaderSpec::upcast_to_Namable 0 1 109 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

264 22 downcast_to_ShaderSpec 0 12 336 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

265 10 ShaderSpec 0 4 334 22 ShaderSpec::ShaderSpec 0 2 104 105 0
196
ShaderSpec::ShaderSpec(std::string const &name, Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file = "");
inline ShaderSpec::ShaderSpec(ShaderSpec const &) = default;

266 15 add_permutation 0 4 337 41 ShaderSpec::Permutations::add_permutation 0 1 112 0
97
void ShaderSpec::Permutations::add_permutation(std::string const &key, std::string const &value);

267 9 add_input 0 4 337 35 ShaderSpec::Permutations::add_input 0 1 113 0
88
void ShaderSpec::Permutations::add_input(ShaderInput const &inp, bool important = true);

268 8 add_flag 0 4 337 34 ShaderSpec::Permutations::add_flag 0 1 114 0
50
void ShaderSpec::Permutations::add_flag(int flag);

269 11 operator == 0 4 337 37 ShaderSpec::Permutations::operator == 0 1 115 0
88
bool ShaderSpec::Permutations::operator ==(ShaderSpec::Permutations const &other) const;

270 11 operator != 0 4 337 37 ShaderSpec::Permutations::operator != 0 1 116 0
88
bool ShaderSpec::Permutations::operator !=(ShaderSpec::Permutations const &other) const;

271 10 operator < 0 4 337 36 ShaderSpec::Permutations::operator < 0 1 117 0
87
bool ShaderSpec::Permutations::operator <(ShaderSpec::Permutations const &other) const;

272 12 Permutations 0 4 337 38 ShaderSpec::Permutations::Permutations 0 2 110 111 0
153
inline ShaderSpec::Permutations::Permutations(void) = default;
inline ShaderSpec::Permutations::Permutations(ShaderSpec::Permutations const &) = default;

273 13 ~Permutations 0 4 337 39 ShaderSpec::Permutations::~Permutations 0 0 0
46
ShaderSpec::Permutations::~Permutations(void);

274 18 setup_permutations 0 6 334 30 ShaderSpec::setup_permutations 0 1 106 0
159
virtual ShaderSpec::Permutations ShaderSpec::setup_permutations(RenderState const *state, GeomVertexAnimationSpec const &anim, PSSMShaderGenerator *generator);

275 14 get_class_type 0 4 334 26 ShaderSpec::get_class_type 0 1 107 0
51
static TypeHandle ShaderSpec::get_class_type(void);

276 11 ~ShaderSpec 0 4 334 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

277 20 VertexLitGenericSpec 0 4 338 42 VertexLitGenericSpec::VertexLitGenericSpec 0 2 118 119 0
140
VertexLitGenericSpec::VertexLitGenericSpec(void);
inline VertexLitGenericSpec::VertexLitGenericSpec(VertexLitGenericSpec const &) = default;

278 21 ~VertexLitGenericSpec 0 4 338 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

279 22 LightmappedGenericSpec 0 4 339 46 LightmappedGenericSpec::LightmappedGenericSpec 0 2 120 121 0
150
LightmappedGenericSpec::LightmappedGenericSpec(void);
inline LightmappedGenericSpec::LightmappedGenericSpec(LightmappedGenericSpec const &) = default;

280 23 ~LightmappedGenericSpec 0 4 339 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

281 19 PSSMShaderGenerator 0 4 340 40 PSSMShaderGenerator::PSSMShaderGenerator 0 2 122 123 0
205
PSSMShaderGenerator::PSSMShaderGenerator(GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline PSSMShaderGenerator::PSSMShaderGenerator(PSSMShaderGenerator const &) = default;

282 17 synthesize_shader 0 4 340 38 PSSMShaderGenerator::synthesize_shader 0 1 124 221
// This is important because in BSP levels, we must know the GeomNode that is associated with
// each render state. We need to apply the appropriate shader inputs for updating
// with local light sources and ambient cube.
165
ConstPointerTo< ShaderAttrib > PSSMShaderGenerator::synthesize_shader(RenderState const *rs, GeomVertexAnimationSpec const &anim, nodeshaderinput_t *bsp_node_input);

283 13 set_sun_light 0 4 340 34 PSSMShaderGenerator::set_sun_light 0 1 125 0
60
void PSSMShaderGenerator::set_sun_light(NodePath const &np);

284 12 start_update 0 4 340 33 PSSMShaderGenerator::start_update 0 1 126 0
45
void PSSMShaderGenerator::start_update(void);

285 10 add_shader 0 4 340 31 PSSMShaderGenerator::add_shader 0 1 127 0
67
void PSSMShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

286 19 has_shadow_sunlight 0 4 340 40 PSSMShaderGenerator::has_shadow_sunlight 0 1 128 0
65
inline bool PSSMShaderGenerator::has_shadow_sunlight(void) const;

287 22 get_pssm_array_texture 0 4 340 43 PSSMShaderGenerator::get_pssm_array_texture 0 1 129 0
72
inline Texture *PSSMShaderGenerator::get_pssm_array_texture(void) const;

288 12 get_pssm_rig 0 4 340 33 PSSMShaderGenerator::get_pssm_rig 0 1 130 0
68
inline PSSMCameraRig *PSSMShaderGenerator::get_pssm_rig(void) const;

289 14 get_class_type 0 4 340 35 PSSMShaderGenerator::get_class_type 0 1 131 0
60
static TypeHandle PSSMShaderGenerator::get_class_type(void);

290 20 ~PSSMShaderGenerator 0 4 340 41 PSSMShaderGenerator::~PSSMShaderGenerator 0 0 0
48
PSSMShaderGenerator::~PSSMShaderGenerator(void);

291 3 get 0 4 342 18 TextureStages::get 0 2 134 135 0
159
static TextureStage *TextureStages::get(std::string const &name);
static TextureStage *TextureStages::get(std::string const &name, std::string const &uv_name);

292 15 get_basetexture 0 4 342 30 TextureStages::get_basetexture 0 1 136 0
58
static TextureStage *TextureStages::get_basetexture(void);

293 12 get_lightmap 0 4 342 27 TextureStages::get_lightmap 0 1 137 0
55
static TextureStage *TextureStages::get_lightmap(void);

294 19 get_bumped_lightmap 0 4 342 34 TextureStages::get_bumped_lightmap 0 1 138 0
63
static TextureStage *TextureStages::get_bumped_lightmap(int n);

295 13 get_spheremap 0 4 342 28 TextureStages::get_spheremap 0 1 139 0
56
static TextureStage *TextureStages::get_spheremap(void);

296 11 get_cubemap 0 4 342 26 TextureStages::get_cubemap 0 1 140 0
54
static TextureStage *TextureStages::get_cubemap(void);

297 13 get_normalmap 0 4 342 28 TextureStages::get_normalmap 0 1 141 0
56
static TextureStage *TextureStages::get_normalmap(void);

298 13 get_heightmap 0 4 342 28 TextureStages::get_heightmap 0 1 142 0
56
static TextureStage *TextureStages::get_heightmap(void);

299 12 get_glossmap 0 4 342 27 TextureStages::get_glossmap 0 1 143 0
55
static TextureStage *TextureStages::get_glossmap(void);

300 11 get_glowmap 0 4 342 26 TextureStages::get_glowmap 0 1 144 0
54
static TextureStage *TextureStages::get_glowmap(void);

301 13 TextureStages 0 4 342 28 TextureStages::TextureStages 0 2 132 133 0
122
inline TextureStages::TextureStages(void) = default;
inline TextureStages::TextureStages(TextureStages const &) = default;

302 14 ~TextureStages 0 4 342 29 TextureStages::~TextureStages 0 0 0
36
TextureStages::~TextureStages(void);

303 3 get 0 4 343 14 Materials::get 0 1 147 0
47
static Material *Materials::get(Material *mat);

304 9 Materials 0 4 343 20 Materials::Materials 0 2 145 146 0
102
inline Materials::Materials(void) = default;
inline Materials::Materials(Materials const &) = default;

305 10 ~Materials 0 4 343 21 Materials::~Materials 0 0 0
28
Materials::~Materials(void);

306 11 BSPMaterial 0 4 344 24 BSPMaterial::BSPMaterial 0 2 148 149 0
129
inline explicit BSPMaterial::BSPMaterial(std::string const &name = "");
inline BSPMaterial::BSPMaterial(BSPMaterial const &copy);

307 10 operator = 0 4 344 23 BSPMaterial::operator = 0 1 150 0
61
inline void BSPMaterial::operator =(BSPMaterial const &copy);

308 10 set_shader 0 4 344 23 BSPMaterial::set_shader 0 1 151 0
61
void BSPMaterial::set_shader(std::string const &shader_name);

309 10 get_shader 0 4 344 23 BSPMaterial::get_shader 0 1 152 0
55
inline std::string BSPMaterial::get_shader(void) const;

310 16 set_shader_input 0 4 344 29 BSPMaterial::set_shader_input 0 1 153 0
61
void BSPMaterial::set_shader_input(ShaderInput const &input);

311 17 get_shader_inputs 0 4 344 30 BSPMaterial::get_shader_inputs 0 1 154 0
80
inline pvector< ShaderInput > const &BSPMaterial::get_shader_inputs(void) const;

312 14 get_class_type 0 4 344 27 BSPMaterial::get_class_type 0 1 155 0
52
static TypeHandle BSPMaterial::get_class_type(void);

313 12 ~BSPMaterial 0 4 344 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

155
1 0 0 7 4 346 160 0 0 0 
2 0 0 7 4 346 160 0 0 1 6 param0 0 347  
3 0 0 7 3 350 0 0 0 0 
4 0 0 6 5 322 0 0 0 1 4 this 3 347  
5 0 0 6 6 351 0 0 0 1 4 this 3 347  
6 0 0 7 10 352 165 0 0 0 
7 0 0 7 10 352 165 0 0 1 6 param0 0 353  
8 0 0 7 9 350 0 0 0 0 
9 0 0 7 11 357 0 0 0 1 4 this 3 353  
10 0 0 7 12 360 0 0 0 1 4 this 3 353  
11 0 0 7 16 361 171 0 0 0 
12 0 0 7 16 361 171 0 0 1 6 param0 0 362  
13 0 0 7 15 350 0 0 0 0 
14 0 0 7 17 365 0 0 0 1 4 this 3 362  
15 0 0 6 18 368 0 0 0 2 4 this 3 362  3 pos 1 366  
16 0 0 4 19 369 0 0 0 3 4 this 3 361  4 mins 1 357  4 maxs 1 357  
17 0 0 7 23 370 177 0 0 0 
18 0 0 7 23 370 177 0 0 1 6 param0 0 371  
19 0 0 7 22 350 0 0 0 0 
20 0 0 6 24 322 0 0 0 1 4 this 3 371  
21 0 0 7 25 374 0 0 0 1 4 this 3 371  
22 0 0 4 26 369 0 0 0 3 4 this 3 370  4 mins 1 357  4 maxs 1 357  
23 0 0 7 31 377 0 0 0 2 13 face_material 1 376  9 face_type 1 322  
24 0 0 7 32 377 0 0 0 0 
25 0 0 6 33 376 0 0 0 1 4 this 3 378  
26 0 0 6 34 322 0 0 0 1 4 this 3 378  
27 0 0 6 35 322 0 0 0 0 
28 0 0 7 38 350 0 0 0 0 
29 0 0 7 41 351 240 0 0 0 
30 0 0 6 42 368 0 0 0 2 4 this 3 351  4 file 1 380  
31 0 0 4 43 369 0 0 0 1 4 this 3 351  
32 0 0 4 44 369 0 0 0 3 4 this 3 351  5 gamma 1 383  10 overbright 1 322  
33 0 0 6 45 383 0 0 0 1 4 this 3 385  
34 0 0 4 46 369 0 0 0 2 4 this 3 351  3 win 1 387  
35 0 0 4 47 369 0 0 0 2 4 this 3 351  6 camera 1 389  
36 0 0 4 48 369 0 0 0 2 4 this 3 351  6 render 1 389  
37 0 0 4 49 369 0 0 0 2 4 this 3 351  4 flag 1 368  
38 0 0 4 50 369 0 0 0 2 4 this 3 351  4 flag 1 368  
39 0 0 4 51 369 0 0 0 2 4 this 3 351  4 type 1 322  
40 0 0 4 52 369 0 0 0 2 4 this 3 351  4 flag 1 368  
41 0 0 4 53 369 0 0 0 2 4 this 3 351  4 file 1 380  
42 0 0 4 54 369 0 0 0 2 4 this 3 351  4 file 1 380  
43 0 0 4 55 369 0 0 0 1 4 this 3 351  
44 0 0 4 56 369 0 0 0 2 4 this 3 351  4 node 1 389  
45 0 0 4 57 369 0 0 0 2 4 this 3 351  4 flag 1 368  
46 0 0 4 58 369 0 0 0 2 4 this 3 351  3 pos 1 366  
47 0 0 4 59 369 0 0 0 2 4 this 3 351  4 mask 1 391  
48 0 0 4 60 369 0 0 0 2 4 this 3 351  5 color 1 395  
49 0 0 4 61 369 0 0 0 3 4 this 3 351  8 filmsize 1 322  7 texsize 1 322  
50 0 0 4 62 369 0 0 0 2 4 this 3 351  4 node 1 374  
51 0 0 7 63 401 0 0 0 1 4 this 3 385  
52 0 0 6 64 322 0 0 0 2 4 this 3 351  6 entnum 1 322  
53 0 0 4 65 369 0 0 0 4 4 this 3 351  8 modelnum 1 322  4 mins 1 357  4 maxs 1 357  
54 0 0 4 66 369 0 0 0 2 4 this 3 351  10 dispatcher 1 402  
55 0 0 4 67 369 0 0 0 3 4 this 3 351  4 name 1 376  4 type 1 405  
56 0 0 4 68 369 0 0 0 2 4 this 3 351  2 ai 1 368  
57 0 0 6 69 368 0 0 0 1 4 this 3 385  
58 0 0 4 70 369 0 0 0 2 4 this 3 351  4 node 1 389  
59 0 0 6 71 368 0 0 0 3 4 this 3 351  5 start 1 366  3 end 1 366  
60 0 0 4 72 369 0 0 0 3 4 this 3 351  7 entname 1 376  4 type 1 405  
61 0 0 6 73 402 0 0 0 2 4 this 3 385  10 targetname 1 376  
62 0 0 6 74 402 0 0 0 2 4 this 3 351  9 classname 1 376  
63 0 0 4 75 369 0 0 0 3 4 this 3 351  4 list 1 402  6 entnum 1 408  
64 0 0 4 76 369 0 0 0 3 4 this 3 351  5 entum 1 322  5 pyent 1 402  
65 0 0 6 77 322 0 0 0 1 4 this 3 385  
66 0 0 6 78 376 0 0 0 3 4 this 3 385  6 entnum 1 322  3 key 1 376  
67 0 0 6 79 384 0 0 0 3 4 this 3 385  6 entnum 1 322  3 key 1 376  
68 0 0 6 80 322 0 0 0 3 4 this 3 385  6 entnum 1 322  3 key 1 376  
69 0 0 7 81 360 0 0 0 3 4 this 3 385  6 entnum 1 322  3 key 1 376  
70 0 0 7 82 409 0 0 0 4 4 this 3 385  6 entnum 1 322  3 key 1 376  5 scale 1 368  
71 0 0 7 83 374 0 0 0 2 4 this 3 385  6 entnum 1 322  
72 0 0 7 84 374 0 0 0 2 4 this 3 385  8 modelnum 1 322  
73 0 0 7 85 346 160 0 0 2 4 this 3 385  6 entnum 1 408  
74 0 0 6 86 322 0 0 0 2 4 this 3 351  3 pos 1 366  
75 0 0 6 86 322 0 0 0 2 4 this 3 351  2 np 1 389  
76 0 0 6 87 322 0 0 0 2 4 this 3 351  3 pos 1 366  
77 0 0 6 88 368 0 0 0 3 4 this 3 385  12 curr_cluster 1 322  7 cluster 1 322  
78 0 0 6 89 368 0 0 0 2 4 this 3 351  6 bounds 1 410  
79 0 0 7 90 410 0 0 0 3 4 this 3 351  13 net_transform 1 413  8 original 1 410  
80 0 0 6 91 368 0 0 0 1 4 this 3 385  
81 0 0 6 92 368 0 0 0 1 4 this 3 385  
82 0 0 4 93 369 0 0 0 1 4 this 3 351  
83 0 0 7 94 374 0 0 0 1 4 this 3 385  
84 0 0 6 95 351 0 0 0 0 
85 0 0 7 101 418 243 0 0 1 6 param0 0 416  
86 0 0 7 101 418 243 0 0 2 4 trav 1 419  6 loader 1 351  
87 0 0 7 100 350 0 0 0 0 
88 0 0 7 104 420 248 0 0 0 
89 0 0 7 105 377 0 0 0 0 
90 0 0 6 106 322 0 0 0 0 
91 0 0 7 108 350 0 0 0 0 
92 0 0 7 113 423 251 0 0 1 6 param0 0 421  
93 0 0 7 113 423 251 0 0 2 4 name 1 376  6 loader 1 351  
94 0 0 7 112 350 0 0 0 0 
95 0 0 7 117 426 254 0 0 1 6 param0 0 424  
96 0 0 7 117 426 254 0 0 1 4 name 1 376  
97 0 0 7 116 350 0 0 0 0 
98 0 0 7 122 429 257 0 0 1 6 param0 0 427  
99 0 0 7 122 429 257 0 0 1 4 name 1 376  
100 0 0 7 121 350 0 0 0 0 
101 0 0 7 126 432 260 0 0 1 6 param0 0 430  
102 0 0 7 126 432 260 0 0 1 4 name 1 376  
103 0 0 7 125 350 0 0 0 0 
104 0 0 7 135 435 276 0 0 1 6 param0 0 433  
105 0 0 7 135 435 276 0 0 4 4 name 1 376  9 vert_file 1 380  10 pixel_file 1 380  9 geom_file 1 380  
106 0 0 7 145 443 273 0 0 4 4 this 3 435  5 state 1 436  4 anim 1 439  9 generator 1 442  
107 0 0 7 146 350 0 0 0 0 
108 0 0 7 130 444 0 0 0 1 4 this 3 435  
109 0 0 6 133 445 0 0 0 1 4 this 3 435  
110 0 0 7 143 443 273 0 0 0 
111 0 0 7 143 443 273 0 0 1 6 param0 0 446  
112 0 0 4 137 369 0 0 0 3 4 this 3 443  3 key 1 376  5 value 1 376  
113 0 0 4 138 369 0 0 0 3 4 this 3 443  3 inp 1 448  9 important 1 368  
114 0 0 4 139 369 0 0 0 2 4 this 3 443  4 flag 1 322  
115 0 0 6 140 368 0 0 0 2 4 this 3 446  5 other 1 446  
116 0 0 6 141 368 0 0 0 2 4 this 3 446  5 other 1 446  
117 0 0 6 142 368 0 0 0 2 4 this 3 446  5 other 1 446  
118 0 0 7 149 451 278 0 0 0 
119 0 0 7 149 451 278 0 0 1 6 param0 0 452  
120 0 0 7 152 454 280 0 0 0 
121 0 0 7 152 454 280 0 0 1 6 param0 0 455  
122 0 0 7 156 442 290 0 0 3 3 gsg 1 457  6 camera 1 389  6 render 1 389  
123 0 0 7 156 442 290 0 0 1 6 param0 0 459  
124 0 0 7 157 465 0 0 221 // This is important because in BSP levels, we must know the GeomNode that is associated with
// each render state. We need to apply the appropriate shader inputs for updating
// with local light sources and ambient cube. 4 4 this 3 442  2 rs 1 436  4 anim 1 439  14 bsp_node_input 1 463  
125 0 0 4 158 369 0 0 0 2 4 this 3 442  2 np 1 389  
126 0 0 4 159 369 0 0 0 1 4 this 3 442  
127 0 0 4 160 369 0 0 0 2 4 this 3 442  4 spec 1 435  
128 0 0 6 161 368 0 0 0 1 4 this 3 459  
129 0 0 7 162 401 0 0 0 1 4 this 3 459  
130 0 0 6 163 466 0 0 0 1 4 this 3 459  
131 0 0 7 164 350 0 0 0 0 
132 0 0 7 177 468 302 0 0 0 
133 0 0 7 177 468 302 0 0 1 6 param0 0 469  
134 0 0 7 167 472 0 0 0 1 4 name 1 376  
135 0 0 7 167 472 0 0 0 2 4 name 1 376  7 uv_name 1 376  
136 0 0 7 168 472 0 0 0 0 
137 0 0 7 169 472 0 0 0 0 
138 0 0 7 170 472 0 0 0 1 1 n 1 322  
139 0 0 7 171 472 0 0 0 0 
140 0 0 7 172 472 0 0 0 0 
141 0 0 7 173 472 0 0 0 0 
142 0 0 7 174 472 0 0 0 0 
143 0 0 7 175 472 0 0 0 0 
144 0 0 7 176 472 0 0 0 0 
145 0 0 7 181 473 305 0 0 0 
146 0 0 7 181 473 305 0 0 1 6 param0 0 474  
147 0 0 7 180 476 0 0 0 1 3 mat 1 476  
148 0 0 7 185 479 313 0 0 1 4 copy 1 477  
149 0 0 7 185 479 313 0 0 1 4 name 1 376  
150 0 0 7 186 479 313 0 0 2 4 this 3 479  4 copy 1 477  
151 0 0 4 187 369 0 0 0 2 4 this 3 479  11 shader_name 1 376  
152 0 0 6 188 376 0 0 0 1 4 this 3 477  
153 0 0 4 189 369 0 0 0 2 4 this 3 479  5 input 1 448  
154 0 0 6 190 480 0 0 0 1 4 this 3 477  
155 0 0 7 191 350 0 0 0 0 
169
314 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 157 160 0 3 156 158 159 0 0 1 0 315 0 0 0 0 0

315 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

316 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 162 165 0 3 161 163 164 0 0 1 0 314 0 0 0 0 0

317 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 167 171 0 4 166 168 169 170 0 0 1 0 314 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

318 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 173 177 0 4 172 174 175 176 0 0 1 0 314 0 0 0 0 0

319 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 184 1 483 6 178 179 180 181 182 183 0 0 1 0 320 0 0 0 1 321 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

320 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

321 0 0 794624 15 BSPFaceAttrib:: 0 319 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

322 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

323 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 185 240 0 54 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 0 0 0 0 1 324 58
/**
 * Loads and handles the operations of PBSP files.
 */

324 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 323 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

325 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 242 243 0 1 241 0 0 1 0 326 0 0 0 0 0

326 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

327 15 IgnorePVSAttrib 0 141313 15 IgnorePVSAttrib 15 IgnorePVSAttrib 0 0 0 1 244 248 1 484 3 245 246 247 0 0 1 0 320 0 0 0 0 86
/**
 * Forces the node/geom to not be tested against the PVS, just frustum culled.
 */

328 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 250 251 0 1 249 0 0 1 0 329 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

329 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

330 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 253 254 0 1 252 0 0 1 0 329 0 0 0 0 0

331 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 256 257 0 1 255 0 0 1 0 332 0 0 0 0 0

332 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

333 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 259 260 0 1 258 0 0 1 0 332 0 0 0 0 0

334 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 1 265 276 0 2 274 275 0 0 2 3 335 261 262 3 336 263 264 0 1 337 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

335 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

336 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

337 12 Permutations 0 403457 24 ShaderSpec::Permutations 24 ShaderSpec::Permutations 334 0 0 1 272 273 0 6 266 267 268 269 270 271 0 0 0 0 0 0

338 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 277 278 0 0 0 0 1 0 334 0 0 0 0 0

339 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 279 280 0 0 0 0 1 0 334 0 0 0 0 0

340 19 PSSMShaderGenerator 0 141313 19 PSSMShaderGenerator 19 PSSMShaderGenerator 0 0 0 1 281 290 0 8 282 283 284 285 286 287 288 289 0 0 1 0 341 0 0 0 0 0

341 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

342 13 TextureStages 0 141313 13 TextureStages 13 TextureStages 0 0 0 1 301 302 0 10 291 292 293 294 295 296 297 298 299 300 0 0 0 0 0 752
/**
 * This simple interface maintains a single TextureStage object for each unique name.
 * It avoids the creation of duplicate TextureStages with the same name, which
 * reduces texture swapping and draw call overhead.
 *
 * If using our shader system, you should always use this interface to get TextureStages.
 * You are not required to change any properties on the returned TextureStage, as the shader
 * specification will know what to do with the TextureStage from the name.
 * 
 * For example, you do not need to call TextureStage::set_mode() or NodePath::set_tex_gen().
 * If you apply a texture to a node with the get_normalmap() stage, the shader specification
 * will know that the texture you supplied is to be treated as a normal map.
 */

343 9 Materials 0 141313 9 Materials 9 Materials 0 0 0 1 304 305 0 1 303 0 0 0 0 0 0

344 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 306 313 0 6 307 308 309 310 311 312 0 0 1 0 345 0 0 0 0 0

345 8 Material 0 2048 8 Material 8 Material 0 0 0 0 0 0 0 0 0 0 0 0 682
/**
 * Defines the way an object appears in the presence of lighting.  A material
 * is only necessary if lighting is to be enabled; otherwise, the material
 * isn't used.
 *
 * There are two workflows that are supported: the "classic" workflow of
 * providing separate ambient, diffuse and specular colors, and the
 * "metalness" workflow, in which a base color is specified along with a
 * "metallic" value that indicates whether the material is a metal or a
 * dielectric.
 *
 * The size of the specular highlight can be specified by either specifying
 * the specular exponent (shininess) or by specifying a roughness value that
 * in perceptually linear in the range of 0-1.
 */

346 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 314 0 0 0 0 0 0 0 0 0 0

347 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 348 0 0 0 0 0 0 0 0 0 0

348 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 314 0 0 0 0 0 0 0 0 0 0

349 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

350 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 349 0 0 0 0 0 0 0 0 0 0

351 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 323 0 0 0 0 0 0 0 0 0 0

352 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 316 0 0 0 0 0 0 0 0 0 0

353 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 354 0 0 0 0 0 0 0 0 0 0

354 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 316 0 0 0 0 0 0 0 0 0 0

355 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 356 0 0 0 0 0 0 0 0 0 0

356 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

357 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 355 0 0 0 0 0 0 0 0 0 0

358 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 359 0 0 0 0 0 0 0 0 0 0

359 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

360 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 358 0 0 0 0 0 0 0 0 0 0

361 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 317 0 0 0 0 0 0 0 0 0 0

362 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 363 0 0 0 0 0 0 0 0 0 0

363 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 317 0 0 0 0 0 0 0 0 0 0

364 11 BoundingBox 0 2048 11 BoundingBox 11 BoundingBox 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

365 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 364 0 0 0 0 0 0 0 0 0 0

366 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 367 0 0 0 0 0 0 0 0 0 0

367 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 355 0 0 0 0 0 0 0 0 0 0

368 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

369 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

370 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 318 0 0 0 0 0 0 0 0 0 0

371 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 372 0 0 0 0 0 0 0 0 0 0

372 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 318 0 0 0 0 0 0 0 0 0 0

373 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

374 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 373 0 0 0 0 0 0 0 0 0 0

375 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 320 0 0 0 0 0 0 0 0 0 0

376 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

377 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 375 0 0 0 0 0 0 0 0 0 0

378 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 379 0 0 0 0 0 0 0 0 0 0

379 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 319 0 0 0 0 0 0 0 0 0 0

380 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 381 0 0 0 0 0 0 0 0 0 0

381 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 382 0 0 0 0 0 0 0 0 0 0

382 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

383 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 384 0 0 0 0 0 0 0 0 0 0

384 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

385 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 386 0 0 0 0 0 0 0 0 0 0

386 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 323 0 0 0 0 0 0 0 0 0 0

387 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 388 0 0 0 0 0 0 0 0 0 0

388 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

389 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 390 0 0 0 0 0 0 0 0 0 0

390 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 373 0 0 0 0 0 0 0 0 0 0

391 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 392 0 0 0 0 0 0 0 0 0 0

392 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 393 0 0 0 0 0 0 0 0 0 0

393 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 394 0 0 0 0 0 0 0 0 0 0

394 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

395 14 LColor const * 0 8576 14 LColor const * 14 LColor const * 0 0 396 0 0 0 0 0 0 0 0 0 0

396 12 LColor const 0 8832 12 LColor const 12 LColor const 0 0 397 0 0 0 0 0 0 0 0 0 0

397 6 LColor 0 2105344 6 LColor 6 LColor 0 0 398 0 0 0 0 0 0 0 0 0 0

398 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 399 0 0 0 0 0 0 0 0 0 0

399 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

400 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

401 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 400 0 0 0 0 0 0 0 0 0 0

402 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 403 0 0 0 0 0 0 0 0 0 0

403 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 404 0 0 0 0 0 0 0 0 0 0

404 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

405 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 406 0 0 0 0 0 0 0 0 0 0

406 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 407 0 0 0 0 0 0 0 0 0 0

407 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

408 9 int const 0 8832 9 int const 9 int const 0 0 322 0 0 0 0 0 0 0 0 0 0

409 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 397 0 0 0 0 0 0 0 0 0 0

410 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 411 0 0 0 0 0 0 0 0 0 0

411 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 412 0 0 0 0 0 0 0 0 0 0

412 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

413 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 414 0 0 0 0 0 0 0 0 0 0

414 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 415 0 0 0 0 0 0 0 0 0 0

415 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

416 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 417 0 0 0 0 0 0 0 0 0 0

417 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 325 0 0 0 0 0 0 0 0 0 0

418 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 325 0 0 0 0 0 0 0 0 0 0

419 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 326 0 0 0 0 0 0 0 0 0 0

420 17 IgnorePVSAttrib * 0 8576 17 IgnorePVSAttrib * 17 IgnorePVSAttrib * 0 0 327 0 0 0 0 0 0 0 0 0 0

421 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 422 0 0 0 0 0 0 0 0 0 0

422 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 328 0 0 0 0 0 0 0 0 0 0

423 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 328 0 0 0 0 0 0 0 0 0 0

424 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 425 0 0 0 0 0 0 0 0 0 0

425 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 330 0 0 0 0 0 0 0 0 0 0

426 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 330 0 0 0 0 0 0 0 0 0 0

427 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 428 0 0 0 0 0 0 0 0 0 0

428 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 331 0 0 0 0 0 0 0 0 0 0

429 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 331 0 0 0 0 0 0 0 0 0 0

430 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 431 0 0 0 0 0 0 0 0 0 0

431 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 333 0 0 0 0 0 0 0 0 0 0

432 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 333 0 0 0 0 0 0 0 0 0 0

433 18 ShaderSpec const * 0 8576 18 ShaderSpec const * 18 ShaderSpec const * 0 0 434 0 0 0 0 0 0 0 0 0 0

434 16 ShaderSpec const 0 8832 16 ShaderSpec const 16 ShaderSpec const 0 0 334 0 0 0 0 0 0 0 0 0 0

435 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 334 0 0 0 0 0 0 0 0 0 0

436 19 RenderState const * 0 8576 19 RenderState const * 19 RenderState const * 0 0 437 0 0 0 0 0 0 0 0 0 0

437 17 RenderState const 0 8832 17 RenderState const 17 RenderState const 0 0 438 0 0 0 0 0 0 0 0 0 0

438 11 RenderState 0 2048 11 RenderState 11 RenderState 0 0 0 0 0 0 0 0 0 0 0 0 340
/**
 * This represents a unique collection of RenderAttrib objects that correspond
 * to a particular renderable state.
 *
 * You should not attempt to create or modify a RenderState object directly.
 * Instead, call one of the make() functions to create one for you.  And
 * instead of modifying a RenderState object, create a new one.
 */

439 31 GeomVertexAnimationSpec const * 0 8576 31 GeomVertexAnimationSpec const * 31 GeomVertexAnimationSpec const * 0 0 440 0 0 0 0 0 0 0 0 0 0

440 29 GeomVertexAnimationSpec const 0 8832 29 GeomVertexAnimationSpec const 29 GeomVertexAnimationSpec const 0 0 441 0 0 0 0 0 0 0 0 0 0

441 23 GeomVertexAnimationSpec 0 2048 23 GeomVertexAnimationSpec 23 GeomVertexAnimationSpec 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * This object describes how the vertex animation, if any, represented in a
 * GeomVertexData is encoded.
 *
 * Vertex animation includes soft-skinned skeleton animation and morphs (blend
 * shapes), and might be performed on the CPU by Panda, or passed down to the
 * graphics backed to be performed on the hardware (depending on the
 * hardware's advertised capabilities).
 *
 * Changing this setting doesn't by itself change the way the animation is
 * actually performed; this just specifies how the vertices are set up to be
 * animated.
 */

442 21 PSSMShaderGenerator * 0 8576 21 PSSMShaderGenerator * 21 PSSMShaderGenerator * 0 0 340 0 0 0 0 0 0 0 0 0 0

443 14 Permutations * 0 8576 26 ShaderSpec::Permutations * 26 ShaderSpec::Permutations * 0 0 337 0 0 0 0 0 0 0 0 0 0

444 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 335 0 0 0 0 0 0 0 0 0 0

445 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 336 0 0 0 0 0 0 0 0 0 0

446 20 Permutations const * 0 8576 32 ShaderSpec::Permutations const * 32 ShaderSpec::Permutations const * 0 0 447 0 0 0 0 0 0 0 0 0 0

447 18 Permutations const 0 8832 30 ShaderSpec::Permutations const 30 ShaderSpec::Permutations const 0 0 337 0 0 0 0 0 0 0 0 0 0

448 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 449 0 0 0 0 0 0 0 0 0 0

449 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 450 0 0 0 0 0 0 0 0 0 0

450 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

451 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 338 0 0 0 0 0 0 0 0 0 0

452 28 VertexLitGenericSpec const * 0 8576 28 VertexLitGenericSpec const * 28 VertexLitGenericSpec const * 0 0 453 0 0 0 0 0 0 0 0 0 0

453 26 VertexLitGenericSpec const 0 8832 26 VertexLitGenericSpec const 26 VertexLitGenericSpec const 0 0 338 0 0 0 0 0 0 0 0 0 0

454 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 339 0 0 0 0 0 0 0 0 0 0

455 30 LightmappedGenericSpec const * 0 8576 30 LightmappedGenericSpec const * 30 LightmappedGenericSpec const * 0 0 456 0 0 0 0 0 0 0 0 0 0

456 28 LightmappedGenericSpec const 0 8832 28 LightmappedGenericSpec const 28 LightmappedGenericSpec const 0 0 339 0 0 0 0 0 0 0 0 0 0

457 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 458 0 0 0 0 0 0 0 0 0 0

458 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

459 27 PSSMShaderGenerator const * 0 8576 27 PSSMShaderGenerator const * 27 PSSMShaderGenerator const * 0 0 460 0 0 0 0 0 0 0 0 0 0

460 25 PSSMShaderGenerator const 0 8832 25 PSSMShaderGenerator const 25 PSSMShaderGenerator const 0 0 340 0 0 0 0 0 0 0 0 0 0

461 18 ShaderAttrib const 0 8832 18 ShaderAttrib const 18 ShaderAttrib const 0 0 462 0 0 0 0 0 0 0 0 0 0

462 12 ShaderAttrib 0 2048 12 ShaderAttrib 12 ShaderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

463 19 nodeshaderinput_t * 0 8576 19 nodeshaderinput_t * 19 nodeshaderinput_t * 0 0 464 0 0 0 0 0 0 0 0 0 0

464 17 nodeshaderinput_t 0 1049600 17 nodeshaderinput_t 17 nodeshaderinput_t 0 0 0 0 0 0 0 0 0 0 0 0 0

465 20 ShaderAttrib const * 0 8576 20 ShaderAttrib const * 20 ShaderAttrib const * 0 0 461 0 0 0 0 0 0 0 0 0 0

466 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 467 0 0 0 0 0 0 0 0 0 0

467 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

468 15 TextureStages * 0 8576 15 TextureStages * 15 TextureStages * 0 0 342 0 0 0 0 0 0 0 0 0 0

469 21 TextureStages const * 0 8576 21 TextureStages const * 21 TextureStages const * 0 0 470 0 0 0 0 0 0 0 0 0 0

470 19 TextureStages const 0 8832 19 TextureStages const 19 TextureStages const 0 0 342 0 0 0 0 0 0 0 0 0 0

471 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 336
/**
 * Defines the properties of a named stage of the multitexture pipeline.  The
 * TextureAttrib will associated a number of these stages with Texture
 * objects, and the GSG will render geometry by sorting all of the currently
 * active TextureStages in order and then issuing the appropriate rendering
 * calls to activate them.
 */

472 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 471 0 0 0 0 0 0 0 0 0 0

473 11 Materials * 0 8576 11 Materials * 11 Materials * 0 0 343 0 0 0 0 0 0 0 0 0 0

474 17 Materials const * 0 8576 17 Materials const * 17 Materials const * 0 0 475 0 0 0 0 0 0 0 0 0 0

475 15 Materials const 0 8832 15 Materials const 15 Materials const 0 0 343 0 0 0 0 0 0 0 0 0 0

476 10 Material * 0 8576 10 Material * 10 Material * 0 0 345 0 0 0 0 0 0 0 0 0 0

477 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 478 0 0 0 0 0 0 0 0 0 0

478 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 344 0 0 0 0 0 0 0 0 0 0

479 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 344 0 0 0 0 0 0 0 0 0 0

480 30 pvector< ShaderInput > const * 0 8576 30 pvector< ShaderInput > const * 30 pvector< ShaderInput > const * 0 0 481 0 0 0 0 0 0 0 0 0 0

481 28 pvector< ShaderInput > const 0 8832 28 pvector< ShaderInput > const 28 pvector< ShaderInput > const 0 0 482 0 0 0 0 0 0 0 0 0 0

482 22 pvector< ShaderInput > 0 2048 22 pvector< ShaderInput > 22 pvector< ShaderInput > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
2
483 10 class_slot 0 2 0 182 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

484 10 class_slot 0 2 0 246 0 0 0 0 0 0 0 27 IgnorePVSAttrib::class_slot 0

0
