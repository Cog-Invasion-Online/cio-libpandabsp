1541212596
3 3
3 bsp 4 t5GT 3 bsp 
142
139 14 get_class_type 0 4 281 27 CBaseEntity::get_class_type 0 1 3 0
52
static TypeHandle CBaseEntity::get_class_type(void);

140 11 CBaseEntity 0 4 281 24 CBaseEntity::CBaseEntity 0 2 1 2 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

141 10 get_entnum 0 4 281 23 CBaseEntity::get_entnum 0 1 4 0
40
int CBaseEntity::get_entnum(void) const;

142 10 get_loader 0 4 281 23 CBaseEntity::get_loader 0 1 5 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

143 12 ~CBaseEntity 0 4 281 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

144 14 get_class_type 0 4 283 28 CPointEntity::get_class_type 0 1 8 0
53
static TypeHandle CPointEntity::get_class_type(void);

145 12 CPointEntity 0 4 283 26 CPointEntity::CPointEntity 0 2 6 7 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

146 10 get_origin 0 4 283 24 CPointEntity::get_origin 0 1 9 0
45
LPoint3 CPointEntity::get_origin(void) const;

147 10 get_angles 0 4 283 24 CPointEntity::get_angles 0 1 10 0
46
LVector3 CPointEntity::get_angles(void) const;

148 13 ~CPointEntity 0 4 283 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

149 14 get_class_type 0 4 284 29 CBoundsEntity::get_class_type 0 1 13 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

150 13 CBoundsEntity 0 4 284 28 CBoundsEntity::CBoundsEntity 0 2 11 12 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

151 10 get_bounds 0 4 284 25 CBoundsEntity::get_bounds 0 1 14 0
51
BoundingBox *CBoundsEntity::get_bounds(void) const;

152 9 is_inside 0 4 284 24 CBoundsEntity::is_inside 0 1 15 0
63
inline bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

153 13 fillin_bounds 0 4 284 28 CBoundsEntity::fillin_bounds 0 1 16 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

154 14 ~CBoundsEntity 0 4 284 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

155 14 get_class_type 0 4 285 28 CBrushEntity::get_class_type 0 1 19 0
53
static TypeHandle CBrushEntity::get_class_type(void);

156 12 CBrushEntity 0 4 285 26 CBrushEntity::CBrushEntity 0 2 17 18 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

157 12 get_modelnum 0 4 285 26 CBrushEntity::get_modelnum 0 1 20 0
43
int CBrushEntity::get_modelnum(void) const;

158 12 get_model_np 0 4 285 26 CBrushEntity::get_model_np 0 1 21 0
48
NodePath CBrushEntity::get_model_np(void) const;

159 16 get_model_bounds 0 4 285 30 CBrushEntity::get_model_bounds 0 1 22 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

160 13 ~CBrushEntity 0 4 285 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

161 4 make 0 4 286 19 BSPFaceAttrib::make 0 1 23 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

162 12 make_default 0 4 286 27 BSPFaceAttrib::make_default 0 1 24 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

163 12 get_material 0 4 286 27 BSPFaceAttrib::get_material 0 1 25 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

164 13 get_face_type 0 4 286 28 BSPFaceAttrib::get_face_type 0 1 26 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

165 14 get_class_slot 0 4 286 29 BSPFaceAttrib::get_class_slot 0 1 27 0
47
static int BSPFaceAttrib::get_class_slot(void);

166 14 get_class_type 0 4 286 29 BSPFaceAttrib::get_class_type 0 1 28 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

167 14 ~BSPFaceAttrib 0 4 286 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

168 9 BSPLoader 0 4 290 20 BSPLoader::BSPLoader 0 1 29 0
27
BSPLoader::BSPLoader(void);

169 4 read 0 4 290 15 BSPLoader::read 0 1 30 0
43
bool BSPLoader::read(Filename const &file);

170 16 do_optimizations 0 4 290 27 BSPLoader::do_optimizations 0 1 31 0
39
void BSPLoader::do_optimizations(void);

171 9 set_gamma 0 4 290 20 BSPLoader::set_gamma 0 1 32 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

172 9 get_gamma 0 4 290 20 BSPLoader::get_gamma 0 1 33 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

173 7 set_win 0 4 290 18 BSPLoader::set_win 0 1 34 0
45
void BSPLoader::set_win(GraphicsWindow *win);

174 10 set_camera 0 4 290 21 BSPLoader::set_camera 0 1 35 0
51
void BSPLoader::set_camera(NodePath const &camera);

175 10 set_render 0 4 290 21 BSPLoader::set_render 0 1 36 0
51
void BSPLoader::set_render(NodePath const &render);

176 19 set_want_visibility 0 4 290 30 BSPLoader::set_want_visibility 0 1 37 0
47
void BSPLoader::set_want_visibility(bool flag);

177 18 set_want_lightmaps 0 4 290 29 BSPLoader::set_want_lightmaps 0 1 38 0
46
void BSPLoader::set_want_lightmaps(bool flag);

178 16 set_physics_type 0 4 290 27 BSPLoader::set_physics_type 0 1 39 0
43
void BSPLoader::set_physics_type(int type);

179 19 set_visualize_leafs 0 4 290 30 BSPLoader::set_visualize_leafs 0 1 40 0
47
void BSPLoader::set_visualize_leafs(bool flag);

180 18 set_materials_file 0 4 290 29 BSPLoader::set_materials_file 0 1 41 0
57
void BSPLoader::set_materials_file(Filename const &file);

181 25 set_texture_contents_file 0 4 290 36 BSPLoader::set_texture_contents_file 0 1 42 0
64
void BSPLoader::set_texture_contents_file(Filename const &file);

182 15 setup_shadowcam 0 4 290 26 BSPLoader::setup_shadowcam 0 1 43 0
38
void BSPLoader::setup_shadowcam(void);

183 16 add_dynamic_node 0 4 290 27 BSPLoader::add_dynamic_node 0 1 44 0
55
void BSPLoader::add_dynamic_node(NodePath const &node);

184 16 set_want_shadows 0 4 290 27 BSPLoader::set_want_shadows 0 1 45 0
44
void BSPLoader::set_want_shadows(bool flag);

185 18 set_shadow_cam_pos 0 4 290 29 BSPLoader::set_shadow_cam_pos 0 1 46 0
55
void BSPLoader::set_shadow_cam_pos(LPoint3 const &pos);

186 22 set_shadow_cam_bitmask 0 4 290 33 BSPLoader::set_shadow_cam_bitmask 0 1 47 0
62
void BSPLoader::set_shadow_cam_bitmask(BitMask32 const &mask);

187 16 set_shadow_color 0 4 290 27 BSPLoader::set_shadow_color 0 1 48 0
54
void BSPLoader::set_shadow_color(LColor const &color);

188 21 set_shadow_resolution 0 4 290 32 BSPLoader::set_shadow_resolution 0 1 49 0
65
void BSPLoader::set_shadow_resolution(int filmsize, int texsize);

189 12 cast_shadows 0 4 290 23 BSPLoader::cast_shadows 0 1 50 0
45
void BSPLoader::cast_shadows(NodePath &node);

190 14 get_shadow_tex 0 4 290 25 BSPLoader::get_shadow_tex 0 1 51 0
47
Texture *BSPLoader::get_shadow_tex(void) const;

191 16 extract_modelnum 0 4 290 27 BSPLoader::extract_modelnum 0 1 52 0
51
inline int BSPLoader::extract_modelnum(int entnum);

192 16 get_model_bounds 0 4 290 27 BSPLoader::get_model_bounds 0 1 53 0
84
inline void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

193 28 set_server_entity_dispatcher 0 4 290 39 BSPLoader::set_server_entity_dispatcher 0 1 54 0
67
void BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

194 27 link_server_entity_to_class 0 4 290 38 BSPLoader::link_server_entity_to_class 0 1 55 0
89
void BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

195 6 set_ai 0 4 290 17 BSPLoader::set_ai 0 1 56 0
32
void BSPLoader::set_ai(bool ai);

196 5 is_ai 0 4 290 16 BSPLoader::is_ai 0 1 57 0
41
inline bool BSPLoader::is_ai(void) const;

197 19 update_dynamic_node 0 4 290 30 BSPLoader::update_dynamic_node 0 1 58 0
58
void BSPLoader::update_dynamic_node(NodePath const &node);

198 10 trace_line 0 4 290 21 BSPLoader::trace_line 0 1 59 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

199 20 link_entity_to_class 0 4 290 31 BSPLoader::link_entity_to_class 0 1 60 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

200 28 get_py_entity_by_target_name 0 4 290 39 BSPLoader::get_py_entity_by_target_name 0 1 61 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

201 17 find_all_entities 0 4 290 28 BSPLoader::find_all_entities 0 1 62 0
69
PyObject *BSPLoader::find_all_entities(std::string const &classname);

202 20 get_entity_keyvalues 0 4 290 31 BSPLoader::get_entity_keyvalues 0 1 63 0
71
void BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

203 18 link_cent_to_pyent 0 4 290 29 BSPLoader::link_cent_to_pyent 0 1 64 0
63
void BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

204 16 get_num_entities 0 4 290 27 BSPLoader::get_num_entities 0 1 65 0
44
int BSPLoader::get_num_entities(void) const;

205 16 get_entity_value 0 4 290 27 BSPLoader::get_entity_value 0 1 66 0
75
std::string BSPLoader::get_entity_value(int entnum, char const *key) const;

206 22 get_entity_value_float 0 4 290 33 BSPLoader::get_entity_value_float 0 1 67 0
75
float BSPLoader::get_entity_value_float(int entnum, char const *key) const;

207 20 get_entity_value_int 0 4 290 31 BSPLoader::get_entity_value_int 0 1 68 0
71
int BSPLoader::get_entity_value_int(int entnum, char const *key) const;

208 23 get_entity_value_vector 0 4 290 34 BSPLoader::get_entity_value_vector 0 1 69 0
79
LVector3 BSPLoader::get_entity_value_vector(int entnum, char const *key) const;

209 22 get_entity_value_color 0 4 290 33 BSPLoader::get_entity_value_color 0 1 70 0
95
LColor BSPLoader::get_entity_value_color(int entnum, char const *key, bool scale = true) const;

210 10 get_entity 0 4 290 21 BSPLoader::get_entity 0 1 71 0
49
NodePath BSPLoader::get_entity(int entnum) const;

211 9 get_model 0 4 290 20 BSPLoader::get_model 0 1 72 0
50
NodePath BSPLoader::get_model(int modelnum) const;

212 12 get_c_entity 0 4 290 23 BSPLoader::get_c_entity 0 1 73 0
68
inline CBaseEntity *BSPLoader::get_c_entity(int const entnum) const;

213 9 find_leaf 0 4 290 20 BSPLoader::find_leaf 0 2 74 75 0
105
inline int BSPLoader::find_leaf(NodePath const &np);
inline int BSPLoader::find_leaf(LPoint3 const &pos);

214 9 find_node 0 4 290 20 BSPLoader::find_node 0 1 76 0
52
inline int BSPLoader::find_node(LPoint3 const &pos);

215 18 is_cluster_visible 0 4 290 29 BSPLoader::is_cluster_visible 0 1 77 0
79
inline bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

216 15 pvs_bounds_test 0 4 290 26 BSPLoader::pvs_bounds_test 0 1 78 0
78
inline bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds);

217 15 make_net_bounds 0 4 290 26 BSPLoader::make_net_bounds 0 1 79 0
154
inline ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

218 16 has_active_level 0 4 290 27 BSPLoader::has_active_level 0 1 80 0
52
inline bool BSPLoader::has_active_level(void) const;

219 14 has_visibility 0 4 290 25 BSPLoader::has_visibility 0 1 81 0
50
inline bool BSPLoader::has_visibility(void) const;

220 7 cleanup 0 4 290 18 BSPLoader::cleanup 0 1 82 0
30
void BSPLoader::cleanup(void);

221 10 get_result 0 4 290 21 BSPLoader::get_result 0 1 83 0
43
NodePath BSPLoader::get_result(void) const;

222 14 get_global_ptr 0 4 290 25 BSPLoader::get_global_ptr 0 1 84 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

223 10 ~BSPLoader 0 4 290 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

224 14 get_class_type 0 4 292 32 BSPCullTraverser::get_class_type 0 1 87 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

225 16 BSPCullTraverser 0 4 292 34 BSPCullTraverser::BSPCullTraverser 0 2 85 86 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

226 17 ~BSPCullTraverser 0 4 292 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

227 15 IgnorePVSAttrib 0 4 294 32 IgnorePVSAttrib::IgnorePVSAttrib 0 1 88 0
46
inline IgnorePVSAttrib::IgnorePVSAttrib(void);

228 4 make 0 4 294 21 IgnorePVSAttrib::make 0 1 89 0
66
static ConstPointerTo< RenderAttrib > IgnorePVSAttrib::make(void);

229 14 get_class_slot 0 4 294 31 IgnorePVSAttrib::get_class_slot 0 1 90 0
49
static int IgnorePVSAttrib::get_class_slot(void);

230 14 get_class_type 0 4 294 31 IgnorePVSAttrib::get_class_type 0 1 91 0
56
static TypeHandle IgnorePVSAttrib::get_class_type(void);

231 16 ~IgnorePVSAttrib 0 4 294 33 IgnorePVSAttrib::~IgnorePVSAttrib 0 0 0
40
IgnorePVSAttrib::~IgnorePVSAttrib(void);

232 14 get_class_type 0 4 295 25 BSPRender::get_class_type 0 1 94 0
50
static TypeHandle BSPRender::get_class_type(void);

233 9 BSPRender 0 4 295 20 BSPRender::BSPRender 0 2 92 93 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

234 10 ~BSPRender 0 4 295 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

235 14 get_class_type 0 4 297 23 BSPRoot::get_class_type 0 1 97 0
48
static TypeHandle BSPRoot::get_class_type(void);

236 7 BSPRoot 0 4 297 16 BSPRoot::BSPRoot 0 2 95 96 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

237 8 ~BSPRoot 0 4 297 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

238 14 get_class_type 0 4 298 23 BSPProp::get_class_type 0 1 100 0
48
static TypeHandle BSPProp::get_class_type(void);

239 7 BSPProp 0 4 298 16 BSPProp::BSPProp 0 2 98 99 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

240 8 ~BSPProp 0 4 298 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

241 14 get_class_type 0 4 300 24 BSPModel::get_class_type 0 1 103 0
49
static TypeHandle BSPModel::get_class_type(void);

242 8 BSPModel 0 4 300 18 BSPModel::BSPModel 0 2 101 102 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

243 9 ~BSPModel 0 4 300 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

244 24 upcast_to_ReferenceCount 0 12 301 36 ShaderSpec::upcast_to_ReferenceCount 0 1 108 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

245 22 downcast_to_ShaderSpec 0 12 302 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

246 17 upcast_to_Namable 0 12 301 29 ShaderSpec::upcast_to_Namable 0 1 109 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

247 22 downcast_to_ShaderSpec 0 12 303 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

248 10 ShaderSpec 0 4 301 22 ShaderSpec::ShaderSpec 0 2 104 105 0
196
ShaderSpec::ShaderSpec(std::string const &name, Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file = "");
inline ShaderSpec::ShaderSpec(ShaderSpec const &) = default;

249 15 add_permutation 0 4 304 41 ShaderSpec::Permutations::add_permutation 0 1 112 0
97
void ShaderSpec::Permutations::add_permutation(std::string const &key, std::string const &value);

250 9 add_input 0 4 304 35 ShaderSpec::Permutations::add_input 0 1 113 0
88
void ShaderSpec::Permutations::add_input(ShaderInput const &inp, bool important = true);

251 8 add_flag 0 4 304 34 ShaderSpec::Permutations::add_flag 0 1 114 0
50
void ShaderSpec::Permutations::add_flag(int flag);

252 11 operator == 0 4 304 37 ShaderSpec::Permutations::operator == 0 1 115 0
88
bool ShaderSpec::Permutations::operator ==(ShaderSpec::Permutations const &other) const;

253 11 operator != 0 4 304 37 ShaderSpec::Permutations::operator != 0 1 116 0
88
bool ShaderSpec::Permutations::operator !=(ShaderSpec::Permutations const &other) const;

254 10 operator < 0 4 304 36 ShaderSpec::Permutations::operator < 0 1 117 0
87
bool ShaderSpec::Permutations::operator <(ShaderSpec::Permutations const &other) const;

255 12 Permutations 0 4 304 38 ShaderSpec::Permutations::Permutations 0 2 110 111 0
153
inline ShaderSpec::Permutations::Permutations(void) = default;
inline ShaderSpec::Permutations::Permutations(ShaderSpec::Permutations const &) = default;

256 13 ~Permutations 0 4 304 39 ShaderSpec::Permutations::~Permutations 0 0 0
46
ShaderSpec::Permutations::~Permutations(void);

257 18 setup_permutations 0 6 301 30 ShaderSpec::setup_permutations 0 1 106 0
159
virtual ShaderSpec::Permutations ShaderSpec::setup_permutations(RenderState const *state, GeomVertexAnimationSpec const &anim, PSSMShaderGenerator *generator);

258 14 get_class_type 0 4 301 26 ShaderSpec::get_class_type 0 1 107 0
51
static TypeHandle ShaderSpec::get_class_type(void);

259 11 ~ShaderSpec 0 4 301 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

260 20 VertexLitGenericSpec 0 4 305 42 VertexLitGenericSpec::VertexLitGenericSpec 0 2 118 119 0
140
VertexLitGenericSpec::VertexLitGenericSpec(void);
inline VertexLitGenericSpec::VertexLitGenericSpec(VertexLitGenericSpec const &) = default;

261 21 ~VertexLitGenericSpec 0 4 305 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

262 22 LightmappedGenericSpec 0 4 306 46 LightmappedGenericSpec::LightmappedGenericSpec 0 2 120 121 0
150
LightmappedGenericSpec::LightmappedGenericSpec(void);
inline LightmappedGenericSpec::LightmappedGenericSpec(LightmappedGenericSpec const &) = default;

263 23 ~LightmappedGenericSpec 0 4 306 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

264 19 PSSMShaderGenerator 0 4 307 40 PSSMShaderGenerator::PSSMShaderGenerator 0 2 122 123 0
205
PSSMShaderGenerator::PSSMShaderGenerator(GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline PSSMShaderGenerator::PSSMShaderGenerator(PSSMShaderGenerator const &) = default;

265 17 synthesize_shader 0 4 307 38 PSSMShaderGenerator::synthesize_shader 0 1 124 221
// This is important because in BSP levels, we must know the GeomNode that is associated with
// each render state. We need to apply the appropriate shader inputs for updating
// with local light sources and ambient cube.
165
ConstPointerTo< ShaderAttrib > PSSMShaderGenerator::synthesize_shader(RenderState const *rs, GeomVertexAnimationSpec const &anim, nodeshaderinput_t *bsp_node_input);

266 13 set_sun_light 0 4 307 34 PSSMShaderGenerator::set_sun_light 0 1 125 0
60
void PSSMShaderGenerator::set_sun_light(NodePath const &np);

267 12 start_update 0 4 307 33 PSSMShaderGenerator::start_update 0 1 126 0
45
void PSSMShaderGenerator::start_update(void);

268 10 add_shader 0 4 307 31 PSSMShaderGenerator::add_shader 0 1 127 0
67
void PSSMShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

269 19 has_shadow_sunlight 0 4 307 40 PSSMShaderGenerator::has_shadow_sunlight 0 1 128 0
65
inline bool PSSMShaderGenerator::has_shadow_sunlight(void) const;

270 22 get_pssm_array_texture 0 4 307 43 PSSMShaderGenerator::get_pssm_array_texture 0 1 129 0
72
inline Texture *PSSMShaderGenerator::get_pssm_array_texture(void) const;

271 12 get_pssm_rig 0 4 307 33 PSSMShaderGenerator::get_pssm_rig 0 1 130 0
68
inline PSSMCameraRig *PSSMShaderGenerator::get_pssm_rig(void) const;

272 14 get_class_type 0 4 307 35 PSSMShaderGenerator::get_class_type 0 1 131 0
60
static TypeHandle PSSMShaderGenerator::get_class_type(void);

273 20 ~PSSMShaderGenerator 0 4 307 41 PSSMShaderGenerator::~PSSMShaderGenerator 0 0 0
48
PSSMShaderGenerator::~PSSMShaderGenerator(void);

274 11 BSPMaterial 0 4 309 24 BSPMaterial::BSPMaterial 0 2 132 133 0
128
explicit BSPMaterial::BSPMaterial(std::string const &name = "");
inline BSPMaterial::BSPMaterial(BSPMaterial const &) = default;

275 10 set_shader 0 4 309 23 BSPMaterial::set_shader 0 1 134 0
61
void BSPMaterial::set_shader(std::string const &shader_name);

276 10 get_shader 0 4 309 23 BSPMaterial::get_shader 0 1 135 0
55
inline std::string BSPMaterial::get_shader(void) const;

277 16 set_shader_input 0 4 309 29 BSPMaterial::set_shader_input 0 1 136 0
61
void BSPMaterial::set_shader_input(ShaderInput const &input);

278 17 get_shader_inputs 0 4 309 30 BSPMaterial::get_shader_inputs 0 1 137 0
80
inline pvector< ShaderInput > const &BSPMaterial::get_shader_inputs(void) const;

279 14 get_class_type 0 4 309 27 BSPMaterial::get_class_type 0 1 138 0
52
static TypeHandle BSPMaterial::get_class_type(void);

280 12 ~BSPMaterial 0 4 309 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

138
1 0 0 7 4 311 143 0 0 0 
2 0 0 7 4 311 143 0 0 1 6 param0 0 312  
3 0 0 7 3 315 0 0 0 0 
4 0 0 6 5 289 0 0 0 1 4 this 3 312  
5 0 0 6 6 316 0 0 0 1 4 this 3 312  
6 0 0 7 10 317 148 0 0 0 
7 0 0 7 10 317 148 0 0 1 6 param0 0 318  
8 0 0 7 9 315 0 0 0 0 
9 0 0 7 11 322 0 0 0 1 4 this 3 318  
10 0 0 7 12 325 0 0 0 1 4 this 3 318  
11 0 0 7 16 326 154 0 0 0 
12 0 0 7 16 326 154 0 0 1 6 param0 0 327  
13 0 0 7 15 315 0 0 0 0 
14 0 0 7 17 330 0 0 0 1 4 this 3 327  
15 0 0 6 18 333 0 0 0 2 4 this 3 327  3 pos 1 331  
16 0 0 4 19 334 0 0 0 3 4 this 3 326  4 mins 1 322  4 maxs 1 322  
17 0 0 7 23 335 160 0 0 0 
18 0 0 7 23 335 160 0 0 1 6 param0 0 336  
19 0 0 7 22 315 0 0 0 0 
20 0 0 6 24 289 0 0 0 1 4 this 3 336  
21 0 0 7 25 339 0 0 0 1 4 this 3 336  
22 0 0 4 26 334 0 0 0 3 4 this 3 335  4 mins 1 322  4 maxs 1 322  
23 0 0 7 31 342 0 0 0 2 13 face_material 1 341  9 face_type 1 289  
24 0 0 7 32 342 0 0 0 0 
25 0 0 6 33 341 0 0 0 1 4 this 3 343  
26 0 0 6 34 289 0 0 0 1 4 this 3 343  
27 0 0 6 35 289 0 0 0 0 
28 0 0 7 38 315 0 0 0 0 
29 0 0 7 41 316 223 0 0 0 
30 0 0 6 42 333 0 0 0 2 4 this 3 316  4 file 1 345  
31 0 0 4 43 334 0 0 0 1 4 this 3 316  
32 0 0 4 44 334 0 0 0 3 4 this 3 316  5 gamma 1 348  10 overbright 1 289  
33 0 0 6 45 348 0 0 0 1 4 this 3 350  
34 0 0 4 46 334 0 0 0 2 4 this 3 316  3 win 1 352  
35 0 0 4 47 334 0 0 0 2 4 this 3 316  6 camera 1 354  
36 0 0 4 48 334 0 0 0 2 4 this 3 316  6 render 1 354  
37 0 0 4 49 334 0 0 0 2 4 this 3 316  4 flag 1 333  
38 0 0 4 50 334 0 0 0 2 4 this 3 316  4 flag 1 333  
39 0 0 4 51 334 0 0 0 2 4 this 3 316  4 type 1 289  
40 0 0 4 52 334 0 0 0 2 4 this 3 316  4 flag 1 333  
41 0 0 4 53 334 0 0 0 2 4 this 3 316  4 file 1 345  
42 0 0 4 54 334 0 0 0 2 4 this 3 316  4 file 1 345  
43 0 0 4 55 334 0 0 0 1 4 this 3 316  
44 0 0 4 56 334 0 0 0 2 4 this 3 316  4 node 1 354  
45 0 0 4 57 334 0 0 0 2 4 this 3 316  4 flag 1 333  
46 0 0 4 58 334 0 0 0 2 4 this 3 316  3 pos 1 331  
47 0 0 4 59 334 0 0 0 2 4 this 3 316  4 mask 1 356  
48 0 0 4 60 334 0 0 0 2 4 this 3 316  5 color 1 360  
49 0 0 4 61 334 0 0 0 3 4 this 3 316  8 filmsize 1 289  7 texsize 1 289  
50 0 0 4 62 334 0 0 0 2 4 this 3 316  4 node 1 339  
51 0 0 7 63 366 0 0 0 1 4 this 3 350  
52 0 0 6 64 289 0 0 0 2 4 this 3 316  6 entnum 1 289  
53 0 0 4 65 334 0 0 0 4 4 this 3 316  8 modelnum 1 289  4 mins 1 322  4 maxs 1 322  
54 0 0 4 66 334 0 0 0 2 4 this 3 316  10 dispatcher 1 367  
55 0 0 4 67 334 0 0 0 3 4 this 3 316  4 name 1 341  4 type 1 370  
56 0 0 4 68 334 0 0 0 2 4 this 3 316  2 ai 1 333  
57 0 0 6 69 333 0 0 0 1 4 this 3 350  
58 0 0 4 70 334 0 0 0 2 4 this 3 316  4 node 1 354  
59 0 0 6 71 333 0 0 0 3 4 this 3 316  5 start 1 331  3 end 1 331  
60 0 0 4 72 334 0 0 0 3 4 this 3 316  7 entname 1 341  4 type 1 370  
61 0 0 6 73 367 0 0 0 2 4 this 3 350  10 targetname 1 341  
62 0 0 6 74 367 0 0 0 2 4 this 3 316  9 classname 1 341  
63 0 0 4 75 334 0 0 0 3 4 this 3 316  4 list 1 367  6 entnum 1 373  
64 0 0 4 76 334 0 0 0 3 4 this 3 316  5 entum 1 289  5 pyent 1 367  
65 0 0 6 77 289 0 0 0 1 4 this 3 350  
66 0 0 6 78 341 0 0 0 3 4 this 3 350  6 entnum 1 289  3 key 1 341  
67 0 0 6 79 349 0 0 0 3 4 this 3 350  6 entnum 1 289  3 key 1 341  
68 0 0 6 80 289 0 0 0 3 4 this 3 350  6 entnum 1 289  3 key 1 341  
69 0 0 7 81 325 0 0 0 3 4 this 3 350  6 entnum 1 289  3 key 1 341  
70 0 0 7 82 374 0 0 0 4 4 this 3 350  6 entnum 1 289  3 key 1 341  5 scale 1 333  
71 0 0 7 83 339 0 0 0 2 4 this 3 350  6 entnum 1 289  
72 0 0 7 84 339 0 0 0 2 4 this 3 350  8 modelnum 1 289  
73 0 0 7 85 311 143 0 0 2 4 this 3 350  6 entnum 1 373  
74 0 0 6 86 289 0 0 0 2 4 this 3 316  3 pos 1 331  
75 0 0 6 86 289 0 0 0 2 4 this 3 316  2 np 1 354  
76 0 0 6 87 289 0 0 0 2 4 this 3 316  3 pos 1 331  
77 0 0 6 88 333 0 0 0 3 4 this 3 350  12 curr_cluster 1 289  7 cluster 1 289  
78 0 0 6 89 333 0 0 0 2 4 this 3 316  6 bounds 1 375  
79 0 0 7 90 375 0 0 0 3 4 this 3 316  13 net_transform 1 378  8 original 1 375  
80 0 0 6 91 333 0 0 0 1 4 this 3 350  
81 0 0 6 92 333 0 0 0 1 4 this 3 350  
82 0 0 4 93 334 0 0 0 1 4 this 3 316  
83 0 0 7 94 339 0 0 0 1 4 this 3 350  
84 0 0 6 95 316 0 0 0 0 
85 0 0 7 101 383 226 0 0 1 6 param0 0 381  
86 0 0 7 101 383 226 0 0 2 4 trav 1 384  6 loader 1 316  
87 0 0 7 100 315 0 0 0 0 
88 0 0 7 104 385 231 0 0 0 
89 0 0 7 105 342 0 0 0 0 
90 0 0 6 106 289 0 0 0 0 
91 0 0 7 108 315 0 0 0 0 
92 0 0 7 113 388 234 0 0 1 6 param0 0 386  
93 0 0 7 113 388 234 0 0 2 4 name 1 341  6 loader 1 316  
94 0 0 7 112 315 0 0 0 0 
95 0 0 7 117 391 237 0 0 1 6 param0 0 389  
96 0 0 7 117 391 237 0 0 1 4 name 1 341  
97 0 0 7 116 315 0 0 0 0 
98 0 0 7 122 394 240 0 0 1 6 param0 0 392  
99 0 0 7 122 394 240 0 0 1 4 name 1 341  
100 0 0 7 121 315 0 0 0 0 
101 0 0 7 126 397 243 0 0 1 6 param0 0 395  
102 0 0 7 126 397 243 0 0 1 4 name 1 341  
103 0 0 7 125 315 0 0 0 0 
104 0 0 7 135 400 259 0 0 1 6 param0 0 398  
105 0 0 7 135 400 259 0 0 4 4 name 1 341  9 vert_file 1 345  10 pixel_file 1 345  9 geom_file 1 345  
106 0 0 7 145 408 256 0 0 4 4 this 3 400  5 state 1 401  4 anim 1 404  9 generator 1 407  
107 0 0 7 146 315 0 0 0 0 
108 0 0 7 130 409 0 0 0 1 4 this 3 400  
109 0 0 6 133 410 0 0 0 1 4 this 3 400  
110 0 0 7 143 408 256 0 0 0 
111 0 0 7 143 408 256 0 0 1 6 param0 0 411  
112 0 0 4 137 334 0 0 0 3 4 this 3 408  3 key 1 341  5 value 1 341  
113 0 0 4 138 334 0 0 0 3 4 this 3 408  3 inp 1 413  9 important 1 333  
114 0 0 4 139 334 0 0 0 2 4 this 3 408  4 flag 1 289  
115 0 0 6 140 333 0 0 0 2 4 this 3 411  5 other 1 411  
116 0 0 6 141 333 0 0 0 2 4 this 3 411  5 other 1 411  
117 0 0 6 142 333 0 0 0 2 4 this 3 411  5 other 1 411  
118 0 0 7 149 416 261 0 0 0 
119 0 0 7 149 416 261 0 0 1 6 param0 0 417  
120 0 0 7 152 419 263 0 0 0 
121 0 0 7 152 419 263 0 0 1 6 param0 0 420  
122 0 0 7 156 407 273 0 0 3 3 gsg 1 422  6 camera 1 354  6 render 1 354  
123 0 0 7 156 407 273 0 0 1 6 param0 0 424  
124 0 0 7 157 430 0 0 221 // This is important because in BSP levels, we must know the GeomNode that is associated with
// each render state. We need to apply the appropriate shader inputs for updating
// with local light sources and ambient cube. 4 4 this 3 407  2 rs 1 401  4 anim 1 404  14 bsp_node_input 1 428  
125 0 0 4 158 334 0 0 0 2 4 this 3 407  2 np 1 354  
126 0 0 4 159 334 0 0 0 1 4 this 3 407  
127 0 0 4 160 334 0 0 0 2 4 this 3 407  4 spec 1 400  
128 0 0 6 161 333 0 0 0 1 4 this 3 424  
129 0 0 7 162 366 0 0 0 1 4 this 3 424  
130 0 0 6 163 431 0 0 0 1 4 this 3 424  
131 0 0 7 164 315 0 0 0 0 
132 0 0 7 168 435 280 0 0 1 6 param0 0 433  
133 0 0 7 168 435 280 0 0 1 4 name 1 341  
134 0 0 4 169 334 0 0 0 2 4 this 3 435  11 shader_name 1 341  
135 0 0 6 170 341 0 0 0 1 4 this 3 433  
136 0 0 4 171 334 0 0 0 2 4 this 3 435  5 input 1 413  
137 0 0 6 172 436 0 0 0 1 4 this 3 433  
138 0 0 7 173 315 0 0 0 0 
158
281 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 140 143 0 3 139 141 142 0 0 1 0 282 0 0 0 0 0

282 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

283 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 145 148 0 3 144 146 147 0 0 1 0 281 0 0 0 0 0

284 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 150 154 0 4 149 151 152 153 0 0 1 0 281 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

285 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 156 160 0 4 155 157 158 159 0 0 1 0 281 0 0 0 0 0

286 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 167 1 439 6 161 162 163 164 165 166 0 0 1 0 287 0 0 0 1 288 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

287 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

288 0 0 794624 15 BSPFaceAttrib:: 0 286 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

289 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

290 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 168 223 0 54 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 0 0 0 0 1 291 58
/**
 * Loads and handles the operations of PBSP files.
 */

291 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 290 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

292 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 225 226 0 1 224 0 0 1 0 293 0 0 0 0 0

293 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

294 15 IgnorePVSAttrib 0 141313 15 IgnorePVSAttrib 15 IgnorePVSAttrib 0 0 0 1 227 231 1 440 3 228 229 230 0 0 1 0 287 0 0 0 0 86
/**
 * Forces the node/geom to not be tested against the PVS, just frustum culled.
 */

295 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 233 234 0 1 232 0 0 1 0 296 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

296 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

297 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 236 237 0 1 235 0 0 1 0 296 0 0 0 0 0

298 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 239 240 0 1 238 0 0 1 0 299 0 0 0 0 0

299 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

300 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 242 243 0 1 241 0 0 1 0 299 0 0 0 0 0

301 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 1 248 259 0 2 257 258 0 0 2 3 302 244 245 3 303 246 247 0 1 304 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

302 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

303 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

304 12 Permutations 0 403457 24 ShaderSpec::Permutations 24 ShaderSpec::Permutations 301 0 0 1 255 256 0 6 249 250 251 252 253 254 0 0 0 0 0 0

305 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 260 261 0 0 0 0 1 0 301 0 0 0 0 0

306 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 262 263 0 0 0 0 1 0 301 0 0 0 0 0

307 19 PSSMShaderGenerator 0 141313 19 PSSMShaderGenerator 19 PSSMShaderGenerator 0 0 0 1 264 273 0 8 265 266 267 268 269 270 271 272 0 0 1 0 308 0 0 0 0 0

308 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

309 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 274 280 0 5 275 276 277 278 279 0 0 1 0 310 0 0 0 0 0

310 8 Material 0 2048 8 Material 8 Material 0 0 0 0 0 0 0 0 0 0 0 0 682
/**
 * Defines the way an object appears in the presence of lighting.  A material
 * is only necessary if lighting is to be enabled; otherwise, the material
 * isn't used.
 *
 * There are two workflows that are supported: the "classic" workflow of
 * providing separate ambient, diffuse and specular colors, and the
 * "metalness" workflow, in which a base color is specified along with a
 * "metallic" value that indicates whether the material is a metal or a
 * dielectric.
 *
 * The size of the specular highlight can be specified by either specifying
 * the specular exponent (shininess) or by specifying a roughness value that
 * in perceptually linear in the range of 0-1.
 */

311 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 281 0 0 0 0 0 0 0 0 0 0

312 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 313 0 0 0 0 0 0 0 0 0 0

313 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 281 0 0 0 0 0 0 0 0 0 0

314 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

315 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 314 0 0 0 0 0 0 0 0 0 0

316 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 290 0 0 0 0 0 0 0 0 0 0

317 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 283 0 0 0 0 0 0 0 0 0 0

318 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 319 0 0 0 0 0 0 0 0 0 0

319 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 283 0 0 0 0 0 0 0 0 0 0

320 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 321 0 0 0 0 0 0 0 0 0 0

321 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

322 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 320 0 0 0 0 0 0 0 0 0 0

323 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 324 0 0 0 0 0 0 0 0 0 0

324 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

325 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 323 0 0 0 0 0 0 0 0 0 0

326 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 284 0 0 0 0 0 0 0 0 0 0

327 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 328 0 0 0 0 0 0 0 0 0 0

328 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 284 0 0 0 0 0 0 0 0 0 0

329 11 BoundingBox 0 2048 11 BoundingBox 11 BoundingBox 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

330 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 329 0 0 0 0 0 0 0 0 0 0

331 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 332 0 0 0 0 0 0 0 0 0 0

332 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 320 0 0 0 0 0 0 0 0 0 0

333 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

334 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

335 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 285 0 0 0 0 0 0 0 0 0 0

336 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 337 0 0 0 0 0 0 0 0 0 0

337 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 285 0 0 0 0 0 0 0 0 0 0

338 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

339 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 338 0 0 0 0 0 0 0 0 0 0

340 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 287 0 0 0 0 0 0 0 0 0 0

341 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

342 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 340 0 0 0 0 0 0 0 0 0 0

343 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 344 0 0 0 0 0 0 0 0 0 0

344 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 286 0 0 0 0 0 0 0 0 0 0

345 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 346 0 0 0 0 0 0 0 0 0 0

346 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 347 0 0 0 0 0 0 0 0 0 0

347 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

348 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 349 0 0 0 0 0 0 0 0 0 0

349 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

350 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 351 0 0 0 0 0 0 0 0 0 0

351 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 290 0 0 0 0 0 0 0 0 0 0

352 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 353 0 0 0 0 0 0 0 0 0 0

353 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

354 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 355 0 0 0 0 0 0 0 0 0 0

355 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 338 0 0 0 0 0 0 0 0 0 0

356 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 357 0 0 0 0 0 0 0 0 0 0

357 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 358 0 0 0 0 0 0 0 0 0 0

358 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 359 0 0 0 0 0 0 0 0 0 0

359 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

360 14 LColor const * 0 8576 14 LColor const * 14 LColor const * 0 0 361 0 0 0 0 0 0 0 0 0 0

361 12 LColor const 0 8832 12 LColor const 12 LColor const 0 0 362 0 0 0 0 0 0 0 0 0 0

362 6 LColor 0 2105344 6 LColor 6 LColor 0 0 363 0 0 0 0 0 0 0 0 0 0

363 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 364 0 0 0 0 0 0 0 0 0 0

364 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

365 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

366 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 365 0 0 0 0 0 0 0 0 0 0

367 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 368 0 0 0 0 0 0 0 0 0 0

368 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 369 0 0 0 0 0 0 0 0 0 0

369 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

370 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 371 0 0 0 0 0 0 0 0 0 0

371 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 372 0 0 0 0 0 0 0 0 0 0

372 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

373 9 int const 0 8832 9 int const 9 int const 0 0 289 0 0 0 0 0 0 0 0 0 0

374 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 362 0 0 0 0 0 0 0 0 0 0

375 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 376 0 0 0 0 0 0 0 0 0 0

376 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 377 0 0 0 0 0 0 0 0 0 0

377 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

378 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 379 0 0 0 0 0 0 0 0 0 0

379 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 380 0 0 0 0 0 0 0 0 0 0

380 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

381 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 382 0 0 0 0 0 0 0 0 0 0

382 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 292 0 0 0 0 0 0 0 0 0 0

383 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 292 0 0 0 0 0 0 0 0 0 0

384 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 293 0 0 0 0 0 0 0 0 0 0

385 17 IgnorePVSAttrib * 0 8576 17 IgnorePVSAttrib * 17 IgnorePVSAttrib * 0 0 294 0 0 0 0 0 0 0 0 0 0

386 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 387 0 0 0 0 0 0 0 0 0 0

387 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 295 0 0 0 0 0 0 0 0 0 0

388 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 295 0 0 0 0 0 0 0 0 0 0

389 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 390 0 0 0 0 0 0 0 0 0 0

390 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 297 0 0 0 0 0 0 0 0 0 0

391 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 297 0 0 0 0 0 0 0 0 0 0

392 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 393 0 0 0 0 0 0 0 0 0 0

393 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 298 0 0 0 0 0 0 0 0 0 0

394 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 298 0 0 0 0 0 0 0 0 0 0

395 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 396 0 0 0 0 0 0 0 0 0 0

396 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 300 0 0 0 0 0 0 0 0 0 0

397 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 300 0 0 0 0 0 0 0 0 0 0

398 18 ShaderSpec const * 0 8576 18 ShaderSpec const * 18 ShaderSpec const * 0 0 399 0 0 0 0 0 0 0 0 0 0

399 16 ShaderSpec const 0 8832 16 ShaderSpec const 16 ShaderSpec const 0 0 301 0 0 0 0 0 0 0 0 0 0

400 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 301 0 0 0 0 0 0 0 0 0 0

401 19 RenderState const * 0 8576 19 RenderState const * 19 RenderState const * 0 0 402 0 0 0 0 0 0 0 0 0 0

402 17 RenderState const 0 8832 17 RenderState const 17 RenderState const 0 0 403 0 0 0 0 0 0 0 0 0 0

403 11 RenderState 0 2048 11 RenderState 11 RenderState 0 0 0 0 0 0 0 0 0 0 0 0 340
/**
 * This represents a unique collection of RenderAttrib objects that correspond
 * to a particular renderable state.
 *
 * You should not attempt to create or modify a RenderState object directly.
 * Instead, call one of the make() functions to create one for you.  And
 * instead of modifying a RenderState object, create a new one.
 */

404 31 GeomVertexAnimationSpec const * 0 8576 31 GeomVertexAnimationSpec const * 31 GeomVertexAnimationSpec const * 0 0 405 0 0 0 0 0 0 0 0 0 0

405 29 GeomVertexAnimationSpec const 0 8832 29 GeomVertexAnimationSpec const 29 GeomVertexAnimationSpec const 0 0 406 0 0 0 0 0 0 0 0 0 0

406 23 GeomVertexAnimationSpec 0 2048 23 GeomVertexAnimationSpec 23 GeomVertexAnimationSpec 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * This object describes how the vertex animation, if any, represented in a
 * GeomVertexData is encoded.
 *
 * Vertex animation includes soft-skinned skeleton animation and morphs (blend
 * shapes), and might be performed on the CPU by Panda, or passed down to the
 * graphics backed to be performed on the hardware (depending on the
 * hardware's advertised capabilities).
 *
 * Changing this setting doesn't by itself change the way the animation is
 * actually performed; this just specifies how the vertices are set up to be
 * animated.
 */

407 21 PSSMShaderGenerator * 0 8576 21 PSSMShaderGenerator * 21 PSSMShaderGenerator * 0 0 307 0 0 0 0 0 0 0 0 0 0

408 14 Permutations * 0 8576 26 ShaderSpec::Permutations * 26 ShaderSpec::Permutations * 0 0 304 0 0 0 0 0 0 0 0 0 0

409 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 302 0 0 0 0 0 0 0 0 0 0

410 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 303 0 0 0 0 0 0 0 0 0 0

411 20 Permutations const * 0 8576 32 ShaderSpec::Permutations const * 32 ShaderSpec::Permutations const * 0 0 412 0 0 0 0 0 0 0 0 0 0

412 18 Permutations const 0 8832 30 ShaderSpec::Permutations const 30 ShaderSpec::Permutations const 0 0 304 0 0 0 0 0 0 0 0 0 0

413 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 414 0 0 0 0 0 0 0 0 0 0

414 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 415 0 0 0 0 0 0 0 0 0 0

415 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

416 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 305 0 0 0 0 0 0 0 0 0 0

417 28 VertexLitGenericSpec const * 0 8576 28 VertexLitGenericSpec const * 28 VertexLitGenericSpec const * 0 0 418 0 0 0 0 0 0 0 0 0 0

418 26 VertexLitGenericSpec const 0 8832 26 VertexLitGenericSpec const 26 VertexLitGenericSpec const 0 0 305 0 0 0 0 0 0 0 0 0 0

419 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 306 0 0 0 0 0 0 0 0 0 0

420 30 LightmappedGenericSpec const * 0 8576 30 LightmappedGenericSpec const * 30 LightmappedGenericSpec const * 0 0 421 0 0 0 0 0 0 0 0 0 0

421 28 LightmappedGenericSpec const 0 8832 28 LightmappedGenericSpec const 28 LightmappedGenericSpec const 0 0 306 0 0 0 0 0 0 0 0 0 0

422 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 423 0 0 0 0 0 0 0 0 0 0

423 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

424 27 PSSMShaderGenerator const * 0 8576 27 PSSMShaderGenerator const * 27 PSSMShaderGenerator const * 0 0 425 0 0 0 0 0 0 0 0 0 0

425 25 PSSMShaderGenerator const 0 8832 25 PSSMShaderGenerator const 25 PSSMShaderGenerator const 0 0 307 0 0 0 0 0 0 0 0 0 0

426 18 ShaderAttrib const 0 8832 18 ShaderAttrib const 18 ShaderAttrib const 0 0 427 0 0 0 0 0 0 0 0 0 0

427 12 ShaderAttrib 0 2048 12 ShaderAttrib 12 ShaderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

428 19 nodeshaderinput_t * 0 8576 19 nodeshaderinput_t * 19 nodeshaderinput_t * 0 0 429 0 0 0 0 0 0 0 0 0 0

429 17 nodeshaderinput_t 0 1049600 17 nodeshaderinput_t 17 nodeshaderinput_t 0 0 0 0 0 0 0 0 0 0 0 0 0

430 20 ShaderAttrib const * 0 8576 20 ShaderAttrib const * 20 ShaderAttrib const * 0 0 426 0 0 0 0 0 0 0 0 0 0

431 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 432 0 0 0 0 0 0 0 0 0 0

432 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

433 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 434 0 0 0 0 0 0 0 0 0 0

434 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 309 0 0 0 0 0 0 0 0 0 0

435 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 309 0 0 0 0 0 0 0 0 0 0

436 30 pvector< ShaderInput > const * 0 8576 30 pvector< ShaderInput > const * 30 pvector< ShaderInput > const * 0 0 437 0 0 0 0 0 0 0 0 0 0

437 28 pvector< ShaderInput > const 0 8832 28 pvector< ShaderInput > const 28 pvector< ShaderInput > const 0 0 438 0 0 0 0 0 0 0 0 0 0

438 22 pvector< ShaderInput > 0 2048 22 pvector< ShaderInput > 22 pvector< ShaderInput > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
2
439 10 class_slot 0 2 0 165 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

440 10 class_slot 0 2 0 229 0 0 0 0 0 0 0 27 IgnorePVSAttrib::class_slot 0

0
