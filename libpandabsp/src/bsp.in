1534012474
3 3
3 bsp 4 t5GT 3 bsp 
83
82 11 CBaseEntity 0 4 165 24 CBaseEntity::CBaseEntity 0 2 1 2 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

83 10 get_entnum 0 4 165 23 CBaseEntity::get_entnum 0 1 3 0
40
int CBaseEntity::get_entnum(void) const;

84 10 get_loader 0 4 165 23 CBaseEntity::get_loader 0 1 4 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

85 14 get_class_type 0 4 165 27 CBaseEntity::get_class_type 0 1 5 0
52
static TypeHandle CBaseEntity::get_class_type(void);

86 12 ~CBaseEntity 0 4 165 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

87 12 CPointEntity 0 4 167 26 CPointEntity::CPointEntity 0 2 6 7 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

88 10 get_origin 0 4 167 24 CPointEntity::get_origin 0 1 8 0
45
LPoint3 CPointEntity::get_origin(void) const;

89 10 get_angles 0 4 167 24 CPointEntity::get_angles 0 1 9 0
46
LVector3 CPointEntity::get_angles(void) const;

90 14 get_class_type 0 4 167 28 CPointEntity::get_class_type 0 1 10 0
53
static TypeHandle CPointEntity::get_class_type(void);

91 13 ~CPointEntity 0 4 167 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

92 13 CBoundsEntity 0 4 168 28 CBoundsEntity::CBoundsEntity 0 2 11 12 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

93 10 get_bounds 0 4 168 25 CBoundsEntity::get_bounds 0 1 13 0
51
BoundingBox *CBoundsEntity::get_bounds(void) const;

94 9 is_inside 0 4 168 24 CBoundsEntity::is_inside 0 1 14 0
63
inline bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

95 13 fillin_bounds 0 4 168 28 CBoundsEntity::fillin_bounds 0 1 15 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

96 14 get_class_type 0 4 168 29 CBoundsEntity::get_class_type 0 1 16 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

97 14 ~CBoundsEntity 0 4 168 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

98 12 CBrushEntity 0 4 169 26 CBrushEntity::CBrushEntity 0 2 17 18 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

99 12 get_modelnum 0 4 169 26 CBrushEntity::get_modelnum 0 1 19 0
43
int CBrushEntity::get_modelnum(void) const;

100 12 get_model_np 0 4 169 26 CBrushEntity::get_model_np 0 1 20 0
48
NodePath CBrushEntity::get_model_np(void) const;

101 16 get_model_bounds 0 4 169 30 CBrushEntity::get_model_bounds 0 1 21 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

102 14 get_class_type 0 4 169 28 CBrushEntity::get_class_type 0 1 22 0
53
static TypeHandle CBrushEntity::get_class_type(void);

103 13 ~CBrushEntity 0 4 169 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

104 4 make 0 4 170 19 BSPFaceAttrib::make 0 1 23 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

105 12 make_default 0 4 170 27 BSPFaceAttrib::make_default 0 1 24 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

106 12 get_material 0 4 170 27 BSPFaceAttrib::get_material 0 1 25 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

107 13 get_face_type 0 4 170 28 BSPFaceAttrib::get_face_type 0 1 26 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

108 14 get_class_slot 0 4 170 29 BSPFaceAttrib::get_class_slot 0 1 27 0
47
static int BSPFaceAttrib::get_class_slot(void);

109 14 get_class_type 0 4 170 29 BSPFaceAttrib::get_class_type 0 1 28 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

110 14 ~BSPFaceAttrib 0 4 170 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

111 9 BSPLoader 0 4 174 20 BSPLoader::BSPLoader 0 1 29 0
27
BSPLoader::BSPLoader(void);

112 4 read 0 4 174 15 BSPLoader::read 0 1 30 0
43
bool BSPLoader::read(Filename const &file);

113 16 do_optimizations 0 4 174 27 BSPLoader::do_optimizations 0 1 31 0
39
void BSPLoader::do_optimizations(void);

114 9 set_gamma 0 4 174 20 BSPLoader::set_gamma 0 1 32 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

115 9 get_gamma 0 4 174 20 BSPLoader::get_gamma 0 1 33 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

116 7 set_gsg 0 4 174 18 BSPLoader::set_gsg 0 1 34 0
52
void BSPLoader::set_gsg(GraphicsStateGuardian *gsg);

117 10 set_camera 0 4 174 21 BSPLoader::set_camera 0 1 35 0
51
void BSPLoader::set_camera(NodePath const &camera);

118 10 set_render 0 4 174 21 BSPLoader::set_render 0 1 36 0
51
void BSPLoader::set_render(NodePath const &render);

119 19 set_want_visibility 0 4 174 30 BSPLoader::set_want_visibility 0 1 37 0
47
void BSPLoader::set_want_visibility(bool flag);

120 18 set_want_lightmaps 0 4 174 29 BSPLoader::set_want_lightmaps 0 1 38 0
46
void BSPLoader::set_want_lightmaps(bool flag);

121 16 set_physics_type 0 4 174 27 BSPLoader::set_physics_type 0 1 39 0
43
void BSPLoader::set_physics_type(int type);

122 19 set_visualize_leafs 0 4 174 30 BSPLoader::set_visualize_leafs 0 1 40 0
47
void BSPLoader::set_visualize_leafs(bool flag);

123 18 set_materials_file 0 4 174 29 BSPLoader::set_materials_file 0 1 41 0
57
void BSPLoader::set_materials_file(Filename const &file);

124 19 update_dynamic_node 0 4 174 30 BSPLoader::update_dynamic_node 0 1 42 0
58
void BSPLoader::update_dynamic_node(NodePath const &node);

125 20 link_entity_to_class 0 4 174 31 BSPLoader::link_entity_to_class 0 1 43 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

126 28 get_py_entity_by_target_name 0 4 174 39 BSPLoader::get_py_entity_by_target_name 0 1 44 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

127 16 get_num_entities 0 4 174 27 BSPLoader::get_num_entities 0 1 45 0
44
int BSPLoader::get_num_entities(void) const;

128 16 get_entity_value 0 4 174 27 BSPLoader::get_entity_value 0 1 46 0
75
std::string BSPLoader::get_entity_value(int entnum, char const *key) const;

129 22 get_entity_value_float 0 4 174 33 BSPLoader::get_entity_value_float 0 1 47 0
75
float BSPLoader::get_entity_value_float(int entnum, char const *key) const;

130 20 get_entity_value_int 0 4 174 31 BSPLoader::get_entity_value_int 0 1 48 0
71
int BSPLoader::get_entity_value_int(int entnum, char const *key) const;

131 23 get_entity_value_vector 0 4 174 34 BSPLoader::get_entity_value_vector 0 1 49 0
79
LVector3 BSPLoader::get_entity_value_vector(int entnum, char const *key) const;

132 22 get_entity_value_color 0 4 174 33 BSPLoader::get_entity_value_color 0 1 50 0
95
LColor BSPLoader::get_entity_value_color(int entnum, char const *key, bool scale = true) const;

133 10 get_entity 0 4 174 21 BSPLoader::get_entity 0 1 51 0
49
NodePath BSPLoader::get_entity(int entnum) const;

134 9 get_model 0 4 174 20 BSPLoader::get_model 0 1 52 0
50
NodePath BSPLoader::get_model(int modelnum) const;

135 9 find_leaf 0 4 174 20 BSPLoader::find_leaf 0 2 53 54 0
105
inline int BSPLoader::find_leaf(NodePath const &np);
inline int BSPLoader::find_leaf(LPoint3 const &pos);

136 9 find_node 0 4 174 20 BSPLoader::find_node 0 1 55 0
52
inline int BSPLoader::find_node(LPoint3 const &pos);

137 15 pvs_bounds_test 0 4 174 26 BSPLoader::pvs_bounds_test 0 1 56 0
78
inline bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds);

138 15 make_net_bounds 0 4 174 26 BSPLoader::make_net_bounds 0 1 57 0
154
inline ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

139 16 has_active_level 0 4 174 27 BSPLoader::has_active_level 0 1 58 0
52
inline bool BSPLoader::has_active_level(void) const;

140 14 has_visibility 0 4 174 25 BSPLoader::has_visibility 0 1 59 0
50
inline bool BSPLoader::has_visibility(void) const;

141 7 cleanup 0 4 174 18 BSPLoader::cleanup 0 1 60 0
30
void BSPLoader::cleanup(void);

142 10 get_result 0 4 174 21 BSPLoader::get_result 0 1 61 0
43
NodePath BSPLoader::get_result(void) const;

143 14 get_global_ptr 0 4 174 25 BSPLoader::get_global_ptr 0 1 62 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

144 10 ~BSPLoader 0 4 174 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

145 14 get_class_type 0 4 176 32 BSPCullTraverser::get_class_type 0 1 65 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

146 16 BSPCullTraverser 0 4 176 34 BSPCullTraverser::BSPCullTraverser 0 2 63 64 0
135
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

147 17 ~BSPCullTraverser 0 4 176 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

148 15 IgnorePVSAttrib 0 4 178 32 IgnorePVSAttrib::IgnorePVSAttrib 0 1 66 0
46
inline IgnorePVSAttrib::IgnorePVSAttrib(void);

149 4 make 0 4 178 21 IgnorePVSAttrib::make 0 1 67 0
66
static ConstPointerTo< RenderAttrib > IgnorePVSAttrib::make(void);

150 14 get_class_slot 0 4 178 31 IgnorePVSAttrib::get_class_slot 0 1 68 0
49
static int IgnorePVSAttrib::get_class_slot(void);

151 14 get_class_type 0 4 178 31 IgnorePVSAttrib::get_class_type 0 1 69 0
56
static TypeHandle IgnorePVSAttrib::get_class_type(void);

152 16 ~IgnorePVSAttrib 0 4 178 33 IgnorePVSAttrib::~IgnorePVSAttrib 0 0 0
40
IgnorePVSAttrib::~IgnorePVSAttrib(void);

153 14 get_class_type 0 4 179 25 BSPRender::get_class_type 0 1 72 0
50
static TypeHandle BSPRender::get_class_type(void);

154 9 BSPRender 0 4 179 20 BSPRender::BSPRender 0 2 70 71 0
104
BSPRender::BSPRender(std::string const &name);
inline BSPRender::BSPRender(BSPRender const &) = default;

155 10 ~BSPRender 0 4 179 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

156 14 get_class_type 0 4 181 23 BSPRoot::get_class_type 0 1 75 0
48
static TypeHandle BSPRoot::get_class_type(void);

157 7 BSPRoot 0 4 181 16 BSPRoot::BSPRoot 0 2 73 74 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

158 8 ~BSPRoot 0 4 181 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

159 14 get_class_type 0 4 182 23 BSPProp::get_class_type 0 1 78 0
48
static TypeHandle BSPProp::get_class_type(void);

160 7 BSPProp 0 4 182 16 BSPProp::BSPProp 0 2 76 77 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

161 8 ~BSPProp 0 4 182 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

162 14 get_class_type 0 4 184 24 BSPModel::get_class_type 0 1 81 0
49
static TypeHandle BSPModel::get_class_type(void);

163 8 BSPModel 0 4 184 18 BSPModel::BSPModel 0 2 79 80 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

164 9 ~BSPModel 0 4 184 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

81
1 0 0 7 3 185 86 0 0 0 
2 0 0 7 3 185 86 0 0 1 6 param0 0 186  
3 0 0 6 4 173 0 0 0 1 4 this 3 186  
4 0 0 6 5 188 0 0 0 1 4 this 3 186  
5 0 0 7 6 190 0 0 0 0 
6 0 0 7 9 191 91 0 0 0 
7 0 0 7 9 191 91 0 0 1 6 param0 0 192  
8 0 0 7 10 196 0 0 0 1 4 this 3 192  
9 0 0 7 11 199 0 0 0 1 4 this 3 192  
10 0 0 7 12 190 0 0 0 0 
11 0 0 7 15 200 97 0 0 0 
12 0 0 7 15 200 97 0 0 1 6 param0 0 201  
13 0 0 7 16 204 0 0 0 1 4 this 3 201  
14 0 0 6 17 207 0 0 0 2 4 this 3 201  3 pos 1 205  
15 0 0 4 18 208 0 0 0 3 4 this 3 200  4 mins 1 196  4 maxs 1 196  
16 0 0 7 19 190 0 0 0 0 
17 0 0 7 22 209 103 0 0 0 
18 0 0 7 22 209 103 0 0 1 6 param0 0 210  
19 0 0 6 23 173 0 0 0 1 4 this 3 210  
20 0 0 7 24 213 0 0 0 1 4 this 3 210  
21 0 0 4 25 208 0 0 0 3 4 this 3 209  4 mins 1 196  4 maxs 1 196  
22 0 0 7 26 190 0 0 0 0 
23 0 0 7 31 216 0 0 0 2 13 face_material 1 215  9 face_type 1 173  
24 0 0 7 32 216 0 0 0 0 
25 0 0 6 33 215 0 0 0 1 4 this 3 217  
26 0 0 6 34 173 0 0 0 1 4 this 3 217  
27 0 0 6 35 173 0 0 0 0 
28 0 0 7 38 190 0 0 0 0 
29 0 0 7 41 188 144 0 0 0 
30 0 0 6 42 207 0 0 0 2 4 this 3 188  4 file 1 219  
31 0 0 4 43 208 0 0 0 1 4 this 3 188  
32 0 0 4 44 208 0 0 0 3 4 this 3 188  5 gamma 1 222  10 overbright 1 173  
33 0 0 6 45 222 0 0 0 1 4 this 3 224  
34 0 0 4 46 208 0 0 0 2 4 this 3 188  3 gsg 1 226  
35 0 0 4 47 208 0 0 0 2 4 this 3 188  6 camera 1 228  
36 0 0 4 48 208 0 0 0 2 4 this 3 188  6 render 1 228  
37 0 0 4 49 208 0 0 0 2 4 this 3 188  4 flag 1 207  
38 0 0 4 50 208 0 0 0 2 4 this 3 188  4 flag 1 207  
39 0 0 4 51 208 0 0 0 2 4 this 3 188  4 type 1 173  
40 0 0 4 52 208 0 0 0 2 4 this 3 188  4 flag 1 207  
41 0 0 4 53 208 0 0 0 2 4 this 3 188  4 file 1 219  
42 0 0 4 54 208 0 0 0 2 4 this 3 188  4 node 1 228  
43 0 0 4 55 208 0 0 0 3 4 this 3 188  7 entname 1 215  4 type 1 230  
44 0 0 6 56 233 0 0 0 2 4 this 3 224  10 targetname 1 215  
45 0 0 6 57 173 0 0 0 1 4 this 3 224  
46 0 0 6 58 215 0 0 0 3 4 this 3 224  6 entnum 1 173  3 key 1 215  
47 0 0 6 59 223 0 0 0 3 4 this 3 224  6 entnum 1 173  3 key 1 215  
48 0 0 6 60 173 0 0 0 3 4 this 3 224  6 entnum 1 173  3 key 1 215  
49 0 0 7 61 199 0 0 0 3 4 this 3 224  6 entnum 1 173  3 key 1 215  
50 0 0 7 62 239 0 0 0 4 4 this 3 224  6 entnum 1 173  3 key 1 215  5 scale 1 207  
51 0 0 7 63 213 0 0 0 2 4 this 3 224  6 entnum 1 173  
52 0 0 7 64 213 0 0 0 2 4 this 3 224  8 modelnum 1 173  
53 0 0 6 65 173 0 0 0 2 4 this 3 188  3 pos 1 205  
54 0 0 6 65 173 0 0 0 2 4 this 3 188  2 np 1 228  
55 0 0 6 66 173 0 0 0 2 4 this 3 188  3 pos 1 205  
56 0 0 6 67 207 0 0 0 2 4 this 3 188  6 bounds 1 240  
57 0 0 7 68 240 0 0 0 3 4 this 3 188  13 net_transform 1 243  8 original 1 240  
58 0 0 6 69 207 0 0 0 1 4 this 3 224  
59 0 0 6 70 207 0 0 0 1 4 this 3 224  
60 0 0 4 71 208 0 0 0 1 4 this 3 188  
61 0 0 7 72 213 0 0 0 1 4 this 3 224  
62 0 0 6 73 188 0 0 0 0 
63 0 0 7 79 248 147 0 0 1 6 param0 0 246  
64 0 0 7 79 248 147 0 0 1 4 trav 1 249  
65 0 0 7 78 190 0 0 0 0 
66 0 0 7 82 250 152 0 0 0 
67 0 0 7 83 216 0 0 0 0 
68 0 0 6 84 173 0 0 0 0 
69 0 0 7 86 190 0 0 0 0 
70 0 0 7 91 253 155 0 0 1 6 param0 0 251  
71 0 0 7 91 253 155 0 0 1 4 name 1 215  
72 0 0 7 90 190 0 0 0 0 
73 0 0 7 95 256 158 0 0 1 6 param0 0 254  
74 0 0 7 95 256 158 0 0 1 4 name 1 215  
75 0 0 7 94 190 0 0 0 0 
76 0 0 7 100 259 161 0 0 1 6 param0 0 257  
77 0 0 7 100 259 161 0 0 1 4 name 1 215  
78 0 0 7 99 190 0 0 0 0 
79 0 0 7 104 262 164 0 0 1 6 param0 0 260  
80 0 0 7 104 262 164 0 0 1 4 name 1 215  
81 0 0 7 103 190 0 0 0 0 
98
165 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 82 86 0 3 83 84 85 0 0 1 0 166 0 0 0 0 0

166 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

167 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 87 91 0 3 88 89 90 0 0 1 0 165 0 0 0 0 0

168 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 92 97 0 4 93 94 95 96 0 0 1 0 165 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

169 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 98 103 0 4 99 100 101 102 0 0 1 0 165 0 0 0 0 0

170 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 110 1 263 6 104 105 106 107 108 109 0 0 1 0 171 0 0 0 1 172 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

171 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

172 0 0 794624 15 BSPFaceAttrib:: 0 170 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

173 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

174 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 111 144 0 32 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 0 0 0 0 1 175 58
/**
 * Loads and handles the operations of PBSP files.
 */

175 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 174 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

176 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 146 147 0 1 145 0 0 1 0 177 0 0 0 0 0

177 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

178 15 IgnorePVSAttrib 0 141313 15 IgnorePVSAttrib 15 IgnorePVSAttrib 0 0 0 1 148 152 1 264 3 149 150 151 0 0 1 0 171 0 0 0 0 86
/**
 * Forces the node/geom to not be tested against the PVS, just frustum culled.
 */

179 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 154 155 0 1 153 0 0 1 0 180 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

180 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

181 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 157 158 0 1 156 0 0 1 0 180 0 0 0 0 0

182 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 160 161 0 1 159 0 0 1 0 183 0 0 0 0 0

183 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

184 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 163 164 0 1 162 0 0 1 0 183 0 0 0 0 0

185 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 165 0 0 0 0 0 0 0 0 0 0

186 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 187 0 0 0 0 0 0 0 0 0 0

187 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 165 0 0 0 0 0 0 0 0 0 0

188 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 174 0 0 0 0 0 0 0 0 0 0

189 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

190 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 189 0 0 0 0 0 0 0 0 0 0

191 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 167 0 0 0 0 0 0 0 0 0 0

192 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 193 0 0 0 0 0 0 0 0 0 0

193 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 167 0 0 0 0 0 0 0 0 0 0

194 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 195 0 0 0 0 0 0 0 0 0 0

195 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

196 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 194 0 0 0 0 0 0 0 0 0 0

197 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 198 0 0 0 0 0 0 0 0 0 0

198 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

199 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 197 0 0 0 0 0 0 0 0 0 0

200 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 168 0 0 0 0 0 0 0 0 0 0

201 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 202 0 0 0 0 0 0 0 0 0 0

202 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 168 0 0 0 0 0 0 0 0 0 0

203 11 BoundingBox 0 2048 11 BoundingBox 11 BoundingBox 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

204 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 203 0 0 0 0 0 0 0 0 0 0

205 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 206 0 0 0 0 0 0 0 0 0 0

206 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 194 0 0 0 0 0 0 0 0 0 0

207 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

208 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

209 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 169 0 0 0 0 0 0 0 0 0 0

210 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 211 0 0 0 0 0 0 0 0 0 0

211 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 169 0 0 0 0 0 0 0 0 0 0

212 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

213 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 212 0 0 0 0 0 0 0 0 0 0

214 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 171 0 0 0 0 0 0 0 0 0 0

215 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

216 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 214 0 0 0 0 0 0 0 0 0 0

217 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 218 0 0 0 0 0 0 0 0 0 0

218 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 170 0 0 0 0 0 0 0 0 0 0

219 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 220 0 0 0 0 0 0 0 0 0 0

220 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 221 0 0 0 0 0 0 0 0 0 0

221 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

222 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 223 0 0 0 0 0 0 0 0 0 0

223 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

224 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 225 0 0 0 0 0 0 0 0 0 0

225 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 174 0 0 0 0 0 0 0 0 0 0

226 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 227 0 0 0 0 0 0 0 0 0 0

227 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

228 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 229 0 0 0 0 0 0 0 0 0 0

229 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 212 0 0 0 0 0 0 0 0 0 0

230 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 231 0 0 0 0 0 0 0 0 0 0

231 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 232 0 0 0 0 0 0 0 0 0 0

232 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

233 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 234 0 0 0 0 0 0 0 0 0 0

234 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 235 0 0 0 0 0 0 0 0 0 0

235 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

236 6 LColor 0 2105344 6 LColor 6 LColor 0 0 237 0 0 0 0 0 0 0 0 0 0

237 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 238 0 0 0 0 0 0 0 0 0 0

238 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

239 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 236 0 0 0 0 0 0 0 0 0 0

240 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 241 0 0 0 0 0 0 0 0 0 0

241 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 242 0 0 0 0 0 0 0 0 0 0

242 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

243 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 244 0 0 0 0 0 0 0 0 0 0

244 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 245 0 0 0 0 0 0 0 0 0 0

245 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

246 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 247 0 0 0 0 0 0 0 0 0 0

247 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 176 0 0 0 0 0 0 0 0 0 0

248 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 176 0 0 0 0 0 0 0 0 0 0

249 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 177 0 0 0 0 0 0 0 0 0 0

250 17 IgnorePVSAttrib * 0 8576 17 IgnorePVSAttrib * 17 IgnorePVSAttrib * 0 0 178 0 0 0 0 0 0 0 0 0 0

251 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 252 0 0 0 0 0 0 0 0 0 0

252 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 179 0 0 0 0 0 0 0 0 0 0

253 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 179 0 0 0 0 0 0 0 0 0 0

254 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 255 0 0 0 0 0 0 0 0 0 0

255 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 181 0 0 0 0 0 0 0 0 0 0

256 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 181 0 0 0 0 0 0 0 0 0 0

257 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 258 0 0 0 0 0 0 0 0 0 0

258 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 182 0 0 0 0 0 0 0 0 0 0

259 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 182 0 0 0 0 0 0 0 0 0 0

260 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 261 0 0 0 0 0 0 0 0 0 0

261 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 184 0 0 0 0 0 0 0 0 0 0

262 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 184 0 0 0 0 0 0 0 0 0 0

0
2
263 10 class_slot 0 2 0 108 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

264 10 class_slot 0 2 0 150 0 0 0 0 0 0 0 27 IgnorePVSAttrib::class_slot 0

0
