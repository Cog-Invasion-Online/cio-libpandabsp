1562944681
3 3
3 bsp 4 t5GT 3 bsp 
270
258 3 get 0 4 528 18 TextureStages::get 0 2 3 4 0
159
static TextureStage *TextureStages::get(std::string const &name);
static TextureStage *TextureStages::get(std::string const &name, std::string const &uv_name);

259 15 get_basetexture 0 4 528 30 TextureStages::get_basetexture 0 1 5 0
58
static TextureStage *TextureStages::get_basetexture(void);

260 12 get_lightmap 0 4 528 27 TextureStages::get_lightmap 0 1 6 0
55
static TextureStage *TextureStages::get_lightmap(void);

261 19 get_bumped_lightmap 0 4 528 34 TextureStages::get_bumped_lightmap 0 1 7 0
62
static TextureStage *TextureStages::get_bumped_lightmap(void);

262 13 get_spheremap 0 4 528 28 TextureStages::get_spheremap 0 1 8 0
56
static TextureStage *TextureStages::get_spheremap(void);

263 11 get_cubemap 0 4 528 26 TextureStages::get_cubemap 0 1 9 0
54
static TextureStage *TextureStages::get_cubemap(void);

264 13 get_normalmap 0 4 528 28 TextureStages::get_normalmap 0 1 10 0
56
static TextureStage *TextureStages::get_normalmap(void);

265 13 get_heightmap 0 4 528 28 TextureStages::get_heightmap 0 1 11 0
56
static TextureStage *TextureStages::get_heightmap(void);

266 12 get_glossmap 0 4 528 27 TextureStages::get_glossmap 0 1 12 0
55
static TextureStage *TextureStages::get_glossmap(void);

267 11 get_glowmap 0 4 528 26 TextureStages::get_glowmap 0 1 13 0
54
static TextureStage *TextureStages::get_glowmap(void);

268 13 TextureStages 0 4 528 28 TextureStages::TextureStages 0 2 1 2 0
122
inline TextureStages::TextureStages(void) = default;
inline TextureStages::TextureStages(TextureStages const &) = default;

269 14 ~TextureStages 0 4 528 29 TextureStages::~TextureStages 0 0 0
36
TextureStages::~TextureStages(void);

270 11 BSPMaterial 0 4 529 24 BSPMaterial::BSPMaterial 0 2 14 15 0
137
inline explicit BSPMaterial::BSPMaterial(std::string const &name = "material");
inline BSPMaterial::BSPMaterial(BSPMaterial const &copy);

271 10 operator = 0 4 529 23 BSPMaterial::operator = 0 1 16 0
61
inline void BSPMaterial::operator =(BSPMaterial const &copy);

272 12 set_keyvalue 0 4 529 25 BSPMaterial::set_keyvalue 0 1 17 0
88
inline void BSPMaterial::set_keyvalue(std::string const &key, std::string const &value);

273 12 get_keyvalue 0 4 529 25 BSPMaterial::get_keyvalue 0 1 18 0
75
inline std::string BSPMaterial::get_keyvalue(std::string const &key) const;

274 17 get_num_keyvalues 0 4 529 30 BSPMaterial::get_num_keyvalues 0 1 19 0
62
inline std::size_t BSPMaterial::get_num_keyvalues(void) const;

275 7 get_key 0 4 529 20 BSPMaterial::get_key 0 1 20 0
68
inline std::string const &BSPMaterial::get_key(std::size_t i) const;

276 9 get_value 0 4 529 22 BSPMaterial::get_value 0 1 21 0
70
inline std::string const &BSPMaterial::get_value(std::size_t i) const;

277 16 get_keyvalue_int 0 4 529 29 BSPMaterial::get_keyvalue_int 0 1 22 0
71
inline int BSPMaterial::get_keyvalue_int(std::string const &key) const;

278 18 get_keyvalue_float 0 4 529 31 BSPMaterial::get_keyvalue_float 0 1 23 0
75
inline float BSPMaterial::get_keyvalue_float(std::string const &key) const;

279 10 set_shader 0 4 529 23 BSPMaterial::set_shader 0 1 24 0
68
inline void BSPMaterial::set_shader(std::string const &shader_name);

280 10 get_shader 0 4 529 23 BSPMaterial::get_shader 0 1 25 0
55
inline std::string BSPMaterial::get_shader(void) const;

281 8 get_file 0 4 529 21 BSPMaterial::get_file 0 1 26 0
50
inline Filename BSPMaterial::get_file(void) const;

282 12 has_keyvalue 0 4 529 25 BSPMaterial::has_keyvalue 0 1 27 0
68
inline bool BSPMaterial::has_keyvalue(std::string const &key) const;

283 15 has_env_cubemap 0 4 529 28 BSPMaterial::has_env_cubemap 0 1 28 0
53
inline bool BSPMaterial::has_env_cubemap(void) const;

284 16 has_transparency 0 4 529 29 BSPMaterial::has_transparency 0 1 29 0
54
inline bool BSPMaterial::has_transparency(void) const;

285 16 get_surface_prop 0 4 529 29 BSPMaterial::get_surface_prop 0 1 30 0
61
inline std::string BSPMaterial::get_surface_prop(void) const;

286 12 get_contents 0 4 529 25 BSPMaterial::get_contents 0 1 31 0
57
inline std::string BSPMaterial::get_contents(void) const;

287 14 is_lightmapped 0 4 529 27 BSPMaterial::is_lightmapped 0 1 32 0
52
inline bool BSPMaterial::is_lightmapped(void) const;

288 11 has_bumpmap 0 4 529 24 BSPMaterial::has_bumpmap 0 1 33 0
49
inline bool BSPMaterial::has_bumpmap(void) const;

289 13 get_from_file 0 4 529 26 BSPMaterial::get_from_file 0 1 34 0
75
static BSPMaterial const *BSPMaterial::get_from_file(Filename const &file);

290 14 get_class_type 0 4 529 27 BSPMaterial::get_class_type 0 1 35 0
52
static TypeHandle BSPMaterial::get_class_type(void);

291 12 ~BSPMaterial 0 4 529 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

292 4 make 0 4 531 23 BSPMaterialAttrib::make 0 1 36 0
86
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make(BSPMaterial const *mat);

293 20 make_override_shader 0 4 531 39 BSPMaterialAttrib::make_override_shader 0 1 37 0
102
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_override_shader(BSPMaterial const *mat);

294 12 make_default 0 4 531 31 BSPMaterialAttrib::make_default 0 1 38 0
76
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_default(void);

295 19 get_override_shader 0 4 531 38 BSPMaterialAttrib::get_override_shader 0 1 39 0
70
inline std::string BSPMaterialAttrib::get_override_shader(void) const;

296 19 has_override_shader 0 4 531 38 BSPMaterialAttrib::has_override_shader 0 1 40 0
63
inline bool BSPMaterialAttrib::has_override_shader(void) const;

297 12 get_material 0 4 531 31 BSPMaterialAttrib::get_material 0 1 41 0
70
inline BSPMaterial const *BSPMaterialAttrib::get_material(void) const;

298 14 get_class_slot 0 4 531 33 BSPMaterialAttrib::get_class_slot 0 1 42 0
51
static int BSPMaterialAttrib::get_class_slot(void);

299 14 get_class_type 0 4 531 33 BSPMaterialAttrib::get_class_type 0 1 43 0
58
static TypeHandle BSPMaterialAttrib::get_class_type(void);

300 18 ~BSPMaterialAttrib 0 4 531 37 BSPMaterialAttrib::~BSPMaterialAttrib 0 0 0
44
BSPMaterialAttrib::~BSPMaterialAttrib(void);

301 14 get_class_type 0 4 534 27 CBaseEntity::get_class_type 0 1 46 0
52
static TypeHandle CBaseEntity::get_class_type(void);

302 11 CBaseEntity 0 4 534 24 CBaseEntity::CBaseEntity 0 2 44 45 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

303 10 get_entnum 0 4 534 23 CBaseEntity::get_entnum 0 1 47 0
40
int CBaseEntity::get_entnum(void) const;

304 10 get_loader 0 4 534 23 CBaseEntity::get_loader 0 1 48 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

305 12 ~CBaseEntity 0 4 534 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

306 14 get_class_type 0 4 535 28 CPointEntity::get_class_type 0 1 51 0
53
static TypeHandle CPointEntity::get_class_type(void);

307 12 CPointEntity 0 4 535 26 CPointEntity::CPointEntity 0 2 49 50 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

308 10 get_origin 0 4 535 24 CPointEntity::get_origin 0 1 52 0
45
LPoint3 CPointEntity::get_origin(void) const;

309 10 get_angles 0 4 535 24 CPointEntity::get_angles 0 1 53 0
46
LVector3 CPointEntity::get_angles(void) const;

310 13 ~CPointEntity 0 4 535 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

311 14 get_class_type 0 4 536 29 CBoundsEntity::get_class_type 0 1 56 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

312 13 CBoundsEntity 0 4 536 28 CBoundsEntity::CBoundsEntity 0 2 54 55 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

313 10 get_bounds 0 4 536 25 CBoundsEntity::get_bounds 0 1 57 0
51
BoundingBox *CBoundsEntity::get_bounds(void) const;

314 9 is_inside 0 4 536 24 CBoundsEntity::is_inside 0 1 58 0
63
inline bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

315 13 fillin_bounds 0 4 536 28 CBoundsEntity::fillin_bounds 0 1 59 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

316 14 ~CBoundsEntity 0 4 536 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

317 14 get_class_type 0 4 537 28 CBrushEntity::get_class_type 0 1 62 0
53
static TypeHandle CBrushEntity::get_class_type(void);

318 12 CBrushEntity 0 4 537 26 CBrushEntity::CBrushEntity 0 2 60 61 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

319 12 get_modelnum 0 4 537 26 CBrushEntity::get_modelnum 0 1 63 0
43
int CBrushEntity::get_modelnum(void) const;

320 12 get_model_np 0 4 537 26 CBrushEntity::get_model_np 0 1 64 0
48
NodePath CBrushEntity::get_model_np(void) const;

321 16 get_model_bounds 0 4 537 30 CBrushEntity::get_model_bounds 0 1 65 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

322 13 ~CBrushEntity 0 4 537 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

323 9 get_width 0 4 538 21 PackResult::get_width 0 1 67 0
45
inline int PackResult::get_width(void) const;

324 10 get_height 0 4 538 22 PackResult::get_height 0 1 68 0
46
inline int PackResult::get_height(void) const;

325 15 get_unused_area 0 4 538 27 PackResult::get_unused_area 0 1 69 0
51
inline int PackResult::get_unused_area(void) const;

326 10 PackResult 0 4 538 22 PackResult::PackResult 0 1 66 0
60
inline PackResult::PackResult(PackResult const &) = default;

327 11 ~PackResult 0 4 538 23 PackResult::~PackResult 0 0 0
30
PackResult::~PackResult(void);

328 5 get_x 0 4 539 22 TextureLocation::get_x 0 1 71 0
46
inline int TextureLocation::get_x(void) const;

329 5 get_y 0 4 539 22 TextureLocation::get_y 0 1 72 0
46
inline int TextureLocation::get_y(void) const;

330 9 get_width 0 4 539 26 TextureLocation::get_width 0 1 73 0
50
inline int TextureLocation::get_width(void) const;

331 10 get_height 0 4 539 27 TextureLocation::get_height 0 1 74 0
51
inline int TextureLocation::get_height(void) const;

332 11 get_rotated 0 4 539 28 TextureLocation::get_rotated 0 1 75 0
53
inline bool TextureLocation::get_rotated(void) const;

333 15 TextureLocation 0 4 539 32 TextureLocation::TextureLocation 0 1 70 0
75
inline TextureLocation::TextureLocation(TextureLocation const &) = default;

334 16 ~TextureLocation 0 4 539 33 TextureLocation::~TextureLocation 0 0 0
40
TextureLocation::~TextureLocation(void);

335 15 getTextureCount 0 6 540 30 TexturePacker::getTextureCount 0 1 76 0
53
virtual int TexturePacker::getTextureCount(void) = 0;

336 15 setTextureCount 0 6 540 30 TexturePacker::setTextureCount 0 1 77 35
// number of textures to consider..
60
virtual void TexturePacker::setTextureCount(int tcount) = 0;

337 10 addTexture 0 6 540 25 TexturePacker::addTexture 0 1 78 21
// add textures 0 - n
61
virtual void TexturePacker::addTexture(int wid, int hit) = 0;

338 15 wouldTextureFit 0 6 540 30 TexturePacker::wouldTextureFit 0 1 79 0
135
virtual bool TexturePacker::wouldTextureFit(int wid, int hit, bool forcePowerOfTwo, bool onePixelBorder, int max_wid, int max_hit) = 0;

339 13 addNewTexture 0 6 540 28 TexturePacker::addNewTexture 0 1 80 0
64
virtual void TexturePacker::addNewTexture(int wid, int hit) = 0;

340 12 packTextures 0 6 540 27 TexturePacker::packTextures 0 1 81 74
// pack the textures, the return code is the amount of wasted/unused area.
94
virtual PackResult TexturePacker::packTextures(bool forcePowerOfTwo, bool onePixelBorder) = 0;

341 18 getTextureLocation 0 6 540 33 TexturePacker::getTextureLocation 0 1 82 58
// returns true if the texture has been rotated 90 degrees
73
virtual TextureLocation TexturePacker::getTextureLocation(int index) = 0;

342 19 createTexturePacker 0 4 540 34 TexturePacker::createTexturePacker 0 1 83 0
63
static TexturePacker *TexturePacker::createTexturePacker(void);

343 20 releaseTexturePacker 0 4 540 35 TexturePacker::releaseTexturePacker 0 1 84 0
67
static void TexturePacker::releaseTexturePacker(TexturePacker *tp);

344 14 ~TexturePacker 0 4 540 29 TexturePacker::~TexturePacker 0 0 0
36
TexturePacker::~TexturePacker(void);

345 10 initialize 0 4 541 20 RayTrace::initialize 0 1 87 0
39
static void RayTrace::initialize(void);

346 8 destruct 0 4 541 18 RayTrace::destruct 0 1 88 0
37
static void RayTrace::destruct(void);

347 8 RayTrace 0 4 541 18 RayTrace::RayTrace 0 2 85 86 0
97
inline RayTrace::RayTrace(void) = default;
inline RayTrace::RayTrace(RayTrace const &) = default;

348 9 ~RayTrace 0 4 541 19 RayTrace::~RayTrace 0 0 0
26
RayTrace::~RayTrace(void);

349 17 RayTraceHitResult 0 4 542 36 RayTraceHitResult::RayTraceHitResult 0 2 89 90 0
132
inline RayTraceHitResult::RayTraceHitResult(void);
inline RayTraceHitResult::RayTraceHitResult(RayTraceHitResult const &) = default;

350 7 has_hit 0 4 542 26 RayTraceHitResult::has_hit 0 1 91 0
51
inline bool RayTraceHitResult::has_hit(void) const;

351 14 get_hit_normal 0 4 542 33 RayTraceHitResult::get_hit_normal 0 1 92 0
62
inline LVector3 RayTraceHitResult::get_hit_normal(void) const;

352 6 get_uv 0 4 542 25 RayTraceHitResult::get_uv 0 1 93 0
54
inline LVector2 RayTraceHitResult::get_uv(void) const;

353 11 get_prim_id 0 4 542 30 RayTraceHitResult::get_prim_id 0 1 94 0
63
inline unsigned int RayTraceHitResult::get_prim_id(void) const;

354 11 get_geom_id 0 4 542 30 RayTraceHitResult::get_geom_id 0 1 95 0
63
inline unsigned int RayTraceHitResult::get_geom_id(void) const;

355 16 get_hit_fraction 0 4 542 35 RayTraceHitResult::get_hit_fraction 0 1 96 0
61
inline float RayTraceHitResult::get_hit_fraction(void) const;

356 18 ~RayTraceHitResult 0 4 542 37 RayTraceHitResult::~RayTraceHitResult 0 0 0
44
RayTraceHitResult::~RayTraceHitResult(void);

357 13 RayTraceScene 0 4 543 28 RayTraceScene::RayTraceScene 0 2 97 98 0
105
RayTraceScene::RayTraceScene(void);
inline RayTraceScene::RayTraceScene(RayTraceScene const &) = default;

358 12 add_geometry 0 4 543 27 RayTraceScene::add_geometry 0 1 99 0
57
void RayTraceScene::add_geometry(RayTraceGeometry *geom);

359 15 remove_geometry 0 4 543 30 RayTraceScene::remove_geometry 0 1 100 0
60
void RayTraceScene::remove_geometry(RayTraceGeometry *geom);

360 10 remove_all 0 4 543 25 RayTraceScene::remove_all 0 1 101 0
37
void RayTraceScene::remove_all(void);

361 10 trace_line 0 4 543 25 RayTraceScene::trace_line 0 1 102 0
116
inline RayTraceHitResult RayTraceScene::trace_line(LPoint3 const &start, LPoint3 const &end, BitMask32 const &mask);

362 9 trace_ray 0 4 543 24 RayTraceScene::trace_ray 0 1 103 0
132
RayTraceHitResult RayTraceScene::trace_ray(LPoint3 const &origin, LVector3 const &direction, float distance, BitMask32 const &mask);

363 17 set_build_quality 0 4 543 32 RayTraceScene::set_build_quality 0 1 104 0
51
void RayTraceScene::set_build_quality(int quality);

364 6 update 0 4 543 21 RayTraceScene::update 0 1 105 0
33
void RayTraceScene::update(void);

365 12 get_geometry 0 4 543 27 RayTraceScene::get_geometry 0 1 106 0
75
inline RayTraceGeometry *RayTraceScene::get_geometry(unsigned int geom_id);

366 14 get_class_type 0 4 546 32 RayTraceGeometry::get_class_type 0 1 107 0
57
static TypeHandle RayTraceGeometry::get_class_type(void);

367 8 set_mask 0 4 546 26 RayTraceGeometry::set_mask 0 2 108 109 0
114
inline void RayTraceGeometry::set_mask(BitMask32 const &mask);
void RayTraceGeometry::set_mask(unsigned int mask);

368 8 get_mask 0 4 546 26 RayTraceGeometry::get_mask 0 1 110 0
56
inline BitMask32 RayTraceGeometry::get_mask(void) const;

369 11 get_geom_id 0 4 546 29 RayTraceGeometry::get_geom_id 0 1 111 0
62
inline unsigned int RayTraceGeometry::get_geom_id(void) const;

370 17 set_build_quality 0 4 546 35 RayTraceGeometry::set_build_quality 0 1 112 0
54
void RayTraceGeometry::set_build_quality(int quality);

371 5 build 0 6 546 23 RayTraceGeometry::build 0 1 113 0
47
virtual void RayTraceGeometry::build(void) = 0;

372 14 get_class_type 0 4 548 36 RayTraceTriangleMesh::get_class_type 0 1 115 0
61
static TypeHandle RayTraceTriangleMesh::get_class_type(void);

373 20 RayTraceTriangleMesh 0 4 548 42 RayTraceTriangleMesh::RayTraceTriangleMesh 0 1 114 0
73
RayTraceTriangleMesh::RayTraceTriangleMesh(std::string const &name = "");

374 12 add_triangle 0 4 548 34 RayTraceTriangleMesh::add_triangle 0 1 116 0
97
void RayTraceTriangleMesh::add_triangle(LPoint3 const &p1, LPoint3 const &p2, LPoint3 const &p3);

375 23 add_triangles_from_geom 0 4 548 45 RayTraceTriangleMesh::add_triangles_from_geom 0 1 117 0
105
void RayTraceTriangleMesh::add_triangles_from_geom(Geom const *geom, TransformState const *ts = nullptr);

376 21 ~RayTraceTriangleMesh 0 4 548 43 RayTraceTriangleMesh::~RayTraceTriangleMesh 0 0 0
50
RayTraceTriangleMesh::~RayTraceTriangleMesh(void);

377 4 make 0 4 549 19 BSPFaceAttrib::make 0 1 118 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

378 12 make_default 0 4 549 27 BSPFaceAttrib::make_default 0 1 119 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

379 15 make_ignore_pvs 0 4 549 30 BSPFaceAttrib::make_ignore_pvs 0 1 120 0
75
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_ignore_pvs(void);

380 12 get_material 0 4 549 27 BSPFaceAttrib::get_material 0 1 121 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

381 13 get_face_type 0 4 549 28 BSPFaceAttrib::get_face_type 0 1 122 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

382 14 get_ignore_pvs 0 4 549 29 BSPFaceAttrib::get_ignore_pvs 0 1 123 0
54
inline bool BSPFaceAttrib::get_ignore_pvs(void) const;

383 14 get_class_slot 0 4 549 29 BSPFaceAttrib::get_class_slot 0 1 124 0
47
static int BSPFaceAttrib::get_class_slot(void);

384 14 get_class_type 0 4 549 29 BSPFaceAttrib::get_class_type 0 1 125 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

385 14 ~BSPFaceAttrib 0 4 549 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

386 9 BSPLoader 0 4 551 20 BSPLoader::BSPLoader 0 1 126 0
27
BSPLoader::BSPLoader(void);

387 4 read 0 4 551 15 BSPLoader::read 0 1 127 0
43
bool BSPLoader::read(Filename const &file);

388 16 do_optimizations 0 4 551 27 BSPLoader::do_optimizations 0 1 128 0
39
void BSPLoader::do_optimizations(void);

389 9 set_gamma 0 4 551 20 BSPLoader::set_gamma 0 1 129 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

390 9 get_gamma 0 4 551 20 BSPLoader::get_gamma 0 1 130 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

391 7 set_win 0 4 551 18 BSPLoader::set_win 0 1 131 0
45
void BSPLoader::set_win(GraphicsWindow *win);

392 10 set_camera 0 4 551 21 BSPLoader::set_camera 0 1 132 0
51
void BSPLoader::set_camera(NodePath const &camera);

393 10 set_render 0 4 551 21 BSPLoader::set_render 0 1 133 0
51
void BSPLoader::set_render(NodePath const &render);

394 20 set_shader_generator 0 4 551 31 BSPLoader::set_shader_generator 0 1 134 0
64
void BSPLoader::set_shader_generator(BSPShaderGenerator *shgen);

395 19 set_want_visibility 0 4 551 30 BSPLoader::set_want_visibility 0 1 135 0
47
void BSPLoader::set_want_visibility(bool flag);

396 18 set_want_lightmaps 0 4 551 29 BSPLoader::set_want_lightmaps 0 1 136 0
46
void BSPLoader::set_want_lightmaps(bool flag);

397 16 set_physics_type 0 4 551 27 BSPLoader::set_physics_type 0 1 137 0
43
void BSPLoader::set_physics_type(int type);

398 19 set_visualize_leafs 0 4 551 30 BSPLoader::set_visualize_leafs 0 1 138 0
47
void BSPLoader::set_visualize_leafs(bool flag);

399 18 set_materials_file 0 4 551 29 BSPLoader::set_materials_file 0 1 139 0
57
void BSPLoader::set_materials_file(Filename const &file);

400 13 set_wireframe 0 4 551 24 BSPLoader::set_wireframe 0 1 140 0
41
void BSPLoader::set_wireframe(bool flag);

401 13 get_wireframe 0 4 551 24 BSPLoader::get_wireframe 0 1 141 0
49
inline bool BSPLoader::get_wireframe(void) const;

402 10 get_camera 0 4 551 21 BSPLoader::get_camera 0 1 142 0
50
inline NodePath BSPLoader::get_camera(void) const;

403 11 trace_decal 0 4 551 22 BSPLoader::trace_decal 0 1 143 0
158
inline NodePath BSPLoader::trace_decal(std::string const &decal_material, LPoint2 const &decal_scale, float rotate, LPoint3 const &start, LPoint3 const &end);

404 27 get_closest_cubemap_texture 0 4 551 38 BSPLoader::get_closest_cubemap_texture 0 1 144 0
68
Texture *BSPLoader::get_closest_cubemap_texture(LPoint3 const &pos);

405 14 build_cubemaps 0 4 551 25 BSPLoader::build_cubemaps 0 1 145 0
37
void BSPLoader::build_cubemaps(void);

406 16 set_want_shadows 0 4 551 27 BSPLoader::set_want_shadows 0 1 146 0
44
void BSPLoader::set_want_shadows(bool flag);

407 14 set_shadow_dir 0 4 551 25 BSPLoader::set_shadow_dir 0 1 147 0
52
void BSPLoader::set_shadow_dir(LVector3 const &dir);

408 16 extract_modelnum 0 4 551 27 BSPLoader::extract_modelnum 0 1 148 0
44
int BSPLoader::extract_modelnum(int entnum);

409 16 get_model_bounds 0 4 551 27 BSPLoader::get_model_bounds 0 1 149 0
77
void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

410 28 set_server_entity_dispatcher 0 4 551 39 BSPLoader::set_server_entity_dispatcher 0 1 150 0
67
void BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

411 27 link_server_entity_to_class 0 4 551 38 BSPLoader::link_server_entity_to_class 0 1 151 0
89
void BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

412 6 set_ai 0 4 551 17 BSPLoader::set_ai 0 1 152 0
32
void BSPLoader::set_ai(bool ai);

413 5 is_ai 0 4 551 16 BSPLoader::is_ai 0 1 153 0
41
inline bool BSPLoader::is_ai(void) const;

414 10 trace_line 0 4 551 21 BSPLoader::trace_line 0 1 154 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

415 9 clip_line 0 4 551 20 BSPLoader::clip_line 0 1 155 0
71
LPoint3 BSPLoader::clip_line(LPoint3 const &start, LPoint3 const &end);

416 20 link_entity_to_class 0 4 551 31 BSPLoader::link_entity_to_class 0 1 156 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

417 28 get_py_entity_by_target_name 0 4 551 39 BSPLoader::get_py_entity_by_target_name 0 1 157 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

418 17 find_all_entities 0 4 551 28 BSPLoader::find_all_entities 0 1 158 0
69
PyObject *BSPLoader::find_all_entities(std::string const &classname);

419 20 get_entity_keyvalues 0 4 551 31 BSPLoader::get_entity_keyvalues 0 1 159 0
71
void BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

420 18 link_cent_to_pyent 0 4 551 29 BSPLoader::link_cent_to_pyent 0 1 160 0
63
void BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

421 16 remove_py_entity 0 4 551 27 BSPLoader::remove_py_entity 0 1 161 0
48
void BSPLoader::remove_py_entity(PyObject *ent);

422 16 get_num_entities 0 4 551 27 BSPLoader::get_num_entities 0 1 162 0
51
inline int BSPLoader::get_num_entities(void) const;

423 16 get_entity_value 0 4 551 27 BSPLoader::get_entity_value 0 1 163 0
75
std::string BSPLoader::get_entity_value(int entnum, char const *key) const;

424 22 get_entity_value_float 0 4 551 33 BSPLoader::get_entity_value_float 0 1 164 0
75
float BSPLoader::get_entity_value_float(int entnum, char const *key) const;

425 20 get_entity_value_int 0 4 551 31 BSPLoader::get_entity_value_int 0 1 165 0
71
int BSPLoader::get_entity_value_int(int entnum, char const *key) const;

426 23 get_entity_value_vector 0 4 551 34 BSPLoader::get_entity_value_vector 0 1 166 0
79
LVector3 BSPLoader::get_entity_value_vector(int entnum, char const *key) const;

427 22 get_entity_value_color 0 4 551 33 BSPLoader::get_entity_value_color 0 1 167 0
95
LColor BSPLoader::get_entity_value_color(int entnum, char const *key, bool scale = true) const;

428 10 get_entity 0 4 551 21 BSPLoader::get_entity 0 1 168 0
49
NodePath BSPLoader::get_entity(int entnum) const;

429 9 get_model 0 4 551 20 BSPLoader::get_model 0 1 169 0
50
NodePath BSPLoader::get_model(int modelnum) const;

430 12 get_c_entity 0 4 551 23 BSPLoader::get_c_entity 0 1 170 0
61
CBaseEntity *BSPLoader::get_c_entity(int const entnum) const;

431 9 find_leaf 0 4 551 20 BSPLoader::find_leaf 0 2 171 172 0
98
inline int BSPLoader::find_leaf(NodePath const &np);
int BSPLoader::find_leaf(LPoint3 const &pos);

432 9 find_node 0 4 551 20 BSPLoader::find_node 0 1 173 0
45
int BSPLoader::find_node(LPoint3 const &pos);

433 18 is_cluster_visible 0 4 551 29 BSPLoader::is_cluster_visible 0 1 174 0
72
bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

434 15 pvs_bounds_test 0 4 551 26 BSPLoader::pvs_bounds_test 0 1 175 0
109
bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds, unsigned int required_leaf_flags = 0);

435 15 make_net_bounds 0 4 551 26 BSPLoader::make_net_bounds 0 1 176 0
147
ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

436 16 has_active_level 0 4 551 27 BSPLoader::has_active_level 0 1 177 0
52
inline bool BSPLoader::has_active_level(void) const;

437 14 has_visibility 0 4 551 25 BSPLoader::has_visibility 0 1 178 0
50
inline bool BSPLoader::has_visibility(void) const;

438 7 cleanup 0 4 551 18 BSPLoader::cleanup 0 1 179 0
30
void BSPLoader::cleanup(void);

439 10 get_result 0 4 551 21 BSPLoader::get_result 0 1 180 0
50
inline NodePath BSPLoader::get_result(void) const;

440 16 set_current_leaf 0 4 551 27 BSPLoader::set_current_leaf 0 1 181 0
50
inline void BSPLoader::set_current_leaf(int leaf);

441 16 get_current_leaf 0 4 551 27 BSPLoader::get_current_leaf 0 1 182 0
51
inline int BSPLoader::get_current_leaf(void) const;

442 16 get_num_visleafs 0 4 551 27 BSPLoader::get_num_visleafs 0 1 183 0
51
inline int BSPLoader::get_num_visleafs(void) const;

443 15 get_leaf_center 0 4 551 26 BSPLoader::get_leaf_center 0 1 184 0
58
inline LPoint3 BSPLoader::get_leaf_center(int leaf) const;

444 15 get_lightcoords 0 4 551 26 BSPLoader::get_lightcoords 0 1 185 0
73
LTexCoord BSPLoader::get_lightcoords(int facenum, LVector3 const &point);

445 6 update 0 4 551 17 BSPLoader::update 0 1 186 0
29
void BSPLoader::update(void);

446 14 get_global_ptr 0 4 551 25 BSPLoader::get_global_ptr 0 1 187 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

447 10 ~BSPLoader 0 4 551 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

448 15 add_permutation 0 4 553 35 ShaderPermutations::add_permutation 0 1 190 0
104
inline void ShaderPermutations::add_permutation(std::string const &key, std::string const &value = "1");

449 9 add_input 0 4 553 29 ShaderPermutations::add_input 0 1 191 0
82
void ShaderPermutations::add_input(ShaderInput const &inp, bool important = true);

450 8 add_flag 0 4 553 28 ShaderPermutations::add_flag 0 1 192 0
44
void ShaderPermutations::add_flag(int flag);

451 10 operator < 0 4 553 30 ShaderPermutations::operator < 0 1 193 0
75
bool ShaderPermutations::operator <(ShaderPermutations const &other) const;

452 18 ShaderPermutations 0 4 553 38 ShaderPermutations::ShaderPermutations 0 2 188 189 0
147
inline ShaderPermutations::ShaderPermutations(void) = default;
inline ShaderPermutations::ShaderPermutations(ShaderPermutations const &) = default;

453 19 ~ShaderPermutations 0 4 553 39 ShaderPermutations::~ShaderPermutations 0 0 0
46
ShaderPermutations::~ShaderPermutations(void);

454 24 upcast_to_ReferenceCount 0 12 554 36 ShaderSpec::upcast_to_ReferenceCount 0 1 196 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

455 22 downcast_to_ShaderSpec 0 12 544 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

456 17 upcast_to_Namable 0 12 554 29 ShaderSpec::upcast_to_Namable 0 1 197 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

457 22 downcast_to_ShaderSpec 0 12 555 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

458 17 read_shader_files 0 4 554 29 ShaderSpec::read_shader_files 0 1 194 0
117
void ShaderSpec::read_shader_files(Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file);

459 14 get_class_type 0 4 554 26 ShaderSpec::get_class_type 0 1 195 0
51
static TypeHandle ShaderSpec::get_class_type(void);

460 11 ~ShaderSpec 0 4 554 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

461 18 BSPShaderGenerator 0 4 558 38 BSPShaderGenerator::BSPShaderGenerator 0 2 198 199 0
200
BSPShaderGenerator::BSPShaderGenerator(GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline BSPShaderGenerator::BSPShaderGenerator(BSPShaderGenerator const &) = default;

462 13 set_sun_light 0 4 558 33 BSPShaderGenerator::set_sun_light 0 1 200 0
59
void BSPShaderGenerator::set_sun_light(NodePath const &np);

463 12 start_update 0 4 558 32 BSPShaderGenerator::start_update 0 1 201 0
44
void BSPShaderGenerator::start_update(void);

464 10 add_shader 0 4 558 30 BSPShaderGenerator::add_shader 0 1 202 0
66
void BSPShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

465 19 has_shadow_sunlight 0 4 558 39 BSPShaderGenerator::has_shadow_sunlight 0 1 203 0
64
inline bool BSPShaderGenerator::has_shadow_sunlight(void) const;

466 22 get_pssm_array_texture 0 4 558 42 BSPShaderGenerator::get_pssm_array_texture 0 1 204 0
71
inline Texture *BSPShaderGenerator::get_pssm_array_texture(void) const;

467 12 get_pssm_rig 0 4 558 32 BSPShaderGenerator::get_pssm_rig 0 1 205 0
67
inline PSSMCameraRig *BSPShaderGenerator::get_pssm_rig(void) const;

468 18 set_shader_quality 0 4 558 38 BSPShaderGenerator::set_shader_quality 0 1 206 0
57
void BSPShaderGenerator::set_shader_quality(int quality);

469 18 get_shader_quality 0 4 558 38 BSPShaderGenerator::get_shader_quality 0 1 207 0
62
inline int BSPShaderGenerator::get_shader_quality(void) const;

470 20 set_identity_cubemap 0 4 558 40 BSPShaderGenerator::set_identity_cubemap 0 1 208 0
67
static void BSPShaderGenerator::set_identity_cubemap(Texture *tex);

471 20 get_identity_cubemap 0 4 558 40 BSPShaderGenerator::get_identity_cubemap 0 1 209 0
63
static Texture *BSPShaderGenerator::get_identity_cubemap(void);

472 11 make_shader 0 4 558 31 BSPShaderGenerator::make_shader 0 1 210 0
121
static ConstPointerTo< Shader > BSPShaderGenerator::make_shader(ShaderSpec const *spec, ShaderPermutations const &perms);

473 14 get_class_type 0 4 558 34 BSPShaderGenerator::get_class_type 0 1 211 0
59
static TypeHandle BSPShaderGenerator::get_class_type(void);

474 19 ~BSPShaderGenerator 0 4 558 39 BSPShaderGenerator::~BSPShaderGenerator 0 0 0
46
BSPShaderGenerator::~BSPShaderGenerator(void);

475 14 get_class_type 0 4 560 32 BSPCullTraverser::get_class_type 0 1 214 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

476 16 BSPCullTraverser 0 4 560 34 BSPCullTraverser::BSPCullTraverser 0 2 212 213 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

477 17 ~BSPCullTraverser 0 4 560 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

478 14 get_class_type 0 4 562 25 BSPRender::get_class_type 0 1 217 0
50
static TypeHandle BSPRender::get_class_type(void);

479 9 BSPRender 0 4 562 20 BSPRender::BSPRender 0 2 215 216 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

480 10 ~BSPRender 0 4 562 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

481 14 get_class_type 0 4 563 23 BSPRoot::get_class_type 0 1 220 0
48
static TypeHandle BSPRoot::get_class_type(void);

482 7 BSPRoot 0 4 563 16 BSPRoot::BSPRoot 0 2 218 219 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

483 8 ~BSPRoot 0 4 563 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

484 14 get_class_type 0 4 564 23 BSPProp::get_class_type 0 1 223 0
48
static TypeHandle BSPProp::get_class_type(void);

485 7 BSPProp 0 4 564 16 BSPProp::BSPProp 0 2 221 222 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

486 8 ~BSPProp 0 4 564 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

487 14 get_class_type 0 4 566 24 BSPModel::get_class_type 0 1 226 0
49
static TypeHandle BSPModel::get_class_type(void);

488 8 BSPModel 0 4 566 18 BSPModel::BSPModel 0 2 224 225 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

489 9 ~BSPModel 0 4 566 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

490 20 VertexLitGenericSpec 0 4 568 42 VertexLitGenericSpec::VertexLitGenericSpec 0 1 227 0
49
VertexLitGenericSpec::VertexLitGenericSpec(void);

491 21 ~VertexLitGenericSpec 0 4 568 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

492 22 LightmappedGenericSpec 0 4 569 46 LightmappedGenericSpec::LightmappedGenericSpec 0 1 228 0
53
LightmappedGenericSpec::LightmappedGenericSpec(void);

493 23 ~LightmappedGenericSpec 0 4 569 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

494 16 UnlitGenericSpec 0 4 570 34 UnlitGenericSpec::UnlitGenericSpec 0 1 229 0
41
UnlitGenericSpec::UnlitGenericSpec(void);

495 17 ~UnlitGenericSpec 0 4 570 35 UnlitGenericSpec::~UnlitGenericSpec 0 0 0
42
UnlitGenericSpec::~UnlitGenericSpec(void);

496 14 UnlitNoMatSpec 0 4 571 30 UnlitNoMatSpec::UnlitNoMatSpec 0 1 230 0
37
UnlitNoMatSpec::UnlitNoMatSpec(void);

497 15 ~UnlitNoMatSpec 0 4 571 31 UnlitNoMatSpec::~UnlitNoMatSpec 0 0 0
38
UnlitNoMatSpec::~UnlitNoMatSpec(void);

498 13 CSMRenderSpec 0 4 572 28 CSMRenderSpec::CSMRenderSpec 0 1 231 0
35
CSMRenderSpec::CSMRenderSpec(void);

499 14 ~CSMRenderSpec 0 4 572 29 CSMRenderSpec::~CSMRenderSpec 0 0 0
36
CSMRenderSpec::~CSMRenderSpec(void);

500 10 SkyBoxSpec 0 4 573 22 SkyBoxSpec::SkyBoxSpec 0 1 232 0
29
SkyBoxSpec::SkyBoxSpec(void);

501 11 ~SkyBoxSpec 0 4 573 23 SkyBoxSpec::~SkyBoxSpec 0 0 0
30
SkyBoxSpec::~SkyBoxSpec(void);

502 4 make 0 4 574 24 AmbientBoostEffect::make 0 1 233 0
69
static ConstPointerTo< RenderEffect > AmbientBoostEffect::make(void);

503 14 get_class_type 0 4 574 34 AmbientBoostEffect::get_class_type 0 1 234 0
59
static TypeHandle AmbientBoostEffect::get_class_type(void);

504 19 ~AmbientBoostEffect 0 4 574 39 AmbientBoostEffect::~AmbientBoostEffect 0 0 0
46
AmbientBoostEffect::~AmbientBoostEffect(void);

505 14 Audio3DManager 0 4 576 30 Audio3DManager::Audio3DManager 0 2 235 236 0
228
Audio3DManager::Audio3DManager(AudioManager *mgr, NodePath const &listener_target = NodePath(), NodePath const &root = NodePath(), int task_priority = 51);
inline Audio3DManager::Audio3DManager(Audio3DManager const &) = default;

506 19 set_distance_factor 0 4 576 35 Audio3DManager::set_distance_factor 0 1 237 0
68
inline void Audio3DManager::set_distance_factor(PN_stdfloat factor);

507 19 get_distance_factor 0 4 576 35 Audio3DManager::get_distance_factor 0 1 238 0
67
inline PN_stdfloat Audio3DManager::get_distance_factor(void) const;

508 18 set_doppler_factor 0 4 576 34 Audio3DManager::set_doppler_factor 0 1 239 0
67
inline void Audio3DManager::set_doppler_factor(PN_stdfloat factor);

509 18 get_doppler_factor 0 4 576 34 Audio3DManager::get_doppler_factor 0 1 240 0
66
inline PN_stdfloat Audio3DManager::get_doppler_factor(void) const;

510 19 set_drop_off_factor 0 4 576 35 Audio3DManager::set_drop_off_factor 0 1 241 0
68
inline void Audio3DManager::set_drop_off_factor(PN_stdfloat factor);

511 19 get_drop_off_factor 0 4 576 35 Audio3DManager::get_drop_off_factor 0 1 242 0
67
inline PN_stdfloat Audio3DManager::get_drop_off_factor(void) const;

512 22 set_sound_min_distance 0 4 576 38 Audio3DManager::set_sound_min_distance 0 1 243 0
88
inline void Audio3DManager::set_sound_min_distance(AudioSound *sound, PN_stdfloat dist);

513 22 get_sound_min_distance 0 4 576 38 Audio3DManager::get_sound_min_distance 0 1 244 0
83
inline PN_stdfloat Audio3DManager::get_sound_min_distance(AudioSound *sound) const;

514 22 set_sound_max_distance 0 4 576 38 Audio3DManager::set_sound_max_distance 0 1 245 0
88
inline void Audio3DManager::set_sound_max_distance(AudioSound *sound, PN_stdfloat dist);

515 22 get_sound_max_distance 0 4 576 38 Audio3DManager::get_sound_max_distance 0 1 246 0
83
inline PN_stdfloat Audio3DManager::get_sound_max_distance(AudioSound *sound) const;

516 15 attach_listener 0 4 576 31 Audio3DManager::attach_listener 0 1 247 0
70
inline void Audio3DManager::attach_listener(NodePath const &listener);

517 15 detach_listener 0 4 576 31 Audio3DManager::detach_listener 0 1 248 0
50
inline void Audio3DManager::detach_listener(void);

518 8 load_sfx 0 4 576 24 Audio3DManager::load_sfx 0 1 249 0
81
inline PointerTo< AudioSound > Audio3DManager::load_sfx(std::string const &path);

519 22 attach_sound_to_object 0 4 576 38 Audio3DManager::attach_sound_to_object 0 1 250 0
87
void Audio3DManager::attach_sound_to_object(AudioSound *sound, NodePath const &object);

520 12 detach_sound 0 4 576 28 Audio3DManager::detach_sound 0 1 251 0
53
void Audio3DManager::detach_sound(AudioSound *sound);

521 18 print_audio_digest 0 4 576 34 Audio3DManager::print_audio_digest 0 1 252 0
46
void Audio3DManager::print_audio_digest(void);

522 6 update 0 4 576 22 Audio3DManager::update 0 1 253 0
34
void Audio3DManager::update(void);

523 15 ~Audio3DManager 0 4 576 31 Audio3DManager::~Audio3DManager 0 0 0
38
Audio3DManager::~Audio3DManager(void);

524 19 set_pupil_direction 0 4 577 27 CIOLib::set_pupil_direction 0 1 256 0
91
static void CIOLib::set_pupil_direction(float x, float y, LVector3 &left, LVector3 &right);

525 14 look_pupils_at 0 4 577 22 CIOLib::look_pupils_at 0 1 257 0
106
static LVector2 CIOLib::look_pupils_at(NodePath const &node, LVector3 const &point, NodePath const &eyes);

526 6 CIOLib 0 4 577 14 CIOLib::CIOLib 0 2 254 255 0
87
inline CIOLib::CIOLib(void) = default;
inline CIOLib::CIOLib(CIOLib const &) = default;

527 7 ~CIOLib 0 4 577 15 CIOLib::~CIOLib 0 0 0
22
CIOLib::~CIOLib(void);

257
1 0 0 7 12 578 269 0 0 0 
2 0 0 7 12 578 269 0 0 1 6 param0 0 579  
3 0 0 7 2 583 0 0 0 1 4 name 1 582  
4 0 0 7 2 583 0 0 0 2 4 name 1 582  7 uv_name 1 582  
5 0 0 7 3 583 0 0 0 0 
6 0 0 7 4 583 0 0 0 0 
7 0 0 7 5 583 0 0 0 0 
8 0 0 7 6 583 0 0 0 0 
9 0 0 7 7 583 0 0 0 0 
10 0 0 7 8 583 0 0 0 0 
11 0 0 7 9 583 0 0 0 0 
12 0 0 7 10 583 0 0 0 0 
13 0 0 7 11 583 0 0 0 0 
14 0 0 7 16 586 291 0 0 1 4 copy 1 584  
15 0 0 7 16 586 291 0 0 1 4 name 1 582  
16 0 0 7 17 586 291 0 0 2 4 this 3 586  4 copy 1 584  
17 0 0 4 18 587 0 0 0 3 4 this 3 586  3 key 1 582  5 value 1 582  
18 0 0 6 19 582 0 0 0 2 4 this 3 584  3 key 1 582  
19 0 0 6 20 588 0 0 0 1 4 this 3 584  
20 0 0 6 21 582 0 0 0 2 4 this 3 584  1 i 1 588  
21 0 0 6 22 582 0 0 0 2 4 this 3 584  1 i 1 588  
22 0 0 6 23 533 0 0 0 2 4 this 3 584  3 key 1 582  
23 0 0 6 24 590 0 0 0 2 4 this 3 584  3 key 1 582  
24 0 0 4 25 587 0 0 0 2 4 this 3 586  11 shader_name 1 582  
25 0 0 6 26 582 0 0 0 1 4 this 3 584  
26 0 0 7 27 592 0 0 0 1 4 this 3 584  
27 0 0 6 28 593 0 0 0 2 4 this 3 584  3 key 1 582  
28 0 0 6 29 593 0 0 0 1 4 this 3 584  
29 0 0 6 30 593 0 0 0 1 4 this 3 584  
30 0 0 6 31 582 0 0 0 1 4 this 3 584  
31 0 0 6 32 582 0 0 0 1 4 this 3 584  
32 0 0 6 33 593 0 0 0 1 4 this 3 584  
33 0 0 6 34 593 0 0 0 1 4 this 3 584  
34 0 0 7 35 584 0 0 0 1 4 file 1 594  
35 0 0 7 36 597 0 0 0 0 
36 0 0 7 40 599 0 0 0 1 3 mat 1 584  
37 0 0 7 41 599 0 0 0 1 3 mat 1 584  
38 0 0 7 42 599 0 0 0 0 
39 0 0 6 43 582 0 0 0 1 4 this 3 600  
40 0 0 6 44 593 0 0 0 1 4 this 3 600  
41 0 0 7 45 584 0 0 0 1 4 this 3 600  
42 0 0 6 46 533 0 0 0 0 
43 0 0 7 49 597 0 0 0 0 
44 0 0 7 53 602 305 0 0 0 
45 0 0 7 53 602 305 0 0 1 6 param0 0 603  
46 0 0 7 52 597 0 0 0 0 
47 0 0 6 54 533 0 0 0 1 4 this 3 603  
48 0 0 6 55 605 0 0 0 1 4 this 3 603  
49 0 0 7 59 606 310 0 0 0 
50 0 0 7 59 606 310 0 0 1 6 param0 0 607  
51 0 0 7 58 597 0 0 0 0 
52 0 0 7 60 611 0 0 0 1 4 this 3 607  
53 0 0 7 61 614 0 0 0 1 4 this 3 607  
54 0 0 7 65 615 316 0 0 0 
55 0 0 7 65 615 316 0 0 1 6 param0 0 616  
56 0 0 7 64 597 0 0 0 0 
57 0 0 7 66 619 0 0 0 1 4 this 3 616  
58 0 0 6 67 593 0 0 0 2 4 this 3 616  3 pos 1 620  
59 0 0 4 68 587 0 0 0 3 4 this 3 615  4 mins 1 611  4 maxs 1 611  
60 0 0 7 72 622 322 0 0 0 
61 0 0 7 72 622 322 0 0 1 6 param0 0 623  
62 0 0 7 71 597 0 0 0 0 
63 0 0 6 73 533 0 0 0 1 4 this 3 623  
64 0 0 7 74 626 0 0 0 1 4 this 3 623  
65 0 0 4 75 587 0 0 0 3 4 this 3 622  4 mins 1 611  4 maxs 1 611  
66 0 0 7 81 629 327 0 0 1 6 param0 0 627  
67 0 0 6 78 533 0 0 0 1 4 this 3 627  
68 0 0 6 79 533 0 0 0 1 4 this 3 627  
69 0 0 6 80 533 0 0 0 1 4 this 3 627  
70 0 0 7 89 632 334 0 0 1 6 param0 0 630  
71 0 0 6 84 533 0 0 0 1 4 this 3 630  
72 0 0 6 85 533 0 0 0 1 4 this 3 630  
73 0 0 6 86 533 0 0 0 1 4 this 3 630  
74 0 0 6 87 533 0 0 0 1 4 this 3 630  
75 0 0 6 88 593 0 0 0 1 4 this 3 630  
76 0 0 6 92 533 0 0 0 1 4 this 3 633  
77 0 0 4 93 587 0 0 35 // number of textures to consider.. 2 4 this 3 633  6 tcount 1 533  
78 0 0 4 94 587 0 0 21 // add textures 0 - n 3 4 this 3 633  3 wid 1 533  3 hit 1 533  
79 0 0 6 95 593 0 0 0 7 4 this 3 633  3 wid 1 533  3 hit 1 533  15 forcePowerOfTwo 1 593  14 onePixelBorder 1 593  7 max_wid 1 533  7 max_hit 1 533  
80 0 0 4 96 587 0 0 0 3 4 this 3 633  3 wid 1 533  3 hit 1 533  
81 0 0 7 97 629 327 0 74 // pack the textures, the return code is the amount of wasted/unused area. 3 4 this 3 633  15 forcePowerOfTwo 1 593  14 onePixelBorder 1 593  
82 0 0 7 98 632 334 0 58 // returns true if the texture has been rotated 90 degrees 2 4 this 3 633  5 index 1 533  
83 0 0 6 99 633 0 0 0 0 
84 0 0 4 100 587 0 0 0 1 2 tp 1 633  
85 0 0 7 105 634 348 0 0 0 
86 0 0 7 105 634 348 0 0 1 6 param0 0 635  
87 0 0 4 103 587 0 0 0 0 
88 0 0 4 104 587 0 0 0 0 
89 0 0 7 108 637 356 0 0 0 
90 0 0 7 108 637 356 0 0 1 6 param0 0 638  
91 0 0 6 109 593 0 0 0 1 4 this 3 638  
92 0 0 7 110 614 0 0 0 1 4 this 3 638  
93 0 0 7 111 642 0 0 0 1 4 this 3 638  
94 0 0 6 112 643 0 0 0 1 4 this 3 638  
95 0 0 6 113 643 0 0 0 1 4 this 3 638  
96 0 0 6 114 590 0 0 0 1 4 this 3 638  
97 0 0 7 118 644 0 0 0 0 
98 0 0 7 118 644 0 0 0 1 6 param0 0 645  
99 0 0 4 119 587 0 0 0 2 4 this 3 644  4 geom 1 647  
100 0 0 4 120 587 0 0 0 2 4 this 3 644  4 geom 1 647  
101 0 0 4 121 587 0 0 0 1 4 this 3 644  
102 0 0 7 123 637 356 0 0 4 4 this 3 644  5 start 1 620  3 end 1 620  4 mask 1 648  
103 0 0 7 124 637 356 0 0 5 4 this 3 644  6 origin 1 620  9 direction 1 652  8 distance 1 590  4 mask 1 648  
104 0 0 4 125 587 0 0 0 2 4 this 3 644  7 quality 1 533  
105 0 0 4 126 587 0 0 0 1 4 this 3 644  
106 0 0 7 127 647 0 0 0 2 4 this 3 644  7 geom_id 1 643  
107 0 0 7 130 597 0 0 0 0 
108 0 0 4 131 587 0 0 0 2 4 this 3 647  4 mask 1 648  
109 0 0 4 131 587 0 0 0 2 4 this 3 647  4 mask 1 643  
110 0 0 7 132 656 0 0 0 1 4 this 3 654  
111 0 0 6 133 643 0 0 0 1 4 this 3 654  
112 0 0 4 134 587 0 0 0 2 4 this 3 647  7 quality 1 533  
113 0 0 4 135 587 0 0 0 1 4 this 3 647  
114 0 0 7 138 657 376 0 0 1 4 name 1 582  
115 0 0 7 137 597 0 0 0 0 
116 0 0 4 139 587 0 0 0 4 4 this 3 657  2 p1 1 620  2 p2 1 620  2 p3 1 620  
117 0 0 4 140 587 0 0 0 3 4 this 3 657  4 geom 1 658  2 ts 1 661  
118 0 0 7 144 599 0 0 0 2 13 face_material 1 582  9 face_type 1 533  
119 0 0 7 145 599 0 0 0 0 
120 0 0 7 146 599 0 0 0 0 
121 0 0 6 147 582 0 0 0 1 4 this 3 664  
122 0 0 6 148 533 0 0 0 1 4 this 3 664  
123 0 0 6 149 593 0 0 0 1 4 this 3 664  
124 0 0 6 150 533 0 0 0 0 
125 0 0 7 152 597 0 0 0 0 
126 0 0 7 155 605 447 0 0 0 
127 0 0 6 156 593 0 0 0 2 4 this 3 605  4 file 1 594  
128 0 0 4 157 587 0 0 0 1 4 this 3 605  
129 0 0 4 158 587 0 0 0 3 4 this 3 605  5 gamma 1 666  10 overbright 1 533  
130 0 0 6 159 666 0 0 0 1 4 this 3 667  
131 0 0 4 160 587 0 0 0 2 4 this 3 605  3 win 1 669  
132 0 0 4 161 587 0 0 0 2 4 this 3 605  6 camera 1 671  
133 0 0 4 162 587 0 0 0 2 4 this 3 605  6 render 1 671  
134 0 0 4 163 587 0 0 0 2 4 this 3 605  5 shgen 1 673  
135 0 0 4 164 587 0 0 0 2 4 this 3 605  4 flag 1 593  
136 0 0 4 165 587 0 0 0 2 4 this 3 605  4 flag 1 593  
137 0 0 4 166 587 0 0 0 2 4 this 3 605  4 type 1 533  
138 0 0 4 167 587 0 0 0 2 4 this 3 605  4 flag 1 593  
139 0 0 4 168 587 0 0 0 2 4 this 3 605  4 file 1 594  
140 0 0 4 169 587 0 0 0 2 4 this 3 605  4 flag 1 593  
141 0 0 6 170 593 0 0 0 1 4 this 3 667  
142 0 0 7 171 626 0 0 0 1 4 this 3 667  
143 0 0 7 172 626 0 0 0 6 4 this 3 605  14 decal_material 1 582  11 decal_scale 1 674  6 rotate 1 590  5 start 1 620  3 end 1 620  
144 0 0 7 173 679 0 0 0 2 4 this 3 605  3 pos 1 620  
145 0 0 4 174 587 0 0 0 1 4 this 3 605  
146 0 0 4 175 587 0 0 0 2 4 this 3 605  4 flag 1 593  
147 0 0 4 176 587 0 0 0 2 4 this 3 605  3 dir 1 652  
148 0 0 6 177 533 0 0 0 2 4 this 3 605  6 entnum 1 533  
149 0 0 4 178 587 0 0 0 4 4 this 3 605  8 modelnum 1 533  4 mins 1 611  4 maxs 1 611  
150 0 0 4 179 587 0 0 0 2 4 this 3 605  10 dispatcher 1 680  
151 0 0 4 180 587 0 0 0 3 4 this 3 605  4 name 1 582  4 type 1 683  
152 0 0 4 181 587 0 0 0 2 4 this 3 605  2 ai 1 593  
153 0 0 6 182 593 0 0 0 1 4 this 3 667  
154 0 0 6 183 593 0 0 0 3 4 this 3 605  5 start 1 620  3 end 1 620  
155 0 0 7 184 611 0 0 0 3 4 this 3 605  5 start 1 620  3 end 1 620  
156 0 0 4 185 587 0 0 0 3 4 this 3 605  7 entname 1 582  4 type 1 683  
157 0 0 6 186 680 0 0 0 2 4 this 3 667  10 targetname 1 582  
158 0 0 6 187 680 0 0 0 2 4 this 3 605  9 classname 1 582  
159 0 0 4 188 587 0 0 0 3 4 this 3 605  4 list 1 680  6 entnum 1 686  
160 0 0 4 189 587 0 0 0 3 4 this 3 605  5 entum 1 533  5 pyent 1 680  
161 0 0 4 190 587 0 0 0 2 4 this 3 605  3 ent 1 680  
162 0 0 6 191 533 0 0 0 1 4 this 3 667  
163 0 0 6 192 582 0 0 0 3 4 this 3 667  6 entnum 1 533  3 key 1 582  
164 0 0 6 193 590 0 0 0 3 4 this 3 667  6 entnum 1 533  3 key 1 582  
165 0 0 6 194 533 0 0 0 3 4 this 3 667  6 entnum 1 533  3 key 1 582  
166 0 0 7 195 614 0 0 0 3 4 this 3 667  6 entnum 1 533  3 key 1 582  
167 0 0 7 196 690 0 0 0 4 4 this 3 667  6 entnum 1 533  3 key 1 582  5 scale 1 593  
168 0 0 7 197 626 0 0 0 2 4 this 3 667  6 entnum 1 533  
169 0 0 7 198 626 0 0 0 2 4 this 3 667  8 modelnum 1 533  
170 0 0 7 199 602 305 0 0 2 4 this 3 667  6 entnum 1 686  
171 0 0 6 200 533 0 0 0 2 4 this 3 605  3 pos 1 620  
172 0 0 6 200 533 0 0 0 2 4 this 3 605  2 np 1 671  
173 0 0 6 201 533 0 0 0 2 4 this 3 605  3 pos 1 620  
174 0 0 6 202 593 0 0 0 3 4 this 3 667  12 curr_cluster 1 533  7 cluster 1 533  
175 0 0 6 203 593 0 0 0 3 4 this 3 605  6 bounds 1 691  19 required_leaf_flags 1 643  
176 0 0 7 204 691 0 0 0 3 4 this 3 605  13 net_transform 1 661  8 original 1 691  
177 0 0 6 205 593 0 0 0 1 4 this 3 667  
178 0 0 6 206 593 0 0 0 1 4 this 3 667  
179 0 0 4 207 587 0 0 0 1 4 this 3 605  
180 0 0 7 208 626 0 0 0 1 4 this 3 667  
181 0 0 4 209 587 0 0 0 2 4 this 3 605  4 leaf 1 533  
182 0 0 6 210 533 0 0 0 1 4 this 3 667  
183 0 0 6 211 533 0 0 0 1 4 this 3 667  
184 0 0 7 212 611 0 0 0 2 4 this 3 667  4 leaf 1 533  
185 0 0 7 213 696 0 0 0 3 4 this 3 605  7 facenum 1 533  5 point 1 652  
186 0 0 4 214 587 0 0 0 1 4 this 3 605  
187 0 0 6 215 605 0 0 0 0 
188 0 0 7 223 697 453 0 0 0 
189 0 0 7 223 697 453 0 0 1 6 param0 0 698  
190 0 0 4 219 587 0 0 0 3 4 this 3 697  3 key 1 582  5 value 1 582  
191 0 0 4 220 587 0 0 0 3 4 this 3 697  3 inp 1 700  9 important 1 593  
192 0 0 4 221 587 0 0 0 2 4 this 3 697  4 flag 1 533  
193 0 0 6 222 593 0 0 0 2 4 this 3 698  5 other 1 698  
194 0 0 4 231 587 0 0 0 4 4 this 3 703  9 vert_file 1 594  10 pixel_file 1 594  9 geom_file 1 594  
195 0 0 7 232 597 0 0 0 0 
196 0 0 7 226 704 0 0 0 1 4 this 3 703  
197 0 0 6 229 705 0 0 0 1 4 this 3 703  
198 0 0 7 238 673 474 0 0 1 6 param0 0 706  
199 0 0 7 238 673 474 0 0 3 3 gsg 1 708  6 camera 1 671  6 render 1 671  
200 0 0 4 239 587 0 0 0 2 4 this 3 673  2 np 1 671  
201 0 0 4 240 587 0 0 0 1 4 this 3 673  
202 0 0 4 241 587 0 0 0 2 4 this 3 673  4 spec 1 703  
203 0 0 6 242 593 0 0 0 1 4 this 3 706  
204 0 0 7 243 679 0 0 0 1 4 this 3 706  
205 0 0 6 244 710 0 0 0 1 4 this 3 706  
206 0 0 4 245 587 0 0 0 2 4 this 3 673  7 quality 1 533  
207 0 0 6 246 533 0 0 0 1 4 this 3 706  
208 0 0 4 247 587 0 0 0 1 3 tex 1 679  
209 0 0 7 248 679 0 0 0 0 
210 0 0 7 249 716 0 0 0 2 4 spec 1 714  5 perms 1 698  
211 0 0 7 250 597 0 0 0 0 
212 0 0 7 255 719 477 0 0 1 6 param0 0 717  
213 0 0 7 255 719 477 0 0 2 4 trav 1 720  6 loader 1 605  
214 0 0 7 254 597 0 0 0 0 
215 0 0 7 259 723 480 0 0 1 6 param0 0 721  
216 0 0 7 259 723 480 0 0 2 4 name 1 582  6 loader 1 605  
217 0 0 7 258 597 0 0 0 0 
218 0 0 7 263 726 483 0 0 1 6 param0 0 724  
219 0 0 7 263 726 483 0 0 1 4 name 1 582  
220 0 0 7 262 597 0 0 0 0 
221 0 0 7 268 729 486 0 0 1 6 param0 0 727  
222 0 0 7 268 729 486 0 0 1 4 name 1 582  
223 0 0 7 267 597 0 0 0 0 
224 0 0 7 273 732 489 0 0 1 6 param0 0 730  
225 0 0 7 273 732 489 0 0 1 4 name 1 582  
226 0 0 7 272 597 0 0 0 0 
227 0 0 7 276 733 491 0 0 0 
228 0 0 7 279 734 493 0 0 0 
229 0 0 7 282 735 495 0 0 0 
230 0 0 7 285 736 497 0 0 0 
231 0 0 7 288 737 499 0 0 0 
232 0 0 7 291 738 501 0 0 0 
233 0 0 7 295 740 0 0 0 0 
234 0 0 7 296 597 0 0 0 0 
235 0 0 7 299 743 523 0 0 1 6 param0 0 741  
236 0 0 7 299 743 523 0 0 4 3 mgr 1 744  15 listener_target 1 671  4 root 1 671  13 task_priority 1 533  
237 0 0 4 300 587 0 0 0 2 4 this 3 743  6 factor 1 666  
238 0 0 6 301 666 0 0 0 1 4 this 3 741  
239 0 0 4 302 587 0 0 0 2 4 this 3 743  6 factor 1 666  
240 0 0 6 303 666 0 0 0 1 4 this 3 741  
241 0 0 4 304 587 0 0 0 2 4 this 3 743  6 factor 1 666  
242 0 0 6 305 666 0 0 0 1 4 this 3 741  
243 0 0 4 306 587 0 0 0 3 4 this 3 743  5 sound 1 746  4 dist 1 666  
244 0 0 6 307 666 0 0 0 2 4 this 3 741  5 sound 1 746  
245 0 0 4 308 587 0 0 0 3 4 this 3 743  5 sound 1 746  4 dist 1 666  
246 0 0 6 309 666 0 0 0 2 4 this 3 741  5 sound 1 746  
247 0 0 4 310 587 0 0 0 2 4 this 3 743  8 listener 1 671  
248 0 0 4 311 587 0 0 0 1 4 this 3 743  
249 0 0 7 312 746 0 0 0 2 4 this 3 743  4 path 1 582  
250 0 0 4 313 587 0 0 0 3 4 this 3 743  5 sound 1 746  6 object 1 671  
251 0 0 4 314 587 0 0 0 2 4 this 3 743  5 sound 1 746  
252 0 0 4 315 587 0 0 0 1 4 this 3 743  
253 0 0 4 316 587 0 0 0 1 4 this 3 743  
254 0 0 7 321 748 527 0 0 0 
255 0 0 7 321 748 527 0 0 1 6 param0 0 749  
256 0 0 4 319 587 0 0 0 4 1 x 1 590  1 y 1 590  4 left 1 614  5 right 1 614  
257 0 0 7 320 642 0 0 0 3 4 node 1 671  5 point 1 652  4 eyes 1 671  
223
528 13 TextureStages 0 141313 13 TextureStages 13 TextureStages 0 0 0 1 268 269 0 10 258 259 260 261 262 263 264 265 266 267 0 0 0 0 0 752
/**
 * This simple interface maintains a single TextureStage object for each unique name.
 * It avoids the creation of duplicate TextureStages with the same name, which
 * reduces texture swapping and draw call overhead.
 *
 * If using our shader system, you should always use this interface to get TextureStages.
 * You are not required to change any properties on the returned TextureStage, as the shader
 * specification will know what to do with the TextureStage from the name.
 * 
 * For example, you do not need to call TextureStage::set_mode() or NodePath::set_tex_gen().
 * If you apply a texture to a node with the get_normalmap() stage, the shader specification
 * will know that the texture you supplied is to be treated as a normal map.
 */

529 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 270 291 0 20 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 0 0 1 0 530 0 0 0 0 0

530 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

531 17 BSPMaterialAttrib 0 141313 17 BSPMaterialAttrib 17 BSPMaterialAttrib 0 0 0 0 300 1 751 8 292 293 294 295 296 297 298 299 0 0 1 0 532 0 0 0 0 0

532 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

533 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

534 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 302 305 0 3 301 303 304 0 0 1 0 530 0 0 0 0 0

535 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 307 310 0 3 306 308 309 0 0 1 0 534 0 0 0 0 0

536 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 312 316 0 4 311 313 314 315 0 0 1 0 534 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

537 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 318 322 0 4 317 319 320 321 0 0 1 0 534 0 0 0 0 0

538 10 PackResult 0 141313 10 PackResult 10 PackResult 0 0 0 1 326 327 0 3 323 324 325 0 0 0 0 0 0

539 15 TextureLocation 0 141313 15 TextureLocation 15 TextureLocation 0 0 0 1 333 334 0 5 328 329 330 331 332 0 0 0 0 0 0

540 13 TexturePacker 0 141313 13 TexturePacker 13 TexturePacker 0 0 0 0 344 0 9 335 336 337 338 339 340 341 342 343 0 0 0 0 0 0

541 8 RayTrace 0 141313 8 RayTrace 8 RayTrace 0 0 0 1 347 348 0 2 345 346 0 0 0 0 0 0

542 17 RayTraceHitResult 0 141313 17 RayTraceHitResult 17 RayTraceHitResult 0 0 0 1 349 356 0 6 350 351 352 353 354 355 0 0 0 0 0 0

543 13 RayTraceScene 0 75777 13 RayTraceScene 13 RayTraceScene 0 0 0 1 357 0 0 8 358 359 360 361 362 363 364 365 0 0 1 0 544 0 0 0 1 545 0

544 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

545 0 0 794624 15 RayTraceScene:: 0 543 0 0 0 0 0 0 0 0 0 3 17 BUILD_QUALITY_LOW 32 RayTraceScene::BUILD_QUALITY_LOW 0
0 20 BUILD_QUALITY_MEDIUM 35 RayTraceScene::BUILD_QUALITY_MEDIUM 0
1 18 BUILD_QUALITY_HIGH 33 RayTraceScene::BUILD_QUALITY_HIGH 0
2 0 0

546 16 RayTraceGeometry 0 75777 16 RayTraceGeometry 16 RayTraceGeometry 0 0 0 0 0 0 6 366 367 368 369 370 371 0 0 1 0 547 0 0 0 0 0

547 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

548 20 RayTraceTriangleMesh 0 141313 20 RayTraceTriangleMesh 20 RayTraceTriangleMesh 0 0 0 1 373 376 0 3 372 374 375 0 0 1 0 546 0 0 0 0 0

549 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 385 1 752 8 377 378 379 380 381 382 383 384 0 0 1 0 532 0 0 0 1 550 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

550 0 0 794624 15 BSPFaceAttrib:: 0 549 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

551 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 386 447 0 60 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 0 0 0 0 1 552 58
/**
 * Loads and handles the operations of PBSP files.
 */

552 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 551 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

553 18 ShaderPermutations 0 141313 18 ShaderPermutations 18 ShaderPermutations 0 0 0 1 452 453 0 4 448 449 450 451 0 0 0 0 0 97
/**
 * Represents a list of #defines and variable inputs to a shader that is being generated.
 */

554 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 0 460 0 2 458 459 0 0 2 3 544 454 455 3 555 456 457 0 0 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

555 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

556 13 ShaderQuality 0 532481 13 ShaderQuality 13 ShaderQuality 0 0 0 0 0 0 0 0 0 0 3 17 SHADERQUALITY_LOW 17 SHADERQUALITY_LOW 0
0 20 SHADERQUALITY_MEDIUM 20 SHADERQUALITY_MEDIUM 0
1 18 SHADERQUALITY_HIGH 18 SHADERQUALITY_HIGH 0
2 0 0

557 10 CameraBits 0 532481 10 CameraBits 10 CameraBits 0 0 0 0 0 0 0 0 0 0 6 11 CAMERA_MAIN 11 CAMERA_MAIN 0
1 13 CAMERA_SHADOW 13 CAMERA_SHADOW 0
2 17 CAMERA_REFLECTION 17 CAMERA_REFLECTION 0
4 17 CAMERA_REFRACTION 17 CAMERA_REFRACTION 0
8 16 CAMERA_VIEWMODEL 16 CAMERA_VIEWMODEL 0
16 14 CAMERA_COMPUTE 14 CAMERA_COMPUTE 0
32 0 0

558 18 BSPShaderGenerator 0 141313 18 BSPShaderGenerator 18 BSPShaderGenerator 0 0 0 1 461 474 0 12 462 463 464 465 466 467 468 469 470 471 472 473 0 0 1 0 559 0 0 0 0 0

559 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

560 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 476 477 0 1 475 0 0 1 0 561 0 0 0 0 0

561 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

562 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 479 480 0 1 478 0 0 1 0 547 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

563 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 482 483 0 1 481 0 0 1 0 547 0 0 0 0 0

564 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 485 486 0 1 484 0 0 1 0 565 0 0 0 0 0

565 9 ModelRoot 0 2048 9 ModelRoot 9 ModelRoot 0 0 0 0 0 0 0 0 0 0 0 0 314
/**
 * A node of this type is created automatically at the root of each model file
 * that is loaded.  It may eventually contain some information about the
 * contents of the model; at the moment, it contains no special information,
 * but can be used as a flag to indicate the presence of a loaded model file.
 */

566 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 488 489 0 1 487 0 0 1 0 567 0 0 0 0 0

567 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

568 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 490 491 0 0 0 0 1 0 554 0 0 0 0 0

569 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 492 493 0 0 0 0 1 0 554 0 0 0 0 0

570 16 UnlitGenericSpec 0 141313 16 UnlitGenericSpec 16 UnlitGenericSpec 0 0 0 1 494 495 0 0 0 0 1 0 554 0 0 0 0 160
/**
 * Shader that only supports a basetexture, no fancy lighting effects or anything.
 * Could be used for UI elements, emissive materials, particles, etc.
 */

571 14 UnlitNoMatSpec 0 141313 14 UnlitNoMatSpec 14 UnlitNoMatSpec 0 0 0 1 496 497 0 0 0 0 1 0 554 0 0 0 0 0

572 13 CSMRenderSpec 0 141313 13 CSMRenderSpec 13 CSMRenderSpec 0 0 0 1 498 499 0 0 0 0 1 0 554 0 0 0 0 0

573 10 SkyBoxSpec 0 141313 10 SkyBoxSpec 10 SkyBoxSpec 0 0 0 1 500 501 0 0 0 0 1 0 554 0 0 0 0 0

574 18 AmbientBoostEffect 0 141313 18 AmbientBoostEffect 18 AmbientBoostEffect 0 0 0 0 504 0 2 502 503 0 0 1 0 575 0 0 0 0 0

575 12 RenderEffect 0 2048 12 RenderEffect 12 RenderEffect 0 0 0 0 0 0 0 0 0 0 0 0 901
/**
 * This is the base class for a number of special render effects that may be
 * set on scene graph nodes to change the way they render.  This includes
 * BillboardEffect, DecalEffect, etc.
 *
 * RenderEffect represents render properties that must be applied as soon as
 * they are encountered in the scene graph, rather than propagating down to
 * the leaves.  This is different from RenderAttrib, which represents
 * properties like color and texture that don't do anything until they
 * propagate down to a GeomNode.
 *
 * You should not attempt to create or modify a RenderEffect directly;
 * instead, use the make() method of the appropriate kind of effect you want.
 * This will allocate and return a new RenderEffect of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderEffect
 * if you wish to change its properties; instead, create a new one.
 */

576 14 Audio3DManager 0 141313 14 Audio3DManager 14 Audio3DManager 0 0 0 1 505 523 0 17 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 0 0 0 0 0 0

577 6 CIOLib 0 141313 6 CIOLib 6 CIOLib 0 0 0 1 526 527 0 2 524 525 0 0 0 0 0 0

578 15 TextureStages * 0 8576 15 TextureStages * 15 TextureStages * 0 0 528 0 0 0 0 0 0 0 0 0 0

579 21 TextureStages const * 0 8576 21 TextureStages const * 21 TextureStages const * 0 0 580 0 0 0 0 0 0 0 0 0 0

580 19 TextureStages const 0 8832 19 TextureStages const 19 TextureStages const 0 0 528 0 0 0 0 0 0 0 0 0 0

581 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 336
/**
 * Defines the properties of a named stage of the multitexture pipeline.  The
 * TextureAttrib will associated a number of these stages with Texture
 * objects, and the GSG will render geometry by sorting all of the currently
 * active TextureStages in order and then issuing the appropriate rendering
 * calls to activate them.
 */

582 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

583 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 581 0 0 0 0 0 0 0 0 0 0

584 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 585 0 0 0 0 0 0 0 0 0 0

585 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 529 0 0 0 0 0 0 0 0 0 0

586 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 529 0 0 0 0 0 0 0 0 0 0

587 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

588 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 589 0 0 0 0 0 0 0 0 0 0

589 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

590 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

591 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

592 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 591 0 0 0 0 0 0 0 0 0 0

593 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

594 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 595 0 0 0 0 0 0 0 0 0 0

595 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 591 0 0 0 0 0 0 0 0 0 0

596 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

597 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 596 0 0 0 0 0 0 0 0 0 0

598 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 532 0 0 0 0 0 0 0 0 0 0

599 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 598 0 0 0 0 0 0 0 0 0 0

600 25 BSPMaterialAttrib const * 0 8576 25 BSPMaterialAttrib const * 25 BSPMaterialAttrib const * 0 0 601 0 0 0 0 0 0 0 0 0 0

601 23 BSPMaterialAttrib const 0 8832 23 BSPMaterialAttrib const 23 BSPMaterialAttrib const 0 0 531 0 0 0 0 0 0 0 0 0 0

602 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 534 0 0 0 0 0 0 0 0 0 0

603 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 604 0 0 0 0 0 0 0 0 0 0

604 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 534 0 0 0 0 0 0 0 0 0 0

605 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 551 0 0 0 0 0 0 0 0 0 0

606 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 535 0 0 0 0 0 0 0 0 0 0

607 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 608 0 0 0 0 0 0 0 0 0 0

608 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 535 0 0 0 0 0 0 0 0 0 0

609 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 610 0 0 0 0 0 0 0 0 0 0

610 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

611 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 609 0 0 0 0 0 0 0 0 0 0

612 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 613 0 0 0 0 0 0 0 0 0 0

613 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

614 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 612 0 0 0 0 0 0 0 0 0 0

615 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 536 0 0 0 0 0 0 0 0 0 0

616 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 617 0 0 0 0 0 0 0 0 0 0

617 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 536 0 0 0 0 0 0 0 0 0 0

618 11 BoundingBox 0 2048 11 BoundingBox 11 BoundingBox 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

619 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 618 0 0 0 0 0 0 0 0 0 0

620 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 621 0 0 0 0 0 0 0 0 0 0

621 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 609 0 0 0 0 0 0 0 0 0 0

622 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 537 0 0 0 0 0 0 0 0 0 0

623 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 624 0 0 0 0 0 0 0 0 0 0

624 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 537 0 0 0 0 0 0 0 0 0 0

625 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

626 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 625 0 0 0 0 0 0 0 0 0 0

627 18 PackResult const * 0 8576 18 PackResult const * 18 PackResult const * 0 0 628 0 0 0 0 0 0 0 0 0 0

628 16 PackResult const 0 8832 16 PackResult const 16 PackResult const 0 0 538 0 0 0 0 0 0 0 0 0 0

629 12 PackResult * 0 8576 12 PackResult * 12 PackResult * 0 0 538 0 0 0 0 0 0 0 0 0 0

630 23 TextureLocation const * 0 8576 23 TextureLocation const * 23 TextureLocation const * 0 0 631 0 0 0 0 0 0 0 0 0 0

631 21 TextureLocation const 0 8832 21 TextureLocation const 21 TextureLocation const 0 0 539 0 0 0 0 0 0 0 0 0 0

632 17 TextureLocation * 0 8576 17 TextureLocation * 17 TextureLocation * 0 0 539 0 0 0 0 0 0 0 0 0 0

633 15 TexturePacker * 0 8576 15 TexturePacker * 15 TexturePacker * 0 0 540 0 0 0 0 0 0 0 0 0 0

634 10 RayTrace * 0 8576 10 RayTrace * 10 RayTrace * 0 0 541 0 0 0 0 0 0 0 0 0 0

635 16 RayTrace const * 0 8576 16 RayTrace const * 16 RayTrace const * 0 0 636 0 0 0 0 0 0 0 0 0 0

636 14 RayTrace const 0 8832 14 RayTrace const 14 RayTrace const 0 0 541 0 0 0 0 0 0 0 0 0 0

637 19 RayTraceHitResult * 0 8576 19 RayTraceHitResult * 19 RayTraceHitResult * 0 0 542 0 0 0 0 0 0 0 0 0 0

638 25 RayTraceHitResult const * 0 8576 25 RayTraceHitResult const * 25 RayTraceHitResult const * 0 0 639 0 0 0 0 0 0 0 0 0 0

639 23 RayTraceHitResult const 0 8832 23 RayTraceHitResult const 23 RayTraceHitResult const 0 0 542 0 0 0 0 0 0 0 0 0 0

640 8 LVector2 0 2105344 8 LVector2 8 LVector2 0 0 641 0 0 0 0 0 0 0 0 0 0

641 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

642 10 LVector2 * 0 8576 10 LVector2 * 10 LVector2 * 0 0 640 0 0 0 0 0 0 0 0 0 0

643 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

644 15 RayTraceScene * 0 8576 15 RayTraceScene * 15 RayTraceScene * 0 0 543 0 0 0 0 0 0 0 0 0 0

645 21 RayTraceScene const * 0 8576 21 RayTraceScene const * 21 RayTraceScene const * 0 0 646 0 0 0 0 0 0 0 0 0 0

646 19 RayTraceScene const 0 8832 19 RayTraceScene const 19 RayTraceScene const 0 0 543 0 0 0 0 0 0 0 0 0 0

647 18 RayTraceGeometry * 0 8576 18 RayTraceGeometry * 18 RayTraceGeometry * 0 0 546 0 0 0 0 0 0 0 0 0 0

648 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 649 0 0 0 0 0 0 0 0 0 0

649 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 650 0 0 0 0 0 0 0 0 0 0

650 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 651 0 0 0 0 0 0 0 0 0 0

651 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

652 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 653 0 0 0 0 0 0 0 0 0 0

653 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 612 0 0 0 0 0 0 0 0 0 0

654 24 RayTraceGeometry const * 0 8576 24 RayTraceGeometry const * 24 RayTraceGeometry const * 0 0 655 0 0 0 0 0 0 0 0 0 0

655 22 RayTraceGeometry const 0 8832 22 RayTraceGeometry const 22 RayTraceGeometry const 0 0 546 0 0 0 0 0 0 0 0 0 0

656 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 650 0 0 0 0 0 0 0 0 0 0

657 22 RayTraceTriangleMesh * 0 8576 22 RayTraceTriangleMesh * 22 RayTraceTriangleMesh * 0 0 548 0 0 0 0 0 0 0 0 0 0

658 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 659 0 0 0 0 0 0 0 0 0 0

659 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 660 0 0 0 0 0 0 0 0 0 0

660 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

661 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 662 0 0 0 0 0 0 0 0 0 0

662 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 663 0 0 0 0 0 0 0 0 0 0

663 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

664 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 665 0 0 0 0 0 0 0 0 0 0

665 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 549 0 0 0 0 0 0 0 0 0 0

666 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 590 0 0 0 0 0 0 0 0 0 0

667 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 668 0 0 0 0 0 0 0 0 0 0

668 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 551 0 0 0 0 0 0 0 0 0 0

669 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 670 0 0 0 0 0 0 0 0 0 0

670 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

671 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 672 0 0 0 0 0 0 0 0 0 0

672 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 625 0 0 0 0 0 0 0 0 0 0

673 20 BSPShaderGenerator * 0 8576 20 BSPShaderGenerator * 20 BSPShaderGenerator * 0 0 558 0 0 0 0 0 0 0 0 0 0

674 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 675 0 0 0 0 0 0 0 0 0 0

675 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 676 0 0 0 0 0 0 0 0 0 0

676 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 677 0 0 0 0 0 0 0 0 0 0

677 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

678 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

679 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 678 0 0 0 0 0 0 0 0 0 0

680 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 681 0 0 0 0 0 0 0 0 0 0

681 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 682 0 0 0 0 0 0 0 0 0 0

682 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

683 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 684 0 0 0 0 0 0 0 0 0 0

684 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 685 0 0 0 0 0 0 0 0 0 0

685 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

686 9 int const 0 8832 9 int const 9 int const 0 0 533 0 0 0 0 0 0 0 0 0 0

687 6 LColor 0 2105344 6 LColor 6 LColor 0 0 688 0 0 0 0 0 0 0 0 0 0

688 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 689 0 0 0 0 0 0 0 0 0 0

689 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

690 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 687 0 0 0 0 0 0 0 0 0 0

691 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 692 0 0 0 0 0 0 0 0 0 0

692 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 693 0 0 0 0 0 0 0 0 0 0

693 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

694 9 LTexCoord 0 2105344 9 LTexCoord 9 LTexCoord 0 0 695 0 0 0 0 0 0 0 0 0 0

695 10 LTexCoordf 0 2105344 10 LTexCoordf 10 LTexCoordf 0 0 677 0 0 0 0 0 0 0 0 0 0

696 11 LTexCoord * 0 8576 11 LTexCoord * 11 LTexCoord * 0 0 694 0 0 0 0 0 0 0 0 0 0

697 20 ShaderPermutations * 0 8576 20 ShaderPermutations * 20 ShaderPermutations * 0 0 553 0 0 0 0 0 0 0 0 0 0

698 26 ShaderPermutations const * 0 8576 26 ShaderPermutations const * 26 ShaderPermutations const * 0 0 699 0 0 0 0 0 0 0 0 0 0

699 24 ShaderPermutations const 0 8832 24 ShaderPermutations const 24 ShaderPermutations const 0 0 553 0 0 0 0 0 0 0 0 0 0

700 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 701 0 0 0 0 0 0 0 0 0 0

701 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 702 0 0 0 0 0 0 0 0 0 0

702 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

703 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 554 0 0 0 0 0 0 0 0 0 0

704 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 544 0 0 0 0 0 0 0 0 0 0

705 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 555 0 0 0 0 0 0 0 0 0 0

706 26 BSPShaderGenerator const * 0 8576 26 BSPShaderGenerator const * 26 BSPShaderGenerator const * 0 0 707 0 0 0 0 0 0 0 0 0 0

707 24 BSPShaderGenerator const 0 8832 24 BSPShaderGenerator const 24 BSPShaderGenerator const 0 0 558 0 0 0 0 0 0 0 0 0 0

708 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 709 0 0 0 0 0 0 0 0 0 0

709 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

710 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 711 0 0 0 0 0 0 0 0 0 0

711 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

712 12 Shader const 0 8832 12 Shader const 12 Shader const 0 0 713 0 0 0 0 0 0 0 0 0 0

713 6 Shader 0 2048 6 Shader 6 Shader 0 0 0 0 0 0 0 0 0 0 0 0 8
/**

 */

714 18 ShaderSpec const * 0 8576 18 ShaderSpec const * 18 ShaderSpec const * 0 0 715 0 0 0 0 0 0 0 0 0 0

715 16 ShaderSpec const 0 8832 16 ShaderSpec const 16 ShaderSpec const 0 0 554 0 0 0 0 0 0 0 0 0 0

716 14 Shader const * 0 8576 14 Shader const * 14 Shader const * 0 0 712 0 0 0 0 0 0 0 0 0 0

717 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 718 0 0 0 0 0 0 0 0 0 0

718 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 560 0 0 0 0 0 0 0 0 0 0

719 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 560 0 0 0 0 0 0 0 0 0 0

720 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 561 0 0 0 0 0 0 0 0 0 0

721 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 722 0 0 0 0 0 0 0 0 0 0

722 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 562 0 0 0 0 0 0 0 0 0 0

723 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 562 0 0 0 0 0 0 0 0 0 0

724 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 725 0 0 0 0 0 0 0 0 0 0

725 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 563 0 0 0 0 0 0 0 0 0 0

726 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 563 0 0 0 0 0 0 0 0 0 0

727 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 728 0 0 0 0 0 0 0 0 0 0

728 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 564 0 0 0 0 0 0 0 0 0 0

729 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 564 0 0 0 0 0 0 0 0 0 0

730 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 731 0 0 0 0 0 0 0 0 0 0

731 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 566 0 0 0 0 0 0 0 0 0 0

732 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 566 0 0 0 0 0 0 0 0 0 0

733 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 568 0 0 0 0 0 0 0 0 0 0

734 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 569 0 0 0 0 0 0 0 0 0 0

735 18 UnlitGenericSpec * 0 8576 18 UnlitGenericSpec * 18 UnlitGenericSpec * 0 0 570 0 0 0 0 0 0 0 0 0 0

736 16 UnlitNoMatSpec * 0 8576 16 UnlitNoMatSpec * 16 UnlitNoMatSpec * 0 0 571 0 0 0 0 0 0 0 0 0 0

737 15 CSMRenderSpec * 0 8576 15 CSMRenderSpec * 15 CSMRenderSpec * 0 0 572 0 0 0 0 0 0 0 0 0 0

738 12 SkyBoxSpec * 0 8576 12 SkyBoxSpec * 12 SkyBoxSpec * 0 0 573 0 0 0 0 0 0 0 0 0 0

739 18 RenderEffect const 0 8832 18 RenderEffect const 18 RenderEffect const 0 0 575 0 0 0 0 0 0 0 0 0 0

740 20 RenderEffect const * 0 8576 20 RenderEffect const * 20 RenderEffect const * 0 0 739 0 0 0 0 0 0 0 0 0 0

741 22 Audio3DManager const * 0 8576 22 Audio3DManager const * 22 Audio3DManager const * 0 0 742 0 0 0 0 0 0 0 0 0 0

742 20 Audio3DManager const 0 8832 20 Audio3DManager const 20 Audio3DManager const 0 0 576 0 0 0 0 0 0 0 0 0 0

743 16 Audio3DManager * 0 8576 16 Audio3DManager * 16 Audio3DManager * 0 0 576 0 0 0 0 0 0 0 0 0 0

744 14 AudioManager * 0 8576 14 AudioManager * 14 AudioManager * 0 0 745 0 0 0 0 0 0 0 0 0 0

745 12 AudioManager 0 2048 12 AudioManager 12 AudioManager 0 0 0 0 0 0 0 0 0 0 0 0 0

746 12 AudioSound * 0 8576 12 AudioSound * 12 AudioSound * 0 0 747 0 0 0 0 0 0 0 0 0 0

747 10 AudioSound 0 2048 10 AudioSound 10 AudioSound 0 0 0 0 0 0 0 0 0 0 0 0 0

748 8 CIOLib * 0 8576 8 CIOLib * 8 CIOLib * 0 0 577 0 0 0 0 0 0 0 0 0 0

749 14 CIOLib const * 0 8576 14 CIOLib const * 14 CIOLib const * 0 0 750 0 0 0 0 0 0 0 0 0 0

750 12 CIOLib const 0 8832 12 CIOLib const 12 CIOLib const 0 0 577 0 0 0 0 0 0 0 0 0 0

0
2
751 10 class_slot 0 2 533 298 0 0 0 0 0 0 0 29 BSPMaterialAttrib::class_slot 0

752 10 class_slot 0 2 533 383 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

0
