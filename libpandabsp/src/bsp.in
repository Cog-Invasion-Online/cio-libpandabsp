1546374035
3 3
3 bsp 4 t5GT 3 bsp 
187
178 3 get 0 4 365 18 TextureStages::get 0 2 3 4 0
159
static TextureStage *TextureStages::get(std::string const &name);
static TextureStage *TextureStages::get(std::string const &name, std::string const &uv_name);

179 15 get_basetexture 0 4 365 30 TextureStages::get_basetexture 0 1 5 0
58
static TextureStage *TextureStages::get_basetexture(void);

180 12 get_lightmap 0 4 365 27 TextureStages::get_lightmap 0 1 6 0
55
static TextureStage *TextureStages::get_lightmap(void);

181 19 get_bumped_lightmap 0 4 365 34 TextureStages::get_bumped_lightmap 0 1 7 0
62
static TextureStage *TextureStages::get_bumped_lightmap(void);

182 13 get_spheremap 0 4 365 28 TextureStages::get_spheremap 0 1 8 0
56
static TextureStage *TextureStages::get_spheremap(void);

183 11 get_cubemap 0 4 365 26 TextureStages::get_cubemap 0 1 9 0
54
static TextureStage *TextureStages::get_cubemap(void);

184 13 get_normalmap 0 4 365 28 TextureStages::get_normalmap 0 1 10 0
56
static TextureStage *TextureStages::get_normalmap(void);

185 13 get_heightmap 0 4 365 28 TextureStages::get_heightmap 0 1 11 0
56
static TextureStage *TextureStages::get_heightmap(void);

186 12 get_glossmap 0 4 365 27 TextureStages::get_glossmap 0 1 12 0
55
static TextureStage *TextureStages::get_glossmap(void);

187 11 get_glowmap 0 4 365 26 TextureStages::get_glowmap 0 1 13 0
54
static TextureStage *TextureStages::get_glowmap(void);

188 13 TextureStages 0 4 365 28 TextureStages::TextureStages 0 2 1 2 0
122
inline TextureStages::TextureStages(void) = default;
inline TextureStages::TextureStages(TextureStages const &) = default;

189 14 ~TextureStages 0 4 365 29 TextureStages::~TextureStages 0 0 0
36
TextureStages::~TextureStages(void);

190 11 BSPMaterial 0 4 366 24 BSPMaterial::BSPMaterial 0 2 14 15 0
145
inline explicit BSPMaterial::BSPMaterial(std::string const &name = "VertexLitGeneric");
inline BSPMaterial::BSPMaterial(BSPMaterial const &copy);

191 10 operator = 0 4 366 23 BSPMaterial::operator = 0 1 16 0
61
inline void BSPMaterial::operator =(BSPMaterial const &copy);

192 12 set_keyvalue 0 4 366 25 BSPMaterial::set_keyvalue 0 1 17 0
88
inline void BSPMaterial::set_keyvalue(std::string const &key, std::string const &value);

193 12 get_keyvalue 0 4 366 25 BSPMaterial::get_keyvalue 0 1 18 0
75
inline std::string BSPMaterial::get_keyvalue(std::string const &key) const;

194 10 set_shader 0 4 366 23 BSPMaterial::set_shader 0 1 19 0
68
inline void BSPMaterial::set_shader(std::string const &shader_name);

195 10 get_shader 0 4 366 23 BSPMaterial::get_shader 0 1 20 0
55
inline std::string BSPMaterial::get_shader(void) const;

196 8 get_file 0 4 366 21 BSPMaterial::get_file 0 1 21 0
50
inline Filename BSPMaterial::get_file(void) const;

197 12 has_keyvalue 0 4 366 25 BSPMaterial::has_keyvalue 0 1 22 0
68
inline bool BSPMaterial::has_keyvalue(std::string const &key) const;

198 15 has_env_cubemap 0 4 366 28 BSPMaterial::has_env_cubemap 0 1 23 0
53
inline bool BSPMaterial::has_env_cubemap(void) const;

199 13 get_from_file 0 4 366 26 BSPMaterial::get_from_file 0 1 24 0
75
static BSPMaterial const *BSPMaterial::get_from_file(Filename const &file);

200 14 get_class_type 0 4 366 27 BSPMaterial::get_class_type 0 1 25 0
52
static TypeHandle BSPMaterial::get_class_type(void);

201 12 ~BSPMaterial 0 4 366 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

202 4 make 0 4 368 23 BSPMaterialAttrib::make 0 1 26 0
86
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make(BSPMaterial const *mat);

203 12 make_default 0 4 368 31 BSPMaterialAttrib::make_default 0 1 27 0
76
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_default(void);

204 12 get_material 0 4 368 31 BSPMaterialAttrib::get_material 0 1 28 0
70
inline BSPMaterial const *BSPMaterialAttrib::get_material(void) const;

205 14 get_class_slot 0 4 368 33 BSPMaterialAttrib::get_class_slot 0 1 29 0
51
static int BSPMaterialAttrib::get_class_slot(void);

206 14 get_class_type 0 4 368 33 BSPMaterialAttrib::get_class_type 0 1 30 0
58
static TypeHandle BSPMaterialAttrib::get_class_type(void);

207 18 ~BSPMaterialAttrib 0 4 368 37 BSPMaterialAttrib::~BSPMaterialAttrib 0 0 0
44
BSPMaterialAttrib::~BSPMaterialAttrib(void);

208 14 get_class_type 0 4 371 27 CBaseEntity::get_class_type 0 1 33 0
52
static TypeHandle CBaseEntity::get_class_type(void);

209 11 CBaseEntity 0 4 371 24 CBaseEntity::CBaseEntity 0 2 31 32 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

210 10 get_entnum 0 4 371 23 CBaseEntity::get_entnum 0 1 34 0
40
int CBaseEntity::get_entnum(void) const;

211 10 get_loader 0 4 371 23 CBaseEntity::get_loader 0 1 35 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

212 12 ~CBaseEntity 0 4 371 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

213 14 get_class_type 0 4 372 28 CPointEntity::get_class_type 0 1 38 0
53
static TypeHandle CPointEntity::get_class_type(void);

214 12 CPointEntity 0 4 372 26 CPointEntity::CPointEntity 0 2 36 37 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

215 10 get_origin 0 4 372 24 CPointEntity::get_origin 0 1 39 0
45
LPoint3 CPointEntity::get_origin(void) const;

216 10 get_angles 0 4 372 24 CPointEntity::get_angles 0 1 40 0
46
LVector3 CPointEntity::get_angles(void) const;

217 13 ~CPointEntity 0 4 372 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

218 14 get_class_type 0 4 373 29 CBoundsEntity::get_class_type 0 1 43 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

219 13 CBoundsEntity 0 4 373 28 CBoundsEntity::CBoundsEntity 0 2 41 42 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

220 10 get_bounds 0 4 373 25 CBoundsEntity::get_bounds 0 1 44 0
51
BoundingBox *CBoundsEntity::get_bounds(void) const;

221 9 is_inside 0 4 373 24 CBoundsEntity::is_inside 0 1 45 0
63
inline bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

222 13 fillin_bounds 0 4 373 28 CBoundsEntity::fillin_bounds 0 1 46 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

223 14 ~CBoundsEntity 0 4 373 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

224 14 get_class_type 0 4 374 28 CBrushEntity::get_class_type 0 1 49 0
53
static TypeHandle CBrushEntity::get_class_type(void);

225 12 CBrushEntity 0 4 374 26 CBrushEntity::CBrushEntity 0 2 47 48 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

226 12 get_modelnum 0 4 374 26 CBrushEntity::get_modelnum 0 1 50 0
43
int CBrushEntity::get_modelnum(void) const;

227 12 get_model_np 0 4 374 26 CBrushEntity::get_model_np 0 1 51 0
48
NodePath CBrushEntity::get_model_np(void) const;

228 16 get_model_bounds 0 4 374 30 CBrushEntity::get_model_bounds 0 1 52 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

229 13 ~CBrushEntity 0 4 374 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

230 9 get_width 0 4 375 21 PackResult::get_width 0 1 54 0
45
inline int PackResult::get_width(void) const;

231 10 get_height 0 4 375 22 PackResult::get_height 0 1 55 0
46
inline int PackResult::get_height(void) const;

232 15 get_unused_area 0 4 375 27 PackResult::get_unused_area 0 1 56 0
51
inline int PackResult::get_unused_area(void) const;

233 10 PackResult 0 4 375 22 PackResult::PackResult 0 1 53 0
60
inline PackResult::PackResult(PackResult const &) = default;

234 11 ~PackResult 0 4 375 23 PackResult::~PackResult 0 0 0
30
PackResult::~PackResult(void);

235 5 get_x 0 4 376 22 TextureLocation::get_x 0 1 58 0
46
inline int TextureLocation::get_x(void) const;

236 5 get_y 0 4 376 22 TextureLocation::get_y 0 1 59 0
46
inline int TextureLocation::get_y(void) const;

237 9 get_width 0 4 376 26 TextureLocation::get_width 0 1 60 0
50
inline int TextureLocation::get_width(void) const;

238 10 get_height 0 4 376 27 TextureLocation::get_height 0 1 61 0
51
inline int TextureLocation::get_height(void) const;

239 11 get_rotated 0 4 376 28 TextureLocation::get_rotated 0 1 62 0
53
inline bool TextureLocation::get_rotated(void) const;

240 15 TextureLocation 0 4 376 32 TextureLocation::TextureLocation 0 1 57 0
75
inline TextureLocation::TextureLocation(TextureLocation const &) = default;

241 16 ~TextureLocation 0 4 376 33 TextureLocation::~TextureLocation 0 0 0
40
TextureLocation::~TextureLocation(void);

242 15 getTextureCount 0 6 377 30 TexturePacker::getTextureCount 0 1 63 0
53
virtual int TexturePacker::getTextureCount(void) = 0;

243 15 setTextureCount 0 6 377 30 TexturePacker::setTextureCount 0 1 64 35
// number of textures to consider..
60
virtual void TexturePacker::setTextureCount(int tcount) = 0;

244 10 addTexture 0 6 377 25 TexturePacker::addTexture 0 1 65 21
// add textures 0 - n
61
virtual void TexturePacker::addTexture(int wid, int hit) = 0;

245 15 wouldTextureFit 0 6 377 30 TexturePacker::wouldTextureFit 0 1 66 0
135
virtual bool TexturePacker::wouldTextureFit(int wid, int hit, bool forcePowerOfTwo, bool onePixelBorder, int max_wid, int max_hit) = 0;

246 13 addNewTexture 0 6 377 28 TexturePacker::addNewTexture 0 1 67 0
64
virtual void TexturePacker::addNewTexture(int wid, int hit) = 0;

247 12 packTextures 0 6 377 27 TexturePacker::packTextures 0 1 68 74
// pack the textures, the return code is the amount of wasted/unused area.
94
virtual PackResult TexturePacker::packTextures(bool forcePowerOfTwo, bool onePixelBorder) = 0;

248 18 getTextureLocation 0 6 377 33 TexturePacker::getTextureLocation 0 1 69 58
// returns true if the texture has been rotated 90 degrees
73
virtual TextureLocation TexturePacker::getTextureLocation(int index) = 0;

249 19 createTexturePacker 0 4 377 34 TexturePacker::createTexturePacker 0 1 70 0
63
static TexturePacker *TexturePacker::createTexturePacker(void);

250 20 releaseTexturePacker 0 4 377 35 TexturePacker::releaseTexturePacker 0 1 71 0
67
static void TexturePacker::releaseTexturePacker(TexturePacker *tp);

251 14 ~TexturePacker 0 4 377 29 TexturePacker::~TexturePacker 0 0 0
36
TexturePacker::~TexturePacker(void);

252 4 make 0 4 378 19 BSPFaceAttrib::make 0 1 72 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

253 12 make_default 0 4 378 27 BSPFaceAttrib::make_default 0 1 73 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

254 15 make_ignore_pvs 0 4 378 30 BSPFaceAttrib::make_ignore_pvs 0 1 74 0
75
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_ignore_pvs(void);

255 12 get_material 0 4 378 27 BSPFaceAttrib::get_material 0 1 75 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

256 13 get_face_type 0 4 378 28 BSPFaceAttrib::get_face_type 0 1 76 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

257 14 get_ignore_pvs 0 4 378 29 BSPFaceAttrib::get_ignore_pvs 0 1 77 0
54
inline bool BSPFaceAttrib::get_ignore_pvs(void) const;

258 14 get_class_slot 0 4 378 29 BSPFaceAttrib::get_class_slot 0 1 78 0
47
static int BSPFaceAttrib::get_class_slot(void);

259 14 get_class_type 0 4 378 29 BSPFaceAttrib::get_class_type 0 1 79 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

260 14 ~BSPFaceAttrib 0 4 378 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

261 9 BSPLoader 0 4 380 20 BSPLoader::BSPLoader 0 1 80 0
27
BSPLoader::BSPLoader(void);

262 4 read 0 4 380 15 BSPLoader::read 0 1 81 0
43
bool BSPLoader::read(Filename const &file);

263 16 do_optimizations 0 4 380 27 BSPLoader::do_optimizations 0 1 82 0
39
void BSPLoader::do_optimizations(void);

264 9 set_gamma 0 4 380 20 BSPLoader::set_gamma 0 1 83 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

265 9 get_gamma 0 4 380 20 BSPLoader::get_gamma 0 1 84 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

266 7 set_win 0 4 380 18 BSPLoader::set_win 0 1 85 0
45
void BSPLoader::set_win(GraphicsWindow *win);

267 10 set_camera 0 4 380 21 BSPLoader::set_camera 0 1 86 0
51
void BSPLoader::set_camera(NodePath const &camera);

268 10 set_render 0 4 380 21 BSPLoader::set_render 0 1 87 0
51
void BSPLoader::set_render(NodePath const &render);

269 19 set_want_visibility 0 4 380 30 BSPLoader::set_want_visibility 0 1 88 0
47
void BSPLoader::set_want_visibility(bool flag);

270 18 set_want_lightmaps 0 4 380 29 BSPLoader::set_want_lightmaps 0 1 89 0
46
void BSPLoader::set_want_lightmaps(bool flag);

271 16 set_physics_type 0 4 380 27 BSPLoader::set_physics_type 0 1 90 0
43
void BSPLoader::set_physics_type(int type);

272 19 set_visualize_leafs 0 4 380 30 BSPLoader::set_visualize_leafs 0 1 91 0
47
void BSPLoader::set_visualize_leafs(bool flag);

273 18 set_materials_file 0 4 380 29 BSPLoader::set_materials_file 0 1 92 0
57
void BSPLoader::set_materials_file(Filename const &file);

274 25 set_texture_contents_file 0 4 380 36 BSPLoader::set_texture_contents_file 0 1 93 0
64
void BSPLoader::set_texture_contents_file(Filename const &file);

275 13 set_wireframe 0 4 380 24 BSPLoader::set_wireframe 0 1 94 0
41
void BSPLoader::set_wireframe(bool flag);

276 13 get_wireframe 0 4 380 24 BSPLoader::get_wireframe 0 1 95 0
49
inline bool BSPLoader::get_wireframe(void) const;

277 10 get_camera 0 4 380 21 BSPLoader::get_camera 0 1 96 0
50
inline NodePath BSPLoader::get_camera(void) const;

278 14 build_cubemaps 0 4 380 25 BSPLoader::build_cubemaps 0 1 97 0
37
void BSPLoader::build_cubemaps(void);

279 15 setup_shadowcam 0 4 380 26 BSPLoader::setup_shadowcam 0 1 98 0
38
void BSPLoader::setup_shadowcam(void);

280 16 add_dynamic_node 0 4 380 27 BSPLoader::add_dynamic_node 0 1 99 0
55
void BSPLoader::add_dynamic_node(NodePath const &node);

281 16 set_want_shadows 0 4 380 27 BSPLoader::set_want_shadows 0 1 100 0
44
void BSPLoader::set_want_shadows(bool flag);

282 18 set_shadow_cam_pos 0 4 380 29 BSPLoader::set_shadow_cam_pos 0 1 101 0
55
void BSPLoader::set_shadow_cam_pos(LPoint3 const &pos);

283 22 set_shadow_cam_bitmask 0 4 380 33 BSPLoader::set_shadow_cam_bitmask 0 1 102 0
62
void BSPLoader::set_shadow_cam_bitmask(BitMask32 const &mask);

284 16 set_shadow_color 0 4 380 27 BSPLoader::set_shadow_color 0 1 103 0
54
void BSPLoader::set_shadow_color(LColor const &color);

285 21 set_shadow_resolution 0 4 380 32 BSPLoader::set_shadow_resolution 0 1 104 0
65
void BSPLoader::set_shadow_resolution(int filmsize, int texsize);

286 12 cast_shadows 0 4 380 23 BSPLoader::cast_shadows 0 1 105 0
45
void BSPLoader::cast_shadows(NodePath &node);

287 14 get_shadow_tex 0 4 380 25 BSPLoader::get_shadow_tex 0 1 106 0
47
Texture *BSPLoader::get_shadow_tex(void) const;

288 16 extract_modelnum 0 4 380 27 BSPLoader::extract_modelnum 0 1 107 0
51
inline int BSPLoader::extract_modelnum(int entnum);

289 16 get_model_bounds 0 4 380 27 BSPLoader::get_model_bounds 0 1 108 0
84
inline void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

290 28 set_server_entity_dispatcher 0 4 380 39 BSPLoader::set_server_entity_dispatcher 0 1 109 0
67
void BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

291 27 link_server_entity_to_class 0 4 380 38 BSPLoader::link_server_entity_to_class 0 1 110 0
89
void BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

292 6 set_ai 0 4 380 17 BSPLoader::set_ai 0 1 111 0
32
void BSPLoader::set_ai(bool ai);

293 5 is_ai 0 4 380 16 BSPLoader::is_ai 0 1 112 0
41
inline bool BSPLoader::is_ai(void) const;

294 19 update_dynamic_node 0 4 380 30 BSPLoader::update_dynamic_node 0 1 113 0
58
void BSPLoader::update_dynamic_node(NodePath const &node);

295 10 trace_line 0 4 380 21 BSPLoader::trace_line 0 1 114 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

296 20 link_entity_to_class 0 4 380 31 BSPLoader::link_entity_to_class 0 1 115 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

297 28 get_py_entity_by_target_name 0 4 380 39 BSPLoader::get_py_entity_by_target_name 0 1 116 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

298 17 find_all_entities 0 4 380 28 BSPLoader::find_all_entities 0 1 117 0
69
PyObject *BSPLoader::find_all_entities(std::string const &classname);

299 20 get_entity_keyvalues 0 4 380 31 BSPLoader::get_entity_keyvalues 0 1 118 0
71
void BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

300 18 link_cent_to_pyent 0 4 380 29 BSPLoader::link_cent_to_pyent 0 1 119 0
63
void BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

301 16 get_num_entities 0 4 380 27 BSPLoader::get_num_entities 0 1 120 0
44
int BSPLoader::get_num_entities(void) const;

302 16 get_entity_value 0 4 380 27 BSPLoader::get_entity_value 0 1 121 0
75
std::string BSPLoader::get_entity_value(int entnum, char const *key) const;

303 22 get_entity_value_float 0 4 380 33 BSPLoader::get_entity_value_float 0 1 122 0
75
float BSPLoader::get_entity_value_float(int entnum, char const *key) const;

304 20 get_entity_value_int 0 4 380 31 BSPLoader::get_entity_value_int 0 1 123 0
71
int BSPLoader::get_entity_value_int(int entnum, char const *key) const;

305 23 get_entity_value_vector 0 4 380 34 BSPLoader::get_entity_value_vector 0 1 124 0
79
LVector3 BSPLoader::get_entity_value_vector(int entnum, char const *key) const;

306 22 get_entity_value_color 0 4 380 33 BSPLoader::get_entity_value_color 0 1 125 0
95
LColor BSPLoader::get_entity_value_color(int entnum, char const *key, bool scale = true) const;

307 10 get_entity 0 4 380 21 BSPLoader::get_entity 0 1 126 0
49
NodePath BSPLoader::get_entity(int entnum) const;

308 9 get_model 0 4 380 20 BSPLoader::get_model 0 1 127 0
50
NodePath BSPLoader::get_model(int modelnum) const;

309 12 get_c_entity 0 4 380 23 BSPLoader::get_c_entity 0 1 128 0
68
inline CBaseEntity *BSPLoader::get_c_entity(int const entnum) const;

310 9 find_leaf 0 4 380 20 BSPLoader::find_leaf 0 2 129 130 0
105
inline int BSPLoader::find_leaf(NodePath const &np);
inline int BSPLoader::find_leaf(LPoint3 const &pos);

311 9 find_node 0 4 380 20 BSPLoader::find_node 0 1 131 0
52
inline int BSPLoader::find_node(LPoint3 const &pos);

312 18 is_cluster_visible 0 4 380 29 BSPLoader::is_cluster_visible 0 1 132 0
79
inline bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

313 15 pvs_bounds_test 0 4 380 26 BSPLoader::pvs_bounds_test 0 1 133 0
78
inline bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds);

314 15 make_net_bounds 0 4 380 26 BSPLoader::make_net_bounds 0 1 134 0
154
inline ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

315 16 has_active_level 0 4 380 27 BSPLoader::has_active_level 0 1 135 0
52
inline bool BSPLoader::has_active_level(void) const;

316 14 has_visibility 0 4 380 25 BSPLoader::has_visibility 0 1 136 0
50
inline bool BSPLoader::has_visibility(void) const;

317 7 cleanup 0 4 380 18 BSPLoader::cleanup 0 1 137 0
30
void BSPLoader::cleanup(void);

318 10 get_result 0 4 380 21 BSPLoader::get_result 0 1 138 0
43
NodePath BSPLoader::get_result(void) const;

319 14 get_global_ptr 0 4 380 25 BSPLoader::get_global_ptr 0 1 139 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

320 10 ~BSPLoader 0 4 380 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

321 14 get_class_type 0 4 382 32 BSPCullTraverser::get_class_type 0 1 142 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

322 16 BSPCullTraverser 0 4 382 34 BSPCullTraverser::BSPCullTraverser 0 2 140 141 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

323 17 ~BSPCullTraverser 0 4 382 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

324 14 get_class_type 0 4 384 25 BSPRender::get_class_type 0 1 145 0
50
static TypeHandle BSPRender::get_class_type(void);

325 9 BSPRender 0 4 384 20 BSPRender::BSPRender 0 2 143 144 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

326 10 ~BSPRender 0 4 384 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

327 14 get_class_type 0 4 386 23 BSPRoot::get_class_type 0 1 148 0
48
static TypeHandle BSPRoot::get_class_type(void);

328 7 BSPRoot 0 4 386 16 BSPRoot::BSPRoot 0 2 146 147 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

329 8 ~BSPRoot 0 4 386 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

330 14 get_class_type 0 4 387 23 BSPProp::get_class_type 0 1 151 0
48
static TypeHandle BSPProp::get_class_type(void);

331 7 BSPProp 0 4 387 16 BSPProp::BSPProp 0 2 149 150 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

332 8 ~BSPProp 0 4 387 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

333 14 get_class_type 0 4 389 24 BSPModel::get_class_type 0 1 154 0
49
static TypeHandle BSPModel::get_class_type(void);

334 8 BSPModel 0 4 389 18 BSPModel::BSPModel 0 2 152 153 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

335 9 ~BSPModel 0 4 389 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

336 15 add_permutation 0 4 390 35 ShaderPermutations::add_permutation 0 1 157 0
97
void ShaderPermutations::add_permutation(std::string const &key, std::string const &value = "1");

337 9 add_input 0 4 390 29 ShaderPermutations::add_input 0 1 158 0
82
void ShaderPermutations::add_input(ShaderInput const &inp, bool important = true);

338 8 add_flag 0 4 390 28 ShaderPermutations::add_flag 0 1 159 0
44
void ShaderPermutations::add_flag(int flag);

339 10 operator < 0 4 390 30 ShaderPermutations::operator < 0 1 160 0
75
bool ShaderPermutations::operator <(ShaderPermutations const &other) const;

340 18 ShaderPermutations 0 4 390 38 ShaderPermutations::ShaderPermutations 0 2 155 156 0
147
inline ShaderPermutations::ShaderPermutations(void) = default;
inline ShaderPermutations::ShaderPermutations(ShaderPermutations const &) = default;

341 19 ~ShaderPermutations 0 4 390 39 ShaderPermutations::~ShaderPermutations 0 0 0
46
ShaderPermutations::~ShaderPermutations(void);

342 24 upcast_to_ReferenceCount 0 12 391 36 ShaderSpec::upcast_to_ReferenceCount 0 1 163 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

343 22 downcast_to_ShaderSpec 0 12 392 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

344 17 upcast_to_Namable 0 12 391 29 ShaderSpec::upcast_to_Namable 0 1 164 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

345 22 downcast_to_ShaderSpec 0 12 393 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

346 17 read_shader_files 0 4 391 29 ShaderSpec::read_shader_files 0 1 161 0
117
void ShaderSpec::read_shader_files(Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file);

347 14 get_class_type 0 4 391 26 ShaderSpec::get_class_type 0 1 162 0
51
static TypeHandle ShaderSpec::get_class_type(void);

348 11 ~ShaderSpec 0 4 391 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

349 19 PSSMShaderGenerator 0 4 394 40 PSSMShaderGenerator::PSSMShaderGenerator 0 2 165 166 0
205
PSSMShaderGenerator::PSSMShaderGenerator(GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline PSSMShaderGenerator::PSSMShaderGenerator(PSSMShaderGenerator const &) = default;

350 17 synthesize_shader 0 4 394 38 PSSMShaderGenerator::synthesize_shader 0 1 167 221
// This is important because in BSP levels, we must know the GeomNode that is associated with
// each render state. We need to apply the appropriate shader inputs for updating
// with local light sources and ambient cube.
165
ConstPointerTo< ShaderAttrib > PSSMShaderGenerator::synthesize_shader(RenderState const *rs, GeomVertexAnimationSpec const &anim, nodeshaderinput_t *bsp_node_input);

351 13 set_sun_light 0 4 394 34 PSSMShaderGenerator::set_sun_light 0 1 168 0
60
void PSSMShaderGenerator::set_sun_light(NodePath const &np);

352 12 start_update 0 4 394 33 PSSMShaderGenerator::start_update 0 1 169 0
45
void PSSMShaderGenerator::start_update(void);

353 10 add_shader 0 4 394 31 PSSMShaderGenerator::add_shader 0 1 170 0
67
void PSSMShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

354 19 has_shadow_sunlight 0 4 394 40 PSSMShaderGenerator::has_shadow_sunlight 0 1 171 0
65
inline bool PSSMShaderGenerator::has_shadow_sunlight(void) const;

355 22 get_pssm_array_texture 0 4 394 43 PSSMShaderGenerator::get_pssm_array_texture 0 1 172 0
72
inline Texture *PSSMShaderGenerator::get_pssm_array_texture(void) const;

356 12 get_pssm_rig 0 4 394 33 PSSMShaderGenerator::get_pssm_rig 0 1 173 0
68
inline PSSMCameraRig *PSSMShaderGenerator::get_pssm_rig(void) const;

357 14 get_class_type 0 4 394 35 PSSMShaderGenerator::get_class_type 0 1 174 0
60
static TypeHandle PSSMShaderGenerator::get_class_type(void);

358 20 ~PSSMShaderGenerator 0 4 394 41 PSSMShaderGenerator::~PSSMShaderGenerator 0 0 0
48
PSSMShaderGenerator::~PSSMShaderGenerator(void);

359 20 VertexLitGenericSpec 0 4 396 42 VertexLitGenericSpec::VertexLitGenericSpec 0 1 175 0
49
VertexLitGenericSpec::VertexLitGenericSpec(void);

360 21 ~VertexLitGenericSpec 0 4 396 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

361 22 LightmappedGenericSpec 0 4 397 46 LightmappedGenericSpec::LightmappedGenericSpec 0 1 176 0
53
LightmappedGenericSpec::LightmappedGenericSpec(void);

362 23 ~LightmappedGenericSpec 0 4 397 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

363 16 UnlitGenericSpec 0 4 398 34 UnlitGenericSpec::UnlitGenericSpec 0 1 177 0
41
UnlitGenericSpec::UnlitGenericSpec(void);

364 17 ~UnlitGenericSpec 0 4 398 35 UnlitGenericSpec::~UnlitGenericSpec 0 0 0
42
UnlitGenericSpec::~UnlitGenericSpec(void);

177
1 0 0 7 12 399 189 0 0 0 
2 0 0 7 12 399 189 0 0 1 6 param0 0 400  
3 0 0 7 2 404 0 0 0 1 4 name 1 403  
4 0 0 7 2 404 0 0 0 2 4 name 1 403  7 uv_name 1 403  
5 0 0 7 3 404 0 0 0 0 
6 0 0 7 4 404 0 0 0 0 
7 0 0 7 5 404 0 0 0 0 
8 0 0 7 6 404 0 0 0 0 
9 0 0 7 7 404 0 0 0 0 
10 0 0 7 8 404 0 0 0 0 
11 0 0 7 9 404 0 0 0 0 
12 0 0 7 10 404 0 0 0 0 
13 0 0 7 11 404 0 0 0 0 
14 0 0 7 16 407 201 0 0 1 4 copy 1 405  
15 0 0 7 16 407 201 0 0 1 4 name 1 403  
16 0 0 7 17 407 201 0 0 2 4 this 3 407  4 copy 1 405  
17 0 0 4 18 408 0 0 0 3 4 this 3 407  3 key 1 403  5 value 1 403  
18 0 0 6 19 403 0 0 0 2 4 this 3 405  3 key 1 403  
19 0 0 4 20 408 0 0 0 2 4 this 3 407  11 shader_name 1 403  
20 0 0 6 21 403 0 0 0 1 4 this 3 405  
21 0 0 7 22 410 0 0 0 1 4 this 3 405  
22 0 0 6 23 411 0 0 0 2 4 this 3 405  3 key 1 403  
23 0 0 6 24 411 0 0 0 1 4 this 3 405  
24 0 0 7 25 405 0 0 0 1 4 file 1 412  
25 0 0 7 26 415 0 0 0 0 
26 0 0 7 30 417 0 0 0 1 3 mat 1 405  
27 0 0 7 31 417 0 0 0 0 
28 0 0 7 32 405 0 0 0 1 4 this 3 418  
29 0 0 6 33 370 0 0 0 0 
30 0 0 7 36 415 0 0 0 0 
31 0 0 7 40 420 212 0 0 0 
32 0 0 7 40 420 212 0 0 1 6 param0 0 421  
33 0 0 7 39 415 0 0 0 0 
34 0 0 6 41 370 0 0 0 1 4 this 3 421  
35 0 0 6 42 423 0 0 0 1 4 this 3 421  
36 0 0 7 46 424 217 0 0 0 
37 0 0 7 46 424 217 0 0 1 6 param0 0 425  
38 0 0 7 45 415 0 0 0 0 
39 0 0 7 47 429 0 0 0 1 4 this 3 425  
40 0 0 7 48 432 0 0 0 1 4 this 3 425  
41 0 0 7 52 433 223 0 0 0 
42 0 0 7 52 433 223 0 0 1 6 param0 0 434  
43 0 0 7 51 415 0 0 0 0 
44 0 0 7 53 437 0 0 0 1 4 this 3 434  
45 0 0 6 54 411 0 0 0 2 4 this 3 434  3 pos 1 438  
46 0 0 4 55 408 0 0 0 3 4 this 3 433  4 mins 1 429  4 maxs 1 429  
47 0 0 7 59 440 229 0 0 0 
48 0 0 7 59 440 229 0 0 1 6 param0 0 441  
49 0 0 7 58 415 0 0 0 0 
50 0 0 6 60 370 0 0 0 1 4 this 3 441  
51 0 0 7 61 444 0 0 0 1 4 this 3 441  
52 0 0 4 62 408 0 0 0 3 4 this 3 440  4 mins 1 429  4 maxs 1 429  
53 0 0 7 68 447 234 0 0 1 6 param0 0 445  
54 0 0 6 65 370 0 0 0 1 4 this 3 445  
55 0 0 6 66 370 0 0 0 1 4 this 3 445  
56 0 0 6 67 370 0 0 0 1 4 this 3 445  
57 0 0 7 76 450 241 0 0 1 6 param0 0 448  
58 0 0 6 71 370 0 0 0 1 4 this 3 448  
59 0 0 6 72 370 0 0 0 1 4 this 3 448  
60 0 0 6 73 370 0 0 0 1 4 this 3 448  
61 0 0 6 74 370 0 0 0 1 4 this 3 448  
62 0 0 6 75 411 0 0 0 1 4 this 3 448  
63 0 0 6 79 370 0 0 0 1 4 this 3 451  
64 0 0 4 80 408 0 0 35 // number of textures to consider.. 2 4 this 3 451  6 tcount 1 370  
65 0 0 4 81 408 0 0 21 // add textures 0 - n 3 4 this 3 451  3 wid 1 370  3 hit 1 370  
66 0 0 6 82 411 0 0 0 7 4 this 3 451  3 wid 1 370  3 hit 1 370  15 forcePowerOfTwo 1 411  14 onePixelBorder 1 411  7 max_wid 1 370  7 max_hit 1 370  
67 0 0 4 83 408 0 0 0 3 4 this 3 451  3 wid 1 370  3 hit 1 370  
68 0 0 7 84 447 234 0 74 // pack the textures, the return code is the amount of wasted/unused area. 3 4 this 3 451  15 forcePowerOfTwo 1 411  14 onePixelBorder 1 411  
69 0 0 7 85 450 241 0 58 // returns true if the texture has been rotated 90 degrees 2 4 this 3 451  5 index 1 370  
70 0 0 6 86 451 0 0 0 0 
71 0 0 4 87 408 0 0 0 1 2 tp 1 451  
72 0 0 7 91 417 0 0 0 2 13 face_material 1 403  9 face_type 1 370  
73 0 0 7 92 417 0 0 0 0 
74 0 0 7 93 417 0 0 0 0 
75 0 0 6 94 403 0 0 0 1 4 this 3 452  
76 0 0 6 95 370 0 0 0 1 4 this 3 452  
77 0 0 6 96 411 0 0 0 1 4 this 3 452  
78 0 0 6 97 370 0 0 0 0 
79 0 0 7 99 415 0 0 0 0 
80 0 0 7 102 423 320 0 0 0 
81 0 0 6 103 411 0 0 0 2 4 this 3 423  4 file 1 412  
82 0 0 4 104 408 0 0 0 1 4 this 3 423  
83 0 0 4 105 408 0 0 0 3 4 this 3 423  5 gamma 1 454  10 overbright 1 370  
84 0 0 6 106 454 0 0 0 1 4 this 3 456  
85 0 0 4 107 408 0 0 0 2 4 this 3 423  3 win 1 458  
86 0 0 4 108 408 0 0 0 2 4 this 3 423  6 camera 1 460  
87 0 0 4 109 408 0 0 0 2 4 this 3 423  6 render 1 460  
88 0 0 4 110 408 0 0 0 2 4 this 3 423  4 flag 1 411  
89 0 0 4 111 408 0 0 0 2 4 this 3 423  4 flag 1 411  
90 0 0 4 112 408 0 0 0 2 4 this 3 423  4 type 1 370  
91 0 0 4 113 408 0 0 0 2 4 this 3 423  4 flag 1 411  
92 0 0 4 114 408 0 0 0 2 4 this 3 423  4 file 1 412  
93 0 0 4 115 408 0 0 0 2 4 this 3 423  4 file 1 412  
94 0 0 4 116 408 0 0 0 2 4 this 3 423  4 flag 1 411  
95 0 0 6 117 411 0 0 0 1 4 this 3 456  
96 0 0 7 118 444 0 0 0 1 4 this 3 456  
97 0 0 4 119 408 0 0 0 1 4 this 3 423  
98 0 0 4 120 408 0 0 0 1 4 this 3 423  
99 0 0 4 121 408 0 0 0 2 4 this 3 423  4 node 1 460  
100 0 0 4 122 408 0 0 0 2 4 this 3 423  4 flag 1 411  
101 0 0 4 123 408 0 0 0 2 4 this 3 423  3 pos 1 438  
102 0 0 4 124 408 0 0 0 2 4 this 3 423  4 mask 1 462  
103 0 0 4 125 408 0 0 0 2 4 this 3 423  5 color 1 466  
104 0 0 4 126 408 0 0 0 3 4 this 3 423  8 filmsize 1 370  7 texsize 1 370  
105 0 0 4 127 408 0 0 0 2 4 this 3 423  4 node 1 444  
106 0 0 7 128 472 0 0 0 1 4 this 3 456  
107 0 0 6 129 370 0 0 0 2 4 this 3 423  6 entnum 1 370  
108 0 0 4 130 408 0 0 0 4 4 this 3 423  8 modelnum 1 370  4 mins 1 429  4 maxs 1 429  
109 0 0 4 131 408 0 0 0 2 4 this 3 423  10 dispatcher 1 473  
110 0 0 4 132 408 0 0 0 3 4 this 3 423  4 name 1 403  4 type 1 476  
111 0 0 4 133 408 0 0 0 2 4 this 3 423  2 ai 1 411  
112 0 0 6 134 411 0 0 0 1 4 this 3 456  
113 0 0 4 135 408 0 0 0 2 4 this 3 423  4 node 1 460  
114 0 0 6 136 411 0 0 0 3 4 this 3 423  5 start 1 438  3 end 1 438  
115 0 0 4 137 408 0 0 0 3 4 this 3 423  7 entname 1 403  4 type 1 476  
116 0 0 6 138 473 0 0 0 2 4 this 3 456  10 targetname 1 403  
117 0 0 6 139 473 0 0 0 2 4 this 3 423  9 classname 1 403  
118 0 0 4 140 408 0 0 0 3 4 this 3 423  4 list 1 473  6 entnum 1 479  
119 0 0 4 141 408 0 0 0 3 4 this 3 423  5 entum 1 370  5 pyent 1 473  
120 0 0 6 142 370 0 0 0 1 4 this 3 456  
121 0 0 6 143 403 0 0 0 3 4 this 3 456  6 entnum 1 370  3 key 1 403  
122 0 0 6 144 455 0 0 0 3 4 this 3 456  6 entnum 1 370  3 key 1 403  
123 0 0 6 145 370 0 0 0 3 4 this 3 456  6 entnum 1 370  3 key 1 403  
124 0 0 7 146 432 0 0 0 3 4 this 3 456  6 entnum 1 370  3 key 1 403  
125 0 0 7 147 480 0 0 0 4 4 this 3 456  6 entnum 1 370  3 key 1 403  5 scale 1 411  
126 0 0 7 148 444 0 0 0 2 4 this 3 456  6 entnum 1 370  
127 0 0 7 149 444 0 0 0 2 4 this 3 456  8 modelnum 1 370  
128 0 0 7 150 420 212 0 0 2 4 this 3 456  6 entnum 1 479  
129 0 0 6 151 370 0 0 0 2 4 this 3 423  3 pos 1 438  
130 0 0 6 151 370 0 0 0 2 4 this 3 423  2 np 1 460  
131 0 0 6 152 370 0 0 0 2 4 this 3 423  3 pos 1 438  
132 0 0 6 153 411 0 0 0 3 4 this 3 456  12 curr_cluster 1 370  7 cluster 1 370  
133 0 0 6 154 411 0 0 0 2 4 this 3 423  6 bounds 1 481  
134 0 0 7 155 481 0 0 0 3 4 this 3 423  13 net_transform 1 484  8 original 1 481  
135 0 0 6 156 411 0 0 0 1 4 this 3 456  
136 0 0 6 157 411 0 0 0 1 4 this 3 456  
137 0 0 4 158 408 0 0 0 1 4 this 3 423  
138 0 0 7 159 444 0 0 0 1 4 this 3 456  
139 0 0 6 160 423 0 0 0 0 
140 0 0 7 166 489 323 0 0 1 6 param0 0 487  
141 0 0 7 166 489 323 0 0 2 4 trav 1 490  6 loader 1 423  
142 0 0 7 165 415 0 0 0 0 
143 0 0 7 171 493 326 0 0 1 6 param0 0 491  
144 0 0 7 171 493 326 0 0 2 4 name 1 403  6 loader 1 423  
145 0 0 7 170 415 0 0 0 0 
146 0 0 7 175 496 329 0 0 1 6 param0 0 494  
147 0 0 7 175 496 329 0 0 1 4 name 1 403  
148 0 0 7 174 415 0 0 0 0 
149 0 0 7 180 499 332 0 0 1 6 param0 0 497  
150 0 0 7 180 499 332 0 0 1 4 name 1 403  
151 0 0 7 179 415 0 0 0 0 
152 0 0 7 184 502 335 0 0 1 6 param0 0 500  
153 0 0 7 184 502 335 0 0 1 4 name 1 403  
154 0 0 7 183 415 0 0 0 0 
155 0 0 7 191 503 341 0 0 0 
156 0 0 7 191 503 341 0 0 1 6 param0 0 504  
157 0 0 4 187 408 0 0 0 3 4 this 3 503  3 key 1 403  5 value 1 403  
158 0 0 4 188 408 0 0 0 3 4 this 3 503  3 inp 1 506  9 important 1 411  
159 0 0 4 189 408 0 0 0 2 4 this 3 503  4 flag 1 370  
160 0 0 6 190 411 0 0 0 2 4 this 3 504  5 other 1 504  
161 0 0 4 200 408 0 0 0 4 4 this 3 509  9 vert_file 1 412  10 pixel_file 1 412  9 geom_file 1 412  
162 0 0 7 201 415 0 0 0 0 
163 0 0 7 195 510 0 0 0 1 4 this 3 509  
164 0 0 6 198 511 0 0 0 1 4 this 3 509  
165 0 0 7 205 514 358 0 0 3 3 gsg 1 512  6 camera 1 460  6 render 1 460  
166 0 0 7 205 514 358 0 0 1 6 param0 0 515  
167 0 0 7 206 527 0 0 221 // This is important because in BSP levels, we must know the GeomNode that is associated with
// each render state. We need to apply the appropriate shader inputs for updating
// with local light sources and ambient cube. 4 4 this 3 514  2 rs 1 519  4 anim 1 522  14 bsp_node_input 1 525  
168 0 0 4 207 408 0 0 0 2 4 this 3 514  2 np 1 460  
169 0 0 4 208 408 0 0 0 1 4 this 3 514  
170 0 0 4 209 408 0 0 0 2 4 this 3 514  4 spec 1 509  
171 0 0 6 210 411 0 0 0 1 4 this 3 515  
172 0 0 7 211 472 0 0 0 1 4 this 3 515  
173 0 0 6 212 528 0 0 0 1 4 this 3 515  
174 0 0 7 213 415 0 0 0 0 
175 0 0 7 216 530 360 0 0 0 
176 0 0 7 219 531 362 0 0 0 
177 0 0 7 222 532 364 0 0 0 
168
365 13 TextureStages 0 141313 13 TextureStages 13 TextureStages 0 0 0 1 188 189 0 10 178 179 180 181 182 183 184 185 186 187 0 0 0 0 0 752
/**
 * This simple interface maintains a single TextureStage object for each unique name.
 * It avoids the creation of duplicate TextureStages with the same name, which
 * reduces texture swapping and draw call overhead.
 *
 * If using our shader system, you should always use this interface to get TextureStages.
 * You are not required to change any properties on the returned TextureStage, as the shader
 * specification will know what to do with the TextureStage from the name.
 * 
 * For example, you do not need to call TextureStage::set_mode() or NodePath::set_tex_gen().
 * If you apply a texture to a node with the get_normalmap() stage, the shader specification
 * will know that the texture you supplied is to be treated as a normal map.
 */

366 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 190 201 0 10 191 192 193 194 195 196 197 198 199 200 0 0 1 0 367 0 0 0 0 0

367 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

368 17 BSPMaterialAttrib 0 141313 17 BSPMaterialAttrib 17 BSPMaterialAttrib 0 0 0 0 207 1 533 5 202 203 204 205 206 0 0 1 0 369 0 0 0 0 0

369 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

370 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

371 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 209 212 0 3 208 210 211 0 0 1 0 367 0 0 0 0 0

372 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 214 217 0 3 213 215 216 0 0 1 0 371 0 0 0 0 0

373 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 219 223 0 4 218 220 221 222 0 0 1 0 371 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

374 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 225 229 0 4 224 226 227 228 0 0 1 0 371 0 0 0 0 0

375 10 PackResult 0 141313 10 PackResult 10 PackResult 0 0 0 1 233 234 0 3 230 231 232 0 0 0 0 0 0

376 15 TextureLocation 0 141313 15 TextureLocation 15 TextureLocation 0 0 0 1 240 241 0 5 235 236 237 238 239 0 0 0 0 0 0

377 13 TexturePacker 0 141313 13 TexturePacker 13 TexturePacker 0 0 0 0 251 0 9 242 243 244 245 246 247 248 249 250 0 0 0 0 0 0

378 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 260 1 534 8 252 253 254 255 256 257 258 259 0 0 1 0 369 0 0 0 1 379 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

379 0 0 794624 15 BSPFaceAttrib:: 0 378 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

380 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 261 320 0 58 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 0 0 0 0 1 381 58
/**
 * Loads and handles the operations of PBSP files.
 */

381 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 380 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

382 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 322 323 0 1 321 0 0 1 0 383 0 0 0 0 0

383 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

384 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 325 326 0 1 324 0 0 1 0 385 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

385 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

386 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 328 329 0 1 327 0 0 1 0 385 0 0 0 0 0

387 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 331 332 0 1 330 0 0 1 0 388 0 0 0 0 0

388 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

389 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 334 335 0 1 333 0 0 1 0 388 0 0 0 0 0

390 18 ShaderPermutations 0 141313 18 ShaderPermutations 18 ShaderPermutations 0 0 0 1 340 341 0 4 336 337 338 339 0 0 0 0 0 97
/**
 * Represents a list of #defines and variable inputs to a shader that is being generated.
 */

391 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 0 348 0 2 346 347 0 0 2 3 392 342 343 3 393 344 345 0 0 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

392 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

393 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

394 19 PSSMShaderGenerator 0 141313 19 PSSMShaderGenerator 19 PSSMShaderGenerator 0 0 0 1 349 358 0 8 350 351 352 353 354 355 356 357 0 0 1 0 395 0 0 0 0 0

395 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

396 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 359 360 0 0 0 0 1 0 391 0 0 0 0 0

397 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 361 362 0 0 0 0 1 0 391 0 0 0 0 0

398 16 UnlitGenericSpec 0 141313 16 UnlitGenericSpec 16 UnlitGenericSpec 0 0 0 1 363 364 0 0 0 0 1 0 391 0 0 0 0 160
/**
 * Shader that only supports a basetexture, no fancy lighting effects or anything.
 * Could be used for UI elements, emissive materials, particles, etc.
 */

399 15 TextureStages * 0 8576 15 TextureStages * 15 TextureStages * 0 0 365 0 0 0 0 0 0 0 0 0 0

400 21 TextureStages const * 0 8576 21 TextureStages const * 21 TextureStages const * 0 0 401 0 0 0 0 0 0 0 0 0 0

401 19 TextureStages const 0 8832 19 TextureStages const 19 TextureStages const 0 0 365 0 0 0 0 0 0 0 0 0 0

402 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 336
/**
 * Defines the properties of a named stage of the multitexture pipeline.  The
 * TextureAttrib will associated a number of these stages with Texture
 * objects, and the GSG will render geometry by sorting all of the currently
 * active TextureStages in order and then issuing the appropriate rendering
 * calls to activate them.
 */

403 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

404 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 402 0 0 0 0 0 0 0 0 0 0

405 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 406 0 0 0 0 0 0 0 0 0 0

406 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 366 0 0 0 0 0 0 0 0 0 0

407 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 366 0 0 0 0 0 0 0 0 0 0

408 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

409 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

410 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 409 0 0 0 0 0 0 0 0 0 0

411 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

412 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 413 0 0 0 0 0 0 0 0 0 0

413 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 409 0 0 0 0 0 0 0 0 0 0

414 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

415 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 414 0 0 0 0 0 0 0 0 0 0

416 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 369 0 0 0 0 0 0 0 0 0 0

417 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 416 0 0 0 0 0 0 0 0 0 0

418 25 BSPMaterialAttrib const * 0 8576 25 BSPMaterialAttrib const * 25 BSPMaterialAttrib const * 0 0 419 0 0 0 0 0 0 0 0 0 0

419 23 BSPMaterialAttrib const 0 8832 23 BSPMaterialAttrib const 23 BSPMaterialAttrib const 0 0 368 0 0 0 0 0 0 0 0 0 0

420 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 371 0 0 0 0 0 0 0 0 0 0

421 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 422 0 0 0 0 0 0 0 0 0 0

422 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 371 0 0 0 0 0 0 0 0 0 0

423 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 380 0 0 0 0 0 0 0 0 0 0

424 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 372 0 0 0 0 0 0 0 0 0 0

425 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 426 0 0 0 0 0 0 0 0 0 0

426 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 372 0 0 0 0 0 0 0 0 0 0

427 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 428 0 0 0 0 0 0 0 0 0 0

428 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

429 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 427 0 0 0 0 0 0 0 0 0 0

430 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 431 0 0 0 0 0 0 0 0 0 0

431 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

432 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 430 0 0 0 0 0 0 0 0 0 0

433 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 373 0 0 0 0 0 0 0 0 0 0

434 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 435 0 0 0 0 0 0 0 0 0 0

435 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 373 0 0 0 0 0 0 0 0 0 0

436 11 BoundingBox 0 2048 11 BoundingBox 11 BoundingBox 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

437 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 436 0 0 0 0 0 0 0 0 0 0

438 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 439 0 0 0 0 0 0 0 0 0 0

439 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 427 0 0 0 0 0 0 0 0 0 0

440 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 374 0 0 0 0 0 0 0 0 0 0

441 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 442 0 0 0 0 0 0 0 0 0 0

442 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 374 0 0 0 0 0 0 0 0 0 0

443 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

444 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 443 0 0 0 0 0 0 0 0 0 0

445 18 PackResult const * 0 8576 18 PackResult const * 18 PackResult const * 0 0 446 0 0 0 0 0 0 0 0 0 0

446 16 PackResult const 0 8832 16 PackResult const 16 PackResult const 0 0 375 0 0 0 0 0 0 0 0 0 0

447 12 PackResult * 0 8576 12 PackResult * 12 PackResult * 0 0 375 0 0 0 0 0 0 0 0 0 0

448 23 TextureLocation const * 0 8576 23 TextureLocation const * 23 TextureLocation const * 0 0 449 0 0 0 0 0 0 0 0 0 0

449 21 TextureLocation const 0 8832 21 TextureLocation const 21 TextureLocation const 0 0 376 0 0 0 0 0 0 0 0 0 0

450 17 TextureLocation * 0 8576 17 TextureLocation * 17 TextureLocation * 0 0 376 0 0 0 0 0 0 0 0 0 0

451 15 TexturePacker * 0 8576 15 TexturePacker * 15 TexturePacker * 0 0 377 0 0 0 0 0 0 0 0 0 0

452 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 453 0 0 0 0 0 0 0 0 0 0

453 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 378 0 0 0 0 0 0 0 0 0 0

454 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 455 0 0 0 0 0 0 0 0 0 0

455 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

456 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 457 0 0 0 0 0 0 0 0 0 0

457 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 380 0 0 0 0 0 0 0 0 0 0

458 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 459 0 0 0 0 0 0 0 0 0 0

459 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

460 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 461 0 0 0 0 0 0 0 0 0 0

461 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 443 0 0 0 0 0 0 0 0 0 0

462 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 463 0 0 0 0 0 0 0 0 0 0

463 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 464 0 0 0 0 0 0 0 0 0 0

464 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 465 0 0 0 0 0 0 0 0 0 0

465 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

466 14 LColor const * 0 8576 14 LColor const * 14 LColor const * 0 0 467 0 0 0 0 0 0 0 0 0 0

467 12 LColor const 0 8832 12 LColor const 12 LColor const 0 0 468 0 0 0 0 0 0 0 0 0 0

468 6 LColor 0 2105344 6 LColor 6 LColor 0 0 469 0 0 0 0 0 0 0 0 0 0

469 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 470 0 0 0 0 0 0 0 0 0 0

470 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

471 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

472 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 471 0 0 0 0 0 0 0 0 0 0

473 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 474 0 0 0 0 0 0 0 0 0 0

474 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 475 0 0 0 0 0 0 0 0 0 0

475 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

476 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 477 0 0 0 0 0 0 0 0 0 0

477 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 478 0 0 0 0 0 0 0 0 0 0

478 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

479 9 int const 0 8832 9 int const 9 int const 0 0 370 0 0 0 0 0 0 0 0 0 0

480 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 468 0 0 0 0 0 0 0 0 0 0

481 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 482 0 0 0 0 0 0 0 0 0 0

482 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 483 0 0 0 0 0 0 0 0 0 0

483 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

484 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 485 0 0 0 0 0 0 0 0 0 0

485 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 486 0 0 0 0 0 0 0 0 0 0

486 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

487 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 488 0 0 0 0 0 0 0 0 0 0

488 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 382 0 0 0 0 0 0 0 0 0 0

489 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 382 0 0 0 0 0 0 0 0 0 0

490 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 383 0 0 0 0 0 0 0 0 0 0

491 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 492 0 0 0 0 0 0 0 0 0 0

492 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 384 0 0 0 0 0 0 0 0 0 0

493 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 384 0 0 0 0 0 0 0 0 0 0

494 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 495 0 0 0 0 0 0 0 0 0 0

495 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 386 0 0 0 0 0 0 0 0 0 0

496 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 386 0 0 0 0 0 0 0 0 0 0

497 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 498 0 0 0 0 0 0 0 0 0 0

498 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 387 0 0 0 0 0 0 0 0 0 0

499 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 387 0 0 0 0 0 0 0 0 0 0

500 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 501 0 0 0 0 0 0 0 0 0 0

501 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 389 0 0 0 0 0 0 0 0 0 0

502 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 389 0 0 0 0 0 0 0 0 0 0

503 20 ShaderPermutations * 0 8576 20 ShaderPermutations * 20 ShaderPermutations * 0 0 390 0 0 0 0 0 0 0 0 0 0

504 26 ShaderPermutations const * 0 8576 26 ShaderPermutations const * 26 ShaderPermutations const * 0 0 505 0 0 0 0 0 0 0 0 0 0

505 24 ShaderPermutations const 0 8832 24 ShaderPermutations const 24 ShaderPermutations const 0 0 390 0 0 0 0 0 0 0 0 0 0

506 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 507 0 0 0 0 0 0 0 0 0 0

507 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 508 0 0 0 0 0 0 0 0 0 0

508 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

509 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 391 0 0 0 0 0 0 0 0 0 0

510 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 392 0 0 0 0 0 0 0 0 0 0

511 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 393 0 0 0 0 0 0 0 0 0 0

512 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 513 0 0 0 0 0 0 0 0 0 0

513 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

514 21 PSSMShaderGenerator * 0 8576 21 PSSMShaderGenerator * 21 PSSMShaderGenerator * 0 0 394 0 0 0 0 0 0 0 0 0 0

515 27 PSSMShaderGenerator const * 0 8576 27 PSSMShaderGenerator const * 27 PSSMShaderGenerator const * 0 0 516 0 0 0 0 0 0 0 0 0 0

516 25 PSSMShaderGenerator const 0 8832 25 PSSMShaderGenerator const 25 PSSMShaderGenerator const 0 0 394 0 0 0 0 0 0 0 0 0 0

517 18 ShaderAttrib const 0 8832 18 ShaderAttrib const 18 ShaderAttrib const 0 0 518 0 0 0 0 0 0 0 0 0 0

518 12 ShaderAttrib 0 2048 12 ShaderAttrib 12 ShaderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

519 19 RenderState const * 0 8576 19 RenderState const * 19 RenderState const * 0 0 520 0 0 0 0 0 0 0 0 0 0

520 17 RenderState const 0 8832 17 RenderState const 17 RenderState const 0 0 521 0 0 0 0 0 0 0 0 0 0

521 11 RenderState 0 2048 11 RenderState 11 RenderState 0 0 0 0 0 0 0 0 0 0 0 0 340
/**
 * This represents a unique collection of RenderAttrib objects that correspond
 * to a particular renderable state.
 *
 * You should not attempt to create or modify a RenderState object directly.
 * Instead, call one of the make() functions to create one for you.  And
 * instead of modifying a RenderState object, create a new one.
 */

522 31 GeomVertexAnimationSpec const * 0 8576 31 GeomVertexAnimationSpec const * 31 GeomVertexAnimationSpec const * 0 0 523 0 0 0 0 0 0 0 0 0 0

523 29 GeomVertexAnimationSpec const 0 8832 29 GeomVertexAnimationSpec const 29 GeomVertexAnimationSpec const 0 0 524 0 0 0 0 0 0 0 0 0 0

524 23 GeomVertexAnimationSpec 0 2048 23 GeomVertexAnimationSpec 23 GeomVertexAnimationSpec 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * This object describes how the vertex animation, if any, represented in a
 * GeomVertexData is encoded.
 *
 * Vertex animation includes soft-skinned skeleton animation and morphs (blend
 * shapes), and might be performed on the CPU by Panda, or passed down to the
 * graphics backed to be performed on the hardware (depending on the
 * hardware's advertised capabilities).
 *
 * Changing this setting doesn't by itself change the way the animation is
 * actually performed; this just specifies how the vertices are set up to be
 * animated.
 */

525 19 nodeshaderinput_t * 0 8576 19 nodeshaderinput_t * 19 nodeshaderinput_t * 0 0 526 0 0 0 0 0 0 0 0 0 0

526 17 nodeshaderinput_t 0 1024 17 nodeshaderinput_t 17 nodeshaderinput_t 0 0 0 0 0 0 0 0 0 0 0 0 0

527 20 ShaderAttrib const * 0 8576 20 ShaderAttrib const * 20 ShaderAttrib const * 0 0 517 0 0 0 0 0 0 0 0 0 0

528 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 529 0 0 0 0 0 0 0 0 0 0

529 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

530 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 396 0 0 0 0 0 0 0 0 0 0

531 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 397 0 0 0 0 0 0 0 0 0 0

532 18 UnlitGenericSpec * 0 8576 18 UnlitGenericSpec * 18 UnlitGenericSpec * 0 0 398 0 0 0 0 0 0 0 0 0 0

0
2
533 10 class_slot 0 2 0 205 0 0 0 0 0 0 0 29 BSPMaterialAttrib::class_slot 0

534 10 class_slot 0 2 0 258 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

0
