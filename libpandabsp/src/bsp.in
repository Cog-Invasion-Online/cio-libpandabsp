1553530802
3 3
3 bsp 4 t5GT 3 bsp 
236
224 3 get 0 4 460 18 TextureStages::get 0 2 3 4 0
159
static TextureStage *TextureStages::get(std::string const &name);
static TextureStage *TextureStages::get(std::string const &name, std::string const &uv_name);

225 15 get_basetexture 0 4 460 30 TextureStages::get_basetexture 0 1 5 0
58
static TextureStage *TextureStages::get_basetexture(void);

226 12 get_lightmap 0 4 460 27 TextureStages::get_lightmap 0 1 6 0
55
static TextureStage *TextureStages::get_lightmap(void);

227 19 get_bumped_lightmap 0 4 460 34 TextureStages::get_bumped_lightmap 0 1 7 0
62
static TextureStage *TextureStages::get_bumped_lightmap(void);

228 13 get_spheremap 0 4 460 28 TextureStages::get_spheremap 0 1 8 0
56
static TextureStage *TextureStages::get_spheremap(void);

229 11 get_cubemap 0 4 460 26 TextureStages::get_cubemap 0 1 9 0
54
static TextureStage *TextureStages::get_cubemap(void);

230 13 get_normalmap 0 4 460 28 TextureStages::get_normalmap 0 1 10 0
56
static TextureStage *TextureStages::get_normalmap(void);

231 13 get_heightmap 0 4 460 28 TextureStages::get_heightmap 0 1 11 0
56
static TextureStage *TextureStages::get_heightmap(void);

232 12 get_glossmap 0 4 460 27 TextureStages::get_glossmap 0 1 12 0
55
static TextureStage *TextureStages::get_glossmap(void);

233 11 get_glowmap 0 4 460 26 TextureStages::get_glowmap 0 1 13 0
54
static TextureStage *TextureStages::get_glowmap(void);

234 13 TextureStages 0 4 460 28 TextureStages::TextureStages 0 2 1 2 0
122
inline TextureStages::TextureStages(void) = default;
inline TextureStages::TextureStages(TextureStages const &) = default;

235 14 ~TextureStages 0 4 460 29 TextureStages::~TextureStages 0 0 0
36
TextureStages::~TextureStages(void);

236 11 BSPMaterial 0 4 461 24 BSPMaterial::BSPMaterial 0 2 14 15 0
137
inline explicit BSPMaterial::BSPMaterial(std::string const &name = "material");
inline BSPMaterial::BSPMaterial(BSPMaterial const &copy);

237 10 operator = 0 4 461 23 BSPMaterial::operator = 0 1 16 0
61
inline void BSPMaterial::operator =(BSPMaterial const &copy);

238 12 set_keyvalue 0 4 461 25 BSPMaterial::set_keyvalue 0 1 17 0
88
inline void BSPMaterial::set_keyvalue(std::string const &key, std::string const &value);

239 12 get_keyvalue 0 4 461 25 BSPMaterial::get_keyvalue 0 1 18 0
75
inline std::string BSPMaterial::get_keyvalue(std::string const &key) const;

240 16 get_keyvalue_int 0 4 461 29 BSPMaterial::get_keyvalue_int 0 1 19 0
71
inline int BSPMaterial::get_keyvalue_int(std::string const &key) const;

241 18 get_keyvalue_float 0 4 461 31 BSPMaterial::get_keyvalue_float 0 1 20 0
75
inline float BSPMaterial::get_keyvalue_float(std::string const &key) const;

242 10 set_shader 0 4 461 23 BSPMaterial::set_shader 0 1 21 0
68
inline void BSPMaterial::set_shader(std::string const &shader_name);

243 10 get_shader 0 4 461 23 BSPMaterial::get_shader 0 1 22 0
55
inline std::string BSPMaterial::get_shader(void) const;

244 8 get_file 0 4 461 21 BSPMaterial::get_file 0 1 23 0
50
inline Filename BSPMaterial::get_file(void) const;

245 12 has_keyvalue 0 4 461 25 BSPMaterial::has_keyvalue 0 1 24 0
68
inline bool BSPMaterial::has_keyvalue(std::string const &key) const;

246 15 has_env_cubemap 0 4 461 28 BSPMaterial::has_env_cubemap 0 1 25 0
53
inline bool BSPMaterial::has_env_cubemap(void) const;

247 16 has_transparency 0 4 461 29 BSPMaterial::has_transparency 0 1 26 0
54
inline bool BSPMaterial::has_transparency(void) const;

248 16 get_surface_prop 0 4 461 29 BSPMaterial::get_surface_prop 0 1 27 0
61
inline std::string BSPMaterial::get_surface_prop(void) const;

249 12 get_contents 0 4 461 25 BSPMaterial::get_contents 0 1 28 0
57
inline std::string BSPMaterial::get_contents(void) const;

250 13 get_from_file 0 4 461 26 BSPMaterial::get_from_file 0 1 29 0
75
static BSPMaterial const *BSPMaterial::get_from_file(Filename const &file);

251 14 get_class_type 0 4 461 27 BSPMaterial::get_class_type 0 1 30 0
52
static TypeHandle BSPMaterial::get_class_type(void);

252 12 ~BSPMaterial 0 4 461 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

253 4 make 0 4 463 23 BSPMaterialAttrib::make 0 1 31 0
86
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make(BSPMaterial const *mat);

254 20 make_override_shader 0 4 463 39 BSPMaterialAttrib::make_override_shader 0 1 32 0
102
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_override_shader(BSPMaterial const *mat);

255 12 make_default 0 4 463 31 BSPMaterialAttrib::make_default 0 1 33 0
76
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_default(void);

256 19 get_override_shader 0 4 463 38 BSPMaterialAttrib::get_override_shader 0 1 34 0
70
inline std::string BSPMaterialAttrib::get_override_shader(void) const;

257 19 has_override_shader 0 4 463 38 BSPMaterialAttrib::has_override_shader 0 1 35 0
63
inline bool BSPMaterialAttrib::has_override_shader(void) const;

258 12 get_material 0 4 463 31 BSPMaterialAttrib::get_material 0 1 36 0
70
inline BSPMaterial const *BSPMaterialAttrib::get_material(void) const;

259 14 get_class_slot 0 4 463 33 BSPMaterialAttrib::get_class_slot 0 1 37 0
51
static int BSPMaterialAttrib::get_class_slot(void);

260 14 get_class_type 0 4 463 33 BSPMaterialAttrib::get_class_type 0 1 38 0
58
static TypeHandle BSPMaterialAttrib::get_class_type(void);

261 18 ~BSPMaterialAttrib 0 4 463 37 BSPMaterialAttrib::~BSPMaterialAttrib 0 0 0
44
BSPMaterialAttrib::~BSPMaterialAttrib(void);

262 14 get_class_type 0 4 466 27 CBaseEntity::get_class_type 0 1 41 0
52
static TypeHandle CBaseEntity::get_class_type(void);

263 11 CBaseEntity 0 4 466 24 CBaseEntity::CBaseEntity 0 2 39 40 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

264 10 get_entnum 0 4 466 23 CBaseEntity::get_entnum 0 1 42 0
40
int CBaseEntity::get_entnum(void) const;

265 10 get_loader 0 4 466 23 CBaseEntity::get_loader 0 1 43 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

266 12 ~CBaseEntity 0 4 466 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

267 14 get_class_type 0 4 467 28 CPointEntity::get_class_type 0 1 46 0
53
static TypeHandle CPointEntity::get_class_type(void);

268 12 CPointEntity 0 4 467 26 CPointEntity::CPointEntity 0 2 44 45 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

269 10 get_origin 0 4 467 24 CPointEntity::get_origin 0 1 47 0
45
LPoint3 CPointEntity::get_origin(void) const;

270 10 get_angles 0 4 467 24 CPointEntity::get_angles 0 1 48 0
46
LVector3 CPointEntity::get_angles(void) const;

271 13 ~CPointEntity 0 4 467 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

272 14 get_class_type 0 4 468 29 CBoundsEntity::get_class_type 0 1 51 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

273 13 CBoundsEntity 0 4 468 28 CBoundsEntity::CBoundsEntity 0 2 49 50 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

274 10 get_bounds 0 4 468 25 CBoundsEntity::get_bounds 0 1 52 0
51
BoundingBox *CBoundsEntity::get_bounds(void) const;

275 9 is_inside 0 4 468 24 CBoundsEntity::is_inside 0 1 53 0
63
inline bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

276 13 fillin_bounds 0 4 468 28 CBoundsEntity::fillin_bounds 0 1 54 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

277 14 ~CBoundsEntity 0 4 468 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

278 14 get_class_type 0 4 469 28 CBrushEntity::get_class_type 0 1 57 0
53
static TypeHandle CBrushEntity::get_class_type(void);

279 12 CBrushEntity 0 4 469 26 CBrushEntity::CBrushEntity 0 2 55 56 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

280 12 get_modelnum 0 4 469 26 CBrushEntity::get_modelnum 0 1 58 0
43
int CBrushEntity::get_modelnum(void) const;

281 12 get_model_np 0 4 469 26 CBrushEntity::get_model_np 0 1 59 0
48
NodePath CBrushEntity::get_model_np(void) const;

282 16 get_model_bounds 0 4 469 30 CBrushEntity::get_model_bounds 0 1 60 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

283 13 ~CBrushEntity 0 4 469 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

284 9 get_width 0 4 470 21 PackResult::get_width 0 1 62 0
45
inline int PackResult::get_width(void) const;

285 10 get_height 0 4 470 22 PackResult::get_height 0 1 63 0
46
inline int PackResult::get_height(void) const;

286 15 get_unused_area 0 4 470 27 PackResult::get_unused_area 0 1 64 0
51
inline int PackResult::get_unused_area(void) const;

287 10 PackResult 0 4 470 22 PackResult::PackResult 0 1 61 0
60
inline PackResult::PackResult(PackResult const &) = default;

288 11 ~PackResult 0 4 470 23 PackResult::~PackResult 0 0 0
30
PackResult::~PackResult(void);

289 5 get_x 0 4 471 22 TextureLocation::get_x 0 1 66 0
46
inline int TextureLocation::get_x(void) const;

290 5 get_y 0 4 471 22 TextureLocation::get_y 0 1 67 0
46
inline int TextureLocation::get_y(void) const;

291 9 get_width 0 4 471 26 TextureLocation::get_width 0 1 68 0
50
inline int TextureLocation::get_width(void) const;

292 10 get_height 0 4 471 27 TextureLocation::get_height 0 1 69 0
51
inline int TextureLocation::get_height(void) const;

293 11 get_rotated 0 4 471 28 TextureLocation::get_rotated 0 1 70 0
53
inline bool TextureLocation::get_rotated(void) const;

294 15 TextureLocation 0 4 471 32 TextureLocation::TextureLocation 0 1 65 0
75
inline TextureLocation::TextureLocation(TextureLocation const &) = default;

295 16 ~TextureLocation 0 4 471 33 TextureLocation::~TextureLocation 0 0 0
40
TextureLocation::~TextureLocation(void);

296 15 getTextureCount 0 6 472 30 TexturePacker::getTextureCount 0 1 71 0
53
virtual int TexturePacker::getTextureCount(void) = 0;

297 15 setTextureCount 0 6 472 30 TexturePacker::setTextureCount 0 1 72 35
// number of textures to consider..
60
virtual void TexturePacker::setTextureCount(int tcount) = 0;

298 10 addTexture 0 6 472 25 TexturePacker::addTexture 0 1 73 21
// add textures 0 - n
61
virtual void TexturePacker::addTexture(int wid, int hit) = 0;

299 15 wouldTextureFit 0 6 472 30 TexturePacker::wouldTextureFit 0 1 74 0
135
virtual bool TexturePacker::wouldTextureFit(int wid, int hit, bool forcePowerOfTwo, bool onePixelBorder, int max_wid, int max_hit) = 0;

300 13 addNewTexture 0 6 472 28 TexturePacker::addNewTexture 0 1 75 0
64
virtual void TexturePacker::addNewTexture(int wid, int hit) = 0;

301 12 packTextures 0 6 472 27 TexturePacker::packTextures 0 1 76 74
// pack the textures, the return code is the amount of wasted/unused area.
94
virtual PackResult TexturePacker::packTextures(bool forcePowerOfTwo, bool onePixelBorder) = 0;

302 18 getTextureLocation 0 6 472 33 TexturePacker::getTextureLocation 0 1 77 58
// returns true if the texture has been rotated 90 degrees
73
virtual TextureLocation TexturePacker::getTextureLocation(int index) = 0;

303 19 createTexturePacker 0 4 472 34 TexturePacker::createTexturePacker 0 1 78 0
63
static TexturePacker *TexturePacker::createTexturePacker(void);

304 20 releaseTexturePacker 0 4 472 35 TexturePacker::releaseTexturePacker 0 1 79 0
67
static void TexturePacker::releaseTexturePacker(TexturePacker *tp);

305 14 ~TexturePacker 0 4 472 29 TexturePacker::~TexturePacker 0 0 0
36
TexturePacker::~TexturePacker(void);

306 4 make 0 4 473 19 BSPFaceAttrib::make 0 1 80 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

307 12 make_default 0 4 473 27 BSPFaceAttrib::make_default 0 1 81 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

308 15 make_ignore_pvs 0 4 473 30 BSPFaceAttrib::make_ignore_pvs 0 1 82 0
75
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_ignore_pvs(void);

309 12 get_material 0 4 473 27 BSPFaceAttrib::get_material 0 1 83 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

310 13 get_face_type 0 4 473 28 BSPFaceAttrib::get_face_type 0 1 84 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

311 14 get_ignore_pvs 0 4 473 29 BSPFaceAttrib::get_ignore_pvs 0 1 85 0
54
inline bool BSPFaceAttrib::get_ignore_pvs(void) const;

312 14 get_class_slot 0 4 473 29 BSPFaceAttrib::get_class_slot 0 1 86 0
47
static int BSPFaceAttrib::get_class_slot(void);

313 14 get_class_type 0 4 473 29 BSPFaceAttrib::get_class_type 0 1 87 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

314 14 ~BSPFaceAttrib 0 4 473 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

315 9 BSPLoader 0 4 475 20 BSPLoader::BSPLoader 0 1 88 0
27
BSPLoader::BSPLoader(void);

316 4 read 0 4 475 15 BSPLoader::read 0 1 89 0
43
bool BSPLoader::read(Filename const &file);

317 16 do_optimizations 0 4 475 27 BSPLoader::do_optimizations 0 1 90 0
39
void BSPLoader::do_optimizations(void);

318 9 set_gamma 0 4 475 20 BSPLoader::set_gamma 0 1 91 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

319 9 get_gamma 0 4 475 20 BSPLoader::get_gamma 0 1 92 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

320 7 set_win 0 4 475 18 BSPLoader::set_win 0 1 93 0
45
void BSPLoader::set_win(GraphicsWindow *win);

321 10 set_camera 0 4 475 21 BSPLoader::set_camera 0 1 94 0
51
void BSPLoader::set_camera(NodePath const &camera);

322 10 set_render 0 4 475 21 BSPLoader::set_render 0 1 95 0
51
void BSPLoader::set_render(NodePath const &render);

323 20 set_shader_generator 0 4 475 31 BSPLoader::set_shader_generator 0 1 96 0
64
void BSPLoader::set_shader_generator(BSPShaderGenerator *shgen);

324 19 set_want_visibility 0 4 475 30 BSPLoader::set_want_visibility 0 1 97 0
47
void BSPLoader::set_want_visibility(bool flag);

325 18 set_want_lightmaps 0 4 475 29 BSPLoader::set_want_lightmaps 0 1 98 0
46
void BSPLoader::set_want_lightmaps(bool flag);

326 16 set_physics_type 0 4 475 27 BSPLoader::set_physics_type 0 1 99 0
43
void BSPLoader::set_physics_type(int type);

327 19 set_visualize_leafs 0 4 475 30 BSPLoader::set_visualize_leafs 0 1 100 0
47
void BSPLoader::set_visualize_leafs(bool flag);

328 18 set_materials_file 0 4 475 29 BSPLoader::set_materials_file 0 1 101 0
57
void BSPLoader::set_materials_file(Filename const &file);

329 13 set_wireframe 0 4 475 24 BSPLoader::set_wireframe 0 1 102 0
41
void BSPLoader::set_wireframe(bool flag);

330 13 get_wireframe 0 4 475 24 BSPLoader::get_wireframe 0 1 103 0
49
inline bool BSPLoader::get_wireframe(void) const;

331 10 get_camera 0 4 475 21 BSPLoader::get_camera 0 1 104 0
50
inline NodePath BSPLoader::get_camera(void) const;

332 11 trace_decal 0 4 475 22 BSPLoader::trace_decal 0 1 105 0
158
inline NodePath BSPLoader::trace_decal(std::string const &decal_material, LPoint2 const &decal_scale, float rotate, LPoint3 const &start, LPoint3 const &end);

333 27 get_closest_cubemap_texture 0 4 475 38 BSPLoader::get_closest_cubemap_texture 0 1 106 0
68
Texture *BSPLoader::get_closest_cubemap_texture(LPoint3 const &pos);

334 14 build_cubemaps 0 4 475 25 BSPLoader::build_cubemaps 0 1 107 0
37
void BSPLoader::build_cubemaps(void);

335 16 set_want_shadows 0 4 475 27 BSPLoader::set_want_shadows 0 1 108 0
44
void BSPLoader::set_want_shadows(bool flag);

336 14 set_shadow_dir 0 4 475 25 BSPLoader::set_shadow_dir 0 1 109 0
52
void BSPLoader::set_shadow_dir(LVector3 const &dir);

337 16 set_shadow_color 0 4 475 27 BSPLoader::set_shadow_color 0 1 110 0
54
void BSPLoader::set_shadow_color(LColor const &color);

338 16 extract_modelnum 0 4 475 27 BSPLoader::extract_modelnum 0 1 111 0
44
int BSPLoader::extract_modelnum(int entnum);

339 16 get_model_bounds 0 4 475 27 BSPLoader::get_model_bounds 0 1 112 0
77
void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

340 28 set_server_entity_dispatcher 0 4 475 39 BSPLoader::set_server_entity_dispatcher 0 1 113 0
67
void BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

341 27 link_server_entity_to_class 0 4 475 38 BSPLoader::link_server_entity_to_class 0 1 114 0
89
void BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

342 6 set_ai 0 4 475 17 BSPLoader::set_ai 0 1 115 0
32
void BSPLoader::set_ai(bool ai);

343 5 is_ai 0 4 475 16 BSPLoader::is_ai 0 1 116 0
41
inline bool BSPLoader::is_ai(void) const;

344 10 trace_line 0 4 475 21 BSPLoader::trace_line 0 1 117 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

345 9 clip_line 0 4 475 20 BSPLoader::clip_line 0 1 118 0
71
LPoint3 BSPLoader::clip_line(LPoint3 const &start, LPoint3 const &end);

346 20 link_entity_to_class 0 4 475 31 BSPLoader::link_entity_to_class 0 1 119 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

347 28 get_py_entity_by_target_name 0 4 475 39 BSPLoader::get_py_entity_by_target_name 0 1 120 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

348 17 find_all_entities 0 4 475 28 BSPLoader::find_all_entities 0 1 121 0
69
PyObject *BSPLoader::find_all_entities(std::string const &classname);

349 20 get_entity_keyvalues 0 4 475 31 BSPLoader::get_entity_keyvalues 0 1 122 0
71
void BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

350 18 link_cent_to_pyent 0 4 475 29 BSPLoader::link_cent_to_pyent 0 1 123 0
63
void BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

351 16 remove_py_entity 0 4 475 27 BSPLoader::remove_py_entity 0 1 124 0
48
void BSPLoader::remove_py_entity(PyObject *ent);

352 16 get_num_entities 0 4 475 27 BSPLoader::get_num_entities 0 1 125 0
51
inline int BSPLoader::get_num_entities(void) const;

353 16 get_entity_value 0 4 475 27 BSPLoader::get_entity_value 0 1 126 0
75
std::string BSPLoader::get_entity_value(int entnum, char const *key) const;

354 22 get_entity_value_float 0 4 475 33 BSPLoader::get_entity_value_float 0 1 127 0
75
float BSPLoader::get_entity_value_float(int entnum, char const *key) const;

355 20 get_entity_value_int 0 4 475 31 BSPLoader::get_entity_value_int 0 1 128 0
71
int BSPLoader::get_entity_value_int(int entnum, char const *key) const;

356 23 get_entity_value_vector 0 4 475 34 BSPLoader::get_entity_value_vector 0 1 129 0
79
LVector3 BSPLoader::get_entity_value_vector(int entnum, char const *key) const;

357 22 get_entity_value_color 0 4 475 33 BSPLoader::get_entity_value_color 0 1 130 0
95
LColor BSPLoader::get_entity_value_color(int entnum, char const *key, bool scale = true) const;

358 10 get_entity 0 4 475 21 BSPLoader::get_entity 0 1 131 0
49
NodePath BSPLoader::get_entity(int entnum) const;

359 9 get_model 0 4 475 20 BSPLoader::get_model 0 1 132 0
50
NodePath BSPLoader::get_model(int modelnum) const;

360 12 get_c_entity 0 4 475 23 BSPLoader::get_c_entity 0 1 133 0
61
CBaseEntity *BSPLoader::get_c_entity(int const entnum) const;

361 9 find_leaf 0 4 475 20 BSPLoader::find_leaf 0 2 134 135 0
98
inline int BSPLoader::find_leaf(NodePath const &np);
int BSPLoader::find_leaf(LPoint3 const &pos);

362 9 find_node 0 4 475 20 BSPLoader::find_node 0 1 136 0
45
int BSPLoader::find_node(LPoint3 const &pos);

363 18 is_cluster_visible 0 4 475 29 BSPLoader::is_cluster_visible 0 1 137 0
72
bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

364 15 pvs_bounds_test 0 4 475 26 BSPLoader::pvs_bounds_test 0 1 138 0
71
bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds);

365 15 make_net_bounds 0 4 475 26 BSPLoader::make_net_bounds 0 1 139 0
147
ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

366 16 has_active_level 0 4 475 27 BSPLoader::has_active_level 0 1 140 0
52
inline bool BSPLoader::has_active_level(void) const;

367 14 has_visibility 0 4 475 25 BSPLoader::has_visibility 0 1 141 0
50
inline bool BSPLoader::has_visibility(void) const;

368 7 cleanup 0 4 475 18 BSPLoader::cleanup 0 1 142 0
30
void BSPLoader::cleanup(void);

369 10 get_result 0 4 475 21 BSPLoader::get_result 0 1 143 0
50
inline NodePath BSPLoader::get_result(void) const;

370 14 get_global_ptr 0 4 475 25 BSPLoader::get_global_ptr 0 1 144 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

371 10 ~BSPLoader 0 4 475 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

372 14 get_class_type 0 4 477 32 BSPCullTraverser::get_class_type 0 1 147 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

373 16 BSPCullTraverser 0 4 477 34 BSPCullTraverser::BSPCullTraverser 0 2 145 146 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

374 17 ~BSPCullTraverser 0 4 477 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

375 14 get_class_type 0 4 479 25 BSPRender::get_class_type 0 1 150 0
50
static TypeHandle BSPRender::get_class_type(void);

376 9 BSPRender 0 4 479 20 BSPRender::BSPRender 0 2 148 149 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

377 10 ~BSPRender 0 4 479 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

378 14 get_class_type 0 4 481 23 BSPRoot::get_class_type 0 1 153 0
48
static TypeHandle BSPRoot::get_class_type(void);

379 7 BSPRoot 0 4 481 16 BSPRoot::BSPRoot 0 2 151 152 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

380 8 ~BSPRoot 0 4 481 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

381 14 get_class_type 0 4 482 23 BSPProp::get_class_type 0 1 156 0
48
static TypeHandle BSPProp::get_class_type(void);

382 7 BSPProp 0 4 482 16 BSPProp::BSPProp 0 2 154 155 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

383 8 ~BSPProp 0 4 482 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

384 14 get_class_type 0 4 484 24 BSPModel::get_class_type 0 1 159 0
49
static TypeHandle BSPModel::get_class_type(void);

385 8 BSPModel 0 4 484 18 BSPModel::BSPModel 0 2 157 158 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

386 9 ~BSPModel 0 4 484 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

387 15 add_permutation 0 4 486 35 ShaderPermutations::add_permutation 0 1 162 0
97
void ShaderPermutations::add_permutation(std::string const &key, std::string const &value = "1");

388 9 add_input 0 4 486 29 ShaderPermutations::add_input 0 1 163 0
82
void ShaderPermutations::add_input(ShaderInput const &inp, bool important = true);

389 8 add_flag 0 4 486 28 ShaderPermutations::add_flag 0 1 164 0
44
void ShaderPermutations::add_flag(int flag);

390 10 operator < 0 4 486 30 ShaderPermutations::operator < 0 1 165 0
75
bool ShaderPermutations::operator <(ShaderPermutations const &other) const;

391 18 ShaderPermutations 0 4 486 38 ShaderPermutations::ShaderPermutations 0 2 160 161 0
147
inline ShaderPermutations::ShaderPermutations(void) = default;
inline ShaderPermutations::ShaderPermutations(ShaderPermutations const &) = default;

392 19 ~ShaderPermutations 0 4 486 39 ShaderPermutations::~ShaderPermutations 0 0 0
46
ShaderPermutations::~ShaderPermutations(void);

393 24 upcast_to_ReferenceCount 0 12 487 36 ShaderSpec::upcast_to_ReferenceCount 0 1 168 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

394 22 downcast_to_ShaderSpec 0 12 488 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

395 17 upcast_to_Namable 0 12 487 29 ShaderSpec::upcast_to_Namable 0 1 169 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

396 22 downcast_to_ShaderSpec 0 12 489 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

397 17 read_shader_files 0 4 487 29 ShaderSpec::read_shader_files 0 1 166 0
117
void ShaderSpec::read_shader_files(Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file);

398 14 get_class_type 0 4 487 26 ShaderSpec::get_class_type 0 1 167 0
51
static TypeHandle ShaderSpec::get_class_type(void);

399 11 ~ShaderSpec 0 4 487 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

400 18 BSPShaderGenerator 0 4 490 38 BSPShaderGenerator::BSPShaderGenerator 0 2 170 171 0
200
BSPShaderGenerator::BSPShaderGenerator(GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline BSPShaderGenerator::BSPShaderGenerator(BSPShaderGenerator const &) = default;

401 13 set_sun_light 0 4 490 33 BSPShaderGenerator::set_sun_light 0 1 172 0
59
void BSPShaderGenerator::set_sun_light(NodePath const &np);

402 12 start_update 0 4 490 32 BSPShaderGenerator::start_update 0 1 173 0
44
void BSPShaderGenerator::start_update(void);

403 10 add_shader 0 4 490 30 BSPShaderGenerator::add_shader 0 1 174 0
66
void BSPShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

404 19 has_shadow_sunlight 0 4 490 39 BSPShaderGenerator::has_shadow_sunlight 0 1 175 0
64
inline bool BSPShaderGenerator::has_shadow_sunlight(void) const;

405 22 get_pssm_array_texture 0 4 490 42 BSPShaderGenerator::get_pssm_array_texture 0 1 176 0
71
inline Texture *BSPShaderGenerator::get_pssm_array_texture(void) const;

406 12 get_pssm_rig 0 4 490 32 BSPShaderGenerator::get_pssm_rig 0 1 177 0
67
inline PSSMCameraRig *BSPShaderGenerator::get_pssm_rig(void) const;

407 15 get_skybox_root 0 4 490 35 BSPShaderGenerator::get_skybox_root 0 1 178 0
64
inline NodePath BSPShaderGenerator::get_skybox_root(void) const;

408 14 get_skybox_rtt 0 4 490 34 BSPShaderGenerator::get_skybox_rtt 0 1 179 0
63
inline Texture *BSPShaderGenerator::get_skybox_rtt(void) const;

409 20 set_identity_cubemap 0 4 490 40 BSPShaderGenerator::set_identity_cubemap 0 1 180 0
67
static void BSPShaderGenerator::set_identity_cubemap(Texture *tex);

410 20 get_identity_cubemap 0 4 490 40 BSPShaderGenerator::get_identity_cubemap 0 1 181 0
63
static Texture *BSPShaderGenerator::get_identity_cubemap(void);

411 14 get_class_type 0 4 490 34 BSPShaderGenerator::get_class_type 0 1 182 0
59
static TypeHandle BSPShaderGenerator::get_class_type(void);

412 19 ~BSPShaderGenerator 0 4 490 39 BSPShaderGenerator::~BSPShaderGenerator 0 0 0
46
BSPShaderGenerator::~BSPShaderGenerator(void);

413 20 VertexLitGenericSpec 0 4 492 42 VertexLitGenericSpec::VertexLitGenericSpec 0 1 183 0
49
VertexLitGenericSpec::VertexLitGenericSpec(void);

414 21 ~VertexLitGenericSpec 0 4 492 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

415 22 LightmappedGenericSpec 0 4 493 46 LightmappedGenericSpec::LightmappedGenericSpec 0 1 184 0
53
LightmappedGenericSpec::LightmappedGenericSpec(void);

416 23 ~LightmappedGenericSpec 0 4 493 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

417 16 UnlitGenericSpec 0 4 494 34 UnlitGenericSpec::UnlitGenericSpec 0 1 185 0
41
UnlitGenericSpec::UnlitGenericSpec(void);

418 17 ~UnlitGenericSpec 0 4 494 35 UnlitGenericSpec::~UnlitGenericSpec 0 0 0
42
UnlitGenericSpec::~UnlitGenericSpec(void);

419 14 UnlitNoMatSpec 0 4 495 30 UnlitNoMatSpec::UnlitNoMatSpec 0 1 186 0
37
UnlitNoMatSpec::UnlitNoMatSpec(void);

420 15 ~UnlitNoMatSpec 0 4 495 31 UnlitNoMatSpec::~UnlitNoMatSpec 0 0 0
38
UnlitNoMatSpec::~UnlitNoMatSpec(void);

421 13 CSMRenderSpec 0 4 496 28 CSMRenderSpec::CSMRenderSpec 0 1 187 0
35
CSMRenderSpec::CSMRenderSpec(void);

422 14 ~CSMRenderSpec 0 4 496 29 CSMRenderSpec::~CSMRenderSpec 0 0 0
36
CSMRenderSpec::~CSMRenderSpec(void);

423 10 initialize 0 4 497 20 RayTrace::initialize 0 1 190 0
39
static void RayTrace::initialize(void);

424 8 destruct 0 4 497 18 RayTrace::destruct 0 1 191 0
37
static void RayTrace::destruct(void);

425 8 RayTrace 0 4 497 18 RayTrace::RayTrace 0 2 188 189 0
97
inline RayTrace::RayTrace(void) = default;
inline RayTrace::RayTrace(RayTrace const &) = default;

426 9 ~RayTrace 0 4 497 19 RayTrace::~RayTrace 0 0 0
26
RayTrace::~RayTrace(void);

427 17 RayTraceHitResult 0 4 498 36 RayTraceHitResult::RayTraceHitResult 0 2 192 193 0
132
inline RayTraceHitResult::RayTraceHitResult(void);
inline RayTraceHitResult::RayTraceHitResult(RayTraceHitResult const &) = default;

428 7 has_hit 0 4 498 26 RayTraceHitResult::has_hit 0 1 194 0
51
inline bool RayTraceHitResult::has_hit(void) const;

429 14 get_hit_normal 0 4 498 33 RayTraceHitResult::get_hit_normal 0 1 195 0
62
inline LVector3 RayTraceHitResult::get_hit_normal(void) const;

430 6 get_uv 0 4 498 25 RayTraceHitResult::get_uv 0 1 196 0
54
inline LVector2 RayTraceHitResult::get_uv(void) const;

431 11 get_prim_id 0 4 498 30 RayTraceHitResult::get_prim_id 0 1 197 0
63
inline unsigned int RayTraceHitResult::get_prim_id(void) const;

432 11 get_geom_id 0 4 498 30 RayTraceHitResult::get_geom_id 0 1 198 0
63
inline unsigned int RayTraceHitResult::get_geom_id(void) const;

433 16 get_hit_fraction 0 4 498 35 RayTraceHitResult::get_hit_fraction 0 1 199 0
61
inline float RayTraceHitResult::get_hit_fraction(void) const;

434 18 ~RayTraceHitResult 0 4 498 37 RayTraceHitResult::~RayTraceHitResult 0 0 0
44
RayTraceHitResult::~RayTraceHitResult(void);

435 13 RayTraceScene 0 4 499 28 RayTraceScene::RayTraceScene 0 2 200 201 0
105
RayTraceScene::RayTraceScene(void);
inline RayTraceScene::RayTraceScene(RayTraceScene const &) = default;

436 12 add_geometry 0 4 499 27 RayTraceScene::add_geometry 0 1 202 0
57
void RayTraceScene::add_geometry(RayTraceGeometry *geom);

437 15 remove_geometry 0 4 499 30 RayTraceScene::remove_geometry 0 1 203 0
60
void RayTraceScene::remove_geometry(RayTraceGeometry *geom);

438 10 remove_all 0 4 499 25 RayTraceScene::remove_all 0 1 204 0
37
void RayTraceScene::remove_all(void);

439 10 trace_line 0 4 499 25 RayTraceScene::trace_line 0 1 205 0
116
inline RayTraceHitResult RayTraceScene::trace_line(LPoint3 const &start, LPoint3 const &end, BitMask32 const &mask);

440 9 trace_ray 0 4 499 24 RayTraceScene::trace_ray 0 1 206 0
132
RayTraceHitResult RayTraceScene::trace_ray(LPoint3 const &origin, LVector3 const &direction, float distance, BitMask32 const &mask);

441 17 set_build_quality 0 4 499 32 RayTraceScene::set_build_quality 0 1 207 0
51
void RayTraceScene::set_build_quality(int quality);

442 6 update 0 4 499 21 RayTraceScene::update 0 1 208 0
33
void RayTraceScene::update(void);

443 12 get_geometry 0 4 499 27 RayTraceScene::get_geometry 0 1 209 0
75
inline RayTraceGeometry *RayTraceScene::get_geometry(unsigned int geom_id);

444 14 get_class_type 0 4 501 32 RayTraceGeometry::get_class_type 0 1 210 0
57
static TypeHandle RayTraceGeometry::get_class_type(void);

445 8 set_mask 0 4 501 26 RayTraceGeometry::set_mask 0 2 211 212 0
114
inline void RayTraceGeometry::set_mask(BitMask32 const &mask);
void RayTraceGeometry::set_mask(unsigned int mask);

446 8 get_mask 0 4 501 26 RayTraceGeometry::get_mask 0 1 213 0
56
inline BitMask32 RayTraceGeometry::get_mask(void) const;

447 11 get_geom_id 0 4 501 29 RayTraceGeometry::get_geom_id 0 1 214 0
62
inline unsigned int RayTraceGeometry::get_geom_id(void) const;

448 17 set_build_quality 0 4 501 35 RayTraceGeometry::set_build_quality 0 1 215 0
54
void RayTraceGeometry::set_build_quality(int quality);

449 5 build 0 6 501 23 RayTraceGeometry::build 0 1 216 0
47
virtual void RayTraceGeometry::build(void) = 0;

450 14 get_class_type 0 4 502 36 RayTraceTriangleMesh::get_class_type 0 1 218 0
61
static TypeHandle RayTraceTriangleMesh::get_class_type(void);

451 20 RayTraceTriangleMesh 0 4 502 42 RayTraceTriangleMesh::RayTraceTriangleMesh 0 1 217 0
73
RayTraceTriangleMesh::RayTraceTriangleMesh(std::string const &name = "");

452 12 add_triangle 0 4 502 34 RayTraceTriangleMesh::add_triangle 0 1 219 0
97
void RayTraceTriangleMesh::add_triangle(LPoint3 const &p1, LPoint3 const &p2, LPoint3 const &p3);

453 23 add_triangles_from_geom 0 4 502 45 RayTraceTriangleMesh::add_triangles_from_geom 0 1 220 0
105
void RayTraceTriangleMesh::add_triangles_from_geom(Geom const *geom, TransformState const *ts = nullptr);

454 21 ~RayTraceTriangleMesh 0 4 502 43 RayTraceTriangleMesh::~RayTraceTriangleMesh 0 0 0
50
RayTraceTriangleMesh::~RayTraceTriangleMesh(void);

455 10 SkyBoxSpec 0 4 503 22 SkyBoxSpec::SkyBoxSpec 0 1 221 0
29
SkyBoxSpec::SkyBoxSpec(void);

456 11 ~SkyBoxSpec 0 4 503 23 SkyBoxSpec::~SkyBoxSpec 0 0 0
30
SkyBoxSpec::~SkyBoxSpec(void);

457 4 make 0 4 504 24 AmbientBoostEffect::make 0 1 222 0
69
static ConstPointerTo< RenderEffect > AmbientBoostEffect::make(void);

458 14 get_class_type 0 4 504 34 AmbientBoostEffect::get_class_type 0 1 223 0
59
static TypeHandle AmbientBoostEffect::get_class_type(void);

459 19 ~AmbientBoostEffect 0 4 504 39 AmbientBoostEffect::~AmbientBoostEffect 0 0 0
46
AmbientBoostEffect::~AmbientBoostEffect(void);

223
1 0 0 7 12 506 235 0 0 0 
2 0 0 7 12 506 235 0 0 1 6 param0 0 507  
3 0 0 7 2 511 0 0 0 1 4 name 1 510  
4 0 0 7 2 511 0 0 0 2 4 name 1 510  7 uv_name 1 510  
5 0 0 7 3 511 0 0 0 0 
6 0 0 7 4 511 0 0 0 0 
7 0 0 7 5 511 0 0 0 0 
8 0 0 7 6 511 0 0 0 0 
9 0 0 7 7 511 0 0 0 0 
10 0 0 7 8 511 0 0 0 0 
11 0 0 7 9 511 0 0 0 0 
12 0 0 7 10 511 0 0 0 0 
13 0 0 7 11 511 0 0 0 0 
14 0 0 7 16 514 252 0 0 1 4 copy 1 512  
15 0 0 7 16 514 252 0 0 1 4 name 1 510  
16 0 0 7 17 514 252 0 0 2 4 this 3 514  4 copy 1 512  
17 0 0 4 18 515 0 0 0 3 4 this 3 514  3 key 1 510  5 value 1 510  
18 0 0 6 19 510 0 0 0 2 4 this 3 512  3 key 1 510  
19 0 0 6 20 465 0 0 0 2 4 this 3 512  3 key 1 510  
20 0 0 6 21 516 0 0 0 2 4 this 3 512  3 key 1 510  
21 0 0 4 22 515 0 0 0 2 4 this 3 514  11 shader_name 1 510  
22 0 0 6 23 510 0 0 0 1 4 this 3 512  
23 0 0 7 24 518 0 0 0 1 4 this 3 512  
24 0 0 6 25 519 0 0 0 2 4 this 3 512  3 key 1 510  
25 0 0 6 26 519 0 0 0 1 4 this 3 512  
26 0 0 6 27 519 0 0 0 1 4 this 3 512  
27 0 0 6 28 510 0 0 0 1 4 this 3 512  
28 0 0 6 29 510 0 0 0 1 4 this 3 512  
29 0 0 7 30 512 0 0 0 1 4 file 1 520  
30 0 0 7 31 523 0 0 0 0 
31 0 0 7 35 525 0 0 0 1 3 mat 1 512  
32 0 0 7 36 525 0 0 0 1 3 mat 1 512  
33 0 0 7 37 525 0 0 0 0 
34 0 0 6 38 510 0 0 0 1 4 this 3 526  
35 0 0 6 39 519 0 0 0 1 4 this 3 526  
36 0 0 7 40 512 0 0 0 1 4 this 3 526  
37 0 0 6 41 465 0 0 0 0 
38 0 0 7 44 523 0 0 0 0 
39 0 0 7 48 528 266 0 0 0 
40 0 0 7 48 528 266 0 0 1 6 param0 0 529  
41 0 0 7 47 523 0 0 0 0 
42 0 0 6 49 465 0 0 0 1 4 this 3 529  
43 0 0 6 50 531 0 0 0 1 4 this 3 529  
44 0 0 7 54 532 271 0 0 0 
45 0 0 7 54 532 271 0 0 1 6 param0 0 533  
46 0 0 7 53 523 0 0 0 0 
47 0 0 7 55 537 0 0 0 1 4 this 3 533  
48 0 0 7 56 540 0 0 0 1 4 this 3 533  
49 0 0 7 60 541 277 0 0 0 
50 0 0 7 60 541 277 0 0 1 6 param0 0 542  
51 0 0 7 59 523 0 0 0 0 
52 0 0 7 61 545 0 0 0 1 4 this 3 542  
53 0 0 6 62 519 0 0 0 2 4 this 3 542  3 pos 1 546  
54 0 0 4 63 515 0 0 0 3 4 this 3 541  4 mins 1 537  4 maxs 1 537  
55 0 0 7 67 548 283 0 0 0 
56 0 0 7 67 548 283 0 0 1 6 param0 0 549  
57 0 0 7 66 523 0 0 0 0 
58 0 0 6 68 465 0 0 0 1 4 this 3 549  
59 0 0 7 69 552 0 0 0 1 4 this 3 549  
60 0 0 4 70 515 0 0 0 3 4 this 3 548  4 mins 1 537  4 maxs 1 537  
61 0 0 7 76 555 288 0 0 1 6 param0 0 553  
62 0 0 6 73 465 0 0 0 1 4 this 3 553  
63 0 0 6 74 465 0 0 0 1 4 this 3 553  
64 0 0 6 75 465 0 0 0 1 4 this 3 553  
65 0 0 7 84 558 295 0 0 1 6 param0 0 556  
66 0 0 6 79 465 0 0 0 1 4 this 3 556  
67 0 0 6 80 465 0 0 0 1 4 this 3 556  
68 0 0 6 81 465 0 0 0 1 4 this 3 556  
69 0 0 6 82 465 0 0 0 1 4 this 3 556  
70 0 0 6 83 519 0 0 0 1 4 this 3 556  
71 0 0 6 87 465 0 0 0 1 4 this 3 559  
72 0 0 4 88 515 0 0 35 // number of textures to consider.. 2 4 this 3 559  6 tcount 1 465  
73 0 0 4 89 515 0 0 21 // add textures 0 - n 3 4 this 3 559  3 wid 1 465  3 hit 1 465  
74 0 0 6 90 519 0 0 0 7 4 this 3 559  3 wid 1 465  3 hit 1 465  15 forcePowerOfTwo 1 519  14 onePixelBorder 1 519  7 max_wid 1 465  7 max_hit 1 465  
75 0 0 4 91 515 0 0 0 3 4 this 3 559  3 wid 1 465  3 hit 1 465  
76 0 0 7 92 555 288 0 74 // pack the textures, the return code is the amount of wasted/unused area. 3 4 this 3 559  15 forcePowerOfTwo 1 519  14 onePixelBorder 1 519  
77 0 0 7 93 558 295 0 58 // returns true if the texture has been rotated 90 degrees 2 4 this 3 559  5 index 1 465  
78 0 0 6 94 559 0 0 0 0 
79 0 0 4 95 515 0 0 0 1 2 tp 1 559  
80 0 0 7 99 525 0 0 0 2 13 face_material 1 510  9 face_type 1 465  
81 0 0 7 100 525 0 0 0 0 
82 0 0 7 101 525 0 0 0 0 
83 0 0 6 102 510 0 0 0 1 4 this 3 560  
84 0 0 6 103 465 0 0 0 1 4 this 3 560  
85 0 0 6 104 519 0 0 0 1 4 this 3 560  
86 0 0 6 105 465 0 0 0 0 
87 0 0 7 107 523 0 0 0 0 
88 0 0 7 110 531 371 0 0 0 
89 0 0 6 111 519 0 0 0 2 4 this 3 531  4 file 1 520  
90 0 0 4 112 515 0 0 0 1 4 this 3 531  
91 0 0 4 113 515 0 0 0 3 4 this 3 531  5 gamma 1 562  10 overbright 1 465  
92 0 0 6 114 562 0 0 0 1 4 this 3 563  
93 0 0 4 115 515 0 0 0 2 4 this 3 531  3 win 1 565  
94 0 0 4 116 515 0 0 0 2 4 this 3 531  6 camera 1 567  
95 0 0 4 117 515 0 0 0 2 4 this 3 531  6 render 1 567  
96 0 0 4 118 515 0 0 0 2 4 this 3 531  5 shgen 1 569  
97 0 0 4 119 515 0 0 0 2 4 this 3 531  4 flag 1 519  
98 0 0 4 120 515 0 0 0 2 4 this 3 531  4 flag 1 519  
99 0 0 4 121 515 0 0 0 2 4 this 3 531  4 type 1 465  
100 0 0 4 122 515 0 0 0 2 4 this 3 531  4 flag 1 519  
101 0 0 4 123 515 0 0 0 2 4 this 3 531  4 file 1 520  
102 0 0 4 124 515 0 0 0 2 4 this 3 531  4 flag 1 519  
103 0 0 6 125 519 0 0 0 1 4 this 3 563  
104 0 0 7 126 552 0 0 0 1 4 this 3 563  
105 0 0 7 127 552 0 0 0 6 4 this 3 531  14 decal_material 1 510  11 decal_scale 1 570  6 rotate 1 516  5 start 1 546  3 end 1 546  
106 0 0 7 128 575 0 0 0 2 4 this 3 531  3 pos 1 546  
107 0 0 4 129 515 0 0 0 1 4 this 3 531  
108 0 0 4 130 515 0 0 0 2 4 this 3 531  4 flag 1 519  
109 0 0 4 131 515 0 0 0 2 4 this 3 531  3 dir 1 576  
110 0 0 4 132 515 0 0 0 2 4 this 3 531  5 color 1 578  
111 0 0 6 133 465 0 0 0 2 4 this 3 531  6 entnum 1 465  
112 0 0 4 134 515 0 0 0 4 4 this 3 531  8 modelnum 1 465  4 mins 1 537  4 maxs 1 537  
113 0 0 4 135 515 0 0 0 2 4 this 3 531  10 dispatcher 1 583  
114 0 0 4 136 515 0 0 0 3 4 this 3 531  4 name 1 510  4 type 1 586  
115 0 0 4 137 515 0 0 0 2 4 this 3 531  2 ai 1 519  
116 0 0 6 138 519 0 0 0 1 4 this 3 563  
117 0 0 6 139 519 0 0 0 3 4 this 3 531  5 start 1 546  3 end 1 546  
118 0 0 7 140 537 0 0 0 3 4 this 3 531  5 start 1 546  3 end 1 546  
119 0 0 4 141 515 0 0 0 3 4 this 3 531  7 entname 1 510  4 type 1 586  
120 0 0 6 142 583 0 0 0 2 4 this 3 563  10 targetname 1 510  
121 0 0 6 143 583 0 0 0 2 4 this 3 531  9 classname 1 510  
122 0 0 4 144 515 0 0 0 3 4 this 3 531  4 list 1 583  6 entnum 1 589  
123 0 0 4 145 515 0 0 0 3 4 this 3 531  5 entum 1 465  5 pyent 1 583  
124 0 0 4 146 515 0 0 0 2 4 this 3 531  3 ent 1 583  
125 0 0 6 147 465 0 0 0 1 4 this 3 563  
126 0 0 6 148 510 0 0 0 3 4 this 3 563  6 entnum 1 465  3 key 1 510  
127 0 0 6 149 516 0 0 0 3 4 this 3 563  6 entnum 1 465  3 key 1 510  
128 0 0 6 150 465 0 0 0 3 4 this 3 563  6 entnum 1 465  3 key 1 510  
129 0 0 7 151 540 0 0 0 3 4 this 3 563  6 entnum 1 465  3 key 1 510  
130 0 0 7 152 590 0 0 0 4 4 this 3 563  6 entnum 1 465  3 key 1 510  5 scale 1 519  
131 0 0 7 153 552 0 0 0 2 4 this 3 563  6 entnum 1 465  
132 0 0 7 154 552 0 0 0 2 4 this 3 563  8 modelnum 1 465  
133 0 0 7 155 528 266 0 0 2 4 this 3 563  6 entnum 1 589  
134 0 0 6 156 465 0 0 0 2 4 this 3 531  3 pos 1 546  
135 0 0 6 156 465 0 0 0 2 4 this 3 531  2 np 1 567  
136 0 0 6 157 465 0 0 0 2 4 this 3 531  3 pos 1 546  
137 0 0 6 158 519 0 0 0 3 4 this 3 563  12 curr_cluster 1 465  7 cluster 1 465  
138 0 0 6 159 519 0 0 0 2 4 this 3 531  6 bounds 1 591  
139 0 0 7 160 591 0 0 0 3 4 this 3 531  13 net_transform 1 594  8 original 1 591  
140 0 0 6 161 519 0 0 0 1 4 this 3 563  
141 0 0 6 162 519 0 0 0 1 4 this 3 563  
142 0 0 4 163 515 0 0 0 1 4 this 3 531  
143 0 0 7 164 552 0 0 0 1 4 this 3 563  
144 0 0 6 165 531 0 0 0 0 
145 0 0 7 171 599 374 0 0 1 6 param0 0 597  
146 0 0 7 171 599 374 0 0 2 4 trav 1 600  6 loader 1 531  
147 0 0 7 170 523 0 0 0 0 
148 0 0 7 176 603 377 0 0 1 6 param0 0 601  
149 0 0 7 176 603 377 0 0 2 4 name 1 510  6 loader 1 531  
150 0 0 7 175 523 0 0 0 0 
151 0 0 7 180 606 380 0 0 1 6 param0 0 604  
152 0 0 7 180 606 380 0 0 1 4 name 1 510  
153 0 0 7 179 523 0 0 0 0 
154 0 0 7 185 609 383 0 0 1 6 param0 0 607  
155 0 0 7 185 609 383 0 0 1 4 name 1 510  
156 0 0 7 184 523 0 0 0 0 
157 0 0 7 190 612 386 0 0 1 6 param0 0 610  
158 0 0 7 190 612 386 0 0 1 4 name 1 510  
159 0 0 7 189 523 0 0 0 0 
160 0 0 7 197 613 392 0 0 0 
161 0 0 7 197 613 392 0 0 1 6 param0 0 614  
162 0 0 4 193 515 0 0 0 3 4 this 3 613  3 key 1 510  5 value 1 510  
163 0 0 4 194 515 0 0 0 3 4 this 3 613  3 inp 1 616  9 important 1 519  
164 0 0 4 195 515 0 0 0 2 4 this 3 613  4 flag 1 465  
165 0 0 6 196 519 0 0 0 2 4 this 3 614  5 other 1 614  
166 0 0 4 206 515 0 0 0 4 4 this 3 619  9 vert_file 1 520  10 pixel_file 1 520  9 geom_file 1 520  
167 0 0 7 207 523 0 0 0 0 
168 0 0 7 201 620 0 0 0 1 4 this 3 619  
169 0 0 6 204 621 0 0 0 1 4 this 3 619  
170 0 0 7 211 569 412 0 0 1 6 param0 0 622  
171 0 0 7 211 569 412 0 0 3 3 gsg 1 624  6 camera 1 567  6 render 1 567  
172 0 0 4 212 515 0 0 0 2 4 this 3 569  2 np 1 567  
173 0 0 4 213 515 0 0 0 1 4 this 3 569  
174 0 0 4 214 515 0 0 0 2 4 this 3 569  4 spec 1 619  
175 0 0 6 215 519 0 0 0 1 4 this 3 622  
176 0 0 7 216 575 0 0 0 1 4 this 3 622  
177 0 0 6 217 626 0 0 0 1 4 this 3 622  
178 0 0 7 218 552 0 0 0 1 4 this 3 622  
179 0 0 7 219 575 0 0 0 1 4 this 3 622  
180 0 0 4 220 515 0 0 0 1 3 tex 1 575  
181 0 0 7 221 575 0 0 0 0 
182 0 0 7 222 523 0 0 0 0 
183 0 0 7 225 628 414 0 0 0 
184 0 0 7 228 629 416 0 0 0 
185 0 0 7 231 630 418 0 0 0 
186 0 0 7 234 631 420 0 0 0 
187 0 0 7 237 632 422 0 0 0 
188 0 0 7 242 633 426 0 0 0 
189 0 0 7 242 633 426 0 0 1 6 param0 0 634  
190 0 0 4 240 515 0 0 0 0 
191 0 0 4 241 515 0 0 0 0 
192 0 0 7 245 636 434 0 0 0 
193 0 0 7 245 636 434 0 0 1 6 param0 0 637  
194 0 0 6 246 519 0 0 0 1 4 this 3 637  
195 0 0 7 247 540 0 0 0 1 4 this 3 637  
196 0 0 7 248 641 0 0 0 1 4 this 3 637  
197 0 0 6 249 642 0 0 0 1 4 this 3 637  
198 0 0 6 250 642 0 0 0 1 4 this 3 637  
199 0 0 6 251 516 0 0 0 1 4 this 3 637  
200 0 0 7 254 643 0 0 0 0 
201 0 0 7 254 643 0 0 0 1 6 param0 0 644  
202 0 0 4 255 515 0 0 0 2 4 this 3 643  4 geom 1 646  
203 0 0 4 256 515 0 0 0 2 4 this 3 643  4 geom 1 646  
204 0 0 4 257 515 0 0 0 1 4 this 3 643  
205 0 0 7 259 636 434 0 0 4 4 this 3 643  5 start 1 546  3 end 1 546  4 mask 1 647  
206 0 0 7 260 636 434 0 0 5 4 this 3 643  6 origin 1 546  9 direction 1 576  8 distance 1 516  4 mask 1 647  
207 0 0 4 261 515 0 0 0 2 4 this 3 643  7 quality 1 465  
208 0 0 4 262 515 0 0 0 1 4 this 3 643  
209 0 0 7 263 646 0 0 0 2 4 this 3 643  7 geom_id 1 642  
210 0 0 7 265 523 0 0 0 0 
211 0 0 4 266 515 0 0 0 2 4 this 3 646  4 mask 1 647  
212 0 0 4 266 515 0 0 0 2 4 this 3 646  4 mask 1 642  
213 0 0 7 267 653 0 0 0 1 4 this 3 651  
214 0 0 6 268 642 0 0 0 1 4 this 3 651  
215 0 0 4 269 515 0 0 0 2 4 this 3 646  7 quality 1 465  
216 0 0 4 270 515 0 0 0 1 4 this 3 646  
217 0 0 7 273 654 454 0 0 1 4 name 1 510  
218 0 0 7 272 523 0 0 0 0 
219 0 0 4 274 515 0 0 0 4 4 this 3 654  2 p1 1 546  2 p2 1 546  2 p3 1 546  
220 0 0 4 275 515 0 0 0 3 4 this 3 654  4 geom 1 655  2 ts 1 594  
221 0 0 7 278 658 456 0 0 0 
222 0 0 7 282 660 0 0 0 0 
223 0 0 7 283 523 0 0 0 0 
201
460 13 TextureStages 0 141313 13 TextureStages 13 TextureStages 0 0 0 1 234 235 0 10 224 225 226 227 228 229 230 231 232 233 0 0 0 0 0 752
/**
 * This simple interface maintains a single TextureStage object for each unique name.
 * It avoids the creation of duplicate TextureStages with the same name, which
 * reduces texture swapping and draw call overhead.
 *
 * If using our shader system, you should always use this interface to get TextureStages.
 * You are not required to change any properties on the returned TextureStage, as the shader
 * specification will know what to do with the TextureStage from the name.
 * 
 * For example, you do not need to call TextureStage::set_mode() or NodePath::set_tex_gen().
 * If you apply a texture to a node with the get_normalmap() stage, the shader specification
 * will know that the texture you supplied is to be treated as a normal map.
 */

461 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 236 252 0 15 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 0 0 1 0 462 0 0 0 0 0

462 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

463 17 BSPMaterialAttrib 0 141313 17 BSPMaterialAttrib 17 BSPMaterialAttrib 0 0 0 0 261 1 661 8 253 254 255 256 257 258 259 260 0 0 1 0 464 0 0 0 0 0

464 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

465 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

466 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 263 266 0 3 262 264 265 0 0 1 0 462 0 0 0 0 0

467 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 268 271 0 3 267 269 270 0 0 1 0 466 0 0 0 0 0

468 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 273 277 0 4 272 274 275 276 0 0 1 0 466 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

469 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 279 283 0 4 278 280 281 282 0 0 1 0 466 0 0 0 0 0

470 10 PackResult 0 141313 10 PackResult 10 PackResult 0 0 0 1 287 288 0 3 284 285 286 0 0 0 0 0 0

471 15 TextureLocation 0 141313 15 TextureLocation 15 TextureLocation 0 0 0 1 294 295 0 5 289 290 291 292 293 0 0 0 0 0 0

472 13 TexturePacker 0 141313 13 TexturePacker 13 TexturePacker 0 0 0 0 305 0 9 296 297 298 299 300 301 302 303 304 0 0 0 0 0 0

473 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 314 1 662 8 306 307 308 309 310 311 312 313 0 0 1 0 464 0 0 0 1 474 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

474 0 0 794624 15 BSPFaceAttrib:: 0 473 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

475 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 315 371 0 55 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 0 0 0 0 1 476 58
/**
 * Loads and handles the operations of PBSP files.
 */

476 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 475 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

477 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 373 374 0 1 372 0 0 1 0 478 0 0 0 0 0

478 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

479 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 376 377 0 1 375 0 0 1 0 480 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

480 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

481 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 379 380 0 1 378 0 0 1 0 480 0 0 0 0 0

482 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 382 383 0 1 381 0 0 1 0 483 0 0 0 0 0

483 9 ModelRoot 0 2048 9 ModelRoot 9 ModelRoot 0 0 0 0 0 0 0 0 0 0 0 0 314
/**
 * A node of this type is created automatically at the root of each model file
 * that is loaded.  It may eventually contain some information about the
 * contents of the model; at the moment, it contains no special information,
 * but can be used as a flag to indicate the presence of a loaded model file.
 */

484 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 385 386 0 1 384 0 0 1 0 485 0 0 0 0 0

485 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

486 18 ShaderPermutations 0 141313 18 ShaderPermutations 18 ShaderPermutations 0 0 0 1 391 392 0 4 387 388 389 390 0 0 0 0 0 97
/**
 * Represents a list of #defines and variable inputs to a shader that is being generated.
 */

487 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 0 399 0 2 397 398 0 0 2 3 488 393 394 3 489 395 396 0 0 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

488 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

489 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

490 18 BSPShaderGenerator 0 141313 18 BSPShaderGenerator 18 BSPShaderGenerator 0 0 0 1 400 412 0 11 401 402 403 404 405 406 407 408 409 410 411 0 0 1 0 491 0 0 0 0 0

491 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

492 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 413 414 0 0 0 0 1 0 487 0 0 0 0 0

493 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 415 416 0 0 0 0 1 0 487 0 0 0 0 0

494 16 UnlitGenericSpec 0 141313 16 UnlitGenericSpec 16 UnlitGenericSpec 0 0 0 1 417 418 0 0 0 0 1 0 487 0 0 0 0 160
/**
 * Shader that only supports a basetexture, no fancy lighting effects or anything.
 * Could be used for UI elements, emissive materials, particles, etc.
 */

495 14 UnlitNoMatSpec 0 141313 14 UnlitNoMatSpec 14 UnlitNoMatSpec 0 0 0 1 419 420 0 0 0 0 1 0 487 0 0 0 0 0

496 13 CSMRenderSpec 0 141313 13 CSMRenderSpec 13 CSMRenderSpec 0 0 0 1 421 422 0 0 0 0 1 0 487 0 0 0 0 0

497 8 RayTrace 0 141313 8 RayTrace 8 RayTrace 0 0 0 1 425 426 0 2 423 424 0 0 0 0 0 0

498 17 RayTraceHitResult 0 141313 17 RayTraceHitResult 17 RayTraceHitResult 0 0 0 1 427 434 0 6 428 429 430 431 432 433 0 0 0 0 0 0

499 13 RayTraceScene 0 75777 13 RayTraceScene 13 RayTraceScene 0 0 0 1 435 0 0 8 436 437 438 439 440 441 442 443 0 0 1 0 488 0 0 0 1 500 0

500 0 0 794624 15 RayTraceScene:: 0 499 0 0 0 0 0 0 0 0 0 3 17 BUILD_QUALITY_LOW 32 RayTraceScene::BUILD_QUALITY_LOW 0
0 20 BUILD_QUALITY_MEDIUM 35 RayTraceScene::BUILD_QUALITY_MEDIUM 0
1 18 BUILD_QUALITY_HIGH 33 RayTraceScene::BUILD_QUALITY_HIGH 0
2 0 0

501 16 RayTraceGeometry 0 75777 16 RayTraceGeometry 16 RayTraceGeometry 0 0 0 0 0 0 6 444 445 446 447 448 449 0 0 1 0 480 0 0 0 0 0

502 20 RayTraceTriangleMesh 0 141313 20 RayTraceTriangleMesh 20 RayTraceTriangleMesh 0 0 0 1 451 454 0 3 450 452 453 0 0 1 0 501 0 0 0 0 0

503 10 SkyBoxSpec 0 141313 10 SkyBoxSpec 10 SkyBoxSpec 0 0 0 1 455 456 0 0 0 0 1 0 487 0 0 0 0 0

504 18 AmbientBoostEffect 0 141313 18 AmbientBoostEffect 18 AmbientBoostEffect 0 0 0 0 459 0 2 457 458 0 0 1 0 505 0 0 0 0 0

505 12 RenderEffect 0 2048 12 RenderEffect 12 RenderEffect 0 0 0 0 0 0 0 0 0 0 0 0 901
/**
 * This is the base class for a number of special render effects that may be
 * set on scene graph nodes to change the way they render.  This includes
 * BillboardEffect, DecalEffect, etc.
 *
 * RenderEffect represents render properties that must be applied as soon as
 * they are encountered in the scene graph, rather than propagating down to
 * the leaves.  This is different from RenderAttrib, which represents
 * properties like color and texture that don't do anything until they
 * propagate down to a GeomNode.
 *
 * You should not attempt to create or modify a RenderEffect directly;
 * instead, use the make() method of the appropriate kind of effect you want.
 * This will allocate and return a new RenderEffect of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderEffect
 * if you wish to change its properties; instead, create a new one.
 */

506 15 TextureStages * 0 8576 15 TextureStages * 15 TextureStages * 0 0 460 0 0 0 0 0 0 0 0 0 0

507 21 TextureStages const * 0 8576 21 TextureStages const * 21 TextureStages const * 0 0 508 0 0 0 0 0 0 0 0 0 0

508 19 TextureStages const 0 8832 19 TextureStages const 19 TextureStages const 0 0 460 0 0 0 0 0 0 0 0 0 0

509 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 336
/**
 * Defines the properties of a named stage of the multitexture pipeline.  The
 * TextureAttrib will associated a number of these stages with Texture
 * objects, and the GSG will render geometry by sorting all of the currently
 * active TextureStages in order and then issuing the appropriate rendering
 * calls to activate them.
 */

510 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

511 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 509 0 0 0 0 0 0 0 0 0 0

512 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 513 0 0 0 0 0 0 0 0 0 0

513 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 461 0 0 0 0 0 0 0 0 0 0

514 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 461 0 0 0 0 0 0 0 0 0 0

515 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

516 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

517 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

518 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 517 0 0 0 0 0 0 0 0 0 0

519 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

520 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 521 0 0 0 0 0 0 0 0 0 0

521 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 517 0 0 0 0 0 0 0 0 0 0

522 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

523 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 522 0 0 0 0 0 0 0 0 0 0

524 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 464 0 0 0 0 0 0 0 0 0 0

525 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 524 0 0 0 0 0 0 0 0 0 0

526 25 BSPMaterialAttrib const * 0 8576 25 BSPMaterialAttrib const * 25 BSPMaterialAttrib const * 0 0 527 0 0 0 0 0 0 0 0 0 0

527 23 BSPMaterialAttrib const 0 8832 23 BSPMaterialAttrib const 23 BSPMaterialAttrib const 0 0 463 0 0 0 0 0 0 0 0 0 0

528 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 466 0 0 0 0 0 0 0 0 0 0

529 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 530 0 0 0 0 0 0 0 0 0 0

530 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 466 0 0 0 0 0 0 0 0 0 0

531 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 475 0 0 0 0 0 0 0 0 0 0

532 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 467 0 0 0 0 0 0 0 0 0 0

533 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 534 0 0 0 0 0 0 0 0 0 0

534 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 467 0 0 0 0 0 0 0 0 0 0

535 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 536 0 0 0 0 0 0 0 0 0 0

536 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

537 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 535 0 0 0 0 0 0 0 0 0 0

538 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 539 0 0 0 0 0 0 0 0 0 0

539 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

540 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 538 0 0 0 0 0 0 0 0 0 0

541 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 468 0 0 0 0 0 0 0 0 0 0

542 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 543 0 0 0 0 0 0 0 0 0 0

543 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 468 0 0 0 0 0 0 0 0 0 0

544 11 BoundingBox 0 2048 11 BoundingBox 11 BoundingBox 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

545 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 544 0 0 0 0 0 0 0 0 0 0

546 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 547 0 0 0 0 0 0 0 0 0 0

547 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 535 0 0 0 0 0 0 0 0 0 0

548 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 469 0 0 0 0 0 0 0 0 0 0

549 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 550 0 0 0 0 0 0 0 0 0 0

550 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 469 0 0 0 0 0 0 0 0 0 0

551 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

552 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 551 0 0 0 0 0 0 0 0 0 0

553 18 PackResult const * 0 8576 18 PackResult const * 18 PackResult const * 0 0 554 0 0 0 0 0 0 0 0 0 0

554 16 PackResult const 0 8832 16 PackResult const 16 PackResult const 0 0 470 0 0 0 0 0 0 0 0 0 0

555 12 PackResult * 0 8576 12 PackResult * 12 PackResult * 0 0 470 0 0 0 0 0 0 0 0 0 0

556 23 TextureLocation const * 0 8576 23 TextureLocation const * 23 TextureLocation const * 0 0 557 0 0 0 0 0 0 0 0 0 0

557 21 TextureLocation const 0 8832 21 TextureLocation const 21 TextureLocation const 0 0 471 0 0 0 0 0 0 0 0 0 0

558 17 TextureLocation * 0 8576 17 TextureLocation * 17 TextureLocation * 0 0 471 0 0 0 0 0 0 0 0 0 0

559 15 TexturePacker * 0 8576 15 TexturePacker * 15 TexturePacker * 0 0 472 0 0 0 0 0 0 0 0 0 0

560 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 561 0 0 0 0 0 0 0 0 0 0

561 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 473 0 0 0 0 0 0 0 0 0 0

562 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 516 0 0 0 0 0 0 0 0 0 0

563 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 564 0 0 0 0 0 0 0 0 0 0

564 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 475 0 0 0 0 0 0 0 0 0 0

565 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 566 0 0 0 0 0 0 0 0 0 0

566 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

567 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 568 0 0 0 0 0 0 0 0 0 0

568 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 551 0 0 0 0 0 0 0 0 0 0

569 20 BSPShaderGenerator * 0 8576 20 BSPShaderGenerator * 20 BSPShaderGenerator * 0 0 490 0 0 0 0 0 0 0 0 0 0

570 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 571 0 0 0 0 0 0 0 0 0 0

571 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 572 0 0 0 0 0 0 0 0 0 0

572 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 573 0 0 0 0 0 0 0 0 0 0

573 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

574 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

575 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 574 0 0 0 0 0 0 0 0 0 0

576 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 577 0 0 0 0 0 0 0 0 0 0

577 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 538 0 0 0 0 0 0 0 0 0 0

578 14 LColor const * 0 8576 14 LColor const * 14 LColor const * 0 0 579 0 0 0 0 0 0 0 0 0 0

579 12 LColor const 0 8832 12 LColor const 12 LColor const 0 0 580 0 0 0 0 0 0 0 0 0 0

580 6 LColor 0 2105344 6 LColor 6 LColor 0 0 581 0 0 0 0 0 0 0 0 0 0

581 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 582 0 0 0 0 0 0 0 0 0 0

582 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

583 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 584 0 0 0 0 0 0 0 0 0 0

584 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 585 0 0 0 0 0 0 0 0 0 0

585 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

586 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 587 0 0 0 0 0 0 0 0 0 0

587 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 588 0 0 0 0 0 0 0 0 0 0

588 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

589 9 int const 0 8832 9 int const 9 int const 0 0 465 0 0 0 0 0 0 0 0 0 0

590 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 580 0 0 0 0 0 0 0 0 0 0

591 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 592 0 0 0 0 0 0 0 0 0 0

592 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 593 0 0 0 0 0 0 0 0 0 0

593 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

594 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 595 0 0 0 0 0 0 0 0 0 0

595 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 596 0 0 0 0 0 0 0 0 0 0

596 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

597 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 598 0 0 0 0 0 0 0 0 0 0

598 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 477 0 0 0 0 0 0 0 0 0 0

599 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 477 0 0 0 0 0 0 0 0 0 0

600 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 478 0 0 0 0 0 0 0 0 0 0

601 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 602 0 0 0 0 0 0 0 0 0 0

602 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 479 0 0 0 0 0 0 0 0 0 0

603 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 479 0 0 0 0 0 0 0 0 0 0

604 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 605 0 0 0 0 0 0 0 0 0 0

605 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 481 0 0 0 0 0 0 0 0 0 0

606 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 481 0 0 0 0 0 0 0 0 0 0

607 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 608 0 0 0 0 0 0 0 0 0 0

608 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 482 0 0 0 0 0 0 0 0 0 0

609 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 482 0 0 0 0 0 0 0 0 0 0

610 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 611 0 0 0 0 0 0 0 0 0 0

611 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 484 0 0 0 0 0 0 0 0 0 0

612 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 484 0 0 0 0 0 0 0 0 0 0

613 20 ShaderPermutations * 0 8576 20 ShaderPermutations * 20 ShaderPermutations * 0 0 486 0 0 0 0 0 0 0 0 0 0

614 26 ShaderPermutations const * 0 8576 26 ShaderPermutations const * 26 ShaderPermutations const * 0 0 615 0 0 0 0 0 0 0 0 0 0

615 24 ShaderPermutations const 0 8832 24 ShaderPermutations const 24 ShaderPermutations const 0 0 486 0 0 0 0 0 0 0 0 0 0

616 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 617 0 0 0 0 0 0 0 0 0 0

617 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 618 0 0 0 0 0 0 0 0 0 0

618 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

619 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 487 0 0 0 0 0 0 0 0 0 0

620 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 488 0 0 0 0 0 0 0 0 0 0

621 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 489 0 0 0 0 0 0 0 0 0 0

622 26 BSPShaderGenerator const * 0 8576 26 BSPShaderGenerator const * 26 BSPShaderGenerator const * 0 0 623 0 0 0 0 0 0 0 0 0 0

623 24 BSPShaderGenerator const 0 8832 24 BSPShaderGenerator const 24 BSPShaderGenerator const 0 0 490 0 0 0 0 0 0 0 0 0 0

624 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 625 0 0 0 0 0 0 0 0 0 0

625 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

626 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 627 0 0 0 0 0 0 0 0 0 0

627 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

628 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 492 0 0 0 0 0 0 0 0 0 0

629 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 493 0 0 0 0 0 0 0 0 0 0

630 18 UnlitGenericSpec * 0 8576 18 UnlitGenericSpec * 18 UnlitGenericSpec * 0 0 494 0 0 0 0 0 0 0 0 0 0

631 16 UnlitNoMatSpec * 0 8576 16 UnlitNoMatSpec * 16 UnlitNoMatSpec * 0 0 495 0 0 0 0 0 0 0 0 0 0

632 15 CSMRenderSpec * 0 8576 15 CSMRenderSpec * 15 CSMRenderSpec * 0 0 496 0 0 0 0 0 0 0 0 0 0

633 10 RayTrace * 0 8576 10 RayTrace * 10 RayTrace * 0 0 497 0 0 0 0 0 0 0 0 0 0

634 16 RayTrace const * 0 8576 16 RayTrace const * 16 RayTrace const * 0 0 635 0 0 0 0 0 0 0 0 0 0

635 14 RayTrace const 0 8832 14 RayTrace const 14 RayTrace const 0 0 497 0 0 0 0 0 0 0 0 0 0

636 19 RayTraceHitResult * 0 8576 19 RayTraceHitResult * 19 RayTraceHitResult * 0 0 498 0 0 0 0 0 0 0 0 0 0

637 25 RayTraceHitResult const * 0 8576 25 RayTraceHitResult const * 25 RayTraceHitResult const * 0 0 638 0 0 0 0 0 0 0 0 0 0

638 23 RayTraceHitResult const 0 8832 23 RayTraceHitResult const 23 RayTraceHitResult const 0 0 498 0 0 0 0 0 0 0 0 0 0

639 8 LVector2 0 2105344 8 LVector2 8 LVector2 0 0 640 0 0 0 0 0 0 0 0 0 0

640 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

641 10 LVector2 * 0 8576 10 LVector2 * 10 LVector2 * 0 0 639 0 0 0 0 0 0 0 0 0 0

642 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

643 15 RayTraceScene * 0 8576 15 RayTraceScene * 15 RayTraceScene * 0 0 499 0 0 0 0 0 0 0 0 0 0

644 21 RayTraceScene const * 0 8576 21 RayTraceScene const * 21 RayTraceScene const * 0 0 645 0 0 0 0 0 0 0 0 0 0

645 19 RayTraceScene const 0 8832 19 RayTraceScene const 19 RayTraceScene const 0 0 499 0 0 0 0 0 0 0 0 0 0

646 18 RayTraceGeometry * 0 8576 18 RayTraceGeometry * 18 RayTraceGeometry * 0 0 501 0 0 0 0 0 0 0 0 0 0

647 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 648 0 0 0 0 0 0 0 0 0 0

648 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 649 0 0 0 0 0 0 0 0 0 0

649 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 650 0 0 0 0 0 0 0 0 0 0

650 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

651 24 RayTraceGeometry const * 0 8576 24 RayTraceGeometry const * 24 RayTraceGeometry const * 0 0 652 0 0 0 0 0 0 0 0 0 0

652 22 RayTraceGeometry const 0 8832 22 RayTraceGeometry const 22 RayTraceGeometry const 0 0 501 0 0 0 0 0 0 0 0 0 0

653 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 649 0 0 0 0 0 0 0 0 0 0

654 22 RayTraceTriangleMesh * 0 8576 22 RayTraceTriangleMesh * 22 RayTraceTriangleMesh * 0 0 502 0 0 0 0 0 0 0 0 0 0

655 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 656 0 0 0 0 0 0 0 0 0 0

656 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 657 0 0 0 0 0 0 0 0 0 0

657 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

658 12 SkyBoxSpec * 0 8576 12 SkyBoxSpec * 12 SkyBoxSpec * 0 0 503 0 0 0 0 0 0 0 0 0 0

659 18 RenderEffect const 0 8832 18 RenderEffect const 18 RenderEffect const 0 0 505 0 0 0 0 0 0 0 0 0 0

660 20 RenderEffect const * 0 8576 20 RenderEffect const * 20 RenderEffect const * 0 0 659 0 0 0 0 0 0 0 0 0 0

0
2
661 10 class_slot 0 2 465 259 0 0 0 0 0 0 0 29 BSPMaterialAttrib::class_slot 0

662 10 class_slot 0 2 465 312 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

0
