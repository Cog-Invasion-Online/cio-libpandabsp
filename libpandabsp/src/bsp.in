1562513713
3 3
3 bsp 4 t5GT 3 bsp 
263
251 3 get 0 4 514 18 TextureStages::get 0 2 3 4 0
159
static TextureStage *TextureStages::get(std::string const &name);
static TextureStage *TextureStages::get(std::string const &name, std::string const &uv_name);

252 15 get_basetexture 0 4 514 30 TextureStages::get_basetexture 0 1 5 0
58
static TextureStage *TextureStages::get_basetexture(void);

253 12 get_lightmap 0 4 514 27 TextureStages::get_lightmap 0 1 6 0
55
static TextureStage *TextureStages::get_lightmap(void);

254 19 get_bumped_lightmap 0 4 514 34 TextureStages::get_bumped_lightmap 0 1 7 0
62
static TextureStage *TextureStages::get_bumped_lightmap(void);

255 13 get_spheremap 0 4 514 28 TextureStages::get_spheremap 0 1 8 0
56
static TextureStage *TextureStages::get_spheremap(void);

256 11 get_cubemap 0 4 514 26 TextureStages::get_cubemap 0 1 9 0
54
static TextureStage *TextureStages::get_cubemap(void);

257 13 get_normalmap 0 4 514 28 TextureStages::get_normalmap 0 1 10 0
56
static TextureStage *TextureStages::get_normalmap(void);

258 13 get_heightmap 0 4 514 28 TextureStages::get_heightmap 0 1 11 0
56
static TextureStage *TextureStages::get_heightmap(void);

259 12 get_glossmap 0 4 514 27 TextureStages::get_glossmap 0 1 12 0
55
static TextureStage *TextureStages::get_glossmap(void);

260 11 get_glowmap 0 4 514 26 TextureStages::get_glowmap 0 1 13 0
54
static TextureStage *TextureStages::get_glowmap(void);

261 13 TextureStages 0 4 514 28 TextureStages::TextureStages 0 2 1 2 0
122
inline TextureStages::TextureStages(void) = default;
inline TextureStages::TextureStages(TextureStages const &) = default;

262 14 ~TextureStages 0 4 514 29 TextureStages::~TextureStages 0 0 0
36
TextureStages::~TextureStages(void);

263 11 BSPMaterial 0 4 515 24 BSPMaterial::BSPMaterial 0 2 14 15 0
137
inline explicit BSPMaterial::BSPMaterial(std::string const &name = "material");
inline BSPMaterial::BSPMaterial(BSPMaterial const &copy);

264 10 operator = 0 4 515 23 BSPMaterial::operator = 0 1 16 0
61
inline void BSPMaterial::operator =(BSPMaterial const &copy);

265 12 set_keyvalue 0 4 515 25 BSPMaterial::set_keyvalue 0 1 17 0
88
inline void BSPMaterial::set_keyvalue(std::string const &key, std::string const &value);

266 12 get_keyvalue 0 4 515 25 BSPMaterial::get_keyvalue 0 1 18 0
75
inline std::string BSPMaterial::get_keyvalue(std::string const &key) const;

267 17 get_num_keyvalues 0 4 515 30 BSPMaterial::get_num_keyvalues 0 1 19 0
62
inline std::size_t BSPMaterial::get_num_keyvalues(void) const;

268 7 get_key 0 4 515 20 BSPMaterial::get_key 0 1 20 0
68
inline std::string const &BSPMaterial::get_key(std::size_t i) const;

269 9 get_value 0 4 515 22 BSPMaterial::get_value 0 1 21 0
70
inline std::string const &BSPMaterial::get_value(std::size_t i) const;

270 16 get_keyvalue_int 0 4 515 29 BSPMaterial::get_keyvalue_int 0 1 22 0
71
inline int BSPMaterial::get_keyvalue_int(std::string const &key) const;

271 18 get_keyvalue_float 0 4 515 31 BSPMaterial::get_keyvalue_float 0 1 23 0
75
inline float BSPMaterial::get_keyvalue_float(std::string const &key) const;

272 10 set_shader 0 4 515 23 BSPMaterial::set_shader 0 1 24 0
68
inline void BSPMaterial::set_shader(std::string const &shader_name);

273 10 get_shader 0 4 515 23 BSPMaterial::get_shader 0 1 25 0
55
inline std::string BSPMaterial::get_shader(void) const;

274 8 get_file 0 4 515 21 BSPMaterial::get_file 0 1 26 0
50
inline Filename BSPMaterial::get_file(void) const;

275 12 has_keyvalue 0 4 515 25 BSPMaterial::has_keyvalue 0 1 27 0
68
inline bool BSPMaterial::has_keyvalue(std::string const &key) const;

276 15 has_env_cubemap 0 4 515 28 BSPMaterial::has_env_cubemap 0 1 28 0
53
inline bool BSPMaterial::has_env_cubemap(void) const;

277 16 has_transparency 0 4 515 29 BSPMaterial::has_transparency 0 1 29 0
54
inline bool BSPMaterial::has_transparency(void) const;

278 16 get_surface_prop 0 4 515 29 BSPMaterial::get_surface_prop 0 1 30 0
61
inline std::string BSPMaterial::get_surface_prop(void) const;

279 12 get_contents 0 4 515 25 BSPMaterial::get_contents 0 1 31 0
57
inline std::string BSPMaterial::get_contents(void) const;

280 13 get_from_file 0 4 515 26 BSPMaterial::get_from_file 0 1 32 0
75
static BSPMaterial const *BSPMaterial::get_from_file(Filename const &file);

281 14 get_class_type 0 4 515 27 BSPMaterial::get_class_type 0 1 33 0
52
static TypeHandle BSPMaterial::get_class_type(void);

282 12 ~BSPMaterial 0 4 515 25 BSPMaterial::~BSPMaterial 0 0 0
32
BSPMaterial::~BSPMaterial(void);

283 4 make 0 4 517 23 BSPMaterialAttrib::make 0 1 34 0
86
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make(BSPMaterial const *mat);

284 20 make_override_shader 0 4 517 39 BSPMaterialAttrib::make_override_shader 0 1 35 0
102
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_override_shader(BSPMaterial const *mat);

285 12 make_default 0 4 517 31 BSPMaterialAttrib::make_default 0 1 36 0
76
static ConstPointerTo< RenderAttrib > BSPMaterialAttrib::make_default(void);

286 19 get_override_shader 0 4 517 38 BSPMaterialAttrib::get_override_shader 0 1 37 0
70
inline std::string BSPMaterialAttrib::get_override_shader(void) const;

287 19 has_override_shader 0 4 517 38 BSPMaterialAttrib::has_override_shader 0 1 38 0
63
inline bool BSPMaterialAttrib::has_override_shader(void) const;

288 12 get_material 0 4 517 31 BSPMaterialAttrib::get_material 0 1 39 0
70
inline BSPMaterial const *BSPMaterialAttrib::get_material(void) const;

289 14 get_class_slot 0 4 517 33 BSPMaterialAttrib::get_class_slot 0 1 40 0
51
static int BSPMaterialAttrib::get_class_slot(void);

290 14 get_class_type 0 4 517 33 BSPMaterialAttrib::get_class_type 0 1 41 0
58
static TypeHandle BSPMaterialAttrib::get_class_type(void);

291 18 ~BSPMaterialAttrib 0 4 517 37 BSPMaterialAttrib::~BSPMaterialAttrib 0 0 0
44
BSPMaterialAttrib::~BSPMaterialAttrib(void);

292 14 get_class_type 0 4 520 27 CBaseEntity::get_class_type 0 1 44 0
52
static TypeHandle CBaseEntity::get_class_type(void);

293 11 CBaseEntity 0 4 520 24 CBaseEntity::CBaseEntity 0 2 42 43 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

294 10 get_entnum 0 4 520 23 CBaseEntity::get_entnum 0 1 45 0
40
int CBaseEntity::get_entnum(void) const;

295 10 get_loader 0 4 520 23 CBaseEntity::get_loader 0 1 46 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

296 12 ~CBaseEntity 0 4 520 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

297 14 get_class_type 0 4 521 28 CPointEntity::get_class_type 0 1 49 0
53
static TypeHandle CPointEntity::get_class_type(void);

298 12 CPointEntity 0 4 521 26 CPointEntity::CPointEntity 0 2 47 48 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

299 10 get_origin 0 4 521 24 CPointEntity::get_origin 0 1 50 0
45
LPoint3 CPointEntity::get_origin(void) const;

300 10 get_angles 0 4 521 24 CPointEntity::get_angles 0 1 51 0
46
LVector3 CPointEntity::get_angles(void) const;

301 13 ~CPointEntity 0 4 521 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

302 14 get_class_type 0 4 522 29 CBoundsEntity::get_class_type 0 1 54 0
54
static TypeHandle CBoundsEntity::get_class_type(void);

303 13 CBoundsEntity 0 4 522 28 CBoundsEntity::CBoundsEntity 0 2 52 53 0
105
CBoundsEntity::CBoundsEntity(void);
inline CBoundsEntity::CBoundsEntity(CBoundsEntity const &) = default;

304 10 get_bounds 0 4 522 25 CBoundsEntity::get_bounds 0 1 55 0
51
BoundingBox *CBoundsEntity::get_bounds(void) const;

305 9 is_inside 0 4 522 24 CBoundsEntity::is_inside 0 1 56 0
63
inline bool CBoundsEntity::is_inside(LPoint3 const &pos) const;

306 13 fillin_bounds 0 4 522 28 CBoundsEntity::fillin_bounds 0 1 57 0
64
void CBoundsEntity::fillin_bounds(LPoint3 &mins, LPoint3 &maxs);

307 14 ~CBoundsEntity 0 4 522 29 CBoundsEntity::~CBoundsEntity 0 0 0
36
CBoundsEntity::~CBoundsEntity(void);

308 14 get_class_type 0 4 523 28 CBrushEntity::get_class_type 0 1 60 0
53
static TypeHandle CBrushEntity::get_class_type(void);

309 12 CBrushEntity 0 4 523 26 CBrushEntity::CBrushEntity 0 2 58 59 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

310 12 get_modelnum 0 4 523 26 CBrushEntity::get_modelnum 0 1 61 0
43
int CBrushEntity::get_modelnum(void) const;

311 12 get_model_np 0 4 523 26 CBrushEntity::get_model_np 0 1 62 0
48
NodePath CBrushEntity::get_model_np(void) const;

312 16 get_model_bounds 0 4 523 30 CBrushEntity::get_model_bounds 0 1 63 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

313 13 ~CBrushEntity 0 4 523 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

314 9 get_width 0 4 524 21 PackResult::get_width 0 1 65 0
45
inline int PackResult::get_width(void) const;

315 10 get_height 0 4 524 22 PackResult::get_height 0 1 66 0
46
inline int PackResult::get_height(void) const;

316 15 get_unused_area 0 4 524 27 PackResult::get_unused_area 0 1 67 0
51
inline int PackResult::get_unused_area(void) const;

317 10 PackResult 0 4 524 22 PackResult::PackResult 0 1 64 0
60
inline PackResult::PackResult(PackResult const &) = default;

318 11 ~PackResult 0 4 524 23 PackResult::~PackResult 0 0 0
30
PackResult::~PackResult(void);

319 5 get_x 0 4 525 22 TextureLocation::get_x 0 1 69 0
46
inline int TextureLocation::get_x(void) const;

320 5 get_y 0 4 525 22 TextureLocation::get_y 0 1 70 0
46
inline int TextureLocation::get_y(void) const;

321 9 get_width 0 4 525 26 TextureLocation::get_width 0 1 71 0
50
inline int TextureLocation::get_width(void) const;

322 10 get_height 0 4 525 27 TextureLocation::get_height 0 1 72 0
51
inline int TextureLocation::get_height(void) const;

323 11 get_rotated 0 4 525 28 TextureLocation::get_rotated 0 1 73 0
53
inline bool TextureLocation::get_rotated(void) const;

324 15 TextureLocation 0 4 525 32 TextureLocation::TextureLocation 0 1 68 0
75
inline TextureLocation::TextureLocation(TextureLocation const &) = default;

325 16 ~TextureLocation 0 4 525 33 TextureLocation::~TextureLocation 0 0 0
40
TextureLocation::~TextureLocation(void);

326 15 getTextureCount 0 6 526 30 TexturePacker::getTextureCount 0 1 74 0
53
virtual int TexturePacker::getTextureCount(void) = 0;

327 15 setTextureCount 0 6 526 30 TexturePacker::setTextureCount 0 1 75 35
// number of textures to consider..
60
virtual void TexturePacker::setTextureCount(int tcount) = 0;

328 10 addTexture 0 6 526 25 TexturePacker::addTexture 0 1 76 21
// add textures 0 - n
61
virtual void TexturePacker::addTexture(int wid, int hit) = 0;

329 15 wouldTextureFit 0 6 526 30 TexturePacker::wouldTextureFit 0 1 77 0
135
virtual bool TexturePacker::wouldTextureFit(int wid, int hit, bool forcePowerOfTwo, bool onePixelBorder, int max_wid, int max_hit) = 0;

330 13 addNewTexture 0 6 526 28 TexturePacker::addNewTexture 0 1 78 0
64
virtual void TexturePacker::addNewTexture(int wid, int hit) = 0;

331 12 packTextures 0 6 526 27 TexturePacker::packTextures 0 1 79 74
// pack the textures, the return code is the amount of wasted/unused area.
94
virtual PackResult TexturePacker::packTextures(bool forcePowerOfTwo, bool onePixelBorder) = 0;

332 18 getTextureLocation 0 6 526 33 TexturePacker::getTextureLocation 0 1 80 58
// returns true if the texture has been rotated 90 degrees
73
virtual TextureLocation TexturePacker::getTextureLocation(int index) = 0;

333 19 createTexturePacker 0 4 526 34 TexturePacker::createTexturePacker 0 1 81 0
63
static TexturePacker *TexturePacker::createTexturePacker(void);

334 20 releaseTexturePacker 0 4 526 35 TexturePacker::releaseTexturePacker 0 1 82 0
67
static void TexturePacker::releaseTexturePacker(TexturePacker *tp);

335 14 ~TexturePacker 0 4 526 29 TexturePacker::~TexturePacker 0 0 0
36
TexturePacker::~TexturePacker(void);

336 4 make 0 4 527 19 BSPFaceAttrib::make 0 1 83 0
107
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material, int face_type);

337 12 make_default 0 4 527 27 BSPFaceAttrib::make_default 0 1 84 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

338 15 make_ignore_pvs 0 4 527 30 BSPFaceAttrib::make_ignore_pvs 0 1 85 0
75
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_ignore_pvs(void);

339 12 get_material 0 4 527 27 BSPFaceAttrib::get_material 0 1 86 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

340 13 get_face_type 0 4 527 28 BSPFaceAttrib::get_face_type 0 1 87 0
52
inline int BSPFaceAttrib::get_face_type(void) const;

341 14 get_ignore_pvs 0 4 527 29 BSPFaceAttrib::get_ignore_pvs 0 1 88 0
54
inline bool BSPFaceAttrib::get_ignore_pvs(void) const;

342 14 get_class_slot 0 4 527 29 BSPFaceAttrib::get_class_slot 0 1 89 0
47
static int BSPFaceAttrib::get_class_slot(void);

343 14 get_class_type 0 4 527 29 BSPFaceAttrib::get_class_type 0 1 90 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

344 14 ~BSPFaceAttrib 0 4 527 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

345 9 BSPLoader 0 4 529 20 BSPLoader::BSPLoader 0 1 91 0
27
BSPLoader::BSPLoader(void);

346 4 read 0 4 529 15 BSPLoader::read 0 1 92 0
43
bool BSPLoader::read(Filename const &file);

347 16 do_optimizations 0 4 529 27 BSPLoader::do_optimizations 0 1 93 0
39
void BSPLoader::do_optimizations(void);

348 9 set_gamma 0 4 529 20 BSPLoader::set_gamma 0 1 94 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

349 9 get_gamma 0 4 529 20 BSPLoader::get_gamma 0 1 95 0
52
inline PN_stdfloat BSPLoader::get_gamma(void) const;

350 7 set_win 0 4 529 18 BSPLoader::set_win 0 1 96 0
45
void BSPLoader::set_win(GraphicsWindow *win);

351 10 set_camera 0 4 529 21 BSPLoader::set_camera 0 1 97 0
51
void BSPLoader::set_camera(NodePath const &camera);

352 10 set_render 0 4 529 21 BSPLoader::set_render 0 1 98 0
51
void BSPLoader::set_render(NodePath const &render);

353 20 set_shader_generator 0 4 529 31 BSPLoader::set_shader_generator 0 1 99 0
64
void BSPLoader::set_shader_generator(BSPShaderGenerator *shgen);

354 19 set_want_visibility 0 4 529 30 BSPLoader::set_want_visibility 0 1 100 0
47
void BSPLoader::set_want_visibility(bool flag);

355 18 set_want_lightmaps 0 4 529 29 BSPLoader::set_want_lightmaps 0 1 101 0
46
void BSPLoader::set_want_lightmaps(bool flag);

356 16 set_physics_type 0 4 529 27 BSPLoader::set_physics_type 0 1 102 0
43
void BSPLoader::set_physics_type(int type);

357 19 set_visualize_leafs 0 4 529 30 BSPLoader::set_visualize_leafs 0 1 103 0
47
void BSPLoader::set_visualize_leafs(bool flag);

358 18 set_materials_file 0 4 529 29 BSPLoader::set_materials_file 0 1 104 0
57
void BSPLoader::set_materials_file(Filename const &file);

359 13 set_wireframe 0 4 529 24 BSPLoader::set_wireframe 0 1 105 0
41
void BSPLoader::set_wireframe(bool flag);

360 13 get_wireframe 0 4 529 24 BSPLoader::get_wireframe 0 1 106 0
49
inline bool BSPLoader::get_wireframe(void) const;

361 10 get_camera 0 4 529 21 BSPLoader::get_camera 0 1 107 0
50
inline NodePath BSPLoader::get_camera(void) const;

362 11 trace_decal 0 4 529 22 BSPLoader::trace_decal 0 1 108 0
158
inline NodePath BSPLoader::trace_decal(std::string const &decal_material, LPoint2 const &decal_scale, float rotate, LPoint3 const &start, LPoint3 const &end);

363 27 get_closest_cubemap_texture 0 4 529 38 BSPLoader::get_closest_cubemap_texture 0 1 109 0
68
Texture *BSPLoader::get_closest_cubemap_texture(LPoint3 const &pos);

364 14 build_cubemaps 0 4 529 25 BSPLoader::build_cubemaps 0 1 110 0
37
void BSPLoader::build_cubemaps(void);

365 16 set_want_shadows 0 4 529 27 BSPLoader::set_want_shadows 0 1 111 0
44
void BSPLoader::set_want_shadows(bool flag);

366 14 set_shadow_dir 0 4 529 25 BSPLoader::set_shadow_dir 0 1 112 0
52
void BSPLoader::set_shadow_dir(LVector3 const &dir);

367 16 extract_modelnum 0 4 529 27 BSPLoader::extract_modelnum 0 1 113 0
44
int BSPLoader::extract_modelnum(int entnum);

368 16 get_model_bounds 0 4 529 27 BSPLoader::get_model_bounds 0 1 114 0
77
void BSPLoader::get_model_bounds(int modelnum, LPoint3 &mins, LPoint3 &maxs);

369 28 set_server_entity_dispatcher 0 4 529 39 BSPLoader::set_server_entity_dispatcher 0 1 115 0
67
void BSPLoader::set_server_entity_dispatcher(PyObject *dispatcher);

370 27 link_server_entity_to_class 0 4 529 38 BSPLoader::link_server_entity_to_class 0 1 116 0
89
void BSPLoader::link_server_entity_to_class(std::string const &name, PyTypeObject *type);

371 6 set_ai 0 4 529 17 BSPLoader::set_ai 0 1 117 0
32
void BSPLoader::set_ai(bool ai);

372 5 is_ai 0 4 529 16 BSPLoader::is_ai 0 1 118 0
41
inline bool BSPLoader::is_ai(void) const;

373 10 trace_line 0 4 529 21 BSPLoader::trace_line 0 1 119 0
69
bool BSPLoader::trace_line(LPoint3 const &start, LPoint3 const &end);

374 9 clip_line 0 4 529 20 BSPLoader::clip_line 0 1 120 0
71
LPoint3 BSPLoader::clip_line(LPoint3 const &start, LPoint3 const &end);

375 20 link_entity_to_class 0 4 529 31 BSPLoader::link_entity_to_class 0 1 121 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

376 28 get_py_entity_by_target_name 0 4 529 39 BSPLoader::get_py_entity_by_target_name 0 1 122 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

377 17 find_all_entities 0 4 529 28 BSPLoader::find_all_entities 0 1 123 0
69
PyObject *BSPLoader::find_all_entities(std::string const &classname);

378 20 get_entity_keyvalues 0 4 529 31 BSPLoader::get_entity_keyvalues 0 1 124 0
71
void BSPLoader::get_entity_keyvalues(PyObject *list, int const entnum);

379 18 link_cent_to_pyent 0 4 529 29 BSPLoader::link_cent_to_pyent 0 1 125 0
63
void BSPLoader::link_cent_to_pyent(int entum, PyObject *pyent);

380 16 remove_py_entity 0 4 529 27 BSPLoader::remove_py_entity 0 1 126 0
48
void BSPLoader::remove_py_entity(PyObject *ent);

381 16 get_num_entities 0 4 529 27 BSPLoader::get_num_entities 0 1 127 0
51
inline int BSPLoader::get_num_entities(void) const;

382 16 get_entity_value 0 4 529 27 BSPLoader::get_entity_value 0 1 128 0
75
std::string BSPLoader::get_entity_value(int entnum, char const *key) const;

383 22 get_entity_value_float 0 4 529 33 BSPLoader::get_entity_value_float 0 1 129 0
75
float BSPLoader::get_entity_value_float(int entnum, char const *key) const;

384 20 get_entity_value_int 0 4 529 31 BSPLoader::get_entity_value_int 0 1 130 0
71
int BSPLoader::get_entity_value_int(int entnum, char const *key) const;

385 23 get_entity_value_vector 0 4 529 34 BSPLoader::get_entity_value_vector 0 1 131 0
79
LVector3 BSPLoader::get_entity_value_vector(int entnum, char const *key) const;

386 22 get_entity_value_color 0 4 529 33 BSPLoader::get_entity_value_color 0 1 132 0
95
LColor BSPLoader::get_entity_value_color(int entnum, char const *key, bool scale = true) const;

387 10 get_entity 0 4 529 21 BSPLoader::get_entity 0 1 133 0
49
NodePath BSPLoader::get_entity(int entnum) const;

388 9 get_model 0 4 529 20 BSPLoader::get_model 0 1 134 0
50
NodePath BSPLoader::get_model(int modelnum) const;

389 12 get_c_entity 0 4 529 23 BSPLoader::get_c_entity 0 1 135 0
61
CBaseEntity *BSPLoader::get_c_entity(int const entnum) const;

390 9 find_leaf 0 4 529 20 BSPLoader::find_leaf 0 2 136 137 0
98
inline int BSPLoader::find_leaf(NodePath const &np);
int BSPLoader::find_leaf(LPoint3 const &pos);

391 9 find_node 0 4 529 20 BSPLoader::find_node 0 1 138 0
45
int BSPLoader::find_node(LPoint3 const &pos);

392 18 is_cluster_visible 0 4 529 29 BSPLoader::is_cluster_visible 0 1 139 0
72
bool BSPLoader::is_cluster_visible(int curr_cluster, int cluster) const;

393 15 pvs_bounds_test 0 4 529 26 BSPLoader::pvs_bounds_test 0 1 140 0
109
bool BSPLoader::pvs_bounds_test(GeometricBoundingVolume const *bounds, unsigned int required_leaf_flags = 0);

394 15 make_net_bounds 0 4 529 26 BSPLoader::make_net_bounds 0 1 141 0
147
ConstPointerTo< GeometricBoundingVolume > BSPLoader::make_net_bounds(TransformState const *net_transform, GeometricBoundingVolume const *original);

395 16 has_active_level 0 4 529 27 BSPLoader::has_active_level 0 1 142 0
52
inline bool BSPLoader::has_active_level(void) const;

396 14 has_visibility 0 4 529 25 BSPLoader::has_visibility 0 1 143 0
50
inline bool BSPLoader::has_visibility(void) const;

397 7 cleanup 0 4 529 18 BSPLoader::cleanup 0 1 144 0
30
void BSPLoader::cleanup(void);

398 10 get_result 0 4 529 21 BSPLoader::get_result 0 1 145 0
50
inline NodePath BSPLoader::get_result(void) const;

399 16 set_current_leaf 0 4 529 27 BSPLoader::set_current_leaf 0 1 146 0
50
inline void BSPLoader::set_current_leaf(int leaf);

400 16 get_current_leaf 0 4 529 27 BSPLoader::get_current_leaf 0 1 147 0
51
inline int BSPLoader::get_current_leaf(void) const;

401 16 get_num_visleafs 0 4 529 27 BSPLoader::get_num_visleafs 0 1 148 0
51
inline int BSPLoader::get_num_visleafs(void) const;

402 15 get_leaf_center 0 4 529 26 BSPLoader::get_leaf_center 0 1 149 0
58
inline LPoint3 BSPLoader::get_leaf_center(int leaf) const;

403 6 update 0 4 529 17 BSPLoader::update 0 1 150 0
29
void BSPLoader::update(void);

404 14 get_global_ptr 0 4 529 25 BSPLoader::get_global_ptr 0 1 151 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

405 10 ~BSPLoader 0 4 529 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

406 15 add_permutation 0 4 531 35 ShaderPermutations::add_permutation 0 1 154 0
104
inline void ShaderPermutations::add_permutation(std::string const &key, std::string const &value = "1");

407 9 add_input 0 4 531 29 ShaderPermutations::add_input 0 1 155 0
82
void ShaderPermutations::add_input(ShaderInput const &inp, bool important = true);

408 8 add_flag 0 4 531 28 ShaderPermutations::add_flag 0 1 156 0
44
void ShaderPermutations::add_flag(int flag);

409 10 operator < 0 4 531 30 ShaderPermutations::operator < 0 1 157 0
75
bool ShaderPermutations::operator <(ShaderPermutations const &other) const;

410 18 ShaderPermutations 0 4 531 38 ShaderPermutations::ShaderPermutations 0 2 152 153 0
147
inline ShaderPermutations::ShaderPermutations(void) = default;
inline ShaderPermutations::ShaderPermutations(ShaderPermutations const &) = default;

411 19 ~ShaderPermutations 0 4 531 39 ShaderPermutations::~ShaderPermutations 0 0 0
46
ShaderPermutations::~ShaderPermutations(void);

412 24 upcast_to_ReferenceCount 0 12 532 36 ShaderSpec::upcast_to_ReferenceCount 0 1 160 40
upcast from ShaderSpec to ReferenceCount
59
ReferenceCount *ShaderSpec::upcast_to_ReferenceCount(void);

413 22 downcast_to_ShaderSpec 0 12 533 38 ReferenceCount::downcast_to_ShaderSpec 0 0 42
downcast from ReferenceCount to ShaderSpec
57
ShaderSpec *ReferenceCount::downcast_to_ShaderSpec(void);

414 17 upcast_to_Namable 0 12 532 29 ShaderSpec::upcast_to_Namable 0 1 161 33
upcast from ShaderSpec to Namable
45
Namable *ShaderSpec::upcast_to_Namable(void);

415 22 downcast_to_ShaderSpec 0 12 534 31 Namable::downcast_to_ShaderSpec 0 0 35
downcast from Namable to ShaderSpec
50
ShaderSpec *Namable::downcast_to_ShaderSpec(void);

416 17 read_shader_files 0 4 532 29 ShaderSpec::read_shader_files 0 1 158 0
117
void ShaderSpec::read_shader_files(Filename const &vert_file, Filename const &pixel_file, Filename const &geom_file);

417 14 get_class_type 0 4 532 26 ShaderSpec::get_class_type 0 1 159 0
51
static TypeHandle ShaderSpec::get_class_type(void);

418 11 ~ShaderSpec 0 4 532 23 ShaderSpec::~ShaderSpec 0 0 0
30
ShaderSpec::~ShaderSpec(void);

419 18 BSPShaderGenerator 0 4 537 38 BSPShaderGenerator::BSPShaderGenerator 0 2 162 163 0
200
BSPShaderGenerator::BSPShaderGenerator(GraphicsStateGuardian *gsg, NodePath const &camera, NodePath const &render);
inline BSPShaderGenerator::BSPShaderGenerator(BSPShaderGenerator const &) = default;

420 13 set_sun_light 0 4 537 33 BSPShaderGenerator::set_sun_light 0 1 164 0
59
void BSPShaderGenerator::set_sun_light(NodePath const &np);

421 12 start_update 0 4 537 32 BSPShaderGenerator::start_update 0 1 165 0
44
void BSPShaderGenerator::start_update(void);

422 10 add_shader 0 4 537 30 BSPShaderGenerator::add_shader 0 1 166 0
66
void BSPShaderGenerator::add_shader(PointerTo< ShaderSpec > spec);

423 19 has_shadow_sunlight 0 4 537 39 BSPShaderGenerator::has_shadow_sunlight 0 1 167 0
64
inline bool BSPShaderGenerator::has_shadow_sunlight(void) const;

424 22 get_pssm_array_texture 0 4 537 42 BSPShaderGenerator::get_pssm_array_texture 0 1 168 0
71
inline Texture *BSPShaderGenerator::get_pssm_array_texture(void) const;

425 12 get_pssm_rig 0 4 537 32 BSPShaderGenerator::get_pssm_rig 0 1 169 0
67
inline PSSMCameraRig *BSPShaderGenerator::get_pssm_rig(void) const;

426 18 set_shader_quality 0 4 537 38 BSPShaderGenerator::set_shader_quality 0 1 170 0
57
void BSPShaderGenerator::set_shader_quality(int quality);

427 18 get_shader_quality 0 4 537 38 BSPShaderGenerator::get_shader_quality 0 1 171 0
62
inline int BSPShaderGenerator::get_shader_quality(void) const;

428 20 set_identity_cubemap 0 4 537 40 BSPShaderGenerator::set_identity_cubemap 0 1 172 0
67
static void BSPShaderGenerator::set_identity_cubemap(Texture *tex);

429 20 get_identity_cubemap 0 4 537 40 BSPShaderGenerator::get_identity_cubemap 0 1 173 0
63
static Texture *BSPShaderGenerator::get_identity_cubemap(void);

430 11 make_shader 0 4 537 31 BSPShaderGenerator::make_shader 0 1 174 0
121
static ConstPointerTo< Shader > BSPShaderGenerator::make_shader(ShaderSpec const *spec, ShaderPermutations const &perms);

431 14 get_class_type 0 4 537 34 BSPShaderGenerator::get_class_type 0 1 175 0
59
static TypeHandle BSPShaderGenerator::get_class_type(void);

432 19 ~BSPShaderGenerator 0 4 537 39 BSPShaderGenerator::~BSPShaderGenerator 0 0 0
46
BSPShaderGenerator::~BSPShaderGenerator(void);

433 14 get_class_type 0 4 539 32 BSPCullTraverser::get_class_type 0 1 178 0
57
static TypeHandle BSPCullTraverser::get_class_type(void);

434 16 BSPCullTraverser 0 4 539 34 BSPCullTraverser::BSPCullTraverser 0 2 176 177 0
154
BSPCullTraverser::BSPCullTraverser(CullTraverser *trav, BSPLoader *loader);
inline BSPCullTraverser::BSPCullTraverser(BSPCullTraverser const &) = default;

435 17 ~BSPCullTraverser 0 4 539 35 BSPCullTraverser::~BSPCullTraverser 0 0 0
42
BSPCullTraverser::~BSPCullTraverser(void);

436 14 get_class_type 0 4 541 25 BSPRender::get_class_type 0 1 181 0
50
static TypeHandle BSPRender::get_class_type(void);

437 9 BSPRender 0 4 541 20 BSPRender::BSPRender 0 2 179 180 0
123
BSPRender::BSPRender(std::string const &name, BSPLoader *loader);
inline BSPRender::BSPRender(BSPRender const &) = default;

438 10 ~BSPRender 0 4 541 21 BSPRender::~BSPRender 0 0 0
28
BSPRender::~BSPRender(void);

439 14 get_class_type 0 4 543 23 BSPRoot::get_class_type 0 1 184 0
48
static TypeHandle BSPRoot::get_class_type(void);

440 7 BSPRoot 0 4 543 16 BSPRoot::BSPRoot 0 2 182 183 0
94
BSPRoot::BSPRoot(std::string const &name);
inline BSPRoot::BSPRoot(BSPRoot const &) = default;

441 8 ~BSPRoot 0 4 543 17 BSPRoot::~BSPRoot 0 0 0
24
BSPRoot::~BSPRoot(void);

442 14 get_class_type 0 4 544 23 BSPProp::get_class_type 0 1 187 0
48
static TypeHandle BSPProp::get_class_type(void);

443 7 BSPProp 0 4 544 16 BSPProp::BSPProp 0 2 185 186 0
94
BSPProp::BSPProp(std::string const &name);
inline BSPProp::BSPProp(BSPProp const &) = default;

444 8 ~BSPProp 0 4 544 17 BSPProp::~BSPProp 0 0 0
24
BSPProp::~BSPProp(void);

445 14 get_class_type 0 4 546 24 BSPModel::get_class_type 0 1 190 0
49
static TypeHandle BSPModel::get_class_type(void);

446 8 BSPModel 0 4 546 18 BSPModel::BSPModel 0 2 188 189 0
99
BSPModel::BSPModel(std::string const &name);
inline BSPModel::BSPModel(BSPModel const &) = default;

447 9 ~BSPModel 0 4 546 19 BSPModel::~BSPModel 0 0 0
26
BSPModel::~BSPModel(void);

448 20 VertexLitGenericSpec 0 4 548 42 VertexLitGenericSpec::VertexLitGenericSpec 0 1 191 0
49
VertexLitGenericSpec::VertexLitGenericSpec(void);

449 21 ~VertexLitGenericSpec 0 4 548 43 VertexLitGenericSpec::~VertexLitGenericSpec 0 0 0
50
VertexLitGenericSpec::~VertexLitGenericSpec(void);

450 22 LightmappedGenericSpec 0 4 549 46 LightmappedGenericSpec::LightmappedGenericSpec 0 1 192 0
53
LightmappedGenericSpec::LightmappedGenericSpec(void);

451 23 ~LightmappedGenericSpec 0 4 549 47 LightmappedGenericSpec::~LightmappedGenericSpec 0 0 0
54
LightmappedGenericSpec::~LightmappedGenericSpec(void);

452 16 UnlitGenericSpec 0 4 550 34 UnlitGenericSpec::UnlitGenericSpec 0 1 193 0
41
UnlitGenericSpec::UnlitGenericSpec(void);

453 17 ~UnlitGenericSpec 0 4 550 35 UnlitGenericSpec::~UnlitGenericSpec 0 0 0
42
UnlitGenericSpec::~UnlitGenericSpec(void);

454 14 UnlitNoMatSpec 0 4 551 30 UnlitNoMatSpec::UnlitNoMatSpec 0 1 194 0
37
UnlitNoMatSpec::UnlitNoMatSpec(void);

455 15 ~UnlitNoMatSpec 0 4 551 31 UnlitNoMatSpec::~UnlitNoMatSpec 0 0 0
38
UnlitNoMatSpec::~UnlitNoMatSpec(void);

456 13 CSMRenderSpec 0 4 552 28 CSMRenderSpec::CSMRenderSpec 0 1 195 0
35
CSMRenderSpec::CSMRenderSpec(void);

457 14 ~CSMRenderSpec 0 4 552 29 CSMRenderSpec::~CSMRenderSpec 0 0 0
36
CSMRenderSpec::~CSMRenderSpec(void);

458 10 initialize 0 4 553 20 RayTrace::initialize 0 1 198 0
39
static void RayTrace::initialize(void);

459 8 destruct 0 4 553 18 RayTrace::destruct 0 1 199 0
37
static void RayTrace::destruct(void);

460 8 RayTrace 0 4 553 18 RayTrace::RayTrace 0 2 196 197 0
97
inline RayTrace::RayTrace(void) = default;
inline RayTrace::RayTrace(RayTrace const &) = default;

461 9 ~RayTrace 0 4 553 19 RayTrace::~RayTrace 0 0 0
26
RayTrace::~RayTrace(void);

462 17 RayTraceHitResult 0 4 554 36 RayTraceHitResult::RayTraceHitResult 0 2 200 201 0
132
inline RayTraceHitResult::RayTraceHitResult(void);
inline RayTraceHitResult::RayTraceHitResult(RayTraceHitResult const &) = default;

463 7 has_hit 0 4 554 26 RayTraceHitResult::has_hit 0 1 202 0
51
inline bool RayTraceHitResult::has_hit(void) const;

464 14 get_hit_normal 0 4 554 33 RayTraceHitResult::get_hit_normal 0 1 203 0
62
inline LVector3 RayTraceHitResult::get_hit_normal(void) const;

465 6 get_uv 0 4 554 25 RayTraceHitResult::get_uv 0 1 204 0
54
inline LVector2 RayTraceHitResult::get_uv(void) const;

466 11 get_prim_id 0 4 554 30 RayTraceHitResult::get_prim_id 0 1 205 0
63
inline unsigned int RayTraceHitResult::get_prim_id(void) const;

467 11 get_geom_id 0 4 554 30 RayTraceHitResult::get_geom_id 0 1 206 0
63
inline unsigned int RayTraceHitResult::get_geom_id(void) const;

468 16 get_hit_fraction 0 4 554 35 RayTraceHitResult::get_hit_fraction 0 1 207 0
61
inline float RayTraceHitResult::get_hit_fraction(void) const;

469 18 ~RayTraceHitResult 0 4 554 37 RayTraceHitResult::~RayTraceHitResult 0 0 0
44
RayTraceHitResult::~RayTraceHitResult(void);

470 13 RayTraceScene 0 4 555 28 RayTraceScene::RayTraceScene 0 2 208 209 0
105
RayTraceScene::RayTraceScene(void);
inline RayTraceScene::RayTraceScene(RayTraceScene const &) = default;

471 12 add_geometry 0 4 555 27 RayTraceScene::add_geometry 0 1 210 0
57
void RayTraceScene::add_geometry(RayTraceGeometry *geom);

472 15 remove_geometry 0 4 555 30 RayTraceScene::remove_geometry 0 1 211 0
60
void RayTraceScene::remove_geometry(RayTraceGeometry *geom);

473 10 remove_all 0 4 555 25 RayTraceScene::remove_all 0 1 212 0
37
void RayTraceScene::remove_all(void);

474 10 trace_line 0 4 555 25 RayTraceScene::trace_line 0 1 213 0
116
inline RayTraceHitResult RayTraceScene::trace_line(LPoint3 const &start, LPoint3 const &end, BitMask32 const &mask);

475 9 trace_ray 0 4 555 24 RayTraceScene::trace_ray 0 1 214 0
132
RayTraceHitResult RayTraceScene::trace_ray(LPoint3 const &origin, LVector3 const &direction, float distance, BitMask32 const &mask);

476 17 set_build_quality 0 4 555 32 RayTraceScene::set_build_quality 0 1 215 0
51
void RayTraceScene::set_build_quality(int quality);

477 6 update 0 4 555 21 RayTraceScene::update 0 1 216 0
33
void RayTraceScene::update(void);

478 12 get_geometry 0 4 555 27 RayTraceScene::get_geometry 0 1 217 0
75
inline RayTraceGeometry *RayTraceScene::get_geometry(unsigned int geom_id);

479 14 get_class_type 0 4 557 32 RayTraceGeometry::get_class_type 0 1 218 0
57
static TypeHandle RayTraceGeometry::get_class_type(void);

480 8 set_mask 0 4 557 26 RayTraceGeometry::set_mask 0 2 219 220 0
114
inline void RayTraceGeometry::set_mask(BitMask32 const &mask);
void RayTraceGeometry::set_mask(unsigned int mask);

481 8 get_mask 0 4 557 26 RayTraceGeometry::get_mask 0 1 221 0
56
inline BitMask32 RayTraceGeometry::get_mask(void) const;

482 11 get_geom_id 0 4 557 29 RayTraceGeometry::get_geom_id 0 1 222 0
62
inline unsigned int RayTraceGeometry::get_geom_id(void) const;

483 17 set_build_quality 0 4 557 35 RayTraceGeometry::set_build_quality 0 1 223 0
54
void RayTraceGeometry::set_build_quality(int quality);

484 5 build 0 6 557 23 RayTraceGeometry::build 0 1 224 0
47
virtual void RayTraceGeometry::build(void) = 0;

485 14 get_class_type 0 4 558 36 RayTraceTriangleMesh::get_class_type 0 1 226 0
61
static TypeHandle RayTraceTriangleMesh::get_class_type(void);

486 20 RayTraceTriangleMesh 0 4 558 42 RayTraceTriangleMesh::RayTraceTriangleMesh 0 1 225 0
73
RayTraceTriangleMesh::RayTraceTriangleMesh(std::string const &name = "");

487 12 add_triangle 0 4 558 34 RayTraceTriangleMesh::add_triangle 0 1 227 0
97
void RayTraceTriangleMesh::add_triangle(LPoint3 const &p1, LPoint3 const &p2, LPoint3 const &p3);

488 23 add_triangles_from_geom 0 4 558 45 RayTraceTriangleMesh::add_triangles_from_geom 0 1 228 0
105
void RayTraceTriangleMesh::add_triangles_from_geom(Geom const *geom, TransformState const *ts = nullptr);

489 21 ~RayTraceTriangleMesh 0 4 558 43 RayTraceTriangleMesh::~RayTraceTriangleMesh 0 0 0
50
RayTraceTriangleMesh::~RayTraceTriangleMesh(void);

490 10 SkyBoxSpec 0 4 559 22 SkyBoxSpec::SkyBoxSpec 0 1 229 0
29
SkyBoxSpec::SkyBoxSpec(void);

491 11 ~SkyBoxSpec 0 4 559 23 SkyBoxSpec::~SkyBoxSpec 0 0 0
30
SkyBoxSpec::~SkyBoxSpec(void);

492 4 make 0 4 560 24 AmbientBoostEffect::make 0 1 230 0
69
static ConstPointerTo< RenderEffect > AmbientBoostEffect::make(void);

493 14 get_class_type 0 4 560 34 AmbientBoostEffect::get_class_type 0 1 231 0
59
static TypeHandle AmbientBoostEffect::get_class_type(void);

494 19 ~AmbientBoostEffect 0 4 560 39 AmbientBoostEffect::~AmbientBoostEffect 0 0 0
46
AmbientBoostEffect::~AmbientBoostEffect(void);

495 14 Audio3DManager 0 4 562 30 Audio3DManager::Audio3DManager 0 2 232 233 0
228
Audio3DManager::Audio3DManager(AudioManager *mgr, NodePath const &listener_target = NodePath(), NodePath const &root = NodePath(), int task_priority = 51);
inline Audio3DManager::Audio3DManager(Audio3DManager const &) = default;

496 19 set_distance_factor 0 4 562 35 Audio3DManager::set_distance_factor 0 1 234 0
68
inline void Audio3DManager::set_distance_factor(PN_stdfloat factor);

497 19 get_distance_factor 0 4 562 35 Audio3DManager::get_distance_factor 0 1 235 0
67
inline PN_stdfloat Audio3DManager::get_distance_factor(void) const;

498 18 set_doppler_factor 0 4 562 34 Audio3DManager::set_doppler_factor 0 1 236 0
67
inline void Audio3DManager::set_doppler_factor(PN_stdfloat factor);

499 18 get_doppler_factor 0 4 562 34 Audio3DManager::get_doppler_factor 0 1 237 0
66
inline PN_stdfloat Audio3DManager::get_doppler_factor(void) const;

500 19 set_drop_off_factor 0 4 562 35 Audio3DManager::set_drop_off_factor 0 1 238 0
68
inline void Audio3DManager::set_drop_off_factor(PN_stdfloat factor);

501 19 get_drop_off_factor 0 4 562 35 Audio3DManager::get_drop_off_factor 0 1 239 0
67
inline PN_stdfloat Audio3DManager::get_drop_off_factor(void) const;

502 22 set_sound_min_distance 0 4 562 38 Audio3DManager::set_sound_min_distance 0 1 240 0
88
inline void Audio3DManager::set_sound_min_distance(AudioSound *sound, PN_stdfloat dist);

503 22 get_sound_min_distance 0 4 562 38 Audio3DManager::get_sound_min_distance 0 1 241 0
83
inline PN_stdfloat Audio3DManager::get_sound_min_distance(AudioSound *sound) const;

504 22 set_sound_max_distance 0 4 562 38 Audio3DManager::set_sound_max_distance 0 1 242 0
88
inline void Audio3DManager::set_sound_max_distance(AudioSound *sound, PN_stdfloat dist);

505 22 get_sound_max_distance 0 4 562 38 Audio3DManager::get_sound_max_distance 0 1 243 0
83
inline PN_stdfloat Audio3DManager::get_sound_max_distance(AudioSound *sound) const;

506 15 attach_listener 0 4 562 31 Audio3DManager::attach_listener 0 1 244 0
70
inline void Audio3DManager::attach_listener(NodePath const &listener);

507 15 detach_listener 0 4 562 31 Audio3DManager::detach_listener 0 1 245 0
50
inline void Audio3DManager::detach_listener(void);

508 8 load_sfx 0 4 562 24 Audio3DManager::load_sfx 0 1 246 0
81
inline PointerTo< AudioSound > Audio3DManager::load_sfx(std::string const &path);

509 22 attach_sound_to_object 0 4 562 38 Audio3DManager::attach_sound_to_object 0 1 247 0
87
void Audio3DManager::attach_sound_to_object(AudioSound *sound, NodePath const &object);

510 12 detach_sound 0 4 562 28 Audio3DManager::detach_sound 0 1 248 0
53
void Audio3DManager::detach_sound(AudioSound *sound);

511 18 print_audio_digest 0 4 562 34 Audio3DManager::print_audio_digest 0 1 249 0
46
void Audio3DManager::print_audio_digest(void);

512 6 update 0 4 562 22 Audio3DManager::update 0 1 250 0
34
void Audio3DManager::update(void);

513 15 ~Audio3DManager 0 4 562 31 Audio3DManager::~Audio3DManager 0 0 0
38
Audio3DManager::~Audio3DManager(void);

250
1 0 0 7 12 563 262 0 0 0 
2 0 0 7 12 563 262 0 0 1 6 param0 0 564  
3 0 0 7 2 568 0 0 0 1 4 name 1 567  
4 0 0 7 2 568 0 0 0 2 4 name 1 567  7 uv_name 1 567  
5 0 0 7 3 568 0 0 0 0 
6 0 0 7 4 568 0 0 0 0 
7 0 0 7 5 568 0 0 0 0 
8 0 0 7 6 568 0 0 0 0 
9 0 0 7 7 568 0 0 0 0 
10 0 0 7 8 568 0 0 0 0 
11 0 0 7 9 568 0 0 0 0 
12 0 0 7 10 568 0 0 0 0 
13 0 0 7 11 568 0 0 0 0 
14 0 0 7 16 571 282 0 0 1 4 copy 1 569  
15 0 0 7 16 571 282 0 0 1 4 name 1 567  
16 0 0 7 17 571 282 0 0 2 4 this 3 571  4 copy 1 569  
17 0 0 4 18 572 0 0 0 3 4 this 3 571  3 key 1 567  5 value 1 567  
18 0 0 6 19 567 0 0 0 2 4 this 3 569  3 key 1 567  
19 0 0 6 20 573 0 0 0 1 4 this 3 569  
20 0 0 6 21 567 0 0 0 2 4 this 3 569  1 i 1 573  
21 0 0 6 22 567 0 0 0 2 4 this 3 569  1 i 1 573  
22 0 0 6 23 519 0 0 0 2 4 this 3 569  3 key 1 567  
23 0 0 6 24 575 0 0 0 2 4 this 3 569  3 key 1 567  
24 0 0 4 25 572 0 0 0 2 4 this 3 571  11 shader_name 1 567  
25 0 0 6 26 567 0 0 0 1 4 this 3 569  
26 0 0 7 27 577 0 0 0 1 4 this 3 569  
27 0 0 6 28 578 0 0 0 2 4 this 3 569  3 key 1 567  
28 0 0 6 29 578 0 0 0 1 4 this 3 569  
29 0 0 6 30 578 0 0 0 1 4 this 3 569  
30 0 0 6 31 567 0 0 0 1 4 this 3 569  
31 0 0 6 32 567 0 0 0 1 4 this 3 569  
32 0 0 7 33 569 0 0 0 1 4 file 1 579  
33 0 0 7 34 582 0 0 0 0 
34 0 0 7 38 584 0 0 0 1 3 mat 1 569  
35 0 0 7 39 584 0 0 0 1 3 mat 1 569  
36 0 0 7 40 584 0 0 0 0 
37 0 0 6 41 567 0 0 0 1 4 this 3 585  
38 0 0 6 42 578 0 0 0 1 4 this 3 585  
39 0 0 7 43 569 0 0 0 1 4 this 3 585  
40 0 0 6 44 519 0 0 0 0 
41 0 0 7 47 582 0 0 0 0 
42 0 0 7 51 587 296 0 0 0 
43 0 0 7 51 587 296 0 0 1 6 param0 0 588  
44 0 0 7 50 582 0 0 0 0 
45 0 0 6 52 519 0 0 0 1 4 this 3 588  
46 0 0 6 53 590 0 0 0 1 4 this 3 588  
47 0 0 7 57 591 301 0 0 0 
48 0 0 7 57 591 301 0 0 1 6 param0 0 592  
49 0 0 7 56 582 0 0 0 0 
50 0 0 7 58 596 0 0 0 1 4 this 3 592  
51 0 0 7 59 599 0 0 0 1 4 this 3 592  
52 0 0 7 63 600 307 0 0 0 
53 0 0 7 63 600 307 0 0 1 6 param0 0 601  
54 0 0 7 62 582 0 0 0 0 
55 0 0 7 64 604 0 0 0 1 4 this 3 601  
56 0 0 6 65 578 0 0 0 2 4 this 3 601  3 pos 1 605  
57 0 0 4 66 572 0 0 0 3 4 this 3 600  4 mins 1 596  4 maxs 1 596  
58 0 0 7 70 607 313 0 0 0 
59 0 0 7 70 607 313 0 0 1 6 param0 0 608  
60 0 0 7 69 582 0 0 0 0 
61 0 0 6 71 519 0 0 0 1 4 this 3 608  
62 0 0 7 72 611 0 0 0 1 4 this 3 608  
63 0 0 4 73 572 0 0 0 3 4 this 3 607  4 mins 1 596  4 maxs 1 596  
64 0 0 7 79 614 318 0 0 1 6 param0 0 612  
65 0 0 6 76 519 0 0 0 1 4 this 3 612  
66 0 0 6 77 519 0 0 0 1 4 this 3 612  
67 0 0 6 78 519 0 0 0 1 4 this 3 612  
68 0 0 7 87 617 325 0 0 1 6 param0 0 615  
69 0 0 6 82 519 0 0 0 1 4 this 3 615  
70 0 0 6 83 519 0 0 0 1 4 this 3 615  
71 0 0 6 84 519 0 0 0 1 4 this 3 615  
72 0 0 6 85 519 0 0 0 1 4 this 3 615  
73 0 0 6 86 578 0 0 0 1 4 this 3 615  
74 0 0 6 90 519 0 0 0 1 4 this 3 618  
75 0 0 4 91 572 0 0 35 // number of textures to consider.. 2 4 this 3 618  6 tcount 1 519  
76 0 0 4 92 572 0 0 21 // add textures 0 - n 3 4 this 3 618  3 wid 1 519  3 hit 1 519  
77 0 0 6 93 578 0 0 0 7 4 this 3 618  3 wid 1 519  3 hit 1 519  15 forcePowerOfTwo 1 578  14 onePixelBorder 1 578  7 max_wid 1 519  7 max_hit 1 519  
78 0 0 4 94 572 0 0 0 3 4 this 3 618  3 wid 1 519  3 hit 1 519  
79 0 0 7 95 614 318 0 74 // pack the textures, the return code is the amount of wasted/unused area. 3 4 this 3 618  15 forcePowerOfTwo 1 578  14 onePixelBorder 1 578  
80 0 0 7 96 617 325 0 58 // returns true if the texture has been rotated 90 degrees 2 4 this 3 618  5 index 1 519  
81 0 0 6 97 618 0 0 0 0 
82 0 0 4 98 572 0 0 0 1 2 tp 1 618  
83 0 0 7 102 584 0 0 0 2 13 face_material 1 567  9 face_type 1 519  
84 0 0 7 103 584 0 0 0 0 
85 0 0 7 104 584 0 0 0 0 
86 0 0 6 105 567 0 0 0 1 4 this 3 619  
87 0 0 6 106 519 0 0 0 1 4 this 3 619  
88 0 0 6 107 578 0 0 0 1 4 this 3 619  
89 0 0 6 108 519 0 0 0 0 
90 0 0 7 110 582 0 0 0 0 
91 0 0 7 113 590 405 0 0 0 
92 0 0 6 114 578 0 0 0 2 4 this 3 590  4 file 1 579  
93 0 0 4 115 572 0 0 0 1 4 this 3 590  
94 0 0 4 116 572 0 0 0 3 4 this 3 590  5 gamma 1 621  10 overbright 1 519  
95 0 0 6 117 621 0 0 0 1 4 this 3 622  
96 0 0 4 118 572 0 0 0 2 4 this 3 590  3 win 1 624  
97 0 0 4 119 572 0 0 0 2 4 this 3 590  6 camera 1 626  
98 0 0 4 120 572 0 0 0 2 4 this 3 590  6 render 1 626  
99 0 0 4 121 572 0 0 0 2 4 this 3 590  5 shgen 1 628  
100 0 0 4 122 572 0 0 0 2 4 this 3 590  4 flag 1 578  
101 0 0 4 123 572 0 0 0 2 4 this 3 590  4 flag 1 578  
102 0 0 4 124 572 0 0 0 2 4 this 3 590  4 type 1 519  
103 0 0 4 125 572 0 0 0 2 4 this 3 590  4 flag 1 578  
104 0 0 4 126 572 0 0 0 2 4 this 3 590  4 file 1 579  
105 0 0 4 127 572 0 0 0 2 4 this 3 590  4 flag 1 578  
106 0 0 6 128 578 0 0 0 1 4 this 3 622  
107 0 0 7 129 611 0 0 0 1 4 this 3 622  
108 0 0 7 130 611 0 0 0 6 4 this 3 590  14 decal_material 1 567  11 decal_scale 1 629  6 rotate 1 575  5 start 1 605  3 end 1 605  
109 0 0 7 131 634 0 0 0 2 4 this 3 590  3 pos 1 605  
110 0 0 4 132 572 0 0 0 1 4 this 3 590  
111 0 0 4 133 572 0 0 0 2 4 this 3 590  4 flag 1 578  
112 0 0 4 134 572 0 0 0 2 4 this 3 590  3 dir 1 635  
113 0 0 6 135 519 0 0 0 2 4 this 3 590  6 entnum 1 519  
114 0 0 4 136 572 0 0 0 4 4 this 3 590  8 modelnum 1 519  4 mins 1 596  4 maxs 1 596  
115 0 0 4 137 572 0 0 0 2 4 this 3 590  10 dispatcher 1 637  
116 0 0 4 138 572 0 0 0 3 4 this 3 590  4 name 1 567  4 type 1 640  
117 0 0 4 139 572 0 0 0 2 4 this 3 590  2 ai 1 578  
118 0 0 6 140 578 0 0 0 1 4 this 3 622  
119 0 0 6 141 578 0 0 0 3 4 this 3 590  5 start 1 605  3 end 1 605  
120 0 0 7 142 596 0 0 0 3 4 this 3 590  5 start 1 605  3 end 1 605  
121 0 0 4 143 572 0 0 0 3 4 this 3 590  7 entname 1 567  4 type 1 640  
122 0 0 6 144 637 0 0 0 2 4 this 3 622  10 targetname 1 567  
123 0 0 6 145 637 0 0 0 2 4 this 3 590  9 classname 1 567  
124 0 0 4 146 572 0 0 0 3 4 this 3 590  4 list 1 637  6 entnum 1 643  
125 0 0 4 147 572 0 0 0 3 4 this 3 590  5 entum 1 519  5 pyent 1 637  
126 0 0 4 148 572 0 0 0 2 4 this 3 590  3 ent 1 637  
127 0 0 6 149 519 0 0 0 1 4 this 3 622  
128 0 0 6 150 567 0 0 0 3 4 this 3 622  6 entnum 1 519  3 key 1 567  
129 0 0 6 151 575 0 0 0 3 4 this 3 622  6 entnum 1 519  3 key 1 567  
130 0 0 6 152 519 0 0 0 3 4 this 3 622  6 entnum 1 519  3 key 1 567  
131 0 0 7 153 599 0 0 0 3 4 this 3 622  6 entnum 1 519  3 key 1 567  
132 0 0 7 154 647 0 0 0 4 4 this 3 622  6 entnum 1 519  3 key 1 567  5 scale 1 578  
133 0 0 7 155 611 0 0 0 2 4 this 3 622  6 entnum 1 519  
134 0 0 7 156 611 0 0 0 2 4 this 3 622  8 modelnum 1 519  
135 0 0 7 157 587 296 0 0 2 4 this 3 622  6 entnum 1 643  
136 0 0 6 158 519 0 0 0 2 4 this 3 590  3 pos 1 605  
137 0 0 6 158 519 0 0 0 2 4 this 3 590  2 np 1 626  
138 0 0 6 159 519 0 0 0 2 4 this 3 590  3 pos 1 605  
139 0 0 6 160 578 0 0 0 3 4 this 3 622  12 curr_cluster 1 519  7 cluster 1 519  
140 0 0 6 161 578 0 0 0 3 4 this 3 590  6 bounds 1 648  19 required_leaf_flags 1 651  
141 0 0 7 162 648 0 0 0 3 4 this 3 590  13 net_transform 1 652  8 original 1 648  
142 0 0 6 163 578 0 0 0 1 4 this 3 622  
143 0 0 6 164 578 0 0 0 1 4 this 3 622  
144 0 0 4 165 572 0 0 0 1 4 this 3 590  
145 0 0 7 166 611 0 0 0 1 4 this 3 622  
146 0 0 4 167 572 0 0 0 2 4 this 3 590  4 leaf 1 519  
147 0 0 6 168 519 0 0 0 1 4 this 3 622  
148 0 0 6 169 519 0 0 0 1 4 this 3 622  
149 0 0 7 170 596 0 0 0 2 4 this 3 622  4 leaf 1 519  
150 0 0 4 171 572 0 0 0 1 4 this 3 590  
151 0 0 6 172 590 0 0 0 0 
152 0 0 7 180 655 411 0 0 0 
153 0 0 7 180 655 411 0 0 1 6 param0 0 656  
154 0 0 4 176 572 0 0 0 3 4 this 3 655  3 key 1 567  5 value 1 567  
155 0 0 4 177 572 0 0 0 3 4 this 3 655  3 inp 1 658  9 important 1 578  
156 0 0 4 178 572 0 0 0 2 4 this 3 655  4 flag 1 519  
157 0 0 6 179 578 0 0 0 2 4 this 3 656  5 other 1 656  
158 0 0 4 189 572 0 0 0 4 4 this 3 661  9 vert_file 1 579  10 pixel_file 1 579  9 geom_file 1 579  
159 0 0 7 190 582 0 0 0 0 
160 0 0 7 184 662 0 0 0 1 4 this 3 661  
161 0 0 6 187 663 0 0 0 1 4 this 3 661  
162 0 0 7 196 628 432 0 0 1 6 param0 0 664  
163 0 0 7 196 628 432 0 0 3 3 gsg 1 666  6 camera 1 626  6 render 1 626  
164 0 0 4 197 572 0 0 0 2 4 this 3 628  2 np 1 626  
165 0 0 4 198 572 0 0 0 1 4 this 3 628  
166 0 0 4 199 572 0 0 0 2 4 this 3 628  4 spec 1 661  
167 0 0 6 200 578 0 0 0 1 4 this 3 664  
168 0 0 7 201 634 0 0 0 1 4 this 3 664  
169 0 0 6 202 668 0 0 0 1 4 this 3 664  
170 0 0 4 203 572 0 0 0 2 4 this 3 628  7 quality 1 519  
171 0 0 6 204 519 0 0 0 1 4 this 3 664  
172 0 0 4 205 572 0 0 0 1 3 tex 1 634  
173 0 0 7 206 634 0 0 0 0 
174 0 0 7 207 674 0 0 0 2 4 spec 1 672  5 perms 1 656  
175 0 0 7 208 582 0 0 0 0 
176 0 0 7 213 677 435 0 0 1 6 param0 0 675  
177 0 0 7 213 677 435 0 0 2 4 trav 1 678  6 loader 1 590  
178 0 0 7 212 582 0 0 0 0 
179 0 0 7 218 681 438 0 0 1 6 param0 0 679  
180 0 0 7 218 681 438 0 0 2 4 name 1 567  6 loader 1 590  
181 0 0 7 217 582 0 0 0 0 
182 0 0 7 222 684 441 0 0 1 6 param0 0 682  
183 0 0 7 222 684 441 0 0 1 4 name 1 567  
184 0 0 7 221 582 0 0 0 0 
185 0 0 7 227 687 444 0 0 1 6 param0 0 685  
186 0 0 7 227 687 444 0 0 1 4 name 1 567  
187 0 0 7 226 582 0 0 0 0 
188 0 0 7 232 690 447 0 0 1 6 param0 0 688  
189 0 0 7 232 690 447 0 0 1 4 name 1 567  
190 0 0 7 231 582 0 0 0 0 
191 0 0 7 235 691 449 0 0 0 
192 0 0 7 238 692 451 0 0 0 
193 0 0 7 241 693 453 0 0 0 
194 0 0 7 244 694 455 0 0 0 
195 0 0 7 247 695 457 0 0 0 
196 0 0 7 252 696 461 0 0 0 
197 0 0 7 252 696 461 0 0 1 6 param0 0 697  
198 0 0 4 250 572 0 0 0 0 
199 0 0 4 251 572 0 0 0 0 
200 0 0 7 255 699 469 0 0 0 
201 0 0 7 255 699 469 0 0 1 6 param0 0 700  
202 0 0 6 256 578 0 0 0 1 4 this 3 700  
203 0 0 7 257 599 0 0 0 1 4 this 3 700  
204 0 0 7 258 704 0 0 0 1 4 this 3 700  
205 0 0 6 259 651 0 0 0 1 4 this 3 700  
206 0 0 6 260 651 0 0 0 1 4 this 3 700  
207 0 0 6 261 575 0 0 0 1 4 this 3 700  
208 0 0 7 264 705 0 0 0 0 
209 0 0 7 264 705 0 0 0 1 6 param0 0 706  
210 0 0 4 265 572 0 0 0 2 4 this 3 705  4 geom 1 708  
211 0 0 4 266 572 0 0 0 2 4 this 3 705  4 geom 1 708  
212 0 0 4 267 572 0 0 0 1 4 this 3 705  
213 0 0 7 269 699 469 0 0 4 4 this 3 705  5 start 1 605  3 end 1 605  4 mask 1 709  
214 0 0 7 270 699 469 0 0 5 4 this 3 705  6 origin 1 605  9 direction 1 635  8 distance 1 575  4 mask 1 709  
215 0 0 4 271 572 0 0 0 2 4 this 3 705  7 quality 1 519  
216 0 0 4 272 572 0 0 0 1 4 this 3 705  
217 0 0 7 273 708 0 0 0 2 4 this 3 705  7 geom_id 1 651  
218 0 0 7 275 582 0 0 0 0 
219 0 0 4 276 572 0 0 0 2 4 this 3 708  4 mask 1 709  
220 0 0 4 276 572 0 0 0 2 4 this 3 708  4 mask 1 651  
221 0 0 7 277 715 0 0 0 1 4 this 3 713  
222 0 0 6 278 651 0 0 0 1 4 this 3 713  
223 0 0 4 279 572 0 0 0 2 4 this 3 708  7 quality 1 519  
224 0 0 4 280 572 0 0 0 1 4 this 3 708  
225 0 0 7 283 716 489 0 0 1 4 name 1 567  
226 0 0 7 282 582 0 0 0 0 
227 0 0 4 284 572 0 0 0 4 4 this 3 716  2 p1 1 605  2 p2 1 605  2 p3 1 605  
228 0 0 4 285 572 0 0 0 3 4 this 3 716  4 geom 1 717  2 ts 1 652  
229 0 0 7 288 720 491 0 0 0 
230 0 0 7 292 722 0 0 0 0 
231 0 0 7 293 582 0 0 0 0 
232 0 0 7 296 725 513 0 0 1 6 param0 0 723  
233 0 0 7 296 725 513 0 0 4 3 mgr 1 726  15 listener_target 1 626  4 root 1 626  13 task_priority 1 519  
234 0 0 4 297 572 0 0 0 2 4 this 3 725  6 factor 1 621  
235 0 0 6 298 621 0 0 0 1 4 this 3 723  
236 0 0 4 299 572 0 0 0 2 4 this 3 725  6 factor 1 621  
237 0 0 6 300 621 0 0 0 1 4 this 3 723  
238 0 0 4 301 572 0 0 0 2 4 this 3 725  6 factor 1 621  
239 0 0 6 302 621 0 0 0 1 4 this 3 723  
240 0 0 4 303 572 0 0 0 3 4 this 3 725  5 sound 1 728  4 dist 1 621  
241 0 0 6 304 621 0 0 0 2 4 this 3 723  5 sound 1 728  
242 0 0 4 305 572 0 0 0 3 4 this 3 725  5 sound 1 728  4 dist 1 621  
243 0 0 6 306 621 0 0 0 2 4 this 3 723  5 sound 1 728  
244 0 0 4 307 572 0 0 0 2 4 this 3 725  8 listener 1 626  
245 0 0 4 308 572 0 0 0 1 4 this 3 725  
246 0 0 7 309 728 0 0 0 2 4 this 3 725  4 path 1 567  
247 0 0 4 310 572 0 0 0 3 4 this 3 725  5 sound 1 728  6 object 1 626  
248 0 0 4 311 572 0 0 0 2 4 this 3 725  5 sound 1 728  
249 0 0 4 312 572 0 0 0 1 4 this 3 725  
250 0 0 4 313 572 0 0 0 1 4 this 3 725  
216
514 13 TextureStages 0 141313 13 TextureStages 13 TextureStages 0 0 0 1 261 262 0 10 251 252 253 254 255 256 257 258 259 260 0 0 0 0 0 752
/**
 * This simple interface maintains a single TextureStage object for each unique name.
 * It avoids the creation of duplicate TextureStages with the same name, which
 * reduces texture swapping and draw call overhead.
 *
 * If using our shader system, you should always use this interface to get TextureStages.
 * You are not required to change any properties on the returned TextureStage, as the shader
 * specification will know what to do with the TextureStage from the name.
 * 
 * For example, you do not need to call TextureStage::set_mode() or NodePath::set_tex_gen().
 * If you apply a texture to a node with the get_normalmap() stage, the shader specification
 * will know that the texture you supplied is to be treated as a normal map.
 */

515 11 BSPMaterial 0 141313 11 BSPMaterial 11 BSPMaterial 0 0 0 1 263 282 0 18 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 0 0 1 0 516 0 0 0 0 0

516 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

517 17 BSPMaterialAttrib 0 141313 17 BSPMaterialAttrib 17 BSPMaterialAttrib 0 0 0 0 291 1 730 8 283 284 285 286 287 288 289 290 0 0 1 0 518 0 0 0 0 0

518 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

519 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

520 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 293 296 0 3 292 294 295 0 0 1 0 516 0 0 0 0 0

521 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 298 301 0 3 297 299 300 0 0 1 0 520 0 0 0 0 0

522 13 CBoundsEntity 0 141313 13 CBoundsEntity 13 CBoundsEntity 0 0 0 1 303 307 0 4 302 304 305 306 0 0 1 0 520 0 0 0 0 219
/**
 * A flavor of a brush entity (but doesn't inherit from CBrushEntity) which uses the brush only to describe
 * the bounds. Useful for triggers or water, because we don't actually care about the brush's geometry.
 */

523 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 309 313 0 4 308 310 311 312 0 0 1 0 520 0 0 0 0 0

524 10 PackResult 0 141313 10 PackResult 10 PackResult 0 0 0 1 317 318 0 3 314 315 316 0 0 0 0 0 0

525 15 TextureLocation 0 141313 15 TextureLocation 15 TextureLocation 0 0 0 1 324 325 0 5 319 320 321 322 323 0 0 0 0 0 0

526 13 TexturePacker 0 141313 13 TexturePacker 13 TexturePacker 0 0 0 0 335 0 9 326 327 328 329 330 331 332 333 334 0 0 0 0 0 0

527 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 344 1 731 8 336 337 338 339 340 341 342 343 0 0 1 0 518 0 0 0 1 528 193
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face
 * and if it's a wall or a floor (depending on the face normal).
 */

528 0 0 794624 15 BSPFaceAttrib:: 0 527 0 0 0 0 0 0 0 0 0 2 13 FACETYPE_WALL 28 BSPFaceAttrib::FACETYPE_WALL 0
0 14 FACETYPE_FLOOR 29 BSPFaceAttrib::FACETYPE_FLOOR 0
1 0 0

529 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 345 405 0 59 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 0 0 0 0 1 530 58
/**
 * Loads and handles the operations of PBSP files.
 */

530 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 529 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

531 18 ShaderPermutations 0 141313 18 ShaderPermutations 18 ShaderPermutations 0 0 0 1 410 411 0 4 406 407 408 409 0 0 0 0 0 97
/**
 * Represents a list of #defines and variable inputs to a shader that is being generated.
 */

532 10 ShaderSpec 0 141313 10 ShaderSpec 10 ShaderSpec 0 0 0 0 418 0 2 416 417 0 0 2 3 533 412 413 3 534 414 415 0 0 121
/**
 * Serves to setup the permutations for a specific shader
 * when setting up a shader for a specific RenderState.
 */

533 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

534 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

535 13 ShaderQuality 0 532481 13 ShaderQuality 13 ShaderQuality 0 0 0 0 0 0 0 0 0 0 3 17 SHADERQUALITY_LOW 17 SHADERQUALITY_LOW 0
0 20 SHADERQUALITY_MEDIUM 20 SHADERQUALITY_MEDIUM 0
1 18 SHADERQUALITY_HIGH 18 SHADERQUALITY_HIGH 0
2 0 0

536 10 CameraBits 0 532481 10 CameraBits 10 CameraBits 0 0 0 0 0 0 0 0 0 0 6 11 CAMERA_MAIN 11 CAMERA_MAIN 0
1 13 CAMERA_SHADOW 13 CAMERA_SHADOW 0
2 17 CAMERA_REFLECTION 17 CAMERA_REFLECTION 0
4 17 CAMERA_REFRACTION 17 CAMERA_REFRACTION 0
8 16 CAMERA_VIEWMODEL 16 CAMERA_VIEWMODEL 0
16 14 CAMERA_COMPUTE 14 CAMERA_COMPUTE 0
32 0 0

537 18 BSPShaderGenerator 0 141313 18 BSPShaderGenerator 18 BSPShaderGenerator 0 0 0 1 419 432 0 12 420 421 422 423 424 425 426 427 428 429 430 431 0 0 1 0 538 0 0 0 0 0

538 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1069
/**
 * The ShaderGenerator is a device that effectively replaces the classic fixed
 * function pipeline with a 'next-gen' fixed function pipeline.  The next-gen
 * fixed function pipeline supports features like normal mapping, gloss
 * mapping, cartoon lighting, and so forth.  It works by automatically
 * generating a shader from a given RenderState.
 *
 * Currently, there is one ShaderGenerator object per GraphicsStateGuardian.
 * It is our intent that in time, people will write classes that derive from
 * ShaderGenerator but which yield slightly different results.
 *
 * The ShaderGenerator owes its existence to the 'Bamboo Team' at Carnegie
 * Mellon's Entertainment Technology Center.  This is a group of students who,
 * as a semester project, decided that next-gen graphics should be accessible
 * to everyone, even if they don't know shader programming.  The group
 * consisted of:
 *
 * Aaron Lo, Programmer Heegun Lee, Programmer Erin Fernandez, Artist/Tester
 * Joe Grubb, Artist/Tester Ivan Ortega, Technical Artist/Tester
 *
 * Thanks to them!
 *
 */

539 16 BSPCullTraverser 0 141313 16 BSPCullTraverser 16 BSPCullTraverser 0 0 0 1 434 435 0 1 433 0 0 1 0 540 0 0 0 0 0

540 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 279
/**
 * This object performs a depth-first traversal of the scene graph, with
 * optional view-frustum culling, collecting CullState and searching for
 * GeomNodes.  Each renderable Geom encountered is passed along with its
 * associated RenderState to the CullHandler object.
 */

541 9 BSPRender 0 141313 9 BSPRender 9 BSPRender 0 0 0 1 437 438 0 1 436 0 0 1 0 542 0 0 0 0 125
/**
 * Top of the scene graph when a BSP level is in effect.
 * Culls nodes against the PVS, operates ambient cubes, etc.
 */

542 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

543 7 BSPRoot 0 141313 7 BSPRoot 7 BSPRoot 0 0 0 1 440 441 0 1 439 0 0 1 0 542 0 0 0 0 0

544 7 BSPProp 0 141313 7 BSPProp 7 BSPProp 0 0 0 1 443 444 0 1 442 0 0 1 0 545 0 0 0 0 0

545 9 ModelRoot 0 2048 9 ModelRoot 9 ModelRoot 0 0 0 0 0 0 0 0 0 0 0 0 314
/**
 * A node of this type is created automatically at the root of each model file
 * that is loaded.  It may eventually contain some information about the
 * contents of the model; at the moment, it contains no special information,
 * but can be used as a flag to indicate the presence of a loaded model file.
 */

546 8 BSPModel 0 141313 8 BSPModel 8 BSPModel 0 0 0 1 446 447 0 1 445 0 0 1 0 547 0 0 0 0 0

547 9 ModelNode 0 2048 9 ModelNode 9 ModelNode 0 0 0 0 0 0 0 0 0 0 0 0 411
/**
 * This node is placed at key points within the scene graph to indicate the
 * roots of "models": subtrees that are conceptually to be treated as a single
 * unit, like a car or a room, for instance.  It doesn't affect rendering or
 * any other operations; it's primarily useful as a high-level model
 * indication.
 *
 * ModelNodes are created in response to a <Model> { 1 } flag within an egg
 * file.
 */

548 20 VertexLitGenericSpec 0 141313 20 VertexLitGenericSpec 20 VertexLitGenericSpec 0 0 0 1 448 449 0 0 0 0 1 0 532 0 0 0 0 0

549 22 LightmappedGenericSpec 0 141313 22 LightmappedGenericSpec 22 LightmappedGenericSpec 0 0 0 1 450 451 0 0 0 0 1 0 532 0 0 0 0 0

550 16 UnlitGenericSpec 0 141313 16 UnlitGenericSpec 16 UnlitGenericSpec 0 0 0 1 452 453 0 0 0 0 1 0 532 0 0 0 0 160
/**
 * Shader that only supports a basetexture, no fancy lighting effects or anything.
 * Could be used for UI elements, emissive materials, particles, etc.
 */

551 14 UnlitNoMatSpec 0 141313 14 UnlitNoMatSpec 14 UnlitNoMatSpec 0 0 0 1 454 455 0 0 0 0 1 0 532 0 0 0 0 0

552 13 CSMRenderSpec 0 141313 13 CSMRenderSpec 13 CSMRenderSpec 0 0 0 1 456 457 0 0 0 0 1 0 532 0 0 0 0 0

553 8 RayTrace 0 141313 8 RayTrace 8 RayTrace 0 0 0 1 460 461 0 2 458 459 0 0 0 0 0 0

554 17 RayTraceHitResult 0 141313 17 RayTraceHitResult 17 RayTraceHitResult 0 0 0 1 462 469 0 6 463 464 465 466 467 468 0 0 0 0 0 0

555 13 RayTraceScene 0 75777 13 RayTraceScene 13 RayTraceScene 0 0 0 1 470 0 0 8 471 472 473 474 475 476 477 478 0 0 1 0 533 0 0 0 1 556 0

556 0 0 794624 15 RayTraceScene:: 0 555 0 0 0 0 0 0 0 0 0 3 17 BUILD_QUALITY_LOW 32 RayTraceScene::BUILD_QUALITY_LOW 0
0 20 BUILD_QUALITY_MEDIUM 35 RayTraceScene::BUILD_QUALITY_MEDIUM 0
1 18 BUILD_QUALITY_HIGH 33 RayTraceScene::BUILD_QUALITY_HIGH 0
2 0 0

557 16 RayTraceGeometry 0 75777 16 RayTraceGeometry 16 RayTraceGeometry 0 0 0 0 0 0 6 479 480 481 482 483 484 0 0 1 0 542 0 0 0 0 0

558 20 RayTraceTriangleMesh 0 141313 20 RayTraceTriangleMesh 20 RayTraceTriangleMesh 0 0 0 1 486 489 0 3 485 487 488 0 0 1 0 557 0 0 0 0 0

559 10 SkyBoxSpec 0 141313 10 SkyBoxSpec 10 SkyBoxSpec 0 0 0 1 490 491 0 0 0 0 1 0 532 0 0 0 0 0

560 18 AmbientBoostEffect 0 141313 18 AmbientBoostEffect 18 AmbientBoostEffect 0 0 0 0 494 0 2 492 493 0 0 1 0 561 0 0 0 0 0

561 12 RenderEffect 0 2048 12 RenderEffect 12 RenderEffect 0 0 0 0 0 0 0 0 0 0 0 0 901
/**
 * This is the base class for a number of special render effects that may be
 * set on scene graph nodes to change the way they render.  This includes
 * BillboardEffect, DecalEffect, etc.
 *
 * RenderEffect represents render properties that must be applied as soon as
 * they are encountered in the scene graph, rather than propagating down to
 * the leaves.  This is different from RenderAttrib, which represents
 * properties like color and texture that don't do anything until they
 * propagate down to a GeomNode.
 *
 * You should not attempt to create or modify a RenderEffect directly;
 * instead, use the make() method of the appropriate kind of effect you want.
 * This will allocate and return a new RenderEffect of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderEffect
 * if you wish to change its properties; instead, create a new one.
 */

562 14 Audio3DManager 0 141313 14 Audio3DManager 14 Audio3DManager 0 0 0 1 495 513 0 17 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 0 0 0 0 0 0

563 15 TextureStages * 0 8576 15 TextureStages * 15 TextureStages * 0 0 514 0 0 0 0 0 0 0 0 0 0

564 21 TextureStages const * 0 8576 21 TextureStages const * 21 TextureStages const * 0 0 565 0 0 0 0 0 0 0 0 0 0

565 19 TextureStages const 0 8832 19 TextureStages const 19 TextureStages const 0 0 514 0 0 0 0 0 0 0 0 0 0

566 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 336
/**
 * Defines the properties of a named stage of the multitexture pipeline.  The
 * TextureAttrib will associated a number of these stages with Texture
 * objects, and the GSG will render geometry by sorting all of the currently
 * active TextureStages in order and then issuing the appropriate rendering
 * calls to activate them.
 */

567 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

568 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 566 0 0 0 0 0 0 0 0 0 0

569 19 BSPMaterial const * 0 8576 19 BSPMaterial const * 19 BSPMaterial const * 0 0 570 0 0 0 0 0 0 0 0 0 0

570 17 BSPMaterial const 0 8832 17 BSPMaterial const 17 BSPMaterial const 0 0 515 0 0 0 0 0 0 0 0 0 0

571 13 BSPMaterial * 0 8576 13 BSPMaterial * 13 BSPMaterial * 0 0 515 0 0 0 0 0 0 0 0 0 0

572 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

573 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 574 0 0 0 0 0 0 0 0 0 0

574 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

575 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

576 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

577 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 576 0 0 0 0 0 0 0 0 0 0

578 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

579 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 580 0 0 0 0 0 0 0 0 0 0

580 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 576 0 0 0 0 0 0 0 0 0 0

581 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

582 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 581 0 0 0 0 0 0 0 0 0 0

583 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 518 0 0 0 0 0 0 0 0 0 0

584 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 583 0 0 0 0 0 0 0 0 0 0

585 25 BSPMaterialAttrib const * 0 8576 25 BSPMaterialAttrib const * 25 BSPMaterialAttrib const * 0 0 586 0 0 0 0 0 0 0 0 0 0

586 23 BSPMaterialAttrib const 0 8832 23 BSPMaterialAttrib const 23 BSPMaterialAttrib const 0 0 517 0 0 0 0 0 0 0 0 0 0

587 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 520 0 0 0 0 0 0 0 0 0 0

588 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 589 0 0 0 0 0 0 0 0 0 0

589 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 520 0 0 0 0 0 0 0 0 0 0

590 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 529 0 0 0 0 0 0 0 0 0 0

591 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 521 0 0 0 0 0 0 0 0 0 0

592 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 593 0 0 0 0 0 0 0 0 0 0

593 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 521 0 0 0 0 0 0 0 0 0 0

594 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 595 0 0 0 0 0 0 0 0 0 0

595 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

596 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 594 0 0 0 0 0 0 0 0 0 0

597 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 598 0 0 0 0 0 0 0 0 0 0

598 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

599 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 597 0 0 0 0 0 0 0 0 0 0

600 15 CBoundsEntity * 0 8576 15 CBoundsEntity * 15 CBoundsEntity * 0 0 522 0 0 0 0 0 0 0 0 0 0

601 21 CBoundsEntity const * 0 8576 21 CBoundsEntity const * 21 CBoundsEntity const * 0 0 602 0 0 0 0 0 0 0 0 0 0

602 19 CBoundsEntity const 0 8832 19 CBoundsEntity const 19 CBoundsEntity const 0 0 522 0 0 0 0 0 0 0 0 0 0

603 11 BoundingBox 0 2048 11 BoundingBox 11 BoundingBox 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

604 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 603 0 0 0 0 0 0 0 0 0 0

605 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 606 0 0 0 0 0 0 0 0 0 0

606 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 594 0 0 0 0 0 0 0 0 0 0

607 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 523 0 0 0 0 0 0 0 0 0 0

608 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 609 0 0 0 0 0 0 0 0 0 0

609 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 523 0 0 0 0 0 0 0 0 0 0

610 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

611 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 610 0 0 0 0 0 0 0 0 0 0

612 18 PackResult const * 0 8576 18 PackResult const * 18 PackResult const * 0 0 613 0 0 0 0 0 0 0 0 0 0

613 16 PackResult const 0 8832 16 PackResult const 16 PackResult const 0 0 524 0 0 0 0 0 0 0 0 0 0

614 12 PackResult * 0 8576 12 PackResult * 12 PackResult * 0 0 524 0 0 0 0 0 0 0 0 0 0

615 23 TextureLocation const * 0 8576 23 TextureLocation const * 23 TextureLocation const * 0 0 616 0 0 0 0 0 0 0 0 0 0

616 21 TextureLocation const 0 8832 21 TextureLocation const 21 TextureLocation const 0 0 525 0 0 0 0 0 0 0 0 0 0

617 17 TextureLocation * 0 8576 17 TextureLocation * 17 TextureLocation * 0 0 525 0 0 0 0 0 0 0 0 0 0

618 15 TexturePacker * 0 8576 15 TexturePacker * 15 TexturePacker * 0 0 526 0 0 0 0 0 0 0 0 0 0

619 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 620 0 0 0 0 0 0 0 0 0 0

620 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 527 0 0 0 0 0 0 0 0 0 0

621 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 575 0 0 0 0 0 0 0 0 0 0

622 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 623 0 0 0 0 0 0 0 0 0 0

623 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 529 0 0 0 0 0 0 0 0 0 0

624 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 625 0 0 0 0 0 0 0 0 0 0

625 14 GraphicsWindow 0 2048 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 0 0 0 0 0 0 0 0 122
/**
 * A window, fullscreen or on a desktop, into which a graphics device sends
 * its output for interactive display.
 */

626 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 627 0 0 0 0 0 0 0 0 0 0

627 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 610 0 0 0 0 0 0 0 0 0 0

628 20 BSPShaderGenerator * 0 8576 20 BSPShaderGenerator * 20 BSPShaderGenerator * 0 0 537 0 0 0 0 0 0 0 0 0 0

629 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 630 0 0 0 0 0 0 0 0 0 0

630 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 631 0 0 0 0 0 0 0 0 0 0

631 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 632 0 0 0 0 0 0 0 0 0 0

632 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

633 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

634 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 633 0 0 0 0 0 0 0 0 0 0

635 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 636 0 0 0 0 0 0 0 0 0 0

636 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 597 0 0 0 0 0 0 0 0 0 0

637 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 638 0 0 0 0 0 0 0 0 0 0

638 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 639 0 0 0 0 0 0 0 0 0 0

639 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

640 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 641 0 0 0 0 0 0 0 0 0 0

641 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 642 0 0 0 0 0 0 0 0 0 0

642 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

643 9 int const 0 8832 9 int const 9 int const 0 0 519 0 0 0 0 0 0 0 0 0 0

644 6 LColor 0 2105344 6 LColor 6 LColor 0 0 645 0 0 0 0 0 0 0 0 0 0

645 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 646 0 0 0 0 0 0 0 0 0 0

646 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

647 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 644 0 0 0 0 0 0 0 0 0 0

648 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 649 0 0 0 0 0 0 0 0 0 0

649 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 650 0 0 0 0 0 0 0 0 0 0

650 23 GeometricBoundingVolume 0 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

651 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

652 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 653 0 0 0 0 0 0 0 0 0 0

653 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 654 0 0 0 0 0 0 0 0 0 0

654 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

655 20 ShaderPermutations * 0 8576 20 ShaderPermutations * 20 ShaderPermutations * 0 0 531 0 0 0 0 0 0 0 0 0 0

656 26 ShaderPermutations const * 0 8576 26 ShaderPermutations const * 26 ShaderPermutations const * 0 0 657 0 0 0 0 0 0 0 0 0 0

657 24 ShaderPermutations const 0 8832 24 ShaderPermutations const 24 ShaderPermutations const 0 0 531 0 0 0 0 0 0 0 0 0 0

658 19 ShaderInput const * 0 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 659 0 0 0 0 0 0 0 0 0 0

659 17 ShaderInput const 0 8832 17 ShaderInput const 17 ShaderInput const 0 0 660 0 0 0 0 0 0 0 0 0 0

660 11 ShaderInput 0 2048 11 ShaderInput 11 ShaderInput 0 0 0 0 0 0 0 0 0 0 0 0 127
/**
 * This is a small container class that can hold any one of the value types
 * that can be passed as input to a shader.
 */

661 12 ShaderSpec * 0 8576 12 ShaderSpec * 12 ShaderSpec * 0 0 532 0 0 0 0 0 0 0 0 0 0

662 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 533 0 0 0 0 0 0 0 0 0 0

663 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 534 0 0 0 0 0 0 0 0 0 0

664 26 BSPShaderGenerator const * 0 8576 26 BSPShaderGenerator const * 26 BSPShaderGenerator const * 0 0 665 0 0 0 0 0 0 0 0 0 0

665 24 BSPShaderGenerator const 0 8832 24 BSPShaderGenerator const 24 BSPShaderGenerator const 0 0 537 0 0 0 0 0 0 0 0 0 0

666 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 667 0 0 0 0 0 0 0 0 0 0

667 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

668 15 PSSMCameraRig * 0 8576 15 PSSMCameraRig * 15 PSSMCameraRig * 0 0 669 0 0 0 0 0 0 0 0 0 0

669 13 PSSMCameraRig 0 2048 13 PSSMCameraRig 13 PSSMCameraRig 0 0 0 0 0 0 0 0 0 0 0 0 0

670 12 Shader const 0 8832 12 Shader const 12 Shader const 0 0 671 0 0 0 0 0 0 0 0 0 0

671 6 Shader 0 2048 6 Shader 6 Shader 0 0 0 0 0 0 0 0 0 0 0 0 8
/**

 */

672 18 ShaderSpec const * 0 8576 18 ShaderSpec const * 18 ShaderSpec const * 0 0 673 0 0 0 0 0 0 0 0 0 0

673 16 ShaderSpec const 0 8832 16 ShaderSpec const 16 ShaderSpec const 0 0 532 0 0 0 0 0 0 0 0 0 0

674 14 Shader const * 0 8576 14 Shader const * 14 Shader const * 0 0 670 0 0 0 0 0 0 0 0 0 0

675 24 BSPCullTraverser const * 0 8576 24 BSPCullTraverser const * 24 BSPCullTraverser const * 0 0 676 0 0 0 0 0 0 0 0 0 0

676 22 BSPCullTraverser const 0 8832 22 BSPCullTraverser const 22 BSPCullTraverser const 0 0 539 0 0 0 0 0 0 0 0 0 0

677 18 BSPCullTraverser * 0 8576 18 BSPCullTraverser * 18 BSPCullTraverser * 0 0 539 0 0 0 0 0 0 0 0 0 0

678 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 540 0 0 0 0 0 0 0 0 0 0

679 17 BSPRender const * 0 8576 17 BSPRender const * 17 BSPRender const * 0 0 680 0 0 0 0 0 0 0 0 0 0

680 15 BSPRender const 0 8832 15 BSPRender const 15 BSPRender const 0 0 541 0 0 0 0 0 0 0 0 0 0

681 11 BSPRender * 0 8576 11 BSPRender * 11 BSPRender * 0 0 541 0 0 0 0 0 0 0 0 0 0

682 15 BSPRoot const * 0 8576 15 BSPRoot const * 15 BSPRoot const * 0 0 683 0 0 0 0 0 0 0 0 0 0

683 13 BSPRoot const 0 8832 13 BSPRoot const 13 BSPRoot const 0 0 543 0 0 0 0 0 0 0 0 0 0

684 9 BSPRoot * 0 8576 9 BSPRoot * 9 BSPRoot * 0 0 543 0 0 0 0 0 0 0 0 0 0

685 15 BSPProp const * 0 8576 15 BSPProp const * 15 BSPProp const * 0 0 686 0 0 0 0 0 0 0 0 0 0

686 13 BSPProp const 0 8832 13 BSPProp const 13 BSPProp const 0 0 544 0 0 0 0 0 0 0 0 0 0

687 9 BSPProp * 0 8576 9 BSPProp * 9 BSPProp * 0 0 544 0 0 0 0 0 0 0 0 0 0

688 16 BSPModel const * 0 8576 16 BSPModel const * 16 BSPModel const * 0 0 689 0 0 0 0 0 0 0 0 0 0

689 14 BSPModel const 0 8832 14 BSPModel const 14 BSPModel const 0 0 546 0 0 0 0 0 0 0 0 0 0

690 10 BSPModel * 0 8576 10 BSPModel * 10 BSPModel * 0 0 546 0 0 0 0 0 0 0 0 0 0

691 22 VertexLitGenericSpec * 0 8576 22 VertexLitGenericSpec * 22 VertexLitGenericSpec * 0 0 548 0 0 0 0 0 0 0 0 0 0

692 24 LightmappedGenericSpec * 0 8576 24 LightmappedGenericSpec * 24 LightmappedGenericSpec * 0 0 549 0 0 0 0 0 0 0 0 0 0

693 18 UnlitGenericSpec * 0 8576 18 UnlitGenericSpec * 18 UnlitGenericSpec * 0 0 550 0 0 0 0 0 0 0 0 0 0

694 16 UnlitNoMatSpec * 0 8576 16 UnlitNoMatSpec * 16 UnlitNoMatSpec * 0 0 551 0 0 0 0 0 0 0 0 0 0

695 15 CSMRenderSpec * 0 8576 15 CSMRenderSpec * 15 CSMRenderSpec * 0 0 552 0 0 0 0 0 0 0 0 0 0

696 10 RayTrace * 0 8576 10 RayTrace * 10 RayTrace * 0 0 553 0 0 0 0 0 0 0 0 0 0

697 16 RayTrace const * 0 8576 16 RayTrace const * 16 RayTrace const * 0 0 698 0 0 0 0 0 0 0 0 0 0

698 14 RayTrace const 0 8832 14 RayTrace const 14 RayTrace const 0 0 553 0 0 0 0 0 0 0 0 0 0

699 19 RayTraceHitResult * 0 8576 19 RayTraceHitResult * 19 RayTraceHitResult * 0 0 554 0 0 0 0 0 0 0 0 0 0

700 25 RayTraceHitResult const * 0 8576 25 RayTraceHitResult const * 25 RayTraceHitResult const * 0 0 701 0 0 0 0 0 0 0 0 0 0

701 23 RayTraceHitResult const 0 8832 23 RayTraceHitResult const 23 RayTraceHitResult const 0 0 554 0 0 0 0 0 0 0 0 0 0

702 8 LVector2 0 2105344 8 LVector2 8 LVector2 0 0 703 0 0 0 0 0 0 0 0 0 0

703 9 LVector2f 0 2048 9 LVector2f 9 LVector2f 0 0 0 0 0 0 0 0 0 0 0 0 49
/**
 * This is a two-component vector offset.
 */

704 10 LVector2 * 0 8576 10 LVector2 * 10 LVector2 * 0 0 702 0 0 0 0 0 0 0 0 0 0

705 15 RayTraceScene * 0 8576 15 RayTraceScene * 15 RayTraceScene * 0 0 555 0 0 0 0 0 0 0 0 0 0

706 21 RayTraceScene const * 0 8576 21 RayTraceScene const * 21 RayTraceScene const * 0 0 707 0 0 0 0 0 0 0 0 0 0

707 19 RayTraceScene const 0 8832 19 RayTraceScene const 19 RayTraceScene const 0 0 555 0 0 0 0 0 0 0 0 0 0

708 18 RayTraceGeometry * 0 8576 18 RayTraceGeometry * 18 RayTraceGeometry * 0 0 557 0 0 0 0 0 0 0 0 0 0

709 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 710 0 0 0 0 0 0 0 0 0 0

710 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 711 0 0 0 0 0 0 0 0 0 0

711 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 712 0 0 0 0 0 0 0 0 0 0

712 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

713 24 RayTraceGeometry const * 0 8576 24 RayTraceGeometry const * 24 RayTraceGeometry const * 0 0 714 0 0 0 0 0 0 0 0 0 0

714 22 RayTraceGeometry const 0 8832 22 RayTraceGeometry const 22 RayTraceGeometry const 0 0 557 0 0 0 0 0 0 0 0 0 0

715 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 711 0 0 0 0 0 0 0 0 0 0

716 22 RayTraceTriangleMesh * 0 8576 22 RayTraceTriangleMesh * 22 RayTraceTriangleMesh * 0 0 558 0 0 0 0 0 0 0 0 0 0

717 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 718 0 0 0 0 0 0 0 0 0 0

718 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 719 0 0 0 0 0 0 0 0 0 0

719 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

720 12 SkyBoxSpec * 0 8576 12 SkyBoxSpec * 12 SkyBoxSpec * 0 0 559 0 0 0 0 0 0 0 0 0 0

721 18 RenderEffect const 0 8832 18 RenderEffect const 18 RenderEffect const 0 0 561 0 0 0 0 0 0 0 0 0 0

722 20 RenderEffect const * 0 8576 20 RenderEffect const * 20 RenderEffect const * 0 0 721 0 0 0 0 0 0 0 0 0 0

723 22 Audio3DManager const * 0 8576 22 Audio3DManager const * 22 Audio3DManager const * 0 0 724 0 0 0 0 0 0 0 0 0 0

724 20 Audio3DManager const 0 8832 20 Audio3DManager const 20 Audio3DManager const 0 0 562 0 0 0 0 0 0 0 0 0 0

725 16 Audio3DManager * 0 8576 16 Audio3DManager * 16 Audio3DManager * 0 0 562 0 0 0 0 0 0 0 0 0 0

726 14 AudioManager * 0 8576 14 AudioManager * 14 AudioManager * 0 0 727 0 0 0 0 0 0 0 0 0 0

727 12 AudioManager 0 2048 12 AudioManager 12 AudioManager 0 0 0 0 0 0 0 0 0 0 0 0 0

728 12 AudioSound * 0 8576 12 AudioSound * 12 AudioSound * 0 0 729 0 0 0 0 0 0 0 0 0 0

729 10 AudioSound 0 2048 10 AudioSound 10 AudioSound 0 0 0 0 0 0 0 0 0 0 0 0 0

0
2
730 10 class_slot 0 2 519 289 0 0 0 0 0 0 0 29 BSPMaterialAttrib::class_slot 0

731 10 class_slot 0 2 519 342 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

0
