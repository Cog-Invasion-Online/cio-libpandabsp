1531319443
3 3
3 bsp 4 t5GT 3 bsp 
53
53 11 CBaseEntity 0 4 106 24 CBaseEntity::CBaseEntity 0 2 1 2 0
95
CBaseEntity::CBaseEntity(void);
inline CBaseEntity::CBaseEntity(CBaseEntity const &) = default;

54 10 get_entnum 0 4 106 23 CBaseEntity::get_entnum 0 1 3 0
40
int CBaseEntity::get_entnum(void) const;

55 10 get_loader 0 4 106 23 CBaseEntity::get_loader 0 1 4 0
47
BSPLoader *CBaseEntity::get_loader(void) const;

56 14 get_class_type 0 4 106 27 CBaseEntity::get_class_type 0 1 5 0
52
static TypeHandle CBaseEntity::get_class_type(void);

57 12 ~CBaseEntity 0 4 106 25 CBaseEntity::~CBaseEntity 0 0 0
32
CBaseEntity::~CBaseEntity(void);

58 12 CPointEntity 0 4 108 26 CPointEntity::CPointEntity 0 2 6 7 0
100
CPointEntity::CPointEntity(void);
inline CPointEntity::CPointEntity(CPointEntity const &) = default;

59 10 get_origin 0 4 108 24 CPointEntity::get_origin 0 1 8 0
45
LPoint3 CPointEntity::get_origin(void) const;

60 10 get_angles 0 4 108 24 CPointEntity::get_angles 0 1 9 0
46
LVector3 CPointEntity::get_angles(void) const;

61 14 get_class_type 0 4 108 28 CPointEntity::get_class_type 0 1 10 0
53
static TypeHandle CPointEntity::get_class_type(void);

62 13 ~CPointEntity 0 4 108 27 CPointEntity::~CPointEntity 0 0 0
34
CPointEntity::~CPointEntity(void);

63 12 CBrushEntity 0 4 109 26 CBrushEntity::CBrushEntity 0 2 11 12 0
100
CBrushEntity::CBrushEntity(void);
inline CBrushEntity::CBrushEntity(CBrushEntity const &) = default;

64 12 get_modelnum 0 4 109 26 CBrushEntity::get_modelnum 0 1 13 0
43
int CBrushEntity::get_modelnum(void) const;

65 12 get_model_np 0 4 109 26 CBrushEntity::get_model_np 0 1 14 0
48
NodePath CBrushEntity::get_model_np(void) const;

66 16 get_model_bounds 0 4 109 30 CBrushEntity::get_model_bounds 0 1 15 0
66
void CBrushEntity::get_model_bounds(LPoint3 &mins, LPoint3 &maxs);

67 14 get_class_type 0 4 109 28 CBrushEntity::get_class_type 0 1 16 0
53
static TypeHandle CBrushEntity::get_class_type(void);

68 13 ~CBrushEntity 0 4 109 27 CBrushEntity::~CBrushEntity 0 0 0
34
CBrushEntity::~CBrushEntity(void);

69 11 BSPGeomNode 0 4 110 24 BSPGeomNode::BSPGeomNode 0 2 17 18 0
123
explicit BSPGeomNode::BSPGeomNode(std::string const &name);
inline BSPGeomNode::BSPGeomNode(BSPGeomNode const &) = default;

70 14 get_class_type 0 4 110 27 BSPGeomNode::get_class_type 0 1 19 0
52
static TypeHandle BSPGeomNode::get_class_type(void);

71 12 ~BSPGeomNode 0 4 110 25 BSPGeomNode::~BSPGeomNode 0 0 0
32
BSPGeomNode::~BSPGeomNode(void);

72 4 make 0 4 112 19 BSPFaceAttrib::make 0 1 20 0
92
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make(std::string const &face_material);

73 12 make_default 0 4 112 27 BSPFaceAttrib::make_default 0 1 21 0
72
static ConstPointerTo< RenderAttrib > BSPFaceAttrib::make_default(void);

74 12 get_material 0 4 112 27 BSPFaceAttrib::get_material 0 1 22 0
59
inline std::string BSPFaceAttrib::get_material(void) const;

75 14 get_class_slot 0 4 112 29 BSPFaceAttrib::get_class_slot 0 1 23 0
47
static int BSPFaceAttrib::get_class_slot(void);

76 14 get_class_type 0 4 112 29 BSPFaceAttrib::get_class_type 0 1 24 0
54
static TypeHandle BSPFaceAttrib::get_class_type(void);

77 14 ~BSPFaceAttrib 0 4 112 29 BSPFaceAttrib::~BSPFaceAttrib 0 0 0
36
BSPFaceAttrib::~BSPFaceAttrib(void);

78 9 BSPLoader 0 4 115 20 BSPLoader::BSPLoader 0 1 25 0
27
BSPLoader::BSPLoader(void);

79 4 read 0 4 115 15 BSPLoader::read 0 1 26 0
43
bool BSPLoader::read(Filename const &file);

80 16 do_optimizations 0 4 115 27 BSPLoader::do_optimizations 0 1 27 0
39
void BSPLoader::do_optimizations(void);

81 9 set_gamma 0 4 115 20 BSPLoader::set_gamma 0 1 28 0
65
void BSPLoader::set_gamma(PN_stdfloat gamma, int overbright = 1);

82 7 set_gsg 0 4 115 18 BSPLoader::set_gsg 0 1 29 0
52
void BSPLoader::set_gsg(GraphicsStateGuardian *gsg);

83 10 set_camera 0 4 115 21 BSPLoader::set_camera 0 1 30 0
51
void BSPLoader::set_camera(NodePath const &camera);

84 10 set_render 0 4 115 21 BSPLoader::set_render 0 1 31 0
51
void BSPLoader::set_render(NodePath const &render);

85 19 set_want_visibility 0 4 115 30 BSPLoader::set_want_visibility 0 1 32 0
47
void BSPLoader::set_want_visibility(bool flag);

86 18 set_want_lightmaps 0 4 115 29 BSPLoader::set_want_lightmaps 0 1 33 0
46
void BSPLoader::set_want_lightmaps(bool flag);

87 16 set_physics_type 0 4 115 27 BSPLoader::set_physics_type 0 1 34 0
43
void BSPLoader::set_physics_type(int type);

88 19 set_visualize_leafs 0 4 115 30 BSPLoader::set_visualize_leafs 0 1 35 0
47
void BSPLoader::set_visualize_leafs(bool flag);

89 18 set_materials_file 0 4 115 29 BSPLoader::set_materials_file 0 1 36 0
57
void BSPLoader::set_materials_file(Filename const &file);

90 20 link_entity_to_class 0 4 115 31 BSPLoader::link_entity_to_class 0 1 37 0
85
void BSPLoader::link_entity_to_class(std::string const &entname, PyTypeObject *type);

91 28 get_py_entity_by_target_name 0 4 115 39 BSPLoader::get_py_entity_by_target_name 0 1 38 0
87
PyObject *BSPLoader::get_py_entity_by_target_name(std::string const &targetname) const;

92 16 get_num_entities 0 4 115 27 BSPLoader::get_num_entities 0 1 39 0
44
int BSPLoader::get_num_entities(void) const;

93 16 get_entity_value 0 4 115 27 BSPLoader::get_entity_value 0 1 40 0
75
std::string BSPLoader::get_entity_value(int entnum, char const *key) const;

94 22 get_entity_value_float 0 4 115 33 BSPLoader::get_entity_value_float 0 1 41 0
75
float BSPLoader::get_entity_value_float(int entnum, char const *key) const;

95 20 get_entity_value_int 0 4 115 31 BSPLoader::get_entity_value_int 0 1 42 0
71
int BSPLoader::get_entity_value_int(int entnum, char const *key) const;

96 23 get_entity_value_vector 0 4 115 34 BSPLoader::get_entity_value_vector 0 1 43 0
79
LVector3 BSPLoader::get_entity_value_vector(int entnum, char const *key) const;

97 22 get_entity_value_color 0 4 115 33 BSPLoader::get_entity_value_color 0 1 44 0
95
LColor BSPLoader::get_entity_value_color(int entnum, char const *key, bool scale = true) const;

98 10 get_entity 0 4 115 21 BSPLoader::get_entity 0 1 45 0
49
NodePath BSPLoader::get_entity(int entnum) const;

99 9 get_model 0 4 115 20 BSPLoader::get_model 0 1 46 0
50
NodePath BSPLoader::get_model(int modelnum) const;

100 28 cull_node_path_against_leafs 0 4 115 39 BSPLoader::cull_node_path_against_leafs 0 1 47 0
88
void BSPLoader::cull_node_path_against_leafs(NodePath &np, bool part_of_result = false);

101 9 find_leaf 0 4 115 20 BSPLoader::find_leaf 0 2 48 49 0
91
int BSPLoader::find_leaf(NodePath const &np);
int BSPLoader::find_leaf(LPoint3 const &pos);

102 7 cleanup 0 4 115 18 BSPLoader::cleanup 0 1 50 0
30
void BSPLoader::cleanup(void);

103 10 get_result 0 4 115 21 BSPLoader::get_result 0 1 51 0
43
NodePath BSPLoader::get_result(void) const;

104 14 get_global_ptr 0 4 115 25 BSPLoader::get_global_ptr 0 1 52 0
50
static BSPLoader *BSPLoader::get_global_ptr(void);

105 10 ~BSPLoader 0 4 115 21 BSPLoader::~BSPLoader 0 0 0
28
BSPLoader::~BSPLoader(void);

52
1 0 0 7 3 117 57 0 0 0 
2 0 0 7 3 117 57 0 0 1 6 param0 0 118  
3 0 0 6 4 114 0 0 0 1 4 this 3 118  
4 0 0 6 5 120 0 0 0 1 4 this 3 118  
5 0 0 7 6 122 0 0 0 0 
6 0 0 7 9 123 62 0 0 0 
7 0 0 7 9 123 62 0 0 1 6 param0 0 124  
8 0 0 7 10 128 0 0 0 1 4 this 3 124  
9 0 0 7 11 131 0 0 0 1 4 this 3 124  
10 0 0 7 12 122 0 0 0 0 
11 0 0 7 15 132 68 0 0 0 
12 0 0 7 15 132 68 0 0 1 6 param0 0 133  
13 0 0 6 16 114 0 0 0 1 4 this 3 133  
14 0 0 7 17 136 0 0 0 1 4 this 3 133  
15 0 0 4 18 137 0 0 0 3 4 this 3 132  4 mins 1 128  4 maxs 1 128  
16 0 0 7 19 122 0 0 0 0 
17 0 0 7 23 140 71 0 0 1 6 param0 0 138  
18 0 0 7 23 140 71 0 0 1 4 name 1 141  
19 0 0 7 24 122 0 0 0 0 
20 0 0 7 28 143 0 0 0 1 13 face_material 1 141  
21 0 0 7 29 143 0 0 0 0 
22 0 0 6 30 141 0 0 0 1 4 this 3 144  
23 0 0 6 31 114 0 0 0 0 
24 0 0 7 34 122 0 0 0 0 
25 0 0 7 37 120 105 0 0 0 
26 0 0 6 38 149 0 0 0 2 4 this 3 120  4 file 1 146  
27 0 0 4 39 137 0 0 0 1 4 this 3 120  
28 0 0 4 40 137 0 0 0 3 4 this 3 120  5 gamma 1 150  10 overbright 1 114  
29 0 0 4 41 137 0 0 0 2 4 this 3 120  3 gsg 1 152  
30 0 0 4 42 137 0 0 0 2 4 this 3 120  6 camera 1 154  
31 0 0 4 43 137 0 0 0 2 4 this 3 120  6 render 1 154  
32 0 0 4 44 137 0 0 0 2 4 this 3 120  4 flag 1 149  
33 0 0 4 45 137 0 0 0 2 4 this 3 120  4 flag 1 149  
34 0 0 4 46 137 0 0 0 2 4 this 3 120  4 type 1 114  
35 0 0 4 47 137 0 0 0 2 4 this 3 120  4 flag 1 149  
36 0 0 4 48 137 0 0 0 2 4 this 3 120  4 file 1 146  
37 0 0 4 49 137 0 0 0 3 4 this 3 120  7 entname 1 141  4 type 1 156  
38 0 0 6 50 161 0 0 0 2 4 this 3 159  10 targetname 1 141  
39 0 0 6 51 114 0 0 0 1 4 this 3 159  
40 0 0 6 52 141 0 0 0 3 4 this 3 159  6 entnum 1 114  3 key 1 141  
41 0 0 6 53 151 0 0 0 3 4 this 3 159  6 entnum 1 114  3 key 1 141  
42 0 0 6 54 114 0 0 0 3 4 this 3 159  6 entnum 1 114  3 key 1 141  
43 0 0 7 55 131 0 0 0 3 4 this 3 159  6 entnum 1 114  3 key 1 141  
44 0 0 7 56 167 0 0 0 4 4 this 3 159  6 entnum 1 114  3 key 1 141  5 scale 1 149  
45 0 0 7 57 136 0 0 0 2 4 this 3 159  6 entnum 1 114  
46 0 0 7 58 136 0 0 0 2 4 this 3 159  8 modelnum 1 114  
47 0 0 4 59 137 0 0 0 3 4 this 3 120  2 np 1 136  14 part_of_result 1 149  
48 0 0 6 60 114 0 0 0 2 4 this 3 120  3 pos 1 168  
49 0 0 6 60 114 0 0 0 2 4 this 3 120  2 np 1 154  
50 0 0 4 61 137 0 0 0 1 4 this 3 120  
51 0 0 7 62 136 0 0 0 1 4 this 3 159  
52 0 0 6 63 120 0 0 0 0 
64
106 11 CBaseEntity 0 141313 11 CBaseEntity 11 CBaseEntity 0 0 0 1 53 57 0 3 54 55 56 0 0 1 0 107 0 0 0 0 0

107 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

108 12 CPointEntity 0 141313 12 CPointEntity 12 CPointEntity 0 0 0 1 58 62 0 3 59 60 61 0 0 1 0 106 0 0 0 0 0

109 12 CBrushEntity 0 141313 12 CBrushEntity 12 CBrushEntity 0 0 0 1 63 68 0 4 64 65 66 67 0 0 1 0 106 0 0 0 0 0

110 11 BSPGeomNode 0 141313 11 BSPGeomNode 11 BSPGeomNode 0 0 0 1 69 71 0 1 70 0 0 1 0 111 0 0 0 0 119
/**
 * All this class does is override GeomNode's add_for_draw to cull the Geoms
 * against the visible leaf AABBs.
 */

111 8 GeomNode 0 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 0 0 0 0 0 208
/**
 * A node that holds Geom objects, renderable pieces of geometry.  This is the
 * primary kind of leaf node in the scene graph; almost all visible objects
 * will be contained in a GeomNode somewhere.
 */

112 13 BSPFaceAttrib 0 141313 13 BSPFaceAttrib 13 BSPFaceAttrib 0 0 0 0 77 1 170 5 72 73 74 75 76 0 0 1 0 113 0 0 0 0 129
/**
 * An attribute applied to each face Geom from a BSP file.
 * All it does right now is indicate the material of the face.
 */

113 12 RenderAttrib 0 2048 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 1074
/**
 * This is the base class for a number of render attributes (other than
 * transform) that may be set on scene graph nodes to control the appearance
 * of geometry.  This includes TextureAttrib, ColorAttrib, etc.
 *
 * RenderAttrib represents render attributes that always propagate down to the
 * leaves without regard to the particular node they are assigned to.  A
 * RenderAttrib will have the same effect on a leaf node whether it is
 * assigned to the graph at the leaf or several nodes above.  This is
 * different from RenderEffect, which represents a particular render property
 * that is applied immediately to the node on which it is encountered, like
 * billboarding or decaling.
 *
 * You should not attempt to create or modify a RenderAttrib directly;
 * instead, use the make() method of the appropriate kind of attrib you want.
 * This will allocate and return a new RenderAttrib of the appropriate type,
 * and it may share pointers if possible.  Do not modify the new RenderAttrib
 * if you wish to change its properties; instead, create a new one.
 */

114 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

115 9 BSPLoader 0 141313 9 BSPLoader 9 BSPLoader 0 0 0 1 78 105 0 26 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 0 0 0 0 1 116 58
/**
 * Loads and handles the operations of PBSP files.
 */

116 11 PhysicsType 0 794624 22 BSPLoader::PhysicsType 22 BSPLoader::PhysicsType 115 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 BSPLoader::PT_none 0
0 8 PT_panda 19 BSPLoader::PT_panda 0
1 9 PT_bullet 20 BSPLoader::PT_bullet 0
2 6 PT_ode 17 BSPLoader::PT_ode 0
3 8 PT_physx 19 BSPLoader::PT_physx 0
4 0 0

117 13 CBaseEntity * 0 8576 13 CBaseEntity * 13 CBaseEntity * 0 0 106 0 0 0 0 0 0 0 0 0 0

118 19 CBaseEntity const * 0 8576 19 CBaseEntity const * 19 CBaseEntity const * 0 0 119 0 0 0 0 0 0 0 0 0 0

119 17 CBaseEntity const 0 8832 17 CBaseEntity const 17 CBaseEntity const 0 0 106 0 0 0 0 0 0 0 0 0 0

120 11 BSPLoader * 0 8576 11 BSPLoader * 11 BSPLoader * 0 0 115 0 0 0 0 0 0 0 0 0 0

121 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

122 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 121 0 0 0 0 0 0 0 0 0 0

123 14 CPointEntity * 0 8576 14 CPointEntity * 14 CPointEntity * 0 0 108 0 0 0 0 0 0 0 0 0 0

124 20 CPointEntity const * 0 8576 20 CPointEntity const * 20 CPointEntity const * 0 0 125 0 0 0 0 0 0 0 0 0 0

125 18 CPointEntity const 0 8832 18 CPointEntity const 18 CPointEntity const 0 0 108 0 0 0 0 0 0 0 0 0 0

126 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 127 0 0 0 0 0 0 0 0 0 0

127 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

128 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 126 0 0 0 0 0 0 0 0 0 0

129 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 130 0 0 0 0 0 0 0 0 0 0

130 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

131 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 129 0 0 0 0 0 0 0 0 0 0

132 14 CBrushEntity * 0 8576 14 CBrushEntity * 14 CBrushEntity * 0 0 109 0 0 0 0 0 0 0 0 0 0

133 20 CBrushEntity const * 0 8576 20 CBrushEntity const * 20 CBrushEntity const * 0 0 134 0 0 0 0 0 0 0 0 0 0

134 18 CBrushEntity const 0 8832 18 CBrushEntity const 18 CBrushEntity const 0 0 109 0 0 0 0 0 0 0 0 0 0

135 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

136 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 135 0 0 0 0 0 0 0 0 0 0

137 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

138 19 BSPGeomNode const * 0 8576 19 BSPGeomNode const * 19 BSPGeomNode const * 0 0 139 0 0 0 0 0 0 0 0 0 0

139 17 BSPGeomNode const 0 8832 17 BSPGeomNode const 17 BSPGeomNode const 0 0 110 0 0 0 0 0 0 0 0 0 0

140 13 BSPGeomNode * 0 8576 13 BSPGeomNode * 13 BSPGeomNode * 0 0 110 0 0 0 0 0 0 0 0 0 0

141 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

142 18 RenderAttrib const 0 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 113 0 0 0 0 0 0 0 0 0 0

143 20 RenderAttrib const * 0 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 142 0 0 0 0 0 0 0 0 0 0

144 21 BSPFaceAttrib const * 0 8576 21 BSPFaceAttrib const * 21 BSPFaceAttrib const * 0 0 145 0 0 0 0 0 0 0 0 0 0

145 19 BSPFaceAttrib const 0 8832 19 BSPFaceAttrib const 19 BSPFaceAttrib const 0 0 112 0 0 0 0 0 0 0 0 0 0

146 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 147 0 0 0 0 0 0 0 0 0 0

147 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 148 0 0 0 0 0 0 0 0 0 0

148 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

149 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

150 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 151 0 0 0 0 0 0 0 0 0 0

151 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

152 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 153 0 0 0 0 0 0 0 0 0 0

153 21 GraphicsStateGuardian 0 2048 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 0 0 0 0 0 0 308
/**
 * Encapsulates all the communication with a particular instance of a given
 * rendering backend.  Tries to guarantee that redundant state-change requests
 * are not issued (hence "state guardian").
 *
 * There will be one of these objects for each different graphics context
 * active in the system.
 */

154 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 155 0 0 0 0 0 0 0 0 0 0

155 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 135 0 0 0 0 0 0 0 0 0 0

156 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 157 0 0 0 0 0 0 0 0 0 0

157 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 158 0 0 0 0 0 0 0 0 0 0

158 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

159 17 BSPLoader const * 0 8576 17 BSPLoader const * 17 BSPLoader const * 0 0 160 0 0 0 0 0 0 0 0 0 0

160 15 BSPLoader const 0 8832 15 BSPLoader const 15 BSPLoader const 0 0 115 0 0 0 0 0 0 0 0 0 0

161 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 162 0 0 0 0 0 0 0 0 0 0

162 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 163 0 0 0 0 0 0 0 0 0 0

163 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

164 6 LColor 0 2105344 6 LColor 6 LColor 0 0 165 0 0 0 0 0 0 0 0 0 0

165 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 166 0 0 0 0 0 0 0 0 0 0

166 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

167 8 LColor * 0 8576 8 LColor * 8 LColor * 0 0 164 0 0 0 0 0 0 0 0 0 0

168 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 169 0 0 0 0 0 0 0 0 0 0

169 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 126 0 0 0 0 0 0 0 0 0 0

0
1
170 10 class_slot 0 2 0 75 0 0 0 0 0 0 0 25 BSPFaceAttrib::class_slot 0

0
